var mDrawSvgNS = "http://www.w3.org/2000/svg";
var mMobileSvgWidthSub = 30;
var mMobileSvgHeightSub = 190;
var mDrawSvgWidth = 2000;
var mDrawSvgHeight = 2000;
var mDrawSvgViewBox = 1;
var mDrawSvgFocusColor = "rgb(127,191,127)";
var mDrawCoordinateFontSize = "16";
var mDrawCoordinateCharPx = 6;
var mDrawSizeProperty = "MicroDrawSizeProperty";
var mWEB_ORDER_DrawSizeProperty = "WEB_ORDER_MicroDrawSizeProperty";
var mDrawObjProperty = "MicroDrawObjProperty";
var mWEB_ORDER_DrawObjProperty = "WEB_ORDER_MicroDrawObjProperty";
var mDrawSizePropertyCol = [[{
    field: "win",
    title: "门窗",
    width: 50,
    sortable: false
},
{
    field: "name",
    title: "名称",
    width: 50,
    sortable: false
},
{
    field: "value",
    title: "值",
    width: 150,
    resizable: false
}]];
var mMicroDraw_savewin = "MicroDraw_savewin";
var mMicroDraw_fromwin = "MicroDraw_fromwin";
var mWinSvgPListSize = 30;
var mWinSvgPListCurrPage = 1;
var mWinSvgMobilePListSize = 8;
var mDrawIDNameStyle = 2;
var mDrawOptProperty = "WEB_BUDGET_DATA_OPTDG";
var mDrawPrProperty = "WEB_BUDGET_DATA_PRDG";
var mDrawGlProperty = "WEB_BUDGET_DATA_GLDG";
var mDrawWjProperty = "WEB_BUDGET_DATA_WJDG";
var mDrawCpProperty = "WEB_BUDGET_DATA_CPDG";
var mDrawBjProperty = "WEB_BUDGET_DATA_BJDG";
var mDrawLabelProperty = "WEB_BUDGET_DATA_LABELDG";
var mDrawCostProperty = "WEB_BUDGET_DATA_COSTDG";
var mDrawRouteProperty = "WEB_BUDGET_DATA_ROUTEDG";
var mWEB_ORDER_DrawOptProperty = "WEB_ORDER_DATA_OPTDG";
var mWEB_ORDER_DrawBjProperty = "WEB_ORDER_DATA_BJDG";
var mWEB_ORDER_DrawCostProperty = "WEB_ORDER_DATA_COSTDG";
var MicroDraw_SVGTempData = "MicroDraw_SVGTempData";
var mDrawSystemTag = "mDraw_System";
var mDrawSvgCanvasDefineID = "MicroSvgCanvasDefine";
var WEB_BUDGET_ISSIMPLE = false;
var WEB_BUDGET_WIN_ISCOPY = false;
var WEB_DRAW_COLINFO_OPT_SUB = undefined;
var WEB_ORDER_DRAW_COLINFO_OPT_SUB = undefined;
var WEB_ORDER_DRAW_COLINFO_OPT_SHOWCOLS = [{
    field: "optName",
    title: "选项名称",
    width: "40%",
    sortable: false
},
{
    field: "optVal",
    title: "选项值",
    width: "58%",
    sortable: false
}];
var WEB_DRAW_COLINFO_OPT = undefined;
var WEB_ORDER_DRAW_COLINFO_OPT = undefined;
var WEB_DRAW_COLINFO_PR_SUB = undefined;
var WEB_DRAW_COLINFO_PR = undefined;
var WEB_DRAW_COLINFO_GL_SUB = undefined;
var WEB_DRAW_COLINFO_GL = undefined;
var WEB_DRAW_COLINFO_WJ_SUB = undefined;
var WEB_DRAW_COLINFO_WJ = undefined;
var WEB_DRAW_COLINFO_CP_SUB = undefined;
var WEB_DRAW_COLINFO_CP = undefined;
var WEB_DRAW_COLINFO_BJ_SUB = [{
    field: "ck",
    checkbox: true
},
{
    field: "id",
    title: "流水号",
    width: 50,
    align: "center",
    sortable: "true",
    type: "NUM",
    hidden: true
},
{
    field: "Numx",
    title: "项目号",
    width: 80,
    align: "center",
    sortable: "true",
    type: "CHAR",
    hidden: true
},
{
    field: "ObjId",
    title: "对象ID",
    width: 80,
    align: "center",
    sortable: "true",
    type: "CHAR",
    hidden: true
},
{
    field: "Name",
    title: "项目名称",
    width: 80,
    align: "center",
    sortable: "true",
    type: "CHAR",
    editor: {
        type: "textbox",
        options: {
            required: true,
            editable: true
        }
    }
},
{
    field: "TotalMoneyExp",
    title: "金额公式",
    width: 120,
    align: "center",
    sortable: false,
    type: "CHAR",
    editor: {
        type: "textbox",
        options: {
            editable: true
        }
    },
    formatter: function(C, B, A) {
        return '<span title="" class="easyui-tooltip">' + C + "</span>"
    }
},
{
    field: "TotalMoney",
    title: "金额",
    width: 100,
    align: "center",
    sortable: "true",
    type: "NUM",
    editor: {
        type: "textbox",
        options: {
            editable: false
        }
    }
},
{
    field: "BjDesc",
    title: "报价描述",
    width: 100,
    align: "center",
    sortable: "true",
    type: "CHAR",
    editor: {
        type: "textbox",
        options: {
            editable: true
        }
    },
    formatter: function(C, B, A) {
        return '<span title="" class="easyui-tooltip">' + C + "</span>"
    }
},
{
    field: "BjDescExp",
    title: "报价描述公式",
    width: 200,
    align: "center",
    sortable: "true",
    type: "CHAR",
    editor: {
        type: "textbox",
        options: {
            editable: true
        }
    },
    formatter: function(C, B, A) {
        return '<span title="" class="easyui-tooltip">' + C + "</span>"
    }
},
{
    field: "BjType",
    title: "报价类型",
    width: 80,
    align: "center",
    sortable: "true",
    type: "CHAR",
    hidden: false,
    editor: {
        type: "combobox",
        options: {
            required: false,
            editable: true,
            valueField: "scode",
            textField: "name",
            url: "../MicroSys/MicroDDDL.ashx?action=getXcxljgBjType",
        }
    },
    formatter: function(C, B, A) {
        if (!isEmptyOrNull(mPublicXcxljgBjTypeList)) {
            for (i = 0; i < mPublicXcxljgBjTypeList.length; i++) {
                if (C == mPublicXcxljgBjTypeList[i].scode) {
                    return mPublicXcxljgBjTypeList[i].name
                }
            }
        }
        return ""
    },
},
{
    field: "bjAreaExp",
    title: "报价面积公式",
    width: 200,
    align: "center",
    sortable: "true",
    type: "CHAR",
    editor: {
        type: "textbox",
        options: {
            editable: true
        }
    },
    formatter: function(C, B, A) {
        return '<span title="" class="easyui-tooltip">' + C + "</span>"
    }
},
{
    field: "bjArea",
    title: "报价面积",
    width: 100,
    align: "center",
    sortable: "true",
    type: "NUM",
    editor: {
        type: "textbox",
        options: {
            editable: true
        }
    }
},
{
    field: "bjPriceExp",
    title: "报价单价公式",
    width: 200,
    align: "center",
    sortable: "true",
    type: "CHAR",
    editor: {
        type: "textbox",
        options: {
            editable: true
        }
    },
    formatter: function(C, B, A) {
        return '<span title="" class="easyui-tooltip">' + C + "</span>"
    }
},
{
    field: "bjPrice",
    title: "报价单价",
    width: 100,
    align: "center",
    sortable: "true",
    type: "NUM",
    editor: {
        type: "textbox",
        options: {
            editable: true
        }
    }
},
{
    field: "Memo",
    title: "备注",
    width: 120,
    align: "center",
    sortable: "true",
    type: "CHAR",
    editor: {
        type: "textbox",
        options: {
            required: false,
            editable: true
        }
    }
},
{
    field: "CntExp2",
    title: "二次公式",
    width: 200,
    align: "center",
    sortable: "true",
    type: "CHAR",
    editor: {
        type: "textbox",
        options: {
            editable: true
        }
    },
    formatter: function(C, B, A) {
        return '<span title="" class="easyui-tooltip">' + C + "</span>"
    }
},
{
    field: "CalcFlag",
    title: "计算方式",
    width: 80,
    align: "center",
    sortable: "true",
    type: "NUM",
    formatter: function(C, B, A) {
        return C == 1 ? "循环": "一次"
    }
},
{
    field: "Discount",
    title: "折扣",
    width: 80,
    align: "center",
    sortable: "true",
    type: "NUM"
},
{
    field: "DiscountFlag",
    title: "是否打折",
    align: "center",
    editor: {
        type: "combobox",
        options: {
            required: false,
            editable: false,
            data: [{
                id: "1",
                text: "是"
            },
            {
                id: "0",
                text: "否"
            }],
            valueField: "id",
            textField: "text"
        },
    },
    formatter: function(C, B, A) {
        if ($.Micro.IsEmpty(C)) {
            result = ""
        } else {
            result = String(C) == "1" ? "√": ""
        }
        return result
    }
}];
var WEB_DRAW_COLINFO_BJ = [WEB_DRAW_COLINFO_BJ_SUB];
var WEB_DRAW_COLINFO_LABEL_SUB = undefined;
var WEB_DRAW_COLINFO_LABEL = undefined;
var WEB_DRAW_COLINFO_COST_SUB = undefined;
var WEB_DRAW_COLINFO_COST = undefined;
var WEB_DRAW_COLINFO_ROUTE_SUB = undefined;
var WEB_DRAW_COLINFO_ROUTE = undefined;
var mDrawProductColor = "rgb(178,209,238)";
var mDrawGlassColor = "rgb(239,245,234)";
var mDrawWallColor = "rgb(251,131,36)";
var mDrawLouverBgColor = "#ffffff";
var mDrawFontSize = [{
    id: "6",
    text: "6"
},
{
    id: "7",
    text: "7"
},
{
    id: "8",
    text: "8"
},
{
    id: "9",
    text: "9"
},
{
    id: "10",
    text: "10"
},
{
    id: "11",
    text: "11"
},
{
    id: "12",
    text: "12"
},
{
    id: "13",
    text: "13"
},
{
    id: "14",
    text: "14"
},
{
    id: "15",
    text: "15"
},
{
    id: "16",
    text: "16"
},
{
    id: "17",
    text: "17"
},
{
    id: "18",
    text: "18"
},
{
    id: "19",
    text: "19"
},
{
    id: "20",
    text: "20"
},
{
    id: "21",
    text: "21"
},
{
    id: "22",
    text: "22"
},
{
    id: "23",
    text: "23"
},
{
    id: "24",
    text: "24"
},
{
    id: "25",
    text: "25"
},
{
    id: "26",
    text: "26"
},
{
    id: "27",
    text: "27"
},
{
    id: "28",
    text: "28"
},
{
    id: "29",
    text: "29"
},
{
    id: "30",
    text: "30"
},
{
    id: "31",
    text: "31"
},
{
    id: "32",
    text: "32"
},
{
    id: "33",
    text: "33"
},
{
    id: "34",
    text: "34"
},
{
    id: "35",
    text: "35"
},
{
    id: "36",
    text: "36"
},
{
    id: "37",
    text: "37"
},
{
    id: "38",
    text: "38"
},
{
    id: "39",
    text: "39"
},
{
    id: "40",
    text: "40"
},
{
    id: "41",
    text: "41"
},
{
    id: "42",
    text: "42"
},
{
    id: "43",
    text: "43"
},
{
    id: "44",
    text: "44"
},
{
    id: "45",
    text: "45"
},
{
    id: "46",
    text: "46"
},
{
    id: "47",
    text: "47"
},
{
    id: "48",
    text: "48"
},
{
    id: "49",
    text: "49"
},
{
    id: "50",
    text: "50"
}];
var mDrawFontColor = [{
    id: "#000000",
    text: "黑色"
},
{
    id: "#FF0000",
    text: "红色"
},
{
    id: "#00FF00",
    text: "绿色"
},
{
    id: "#0000FF",
    text: "蓝色"
}];
var mDrawFillColor = [{
    id: "#000000",
    text: "黑色"
},
{
    id: "#FFFFFF",
    text: "白色"
},
{
    id: "#FF0000",
    text: "红色"
},
{
    id: "#00FF00",
    text: "绿色"
},
{
    id: "#0000FF",
    text: "蓝色"
},
{
    id: mDrawProductColor,
    text: "型材颜色"
},
{
    id: mDrawGlassColor,
    text: "玻璃颜色"
},
{
    id: mDrawWallColor,
    text: "墙体颜色"
},
{
    id: "none",
    text: "没填充"
}];
var mDrawDirs = [{
    text: "在上",
    tag: "t",
    ico: "↑"
},
{
    text: "在下",
    tag: "b",
    ico: "↓"
},
{
    text: "在左",
    tag: "l",
    ico: "←"
},
{
    text: "在右",
    tag: "r",
    ico: "→"
}];
var mDrawCombWin_minXwin = null;
var mDrawCombWin_maxXwin = null;
var mDrawCombWin_minYwin = null;
var mDrawCombWin_maxYwin = null;
var mDrawSelectFinishSvgId = "";
var MicroDraw_clearData_Except = [];
var mDrawObjPropertyCol = [[{
    field: "name",
    title: "名称",
    width: 100,
    sortable: false
},
{
    field: "value",
    title: "值",
    width: 150,
    resizable: false,
    formatter: function(D, F, C) {
        switch (F.mType) {
        case mDrawFlag_FrameRect:
        case mDrawFlag_FrameArcs:
            switch (F.mPropertyName) {
            case "prcolor":
                var I = false;
                for (var E = 0; E < mDrawPrColors.length; E++) {
                    if (D == mDrawPrColors[E].text) {
                        I = true;
                        return mDrawPrColors[E].text
                    }
                }
                if (!I) {
                    return mDrawPrColors[0].text
                }
                break;
            case "mpjstyle":
                if (D == "45") {
                    return "45"
                } else {
                    if (D == "H") {
                        return "横向通长"
                    } else {
                        if (D == "V") {
                            return "竖向通长"
                        } else {
                            if (D == "45V") {
                                return "上45下90"
                            }
                        }
                    }
                }
                break;
            case "mxcxlid":
                if (!isEmptyOrNull(mPublicXcxlList)) {
                    for (E = 0; E < mPublicXcxlList.length; E++) {
                        if (D == mPublicXcxlList[E].id.toString()) {
                            return mPublicXcxlList[E].name
                        }
                    }
                }
                return D;
                break;
            case "mwall":
                if (D == "Y") {
                    return "带墙体"
                } else {
                    if (D == "N") {
                        return "不带墙体"
                    } else {
                        return ""
                    }
                }
                break;
            case "mgdpic":
                if (D == "Y") {
                    return "带俯视图"
                } else {
                    if (D == "N") {
                        return "不带俯视图"
                    } else {
                        return ""
                    }
                }
                break;
            case "coorxshow":
                if (D == "Y") {
                    return "显示"
                } else {
                    if (D == "N") {
                        return "隐藏"
                    } else {
                        return ""
                    }
                }
                break;
            case "cooryshow":
                if (D == "Y") {
                    return "显示"
                } else {
                    if (D == "N") {
                        return "隐藏"
                    } else {
                        return ""
                    }
                }
                break;
            case "arclenshow":
                if (D == "Y") {
                    return "显示"
                } else {
                    return "隐藏"
                }
                break;
            case "coorinshow":
                if (D == "Y") {
                    return "显示"
                } else {
                    if (D == "N") {
                        return "隐藏"
                    } else {
                        return ""
                    }
                }
                break;
            case "mhideframe":
            case "mhidelframe":
            case "mhiderframe":
                if (D == "Y") {
                    return "是"
                } else {
                    if (D == "N") {
                        return "否"
                    } else {
                        return ""
                    }
                }
                break;
            case "mgdpicwj":
                if (D == "Y") {
                    return "显示"
                } else {
                    if (D == "N") {
                        return "隐藏"
                    } else {
                        return ""
                    }
                }
                break;
            case "mshowglassfan":
                if (D == "Y") {
                    return "显示"
                } else {
                    return "隐藏"
                }
                break;
            case "mgdpiccoor":
                if (D == "Y") {
                    return "显示"
                } else {
                    return "隐藏"
                }
                break;
            default:
                return D
            }
        case mDrawFlag_Area:
        case mDrawFlag_Glass:
        case mDrawFlag_ArcsGlass:
            switch (F.mPropertyName) {
            case "mchange":
                if (D == "Y") {
                    return "是"
                } else {
                    return "否"
                }
            case "myt":
                if (D == "Y") {
                    return "是"
                } else {
                    return "否"
                }
            case "mytpjstyle":
                if (D == "45") {
                    return "45"
                } else {
                    if (D == "V") {
                        return "竖向通长"
                    } else {
                        if (D == "H") {
                            return "横向通长"
                        }
                    }
                }
            case "mfhl":
                if (D == "Y") {
                    return "是"
                } else {
                    return "否"
                }
            default:
                return D
            }
        case mDrawFlag_TingV:
        case mDrawFlag_FrameArcsTingV:
            switch (F.mPropertyName) {
            case "mtotallen":
                if (D == "Y") {
                    return "是"
                } else {
                    return "否"
                }
            case "mbreakframe":
                if (D == "Y") {
                    return "是"
                } else {
                    return "否"
                }
            case "mkind":
                if (D == "N") {
                    return "普通中挺"
                } else {
                    if (D == "Y") {
                        return "加强中挺"
                    } else {
                        if (D == "Z") {
                            return "Z中挺"
                        } else {
                            if (D == "L") {
                                return "转角料"
                            } else {
                                if (D == "BB") {
                                    return "双边封"
                                } else {
                                    if (D == "LB") {
                                        return "转角双边封"
                                    } else {
                                        if (D == "BG") {
                                            return "边封固定"
                                        } else {
                                            if (D == "LG") {
                                                return "转角边封固定"
                                            } else {
                                                if (D == "GG") {
                                                    return "转角双固定"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            default:
                return D
            }
        case mDrawFlag_TingH:
        case mDrawFlag_FrameArcsTingH:
            switch (F.mPropertyName) {
            case "mtotallen":
                if (D == "Y") {
                    return "是"
                } else {
                    return "否"
                }
            case "mbreakframe":
                if (D == "Y") {
                    return "是"
                } else {
                    return "否"
                }
            case "mkind":
                if (D == "N") {
                    return "普通中挺"
                } else {
                    if (D == "Y") {
                        return "加强中挺"
                    } else {
                        if (D == "Z") {
                            return "Z中挺"
                        } else {
                            if (D == "L") {
                                return "转角料"
                            } else {
                                if (D == "SG") {
                                    return "上滑上固"
                                } else {
                                    if (D == "XG") {
                                        return "下滑下固"
                                    } else {
                                        if (D == "SX") {
                                            return "上下滑"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            default:
                return D
            }
        case mDrawFlag_Pkc:
        case mDrawFlag_ArcsPkc:
            switch (F.mPropertyName) {
            case "mfanpjstyle":
                if (D == "45") {
                    return "45"
                } else {
                    if (D == "V") {
                        return "竖向通长"
                    }
                }
            case "myt":
                if (D == "Y") {
                    return "是"
                } else {
                    return "否"
                }
            case "mytpjstyle":
                if (D == "45") {
                    return "45"
                } else {
                    if (D == "H") {
                        return "横向通长"
                    } else {
                        if (D == "V") {
                            return "竖向通长"
                        }
                    }
                }
            case "mopendir":
                if (D == "L") {
                    return "左"
                } else {
                    if (D == "R") {
                        return "右"
                    } else {
                        if (D == "T") {
                            return "上"
                        } else {
                            if (D == "B") {
                                return "下"
                            } else {
                                if (D == "LT") {
                                    return "左上"
                                } else {
                                    if (D == "LB") {
                                        return "左下"
                                    } else {
                                        if (D == "RT") {
                                            return "右上"
                                        } else {
                                            if (D == "RB") {
                                                return "右下"
                                            } else {
                                                if (D == "PT") {
                                                    return "平推"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            case "msw":
                if (D == "Y") {
                    return "是"
                } else {
                    return "否"
                }
            case "mswopendir":
                var A = $("#" + mDrawObjProperty).datagrid("getRows");
                var G, J;
                for (var E = 0; E < A.length; E++) {
                    if (A[E].mPropertyName == "mopendir") {
                        G = A[E].value
                    } else {
                        if (A[E].mPropertyName == "mswopendir") {
                            J = A[E].value;
                            break
                        }
                    }
                }
                if ($.Micro.IsEmpty(J)) {
                    J = G
                }
                if (J.indexOf("L") > -1) {
                    J = "L"
                } else {
                    J = "R"
                }
                D = J;
                if (D == "L") {
                    return "左"
                } else {
                    return "右"
                }
            case "mfdt":
                if (D == "Y") {
                    return "是"
                } else {
                    return "否"
                }
            case "mfdtstyle":
                if (D == "2") {
                    return "款式2"
                } else {
                    return "款式1"
                }
            case "mglassfhl":
                if (D == "Y") {
                    return "是"
                } else {
                    return "否"
                }
            case "mchange":
                if (D == "Y") {
                    return "是"
                } else {
                    return "否"
                }
            case "mjs":
                if (D == "N") {
                    return "否"
                } else {
                    return "是"
                }
            case "mjscoor":
                if (D == "Y") {
                    return "是"
                } else {
                    if (D == "N") {
                        return "否"
                    } else {
                        return ""
                    }
                }
            case "mgdshowstyle":
                if (D == "0" || $.Micro.IsEmpty(D)) {
                    return "系统默认"
                } else {
                    return "自定义"
                }
            case "mzsstyle":
                var B = mDrawFlag_PK_zsStyle[0].text;
                $.each(mDrawFlag_PK_zsStyle,
                function(L, K) {
                    if (String(D) == (K.id)) {
                        B = K.text;
                        return false
                    }
                });
                return B;
            default:
                return D
            }
        case mDrawFlag_Custom_text:
            switch (F.mPropertyName) {
            case "mfill":
                if (D == "#000000") {
                    return "黑色"
                } else {
                    if (D == "#FF0000") {
                        return "红色"
                    } else {
                        if (D == "#00FF00") {
                            return "绿色"
                        } else {
                            if (D == "#0000FF") {
                                return "蓝色"
                            }
                        }
                    }
                }
            case "mdir":
                if (D == "lr") {
                    return "横向文字"
                } else {
                    if (D == "tb") {
                        return "竖向文字"
                    }
                }
            case "mfontweight":
                if (D == "400") {
                    return "普通"
                } else {
                    if (D == "700") {
                        return "加粗"
                    }
                }
            default:
                return D
            }
        case mDrawFlag_Custom_line:
            switch (F.mPropertyName) {
            case "mstroke":
                if (D == "#000000") {
                    return "黑色"
                } else {
                    if (D == "#FF0000") {
                        return "红色"
                    } else {
                        if (D == "#00FF00") {
                            return "绿色"
                        } else {
                            if (D == "#0000FF") {
                                return "蓝色"
                            }
                        }
                    }
                }
                break;
            default:
                return D
            }
        case mDrawFlag_Custom_rect:
            switch (F.mPropertyName) {
            case "mstroke":
                if (D == "#000000") {
                    return "黑色"
                } else {
                    if (D == "#FF0000") {
                        return "红色"
                    } else {
                        if (D == "#00FF00") {
                            return "绿色"
                        } else {
                            if (D == "#0000FF") {
                                return "蓝色"
                            }
                        }
                    }
                }
                break;
            case "mfill":
                if (D == "#000000") {
                    return "黑色"
                } else {
                    if (D == "#FF0000") {
                        return "红色"
                    } else {
                        if (D == "#00FF00") {
                            return "绿色"
                        } else {
                            if (D == "#0000FF") {
                                return "蓝色"
                            } else {
                                if (D == "none") {
                                    return "无填充"
                                } else {
                                    if (D == "#FFFFFF") {
                                        return "白色"
                                    } else {
                                        if (D == mDrawProductColor) {
                                            return "型材颜色"
                                        } else {
                                            if (D == mDrawGlassColor) {
                                                return "玻璃颜色"
                                            } else {
                                                if (D == mDrawWallColor) {
                                                    return "墙体颜色"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                break;
            default:
                return D
            }
        case mDrawFlag_Custom_polygon:
            switch (F.mPropertyName) {
            case "mstroke":
                if (D == "#000000") {
                    return "黑色"
                } else {
                    if (D == "#FF0000") {
                        return "红色"
                    } else {
                        if (D == "#00FF00") {
                            return "绿色"
                        } else {
                            if (D == "#0000FF") {
                                return "蓝色"
                            }
                        }
                    }
                }
                break;
            case "mfill":
                if (D == "#000000") {
                    return "黑色"
                } else {
                    if (D == "#FF0000") {
                        return "红色"
                    } else {
                        if (D == "#00FF00") {
                            return "绿色"
                        } else {
                            if (D == "#0000FF") {
                                return "蓝色"
                            } else {
                                if (D == "none") {
                                    return "无填充"
                                } else {
                                    if (D == "#FFFFFF") {
                                        return "白色"
                                    } else {
                                        if (D == mDrawProductColor) {
                                            return "型材颜色"
                                        } else {
                                            if (D == mDrawGlassColor) {
                                                return "玻璃颜色"
                                            } else {
                                                if (D == mDrawWallColor) {
                                                    return "墙体颜色"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                break;
            case "customRuler":
            case "customruler":
                if (D == "1") {
                    return "是"
                } else {
                    return "否"
                }
            case "mlr":
                if (D == "L") {
                    return "左顷"
                } else {
                    if (D == "R") {
                        return "右顷"
                    } else {
                        if (D == "N") {
                            return "无顷斜"
                        }
                    }
                }
                break;
            default:
                return D
            }
        case mDrawFlag_Custom_arc:
            switch (F.mPropertyName) {
            case "mxcxlid":
                if (!isEmptyOrNull(mPublicXcxlList)) {
                    for (E = 0; E < mPublicXcxlList.length; E++) {
                        if (D == mPublicXcxlList[E].id.toString()) {
                            return mPublicXcxlList[E].name
                        }
                    }
                }
                return D;
                break;
            case "mstroke":
                if (D == "#000000") {
                    return "黑色"
                } else {
                    if (D == "#FF0000") {
                        return "红色"
                    } else {
                        if (D == "#00FF00") {
                            return "绿色"
                        } else {
                            if (D == "#0000FF") {
                                return "蓝色"
                            }
                        }
                    }
                }
                break;
            case "mfill":
                if (D == "#000000") {
                    return "黑色"
                } else {
                    if (D == "#FF0000") {
                        return "红色"
                    } else {
                        if (D == "#00FF00") {
                            return "绿色"
                        } else {
                            if (D == "#0000FF") {
                                return "蓝色"
                            } else {
                                if (D == "none") {
                                    return "无填充"
                                } else {
                                    if (D == "#FFFFFF") {
                                        return "白色"
                                    } else {
                                        if (D == mDrawProductColor) {
                                            return "型材颜色"
                                        } else {
                                            if (D == mDrawGlassColor) {
                                                return "玻璃颜色"
                                            } else {
                                                if (D == mDrawWallColor) {
                                                    return "墙体颜色"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                break;
            case "customRuler":
            case "customruler":
                if (D == "1") {
                    return "是"
                } else {
                    return "否"
                }
                break;
            case "mbframe":
                if (D == "Y") {
                    return "是"
                } else {
                    return "否"
                }
                break;
            case "mtotallen":
                if (D == "Y") {
                    return "是"
                } else {
                    return "否"
                }
                break;
            case "showarclen":
                if (D == "Y") {
                    return "是"
                } else {
                    return "否"
                }
                break;
            case "maddthickwidth":
                if (D == "Y") {
                    return "是"
                } else {
                    if (D == "N") {
                        return "否"
                    }
                }
                break;
            default:
                return D
            }
        case mDrawFlag_Custom_circle:
            switch (F.mPropertyName) {
            case "mstroke":
                if (D == "#000000") {
                    return "黑色"
                } else {
                    if (D == "#FF0000") {
                        return "红色"
                    } else {
                        if (D == "#00FF00") {
                            return "绿色"
                        } else {
                            if (D == "#0000FF") {
                                return "蓝色"
                            }
                        }
                    }
                }
                break;
            case "mfill":
                if (D == "#000000") {
                    return "黑色"
                } else {
                    if (D == "#FF0000") {
                        return "红色"
                    } else {
                        if (D == "#00FF00") {
                            return "绿色"
                        } else {
                            if (D == "#0000FF") {
                                return "蓝色"
                            } else {
                                if (D == "none") {
                                    return "无填充"
                                } else {
                                    if (D == "#FFFFFF") {
                                        return "白色"
                                    } else {
                                        if (D == mDrawProductColor) {
                                            return "型材颜色"
                                        } else {
                                            if (D == mDrawGlassColor) {
                                                return "玻璃颜色"
                                            } else {
                                                if (D == mDrawWallColor) {
                                                    return "墙体颜色"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                break;
            default:
                return D
            }
        case mDrawFlag_Custom_ruler:
            switch (F.mPropertyName) {
            case "mstroke":
                if (D == "#000000") {
                    return "黑色"
                } else {
                    if (D == "#FF0000") {
                        return "红色"
                    } else {
                        if (D == "#00FF00") {
                            return "绿色"
                        } else {
                            if (D == "#0000FF") {
                                return "蓝色"
                            }
                        }
                    }
                }
                break;
            default:
                return D
            }
        case mDrawFlag_Custom_wall:
            switch (F.mPropertyName) {
            case "mstroke":
                if (D == "#000000") {
                    return "黑色"
                } else {
                    if (D == "#FF0000") {
                        return "红色"
                    } else {
                        if (D == "#00FF00") {
                            return "绿色"
                        } else {
                            if (D == "#0000FF") {
                                return "蓝色"
                            }
                        }
                    }
                }
                break;
            case "mfill":
                if (D == "#000000") {
                    return "黑色"
                } else {
                    if (D == "#FF0000") {
                        return "红色"
                    } else {
                        if (D == "#00FF00") {
                            return "绿色"
                        } else {
                            if (D == "#0000FF") {
                                return "蓝色"
                            } else {
                                if (D == "none") {
                                    return "无填充"
                                } else {
                                    if (D == "#FFFFFF") {
                                        return "白色"
                                    } else {
                                        if (D == mDrawProductColor) {
                                            return "型材颜色"
                                        } else {
                                            if (D == mDrawGlassColor) {
                                                return "玻璃颜色"
                                            } else {
                                                if (D == mDrawWallColor) {
                                                    return "墙体颜色"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                break;
            default:
                return D
            }
        case mDrawFlag_Dkc:
        case mDrawFlag_ArcsDkc:
            switch (F.mPropertyName) {
            case "mfanpjstyle":
                if (D == "45") {
                    return "45"
                } else {
                    if (D == "V") {
                        return "竖向通长"
                    }
                }
            case "mfanhasyt":
                if (D == "Y") {
                    return "是"
                } else {
                    return "否"
                }
            case "mfanytpjstyle":
                if (D == "45") {
                    return "45"
                } else {
                    if (D == "H") {
                        return "横向通长"
                    } else {
                        if (D == "V") {
                            return "竖向通长"
                        }
                    }
                }
            case "mfanswflag":
                if (D == "1,1") {
                    return "是"
                } else {
                    return "否"
                }
            case "mfdt":
                if (D == "Y") {
                    return "是"
                } else {
                    return "否"
                }
            case "mfdtstyle":
                if (D == "2") {
                    return "款式2"
                } else {
                    return "款式1"
                }
            case "mglassfhl":
                if (D == "Y") {
                    return "是"
                } else {
                    return "否"
                }
            case "mchange":
                if (D == "Y") {
                    return "是"
                } else {
                    return "否"
                }
            case "mjs":
                if (D == "N") {
                    return "否"
                } else {
                    return "是"
                }
            case "mjscoor":
                if (D == "Y") {
                    return "是"
                } else {
                    if (D == "N") {
                        return "否"
                    } else {
                        return ""
                    }
                }
            case "mgdshowstyle":
                if (D == "0" || $.Micro.IsEmpty(D)) {
                    return "系统默认"
                } else {
                    return "自定义"
                }
            case "mleftcoor":
                if (D == "Y") {
                    return "是"
                } else {
                    return "否"
                }
            case "mzsstyle":
                var B = mDrawFlag_PK_zsStyle[0].text;
                $.each(mDrawFlag_PK_zsStyle,
                function(L, K) {
                    if (String(D) == (K.id)) {
                        B = K.text;
                        return false
                    }
                });
                return B;
            default:
                return D
            }
        case mDrawFlag_Custom_CornerMaterial:
        case mDrawFlag_Custom_CornerMaterial_h:
            switch (F.mPropertyName) {
            case "mstroke":
                if (D == "#000000") {
                    return "黑色"
                } else {
                    if (D == "#FF0000") {
                        return "红色"
                    } else {
                        if (D == "#00FF00") {
                            return "绿色"
                        } else {
                            if (D == "#0000FF") {
                                return "蓝色"
                            }
                        }
                    }
                }
                break;
            case "mfill":
                if (D == "#000000") {
                    return "黑色"
                } else {
                    if (D == "#FF0000") {
                        return "红色"
                    } else {
                        if (D == "#00FF00") {
                            return "绿色"
                        } else {
                            if (D == "#0000FF") {
                                return "蓝色"
                            } else {
                                if (D == "none") {
                                    return "无填充"
                                } else {
                                    if (D == "#FFFFFF") {
                                        return "白色"
                                    } else {
                                        if (D == mDrawProductColor) {
                                            return "型材颜色"
                                        } else {
                                            if (D == mDrawGlassColor) {
                                                return "玻璃颜色"
                                            } else {
                                                if (D == mDrawWallColor) {
                                                    return "墙体颜色"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                break;
            case "madir":
                for (var E = 0; E < mDrawDirs.length; E++) {
                    if (D == mDrawDirs[E].tag) {
                        return mDrawDirs[E].text
                    }
                }
                break;
            case "mangleshow":
                if (D == "Y") {
                    return "是"
                } else {
                    return "否"
                }
                break;
            case "mwidthshow":
                if (D == "Y") {
                    return "是"
                } else {
                    return "否"
                }
                break;
            default:
                return D
            }
        case mDrawFlag_Custom_qj_lt:
        case mDrawFlag_Custom_qj_rt:
        case mDrawFlag_Custom_qj_rb:
        case mDrawFlag_Custom_qj_lb:
        case mDrawFlag_Custom_qj_tm:
        case mDrawFlag_Custom_qj_rm:
        case mDrawFlag_Custom_qj_bm:
        case mDrawFlag_Custom_qj_lm:
        case mDrawFlag_Custom_qj_rx:
        case mDrawFlag_Custom_qj_lx:
        case mDrawFlag_Custom_qj_lrx:
            switch (F.mPropertyName) {
            case "myt":
                if (D == "Y") {
                    return "是"
                } else {
                    return "否"
                }
            case "mytpjstyle":
                if (D == "45") {
                    return "45"
                } else {
                    if (D == "V") {
                        return "竖向通长"
                    } else {
                        if (D == "H") {
                            return "横向通长"
                        }
                    }
                }
            default:
                return D
            }
        case mDrawFlag_FrameArc:
            switch (F.mPropertyName) {
            case "cooryshow":
                if (D == "Y") {
                    return "是"
                } else {
                    return "否"
                }
                break;
            case "myt":
                if (D == "Y") {
                    return "是"
                } else {
                    return "否"
                }
                break;
            case "mdivstyle":
                if (D == "angleDIV") {
                    return "中挺倾角划分"
                } else {
                    return "弧长等分"
                }
                break;
            case "mytpjstyle":
                if (D == "V") {
                    return "竖通长"
                } else {
                    if (D == "H") {
                        return "横通长"
                    } else {
                        if (D == "A") {
                            return "斜角拼接"
                        }
                    }
                }
                break
            }
        case mDrawFlag_Louver:
            switch (F.mPropertyName) {
            case "mfanpjstyle":
                if (D == "45") {
                    return "45"
                } else {
                    if (D == "V") {
                        return "竖向通长"
                    }
                }
            default:
                return D
            }
            break;
        default:
            if (F.mType.substring(0, 3) == mDrawFlag_Tlc) {
                switch (F.mPropertyName) {
                case "mfanswflag":
                    var H = F.mType.split("_");
                    if (H[1] == "2") {
                        if (D == "1,0") {
                            return "左纱扇"
                        } else {
                            if (D == "0,1") {
                                return "右纱扇"
                            } else {
                                if (D == "0,0") {
                                    return "无"
                                }
                            }
                        }
                    } else {
                        if (H[1] == "4") {
                            if (D == "0,0,0,0") {
                                return "无"
                            } else {
                                if (D == "0,1,1,0") {
                                    return "有"
                                }
                            }
                        } else {
                            if (H[1] == "3") {
                                if (D == "0,0,0") {
                                    return "无"
                                } else {
                                    if (D == "1,0,0") {
                                        return "有"
                                    }
                                }
                            }
                        }
                    }
                case "mfanpjstyle":
                    if (D == "45") {
                        return "45"
                    } else {
                        if (D == "V") {
                            return "竖向通长"
                        }
                    }
                case "mfanhasyt":
                    if (D == "Y") {
                        return "是"
                    } else {
                        return "否"
                    }
                case "mfanytpjstyle":
                    if (D == "45") {
                        return "45"
                    } else {
                        if (D == "H") {
                            return "横向通长"
                        } else {
                            if (D == "V") {
                                return "竖向通长"
                            }
                        }
                    }
                case "mgdshowstyle":
                    if (D == "0" || $.Micro.IsEmpty(D)) {
                        return "系统默认"
                    } else {
                        return "自定义"
                    }
                case "mfanlayer":
                    switch (F.mType.substr(0, F.mType.lastIndexOf("_"))) {
                    case "tlc_2_ff":
                        for (E = 0; E < mPublicGdList_mDraw_tlc_2_ff_01.length; E++) {
                            if (D == mPublicGdList_mDraw_tlc_2_ff_01[E].id.toString()) {
                                return mPublicGdList_mDraw_tlc_2_ff_01[E].name
                            }
                        }
                        return D;
                        break;
                    case "tlc_2_gf":
                        for (E = 0; E < mPublicGdList_mDraw_tlc_2_gf_01.length; E++) {
                            if (D == mPublicGdList_mDraw_tlc_2_gf_01[E].id.toString()) {
                                return mPublicGdList_mDraw_tlc_2_gf_01[E].name
                            }
                        }
                        return D;
                        break;
                    case "tlc_3_fff":
                        if (F.mType == "tlc_3_fff_010" || F.mType == "tlc_3_fff_101") {
                            for (E = 0; E < mPublicGdList_mDraw_tlc_3_fff_010.length; E++) {
                                if (D == mPublicGdList_mDraw_tlc_3_fff_010[E].id.toString()) {
                                    return mPublicGdList_mDraw_tlc_3_fff_010[E].name
                                }
                            }
                        }
                        if (F.mType == "tlc_3_fff_011" || F.mType == "tlc_3_fff_100" || F.mType == "tlc_3_fff_110" || F.mType == "tlc_3_fff_001") {
                            for (E = 0; E < mPublicGdList_mDraw_tlc_3_fff_011.length; E++) {
                                if (D == mPublicGdList_mDraw_tlc_3_fff_011[E].id.toString()) {
                                    return mPublicGdList_mDraw_tlc_3_fff_011[E].name
                                }
                            }
                        }
                        if (F.mType == "tlc_3_fff_012" || F.mType == "tlc_3_fff_210") {
                            for (E = 0; E < mPublicGdList_mDraw_tlc_3_fff_012.length; E++) {
                                if (D == mPublicGdList_mDraw_tlc_3_fff_012[E].id.toString()) {
                                    return mPublicGdList_mDraw_tlc_3_fff_012[E].name
                                }
                            }
                        }
                        return D;
                        break;
                    case "tlc_3_fgf":
                        if (F.mType == "tlc_3_fgf_010" || F.mType == "tlc_3_fgf_101") {
                            for (E = 0; E < mPublicGdList_mDraw_tlc_3_fgf_010.length; E++) {
                                if (D == mPublicGdList_mDraw_tlc_3_fgf_010[E].id.toString()) {
                                    return mPublicGdList_mDraw_tlc_3_fgf_010[E].name
                                }
                            }
                        }
                        return D;
                        break;
                    case "tlc_4_ffff":
                        for (E = 0; E < mPublicGdList_mDraw_tlc_4_ffff_0110.length; E++) {
                            if (D == mPublicGdList_mDraw_tlc_4_ffff_0110[E].id.toString()) {
                                return mPublicGdList_mDraw_tlc_4_ffff_0110[E].name
                            }
                        }
                        return D;
                        break;
                    case "tlc_4_gffg":
                        for (E = 0; E < mPublicGdList_mDraw_tlc_4_gffg_0110.length; E++) {
                            if (D == mPublicGdList_mDraw_tlc_4_gffg_0110[E].id.toString()) {
                                return mPublicGdList_mDraw_tlc_4_gffg_0110[E].name
                            }
                        }
                        return D;
                        break;
                    case "tlc_4_kffk":
                        for (E = 0; E < mPublicGdList_mDraw_tlc_4_kffk_0110.length; E++) {
                            if (D == mPublicGdList_mDraw_tlc_4_kffk_0110[E].id.toString()) {
                                return mPublicGdList_mDraw_tlc_4_kffk_0110[E].name
                            }
                        }
                        return D;
                        break;
                    case "tlc_4_ffkk":
                        for (E = 0; E < mPublicGdList_mDraw_tlc_4_kffk_0110.length; E++) {
                            if (D == mPublicGdList_mDraw_tlc_4_kffk_0110[E].id.toString()) {
                                return mPublicGdList_mDraw_tlc_4_kffk_0110[E].name
                            }
                        }
                        return D;
                        break;
                    case "tlc_4_kkff":
                        for (E = 0; E < mPublicGdList_mDraw_tlc_4_kffk_0110.length; E++) {
                            if (D == mPublicGdList_mDraw_tlc_4_kffk_0110[E].id.toString()) {
                                return mPublicGdList_mDraw_tlc_4_kffk_0110[E].name
                            }
                        }
                        return D;
                        break;
                    case "tlc_6_ffffff":
                        for (E = 0; E < mPublicGdList_mDraw_tlc_6_ffffff_012210.length; E++) {
                            if (D == mPublicGdList_mDraw_tlc_6_ffffff_012210[E].id.toString()) {
                                return mPublicGdList_mDraw_tlc_6_ffffff_012210[E].name
                            }
                        }
                        return D;
                        break
                    }
                case "mfantype":
                    switch (F.mType.substr(0, F.mType.lastIndexOf("_"))) {
                    case "tlc_2_kf":
                        for (E = 0; E < mPublicGdList_mDraw_tlc_2_kf_01.length; E++) {
                            if (D == mPublicGdList_mDraw_tlc_2_kf_01[E].id.toString()) {
                                return mPublicGdList_mDraw_tlc_2_kf_01[E].name
                            }
                        }
                        return D;
                        break;
                    case "tlc_2_fk":
                        for (E = 0; E < mPublicGdList_mDraw_tlc_2_kf_01.length; E++) {
                            if (D == mPublicGdList_mDraw_tlc_2_kf_01[E].id.toString()) {
                                return mPublicGdList_mDraw_tlc_2_kf_01[E].name
                            }
                        }
                        return D;
                        break;
                    case "tlc_2_gf":
                        if (D == "f,g") {
                            return "左推右固"
                        } else {
                            return "左固右推"
                        }
                        break;
                    case "tlc_2_fg":
                        if (D == "f,g") {
                            return "左推右固"
                        } else {
                            return "左固右推"
                        }
                        break
                    }
                case "mfanls":
                    if (D == "K") {
                        return "扣锁"
                    } else {
                        if (D == "Z") {
                            return "执手"
                        } else {
                            if (D == "L") {
                                return "大拉手"
                            } else {
                                return ""
                            }
                        }
                    }
                case "mfanlsstate":
                    if (D == "SA") {
                        return "显示全部"
                    } else {
                        if (D == "SD") {
                            return "只显示下方拉手"
                        } else {
                            if (D == "HA") {
                                return "隐藏全部"
                            } else {
                                return ""
                            }
                        }
                    }
                case "mjscoor":
                    if (D == "Y") {
                        return "是"
                    } else {
                        if (D == "N") {
                            return "否"
                        } else {
                            return ""
                        }
                    }
                case "mfancoorshow":
                    if (D == "Y") {
                        return "显示"
                    } else {
                        if (D == "N") {
                            return "隐藏"
                        } else {
                            return ""
                        }
                    }
                default:
                    return D
                }
            } else {
                if (F.mType.substring(0, 3) == mDrawFlag_Zdm) {
                    switch (F.mPropertyName) {
                    case "mfanpjstyle":
                        if (D == "45") {
                            return "45"
                        } else {
                            if (D == "V") {
                                return "竖向通长"
                            }
                        }
                    case "mfanhasyt":
                        if (D == "Y") {
                            return "是"
                        } else {
                            return "否"
                        }
                    case "mfanytpjstyle":
                        if (D == "45") {
                            return "45"
                        } else {
                            if (D == "H") {
                                return "横向通长"
                            } else {
                                if (D == "V") {
                                    return "竖向通长"
                                }
                            }
                        }
                    case "mgdshowstyle":
                        if (D == "0" || $.Micro.IsEmpty(D)) {
                            return "系统默认"
                        } else {
                            return "自定义"
                        }
                    default:
                        return D
                    }
                }
            }
            return D
        }
    }
}]];
var mDrawWallWidth = 45;
var mDrawWallHeight = 15;
var mDrawWallRow = 3;
var mDrawPixelPerM = 180;
var mDrawThickFrame = 8;
var mDrawThickTing = 8;
var mDrawThickYt = 4;
var mDrawThickFan = 10;
var mDrawGlassDiff = 7;
var mDrawCPWidth = 7;
var mDrawArcInitW = 2000;
var mDrawArcInitH = 800;
var mDrawThickLouver = 8;
var mDrawDIVLouver = 8;
var mDrawFlag_SvgAreaId = "MicroSvgArea";
var mDrawFlag_SvgId = "MicroSvg";
var mDrawFlag_Win = "win";
var mDrawFlag_CoorX = "coorX";
var mDrawFlag_CoorY = "coorY";
var mDrawFlag_FrameRect = "frameRect";
var mDrawFlag_Area = "area";
var mDrawFlag_Glass = "glass";
var mDrawFlag_TingV = "tingV";
var mDrawFlag_TingH = "tingH";
var mDrawFlag_Pkc = "pkc";
var mDrawFlag_Dkc = "dkc";
var mDrawFlag_PkcFanH = "pkcFanH";
var mDrawFlag_Tlc = "tlc";
var mDrawFlag_Zdm = "zdm";
var mDrawFlag_Sw = "sw";
var mDrawFlag_Fdt = "fdt";
var mDrawFlag_Fhl = "fhl";
var mDrawFlag_GlassFhl = "glassfhl";
var mDrawFlag_Custom = "custom";
var mDrawFlag_Custom_g = "custom_g";
var mDrawFlag_Custom_text = "custom_text";
var mDrawFlag_Custom_line = "custom_line";
var mDrawFlag_Custom_rect = "custom_rect";
var mDrawFlag_Custom_polygon = "custom_polygon";
var mDrawFlag_Custom_polygon_v = "custom_polygon_v";
var mDrawFlag_Custom_polygon_xl = "custom_polygon_xl";
var mDrawFlag_Custom_polygon_xr = "custom_polygon_xr";
var mDrawFlag_Custom_arc = "custom_arc";
var mDrawFlag_Custom_circle = "custom_circle";
var mDrawFlag_Custom_controlPoint = "custom_controlPoint";
var mDrawFlag_Custom_ruler = "custom_ruler";
var mDrawFlag_Custom_wall = "custom_wall";
var mDrawFlag_Custom_impSvg = "custom_impSvg";
var mDrawFlag_combsortwin = "mcombsortwin";
var mDrawFlag_combCoorX = "combCoorX";
var mDrawFlag_combCoorY = "combCoorY";
var mDrawFlag_ScaleG = "scaleG";
var mDrawFlag_Definedgd = "mdefinedgd";
var mDrawFlag_DefinedgdScale = 0.6;
var mDrawFlag_Custom_glass = "custom_glass";
var mDrawFlag_Custom_CornerMaterial = "custom_cornermaterial";
var mDrawFlag_Custom_CornerMaterial_h = mDrawFlag_Custom_CornerMaterial + "_h";
var mDrawFlag_Cornergdpic = "mCornergdpic";
var mDrawFlag_Custom_arc_bf = "custom_arc_bf";
var mDrawFlag_Custom_qj_lt = "custom_qj_lt";
var mDrawFlag_Custom_qj_rt = "custom_qj_rt";
var mDrawFlag_Custom_qj_rb = "custom_qj_rb";
var mDrawFlag_Custom_qj_lb = "custom_qj_lb";
var mDrawFlag_Custom_qj_tm = "custom_qj_tm";
var mDrawFlag_Custom_qj_rm = "custom_qj_rm";
var mDrawFlag_Custom_qj_bm = "custom_qj_bm";
var mDrawFlag_Custom_qj_lm = "custom_qj_lm";
var mDrawFlag_Custom_qj_lx = "custom_qj_lx";
var mDrawFlag_Custom_qj_rx = "custom_qj_rx";
var mDrawFlag_Custom_qj_lrx = "custom_qj_lrx";
var mDrawFlag_FrameArc = "frameArc";
var mDrawFlag_WinArcs = "winArcs";
var mDrawFlag_FrameArcs = "frameArcs";
var mDrawFlag_FrameArcsTingH = "frameArcs_tingH";
var mDrawFlag_FrameArcsTingV = "frameArcs_tingV";
var mDrawFlag_ArcsGlass = "arcsGlass";
var mDrawFlag_ArcsCoorX = "ArcsCoorX";
var mDrawFlag_ArcsCoorY = "ArcsCoorY";
var mDrawFlag_ArcsGD = "ArcsGD";
var mDrawFlag_ArcsPkc = "ArcsPkc";
var mDrawFlag_ArcsDkc = "ArcsDkc";
var mDrawFlag_Louver = "louver";
var mDrawFlag_CMangleText = "CMangleText";
var mDrawFlag_CMwidthText = "CMwidthText";
var mDrawGraphTypes = [{
    name: mDrawFlag_FrameRect,
    text: "常规框"
},
{
    name: mDrawFlag_Glass,
    text: "固玻"
},
{
    name: mDrawFlag_TingV,
    text: "竖挺"
},
{
    name: mDrawFlag_TingH,
    text: "横挺"
},
{
    name: mDrawFlag_Pkc,
    text: "平开扇"
},
{
    name: mDrawFlag_Dkc,
    text: "对开扇"
},
{
    name: mDrawFlag_Tlc,
    text: "推拉扇"
},
{
    name: mDrawFlag_Zdm,
    text: "折叠扇"
},
{
    name: mDrawFlag_Custom_CornerMaterial,
    text: "竖转角料"
},
{
    name: mDrawFlag_Custom_CornerMaterial_h,
    text: "横转角料"
}];
var mDrawSelectObjId = "";
var mDrawSvgString = '<svg id="MicroSvg" width="2000px" height="2000px" version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 2000 2000"><rect id="mBackGround" width="100%" height="100%" fill="white" stroke="black" stroke-width="1px" mselect="1" mselected="0"  pointer-events="all" /></svg>';
var mDrawStep = new Array();
var mDrawStepIdx = 0;
var mDrawCopyingObjId;
var mDrawPolygonPointMoveInfo = "";
var mDraw_GlassFlagRectBorder = false;
var mDraw_GlassFlag = "F";
var mDraw_GlassFlagRectW = 32;
var mDraw_GlassFlagRectH = 18;
var mDraw_GlassFlagFontSize = 14;
var mDraw_GlassFlagFontWeight = 700;
var mDraw_GlassFlag_TlcG = "G";
var mDraw_BAS_GD_SVG_TEMP = "mDraw_AL_BAS_GD_SVG_TEMP";
var mPublicMatMoneyObj = undefined;
var mDrawPrColors = [{
    text: "系统默认",
    value: $.Micro.colorVal(mDrawProductColor).hex
},
{
    text: "哑黑",
    value: "url(#" + [mDrawSystemTag, "yahei"].join("_") + ")"
},
{
    text: "白色",
    value: $.Micro.colorVal("#f6f6f6").hex
},
{
    text: "灰色",
    value: "url(#" + [mDrawSystemTag, "huise"].join("_") + ")"
},
{
    text: "咖啡色",
    value: "url(#" + [mDrawSystemTag, "coffee"].join("_") + ")"
},
{
    text: "金橡木",
    value: "url(#" + [mDrawSystemTag, "jinxiangmu"].join("_") + ")"
},
{
    text: "水曲柳",
    value: "url(#" + [mDrawSystemTag, "shuiquliu"].join("_") + ")"
},
{
    text: "香槟金",
    value: "url(#" + [mDrawSystemTag, "xiangbinjin"].join("_") + ")"
},
{
    text: "橡牙白",
    value: $.Micro.colorVal("#fff").hex
},
{
    text: "红酸枝",
    value: "url(#" + [mDrawSystemTag, "hongsuanzhi"].join("_") + ")"
},
{
    text: "宝马金",
    value: "url(#" + [mDrawSystemTag, "baomajin"].join("_") + ")"
},
{
    text: "法国香槟",
    value: "url(#" + [mDrawSystemTag, "faguoxiangbin"].join("_") + ")"
},
{
    text: "印度黄檀",
    value: "url(#" + [mDrawSystemTag, "yinduhuangtan"].join("_") + ")"
},
{
    text: "古巴深灰",
    value: "url(#" + [mDrawSystemTag, "gubashenhui"].join("_") + ")"
}];
var MicroDraw_TLGlassVTypes = ["上固", "下固", "无上下固"];
var mDrawFlag_PK_zsStyle = [{
    id: "0",
    text: "系统默认"
},
{
    id: "1",
    text: "肯德基竖"
},
{
    id: "2",
    text: "肯德基扣"
},
{
    id: "3",
    text: "肯德基横"
}];
for (var mc_i = 0; mc_i < mDrawFillColor.length; mc_i++) {
    _val = $.Micro.colorVal(mDrawFillColor[mc_i].id).hex.toUpperCase();
    var NotInclude = [$.Micro.colorVal("#fff").hex.toUpperCase(), "NONE", $.Micro.colorVal(mDrawProductColor).hex.toUpperCase()];
    if (!$.Micro.isInArray(_val, NotInclude) && _val !== "NONE") {
        mDrawPrColors.push({
            text: mDrawFillColor[mc_i].text,
            value: _val
        })
    }
}
var mDrawPrFooterStr = '{ rows:[], total:0, footer:[{"ProductId":"合计：","LenExp":"","CntExp":""}] }';
var mDrawPrFooterJson = eval("(" + mDrawPrFooterStr + ")");
var mDrawGlFooterStr = '{ rows:[], total:0, footer:[{"Glass":"合计：","CntExp":""}] }';
var mDrawGlFooterJson = eval("(" + mDrawGlFooterStr + ")");
var mDrawWjFooterStr = '{ rows:[], total:0, footer:[{"MaterialId":"合计：","CntExp":"","CntExp2":""}] }';
var mDrawWjFooterJson = eval("(" + mDrawWjFooterStr + ")");
var mDrawCpFooterStr = '{ rows:[], total:0, footer:[{"cpId":"合计：","CntExp":""}] }';
var mDrawCpFooterJson = eval("(" + mDrawCpFooterStr + ")");
var mDrawBjFooterStr = '{ rows:[], total:0, footer:[{"Name":"总金额：","BjDesc":"","BjDescExp":"","CntExp2":"","TotalMoneyExp":"","bjAreaExp":"","DiscountFlag":""}] }';
var mDrawBjFooterJson = eval("(" + mDrawBjFooterStr + ")");
var mDrawLabelFooterStr = '{ rows:[], total:0, footer:[{"Name":"合计：","CntExp":""}] }';
var mDrawLabelFooterJson = eval("(" + mDrawLabelFooterStr + ")");
var mDrawCostFooterStr = '{ rows:[], total:0, footer:[{"Name":"合计：","exp":""}] }';
var mDrawCostFooterJson = eval("(" + mDrawCostFooterStr + ")");
var mDrawRouteFooterStr = '{ rows:[], total:0, footer:[{"Proce":"合计：","Direction":""}] }';
var mDrawRouteFooterJson = eval("(" + mDrawRouteFooterStr + ")");
var mWebBudgetOptCurrentRow;
var mWebBudgetOptCurrentRowDropDownList;
function MicroDraw_Init_dataGridCol() {
    var H = true;
    try {
        if (WEB_BUDGET_ISSIMPLE) {
            H = false
        }
    } catch(A) {}
    var F = function(J) {
        var K = true;
        if (J == mWEB_ORDER_DrawOptProperty) {
            K = false
        } else {
            if (WEB_BUDGET_ISSIMPLE) {
                K = false
            }
        }
        return [{
            field: "ck",
            checkbox: true,
            hidden: WEB_BUDGET_ISSIMPLE
        },
        {
            field: "id",
            title: "流水号",
            width: 50,
            align: "center",
            sortable: "true",
            type: "NUM",
            hidden: true
        },
        {
            field: "Numx",
            title: "项目号",
            width: 80,
            align: "center",
            sortable: "true",
            type: "CHAR",
            hidden: true
        },
        {
            field: "optId",
            title: "选项编号",
            width: 80,
            align: "center",
            sortable: H,
            type: "CHAR",
            hidden: WEB_BUDGET_ISSIMPLE,
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true
                }
            }
        },
        {
            field: "optName",
            title: "选项名称",
            width: 120,
            align: "center",
            sortable: H,
            type: "CHAR",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: K
                }
            }
        },
        {
            field: "optVal",
            title: "选项值",
            width: 200,
            align: "center",
            sortable: H,
            type: "CHAR",
            editor: {
                type: "combobox",
                options: {
                    valueField: "id",
                    textField: "text",
                    editable: true,
                    required: false,
                    limitToList: false,
                    onChange: function(O, L) {
                        if (O != L) {
                            var M = $("#" + J).datagrid("getSelected");
                            var N = $("#" + J).datagrid("getRowIndex", M);
                            if (!$.Micro.IsEmpty(M)) {
                                if (M["optList"].toString().length > 0 || M["optListExp"].toString().length > 0) {
                                    M.optVal = O;
                                    MicroDraw_reflashOptShowList(N);
                                    MicroDraw_optChangeEvent()
                                }
                            }
                        }
                    }
                }
            },
            formatter: function(N, M, L) {
                return MicroRemoveDoubleQuote(N)
            }
        },
        {
            field: "optValExp",
            title: "选项值公式",
            width: 120,
            align: "center",
            sortable: "true",
            type: "CHAR",
            hidden: WEB_BUDGET_ISSIMPLE,
            editor: {
                type: "textbox",
                options: {
                    required: false,
                    editable: true
                }
            },
            formatter: function(N, M, L) {
                return '<span title="" class="easyui-tooltip">' + N + "</span>"
            }
        },
        {
            field: "optList",
            title: "选项内容",
            width: 120,
            align: "center",
            sortable: "true",
            type: "CHAR",
            hidden: WEB_BUDGET_ISSIMPLE,
            editor: {
                type: "textbox",
                options: {
                    required: false,
                    editable: true
                }
            },
            formatter: function(N, M, L) {
                return '<span title="" class="easyui-tooltip">' + N + "</span>"
            }
        },
        {
            field: "optListExp",
            title: "选项内容公式",
            width: 120,
            align: "center",
            sortable: "true",
            type: "CHAR",
            hidden: WEB_BUDGET_ISSIMPLE,
            editor: {
                type: "textbox",
                options: {
                    required: false,
                    editable: true
                }
            },
            formatter: function(N, M, L) {
                return '<span title="" class="easyui-tooltip">' + N + "</span>"
            }
        },
        {
            field: "memo",
            title: "备注",
            width: 80,
            align: "center",
            sortable: "true",
            type: "CHAR",
            hidden: WEB_BUDGET_ISSIMPLE,
            editor: {
                type: "textbox",
                options: {
                    required: false,
                    editable: true
                }
            }
        },
        {
            field: "bgyOpt",
            title: "工艺显示",
            width: 120,
            align: "center",
            sortable: "true",
            type: "CHAR",
            hidden: WEB_BUDGET_ISSIMPLE,
            editor: {
                type: "textbox",
                options: {
                    required: false,
                    editable: true
                }
            }
        },
        {
            field: "bgyOptExp",
            title: "工艺显示公式",
            width: 120,
            align: "center",
            sortable: "true",
            type: "CHAR",
            hidden: WEB_BUDGET_ISSIMPLE,
            editor: {
                type: "textbox",
                options: {
                    required: false,
                    editable: true
                }
            }
        },
        {
            field: "bxdOpt",
            title: "下单参数",
            width: 80,
            align: "center",
            sortable: "true",
            type: "CHAR",
            hidden: true,
            editor: {
                type: "textbox",
                options: {
                    required: false,
                    editable: true
                }
            }
        },
        {
            field: "seq",
            title: "排序号",
            width: 80,
            align: "center",
            sortable: "true",
            type: "NUM",
            hidden: false,
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true
                }
            }
        }]
    };
    WEB_DRAW_COLINFO_OPT_SUB = F(mDrawOptProperty);
    WEB_DRAW_COLINFO_OPT = [WEB_DRAW_COLINFO_OPT_SUB];
    WEB_ORDER_DRAW_COLINFO_OPT_SUB = $.Micro.MergeArr([F(mWEB_ORDER_DrawOptProperty)]);
    var C = [];
    for (var D = 0; D < WEB_ORDER_DRAW_COLINFO_OPT_SHOWCOLS.length; D++) {
        C.push(WEB_ORDER_DRAW_COLINFO_OPT_SHOWCOLS[D].field)
    }
    for (var D = 0; D < WEB_ORDER_DRAW_COLINFO_OPT_SUB.length; D++) {
        var I = WEB_ORDER_DRAW_COLINFO_OPT_SUB[D];
        var B = $.Micro.isInArray(I.field, C, 1, 1);
        if (B > -1) {
            I.hidden = false;
            I.title = WEB_ORDER_DRAW_COLINFO_OPT_SHOWCOLS[B].title;
            I.width = WEB_ORDER_DRAW_COLINFO_OPT_SHOWCOLS[B].width;
            I.sortable = WEB_ORDER_DRAW_COLINFO_OPT_SHOWCOLS[B].sortable
        } else {
            I.hidden = true
        }
    }
    WEB_ORDER_DRAW_COLINFO_OPT = [WEB_ORDER_DRAW_COLINFO_OPT_SUB];
    WEB_DRAW_COLINFO_PR_SUB = [{
        field: "ck",
        checkbox: true
    },
    {
        field: "id",
        title: "流水号",
        width: 50,
        align: "center",
        sortable: "true",
        type: "NUM",
        hidden: true
    },
    {
        field: "Numx",
        title: "项目号",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        hidden: true
    },
    {
        field: "ObjId",
        title: "对象ID",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        hidden: true
    },
    {
        field: "ProductId",
        title: "型号",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "combogrid",
            options: {
                panelWidth: 220,
                required: true,
                editable: true,
                data: mPublicPrList,
                idField: "productid",
                textField: "productid",
                columns: [[{
                    field: "productid",
                    title: "型号",
                    width: 100
                },
                {
                    field: "productname",
                    title: "名称",
                    width: 100
                }]],
                onChange: function(K, J) {
                    if (J.length > 0) {}
                }
            }
        }
    },
    {
        field: "ProductName",
        title: "名称",
        width: 60,
        align: "center",
        sortable: "true",
        type: "CHAR",
        formatter: function(L, K, J) {
            if (!isEmptyOrNull(mPublicPrList)) {
                for (i = 0; i < mPublicPrList.length; i++) {
                    if (K["ProductId"] == mPublicPrList[i].productid) {
                        return mPublicPrList[i].productname
                    }
                }
            }
            return ""
        }
    },
    {
        field: "color",
        title: "颜色",
        width: 60,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: false,
                editable: true
            }
        }
    },
    {
        field: "colorExp",
        title: "颜色公式",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: true,
                editable: true
            }
        }
    },
    {
        field: "Len",
        title: "长度",
        width: 50,
        align: "center",
        sortable: "true",
        type: "NUM",
        editor: {
            type: "textbox",
            options: {
                required: true,
                editable: true
            }
        }
    },
    {
        field: "LenExp",
        title: "长度公式",
        width: 180,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: true,
                editable: true
            }
        },
        formatter: function(L, K, J) {
            return '<span title="" class="easyui-tooltip">' + L + "</span>"
        }
    },
    {
        field: "Cnt",
        title: "数量",
        width: 50,
        align: "center",
        sortable: "true",
        type: "NUM",
        editor: {
            type: "textbox",
            options: {
                required: true,
                editable: true
            }
        }
    },
    {
        field: "CntExp",
        title: "数量公式",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: true,
                editable: true
            }
        },
        formatter: function(L, K, J) {
            return '<span title="" class="easyui-tooltip">' + L + "</span>"
        }
    },
    {
        field: "Angle",
        title: "角度",
        width: 50,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: false,
                editable: true
            }
        }
    },
    {
        field: "BcpType",
        title: "所属成品",
        width: 70,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: true,
                editable: true
            }
        }
    },
    {
        field: "Memo",
        title: "备注",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: false,
                editable: true
            }
        }
    },
    {
        field: "xcxljgid",
        title: "xcxljgid",
        width: 80,
        align: "center",
        sortable: "true",
        type: "NUM",
        hidden: true
    }];
    WEB_DRAW_COLINFO_PR = [WEB_DRAW_COLINFO_PR_SUB];
    WEB_DRAW_COLINFO_GL_SUB = [{
        field: "ck",
        checkbox: true
    },
    {
        field: "id",
        title: "流水号",
        width: 50,
        align: "center",
        sortable: "true",
        type: "NUM",
        hidden: true
    },
    {
        field: "Numx",
        title: "项目号",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        hidden: true
    },
    {
        field: "ObjId",
        title: "对象ID",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        hidden: true
    },
    {
        field: "Flag",
        title: "标识",
        width: 50,
        align: "center",
        sortable: "true",
        type: "CHAR"
    },
    {
        field: "Glass",
        title: "玻璃规格",
        width: 160,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "combogrid",
            options: {
                panelWidth: 280,
                required: true,
                editable: true,
                data: mPublicGlList,
                idField: "glass",
                textField: "glass",
                columns: [[{
                    field: "glass",
                    title: "玻璃规格",
                    width: 180
                }]],
                onChange: function(K, J) {
                    if (J.length > 0) {}
                }
            }
        }
    },
    {
        field: "glassExp",
        title: "玻璃规格公式",
        width: 100,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: false,
                editable: true
            }
        }
    },
    {
        field: "glassGy",
        title: "玻璃工艺",
        width: 100,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "combogrid",
            options: {
                panelWidth: 280,
                required: false,
                editable: true,
                data: mPublicGlList,
                idField: "glass",
                textField: "glass",
                columns: [[{
                    field: "glass",
                    title: "玻璃工艺",
                    width: 180
                }]],
                onChange: function(K, J) {
                    if (J.length > 0) {}
                }
            }
        }
    },
    {
        field: "glassGyExp",
        title: "玻璃工艺公式",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: false,
                editable: true
            }
        }
    },
    {
        field: "glassDb",
        title: "底玻",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "combogrid",
            options: {
                panelWidth: 280,
                required: false,
                editable: true,
                data: mPublicGlList,
                idField: "glass",
                textField: "glass",
                columns: [[{
                    field: "glass",
                    title: "玻璃材质",
                    width: 180
                }]],
                onChange: function(K, J) {
                    if (J.length > 0) {}
                }
            }
        }
    },
    {
        field: "glassDbExp",
        title: "底玻公式",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: false,
                editable: true
            }
        }
    },
    {
        field: "glassMb",
        title: "面玻",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "combogrid",
            options: {
                panelWidth: 280,
                required: false,
                editable: true,
                data: mPublicGlList,
                idField: "glass",
                textField: "glass",
                columns: [[{
                    field: "glass",
                    title: "玻璃材质",
                    width: 180
                }]],
                onChange: function(K, J) {
                    if (J.length > 0) {}
                }
            }
        }
    },
    {
        field: "glassMbExp",
        title: "面玻公式",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: false,
                editable: true
            }
        }
    },
    {
        field: "W",
        title: "宽度",
        width: 50,
        align: "center",
        sortable: "true",
        type: "NUM",
        editor: {
            type: "textbox",
            options: {
                required: true,
                editable: true
            }
        }
    },
    {
        field: "WExp",
        title: "宽度公式",
        width: 180,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: true,
                editable: true
            }
        }
    },
    {
        field: "H",
        title: "高度",
        width: 50,
        align: "center",
        sortable: "true",
        type: "NUM",
        editor: {
            type: "textbox",
            options: {
                required: true,
                editable: true
            }
        }
    },
    {
        field: "HExp",
        title: "高度公式",
        width: 180,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: true,
                editable: true
            }
        }
    },
    {
        field: "Cnt",
        title: "数量",
        width: 50,
        align: "center",
        sortable: "true",
        type: "NUM",
        editor: {
            type: "textbox",
            options: {
                required: true,
                editable: true
            }
        }
    },
    {
        field: "CntExp",
        title: "数量公式",
        width: 70,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: true,
                editable: true
            }
        },
        formatter: function(L, K, J) {
            return '<span title="" class="easyui-tooltip">' + L + "</span>"
        }
    },
    {
        field: "BcpType",
        title: "所属成品",
        width: 70,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: true,
                editable: true
            }
        }
    },
    {
        field: "Memo",
        title: "备注",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: false,
                editable: true
            }
        }
    }];
    WEB_DRAW_COLINFO_GL = [WEB_DRAW_COLINFO_GL_SUB];
    WEB_DRAW_COLINFO_WJ_SUB = [{
        field: "ck",
        checkbox: true
    },
    {
        field: "id",
        title: "流水号",
        width: 50,
        align: "center",
        sortable: "true",
        type: "NUM",
        hidden: true
    },
    {
        field: "Numx",
        title: "项目号",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        hidden: true
    },
    {
        field: "ObjId",
        title: "对象ID",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        hidden: true
    },
    {
        field: "MaterialId",
        title: "配件编号",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "combogrid",
            options: {
                panelWidth: 280,
                required: true,
                editable: true,
                data: mPublicWjList,
                idField: "materialid",
                textField: "materialid",
                columns: [[{
                    field: "materialid",
                    title: "配件编号",
                    width: 120
                },
                {
                    field: "materialname",
                    title: "配件名称",
                    width: 120
                }]],
                onChange: function(K, J) {
                    if (J.length > 0) {}
                }
            }
        }
    },
    {
        field: "MaterialName",
        title: "配件名称",
        width: 100,
        align: "center",
        sortable: "true",
        type: "CHAR",
        formatter: function(L, K, J) {
            if (!isEmptyOrNull(mPublicWjList)) {
                for (i = 0; i < mPublicWjList.length; i++) {
                    if (K["MaterialId"] == mPublicWjList[i].materialid) {
                        return mPublicWjList[i].materialname
                    }
                }
            }
            return ""
        }
    },
    {
        field: "Cnt",
        title: "数量",
        width: 50,
        align: "center",
        sortable: "true",
        type: "NUM",
        editor: {
            type: "textbox",
            options: {
                required: true,
                editable: true
            }
        }
    },
    {
        field: "CntExp",
        title: "数量公式",
        width: 400,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: false,
                editable: true
            }
        },
        formatter: function(L, K, J) {
            return '<span title="" class="easyui-tooltip">' + L + "</span>"
        }
    },
    {
        field: "CntExp2",
        title: "数量二次公式",
        width: 200,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: false,
                editable: true
            }
        },
        formatter: function(L, K, J) {
            return '<span title="" class="easyui-tooltip">' + L + "</span>"
        }
    },
    {
        field: "BcpType",
        title: "所属成品",
        width: 70,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: true,
                editable: true
            }
        }
    },
    {
        field: "UsePlace",
        title: "使用位置",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: true,
                editable: true
            }
        }
    },
    {
        field: "bgyOpt",
        title: "工艺显示",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        hidden: WEB_BUDGET_ISSIMPLE,
        editor: {
            type: "textbox",
            options: {
                required: false,
                editable: true
            }
        }
    },
    {
        field: "bgyOptExp",
        title: "工艺显示公式",
        width: 120,
        align: "center",
        sortable: "true",
        type: "CHAR",
        hidden: WEB_BUDGET_ISSIMPLE,
        editor: {
            type: "textbox",
            options: {
                required: false,
                editable: true
            }
        }
    },
    {
        field: "Memo",
        title: "备注",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: false,
                editable: true
            }
        }
    }];
    WEB_DRAW_COLINFO_WJ = [WEB_DRAW_COLINFO_WJ_SUB];
    WEB_DRAW_COLINFO_CP_SUB = [{
        field: "ck",
        checkbox: true
    },
    {
        field: "id",
        title: "流水号",
        width: 50,
        align: "center",
        sortable: "true",
        type: "NUM",
        hidden: true
    },
    {
        field: "Numx",
        title: "项目号",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        hidden: true
    },
    {
        field: "ObjId",
        title: "对象ID",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        hidden: true
    },
    {
        field: "Range",
        title: "成品标识",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: true,
                editable: true
            }
        }
    },
    {
        field: "cpId",
        title: "成品名称",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: true,
                editable: true
            }
        }
    },
    {
        field: "W",
        title: "宽度",
        width: 50,
        align: "center",
        sortable: "true",
        type: "NUM",
        editor: {
            type: "textbox",
            options: {
                required: true,
                editable: true
            }
        }
    },
    {
        field: "WExp",
        title: "宽度公式",
        width: 200,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: true,
                editable: true
            }
        }
    },
    {
        field: "H",
        title: "高度",
        width: 50,
        align: "center",
        sortable: "true",
        type: "NUM",
        editor: {
            type: "textbox",
            options: {
                required: true,
                editable: true
            }
        }
    },
    {
        field: "HExp",
        title: "高度公式",
        width: 200,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: true,
                editable: true
            }
        }
    },
    {
        field: "Cnt",
        title: "数量",
        width: 50,
        align: "center",
        sortable: "true",
        type: "NUM",
        editor: {
            type: "textbox",
            options: {
                required: true,
                editable: true
            }
        }
    },
    {
        field: "CntExp",
        title: "数量公式",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: true,
                editable: true
            }
        },
        formatter: function(L, K, J) {
            return '<span title="" class="easyui-tooltip">' + L + "</span>"
        }
    },
    {
        field: "Memo",
        title: "备注",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: false,
                editable: true
            }
        }
    }];
    WEB_DRAW_COLINFO_CP = [WEB_DRAW_COLINFO_CP_SUB];
    var E = [{
        field: "ck",
        checkbox: true
    },
    {
        field: "id",
        title: "流水号",
        width: 50,
        align: "center",
        sortable: "true",
        type: "NUM",
        hidden: true
    },
    {
        field: "Numx",
        title: "项目号",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        hidden: true
    },
    {
        field: "ObjId",
        title: "对象ID",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        hidden: true
    },
    {
        field: "Name",
        title: "项目名称",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: true,
                editable: true
            }
        }
    },
    {
        field: "BjDescExp",
        title: "报价描述公式",
        width: 200,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                editable: true
            }
        },
        formatter: function(L, K, J) {
            return '<span title="" class="easyui-tooltip">' + L + "</span>"
        }
    },
    {
        field: "BjDesc",
        title: "报价描述",
        width: 100,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                editable: true
            }
        },
        formatter: function(L, K, J) {
            return '<span title="" class="easyui-tooltip">' + L + "</span>"
        }
    },
    {
        field: "TotalMoneyExp",
        title: "金额公式",
        width: 200,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                editable: true
            }
        },
        formatter: function(L, K, J) {
            return '<span title="" class="easyui-tooltip">' + L + "</span>"
        }
    },
    {
        field: "TotalMoney",
        title: "金额",
        width: 100,
        align: "center",
        sortable: "true",
        type: "NUM",
        editor: {
            type: "textbox",
            options: {
                editable: false
            }
        }
    },
    {
        field: "BjType",
        title: "报价类型",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        hidden: true,
        editor: {
            type: "combobox",
            options: {
                required: false,
                editable: true,
                valueField: "id",
                textField: "text",
                data: mPublicBjType
            }
        },
        formatter: function(L, K, J) {
            if (!isEmptyOrNull(mPublicBjType)) {
                for (i = 0; i < mPublicBjType.length; i++) {
                    if (L == mPublicBjType[i].id) {
                        return mPublicBjType[i].text
                    }
                }
            }
            return ""
        }
    },
    {
        field: "bjAreaExp",
        title: "报价面积公式",
        width: 200,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                editable: true
            }
        },
        formatter: function(L, K, J) {
            return '<span title="" class="easyui-tooltip">' + L + "</span>"
        }
    },
    {
        field: "bjArea",
        title: "报价面积",
        width: 100,
        align: "center",
        sortable: "true",
        type: "NUM",
        editor: {
            type: "textbox",
            options: {
                editable: true
            }
        }
    },
    {
        field: "bjPriceExp",
        title: "报价单价公式",
        width: 200,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                editable: true
            }
        },
        formatter: function(L, K, J) {
            return '<span title="" class="easyui-tooltip">' + L + "</span>"
        }
    },
    {
        field: "bjPrice",
        title: "报价单价",
        width: 100,
        align: "center",
        sortable: "true",
        type: "NUM",
        editor: {
            type: "textbox",
            options: {
                editable: true
            }
        }
    },
    {
        field: "Memo",
        title: "备注",
        width: 120,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: false,
                editable: true
            }
        }
    },
    {
        field: "CntExp2",
        title: "二次公式",
        width: 200,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                editable: true
            }
        },
        formatter: function(L, K, J) {
            return '<span title="" class="easyui-tooltip">' + L + "</span>"
        }
    },
    {
        field: "CalcFlag",
        title: "计算方式",
        width: 80,
        align: "center",
        sortable: "true",
        type: "NUM",
        formatter: function(L, K, J) {
            return L == 1 ? "循环": "一次"
        }
    },
    {
        field: "Discount",
        title: "折扣",
        width: 80,
        align: "center",
        sortable: "true",
        type: "NUM"
    },
    {
        field: "DiscountFlag",
        title: "是否打折",
        align: "center",
        editor: {
            type: "combobox",
            options: {
                required: false,
                editable: false,
                data: [{
                    id: "1",
                    text: "是"
                },
                {
                    id: "0",
                    text: "否"
                }],
                valueField: "id",
                textField: "text"
            },
        },
        formatter: function(L, K, J) {
            if ($.Micro.IsEmpty(L)) {
                result = ""
            } else {
                result = String(L) == "1" ? "√": ""
            }
            return result
        }
    }];
    var G = [E];
    WEB_DRAW_COLINFO_LABEL_SUB = [{
        field: "ck",
        checkbox: true
    },
    {
        field: "id",
        title: "流水号",
        width: 50,
        align: "center",
        sortable: "true",
        type: "NUM",
        hidden: true
    },
    {
        field: "Numx",
        title: "项目号",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        hidden: true
    },
    {
        field: "ObjId",
        title: "对象ID",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        hidden: true
    },
    {
        field: "Name",
        title: "项目名称",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: true,
                editable: true
            }
        }
    },
    {
        field: "Cnt",
        title: "数量",
        width: 100,
        align: "center",
        sortable: "true",
        type: "NUM",
        editor: {
            type: "textbox",
            options: {
                editable: true
            }
        }
    },
    {
        field: "CntExp",
        title: "数量公式",
        width: 200,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                editable: true
            }
        },
        formatter: function(L, K, J) {
            return '<span title="" class="easyui-tooltip">' + L + "</span>"
        }
    },
    {
        field: "Memo",
        title: "备注",
        width: 120,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: false,
                editable: true
            }
        }
    }];
    WEB_DRAW_COLINFO_LABEL = [WEB_DRAW_COLINFO_LABEL_SUB];
    WEB_DRAW_COLINFO_COST_SUB = [{
        field: "ck",
        checkbox: true
    },
    {
        field: "id",
        title: "流水号",
        width: 50,
        align: "center",
        sortable: "true",
        type: "NUM",
        hidden: true
    },
    {
        field: "Numx",
        title: "项目号",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        hidden: true
    },
    {
        field: "ObjId",
        title: "对象ID",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        hidden: true
    },
    {
        field: "Item",
        title: "项目",
        width: 140,
        align: "center",
        halign: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: true,
                editable: true
            }
        }
    },
    {
        field: "Price",
        title: "费用",
        width: 80,
        align: "center",
        halign: "center",
        sortable: "true",
        type: "NUM",
        editor: {
            type: "textbox",
            options: {}
        }
    },
    {
        field: "exp",
        title: "公式",
        width: 200,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                editable: true
            }
        },
        formatter: function(L, K, J) {
            return '<span title="" class="easyui-tooltip">' + L + "</span>"
        }
    },
    {
        field: "Memo",
        title: "备注",
        width: 120,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: false,
                editable: true
            }
        }
    }];
    WEB_DRAW_COLINFO_COST = [WEB_DRAW_COLINFO_COST_SUB];
    WEB_DRAW_COLINFO_ROUTE_SUB = [{
        field: "ck",
        checkbox: true
    },
    {
        field: "id",
        title: "流水号",
        width: 50,
        align: "center",
        sortable: "true",
        type: "NUM",
        hidden: true
    },
    {
        field: "Numx",
        title: "项目号",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        hidden: true
    },
    {
        field: "ObjId",
        title: "对象ID",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        hidden: true
    },
    {
        field: "xcxljgid",
        title: "系列结构ID",
        width: 80,
        align: "center",
        sortable: "true",
        type: "CHAR",
        hidden: true
    },
    {
        field: "Seq",
        title: "工艺序号",
        width: 80,
        align: "center",
        halign: "center",
        sortable: "true",
        type: "NUM",
        editor: {
            type: "textbox",
            options: {
                required: true
            }
        }
    },
    {
        field: "Proce",
        title: "工序",
        width: 80,
        align: "center",
        halign: "center",
        sortable: true,
        type: "CHAR",
        editor: {
            type: "combobox",
            options: {
                data: mPublicProceList,
                valueField: "proce",
                textField: "proce",
                required: true
            }
        }
    },
    {
        field: "side",
        title: "起始位置",
        width: 80,
        align: "center",
        halign: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "combobox",
            options: {
                data: [{
                    value: "左",
                    selected: true
                },
                {
                    value: "右"
                }],
                valueField: "value",
                textField: "value",
                required: true,
                value: "左"
            }
        }
    },
    {
        field: "Direction",
        title: "加工面",
        width: 80,
        align: "center",
        halign: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "combobox",
            options: {
                data: [{
                    value: "A",
                    selected: true
                },
                {
                    value: "B"
                },
                {
                    value: "C"
                },
                {
                    value: "D"
                }],
                valueField: "value",
                textField: "value",
                required: true,
                value: "A"
            }
        }
    },
    {
        field: "x",
        title: "X值",
        width: 80,
        align: "center",
        halign: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {}
        }
    },
    {
        field: "xExp",
        title: "X值公式",
        width: 80,
        align: "center",
        halign: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {}
        }
    },
    {
        field: "y",
        title: "Y值",
        width: 80,
        align: "center",
        halign: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {}
        }
    },
    {
        field: "yExp",
        title: "Y值公式",
        width: 80,
        align: "center",
        halign: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {}
        }
    },
    {
        field: "z",
        title: "Z值",
        width: 80,
        align: "center",
        halign: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {}
        }
    },
    {
        field: "zExp",
        title: "Z值公式",
        width: 80,
        align: "center",
        halign: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {}
        }
    },
    {
        field: "Template",
        title: "加工模板",
        width: 80,
        align: "center",
        halign: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {}
        }
    },
    {
        field: "TemplateExp",
        title: "加工模板公式",
        width: 80,
        align: "center",
        halign: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {}
        }
    },
    {
        field: "Pline",
        title: "生产线",
        width: 80,
        align: "center",
        halign: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {}
        }
    },
    {
        field: "PlineExp",
        title: "生产线公式",
        width: 80,
        align: "center",
        halign: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {}
        }
    },
    {
        field: "BEnable",
        title: "启用标识",
        width: 80,
        align: "center",
        halign: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: true
            }
        }
    },
    {
        field: "BEnableExp",
        title: "启用标识公式",
        width: 80,
        align: "center",
        halign: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: true
            }
        }
    },
    {
        field: "Width",
        title: "宽度",
        width: 80,
        align: "center",
        halign: "center",
        sortable: "true",
        type: "NUM",
        editor: {
            type: "textbox",
            options: {
                required: true
            }
        }
    },
    {
        field: "Height",
        title: "高度",
        width: 80,
        align: "center",
        halign: "center",
        sortable: "true",
        type: "NUM",
        editor: {
            type: "textbox",
            options: {
                required: true
            }
        }
    },
    {
        field: "PositionA",
        title: "机械手夹持位置A轴",
        width: 100,
        align: "center",
        halign: "center",
        sortable: "true",
        type: "NUM",
        editor: {
            type: "textbox",
            options: {
                required: true
            }
        }
    },
    {
        field: "PositionB",
        title: "机械手夹持位置B轴",
        width: 100,
        align: "center",
        halign: "center",
        sortable: "true",
        type: "NUM",
        editor: {
            type: "textbox",
            options: {
                required: true
            }
        }
    },
    {
        field: "CutSpeed",
        title: "切割速度",
        width: 80,
        align: "center",
        halign: "center",
        sortable: "true",
        type: "NUM",
        editor: {
            type: "textbox",
            options: {
                required: true
            }
        }
    },
    {
        field: "ProceType",
        title: "工序类别",
        width: 80,
        align: "center",
        halign: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "combobox",
            options: {
                data: mPublicRouteProceTypeList,
                valueField: "value",
                textField: "name"
            }
        },
        formatter: function(L, K, J) {
            return formatter_routeprocetype(L, K, J, "ProceType")
        }
    },
    {
        field: "Memo",
        title: "备注",
        width: 120,
        align: "center",
        sortable: "true",
        type: "CHAR",
        editor: {
            type: "textbox",
            options: {
                required: false,
                editable: true
            }
        }
    }];
    WEB_DRAW_COLINFO_ROUTE = [WEB_DRAW_COLINFO_ROUTE_SUB]
}
function MicroDraw_Init(B) {
    var L = document.getElementById(B);
    var G = false;
    try {
        var H = arguments.callee;
        var E = H.caller;
        if ((E.caller && E.caller.getName() == "MicroBudget_newWin")) {
            G = true
        }
    } catch(A) {}
    L.setAttributeNS(null, "width", mDrawSvgWidth);
    L.setAttributeNS(null, "height", mDrawSvgHeight);
    L.setAttributeNS(null, "viewBox", "0 0 " + mDrawSvgWidth * mDrawSvgViewBox + " " + mDrawSvgHeight * mDrawSvgViewBox);
    L.setAttributeNS(null, "msvgwidth", mDrawSvgWidth);
    L.setAttributeNS(null, "msvgheight", mDrawSvgHeight);
    L.setAttributeNS(null, "msvgviewbox", mDrawSvgViewBox);
    L.setAttributeNS(null, "msvgpixelperm", mDrawPixelPerM);
    L.setAttributeNS(null, "outlook_exp", 'AllWinsW + "*" + AllWinsH');
    $("#" + B + " rect,line").each(function(O, P) {
        P.setAttribute("stroke-width", mDrawSvgViewBox + "px")
    });
    if (G) {
        return
    }
    MicroDraw_Init_dataGridCol();
    var J = function(O) {
        return {
            onClickRow: function(Q, P) {
                MicroDraw_SelectObj(P.mObjId);
                var R = $("#" + O).propertygrid("getEditors", Q);
                if (R.length == 0) {
                    $("#" + O).propertygrid("beginEdit", Q);
                    R = $("#" + O).propertygrid("getEditors", Q)
                }
                if ($(R[0].target).hasClass("textbox-f")) {
                    $(R[0].target).textbox("textbox").focus();
                    $(R[0].target).textbox("textbox").select()
                } else {
                    $(R[0].target).focus();
                    $(R[0].target).select()
                }
                mDrawCustomObjList = ""
            },
            onAfterEdit: function(R, U, b) {
                if (!isEmptyOrNull(b.value)) {
                    var X = U.win;
                    var a = $("#" + mDrawFlag_SvgId + " [mwin=" + X + "]");
                    var Y = a.attr("mtype");
                    if (Y == mDrawFlag_WinArcs) {
                        var Q = b.value;
                        var S;
                        var W;
                        if (U.name == "W") {
                            S = Number($("#" + mDrawFlag_SvgId + " #" + U.mObjId).attr("mwidth"));
                            W = Number(Q) - S;
                            if (!MicroDraw_CheckSetArcH(a, {
                                mwidth: Q
                            })) {
                                return
                            }
                            $.each(a.find("[mtype][mrid='']"),
                            function() {
                                var c = $(this);
                                var e = Number(c.attr("mwidth"));
                                c.attr("mwidth", (e + W))
                            });
                            MicroDraw_RedrawWinArcs(a)
                        } else {
                            if (U.name.indexOf("W") > -1) {
                                var Z = $("#" + mDrawFlag_SvgId + " #" + U.mObjId);
                                var P = Z.attr("id");
                                S = Number(Z.attr("mx"));
                                W = Number(Q) - S;
                                Z.attr("mx", Q);
                                MicroDraw_Redraw(P);
                                $.each($("#" + mDrawFlag_SvgId + " [mrid*='" + P + "']"),
                                function(c, e) {
                                    $(e).attr("mwidth", Number($(e).attr("mwidth")) + W);
                                    MicroDraw_Redraw($(e).attr("id"))
                                });
                                $.each($("#" + mDrawFlag_SvgId + " [mlid*='" + P + "']"),
                                function(c, e) {
                                    $(e).attr("mwidth", Number($(e).attr("mwidth")) - W);
                                    $(e).attr("mx", Number($(e).attr("mx")) + W);
                                    MicroDraw_Redraw($(e).attr("id"))
                                })
                            } else {
                                if (U.name == "H") {
                                    S = Number($("#" + mDrawFlag_SvgId + " #" + U.mObjId).attr("mheight"));
                                    W = Number(Q) - S;
                                    $.each(a.find("[mtype][mbid='']"),
                                    function() {
                                        var c = $(this);
                                        var e = Number(c.attr("mheight"));
                                        c.attr("mheight", (e + W))
                                    });
                                    MicroDraw_RedrawWinArcs(a)
                                } else {
                                    if (U.name.indexOf("H") > -1) {
                                        var Z = $("#" + mDrawFlag_SvgId + " #" + U.mObjId);
                                        var P = Z.attr("id");
                                        S = Number(Z.attr("my"));
                                        W = Number(Q) - S;
                                        Z.attr("my", Q);
                                        MicroDraw_Redraw(P);
                                        $.each($("#" + mDrawFlag_SvgId + " [mbid*='" + P + "']"),
                                        function(c, e) {
                                            $(e).attr("mheight", Number($(e).attr("mheight")) + W);
                                            MicroDraw_Redraw($(e).attr("id"))
                                        });
                                        $.each($("#" + mDrawFlag_SvgId + " [mtid*='" + P + "']"),
                                        function(c, e) {
                                            $(e).attr("mheight", Number($(e).attr("mheight")) - W);
                                            $(e).attr("my", Number($(e).attr("my")) + W);
                                            MicroDraw_Redraw($(e).attr("id"))
                                        })
                                    }
                                }
                            }
                        }
                        MicroDraw_ShowCoordinateWinArcs(a)
                    } else {
                        if (U.name == "W") {
                            var S;
                            var Q;
                            S = $("#" + U.mObjId)[0].getAttribute("mwidth");
                            Q = b.value;
                            var W = Number(Q) - Number(S);
                            $("#" + U.mObjId)[0].setAttribute("mwidth", Number(S) + Number(W));
                            MicroDraw_Redraw(U.mObjId);
                            var T = $("#" + mDrawFlag_SvgId + " [mwin=" + U.win + "]")[0];
                            $("#" + T.getAttribute("id") + " g[mrid='']").each(function(c, e) {
                                if (e.getAttribute("mtype").indexOf("frame") != 0) {
                                    e.setAttribute("mwidth", Number(e.getAttribute("mwidth")) + Number(W));
                                    MicroDraw_Redraw(e.id)
                                }
                            });
                            if (Number(W) != 0) {
                                var V = $("#" + mDrawFlag_SvgId + " [mwallbelongto=" + U.mObjId + "]")[0];
                                if (!isEmptyOrNull(V)) {
                                    V.setAttribute("mwallrealwidth", Q);
                                    MicroDraw_Redraw_Custom_wall(V.getAttribute("id"))
                                }
                            }
                            if (Number(W) != 0) {
                                MicroDraw_reflashHandleCoorY()
                            }
                            if (Number(W) != 0) {
                                MicroDraw_autoGdPic()
                            }
                            MicroDraw_optChangeEvent()
                        } else {
                            if ((U.name.indexOf("W") > -1)) {
                                var S;
                                var Q;
                                S = $("#" + U.mObjId)[0].getAttribute("mx");
                                Q = b.value;
                                var W = Number(Q) - Number(S);
                                $("#" + U.mObjId)[0].setAttribute("mx", Number(S) + Number(W));
                                MicroDraw_Redraw(U.mObjId);
                                $("#" + mDrawFlag_SvgId + " [mrid*='" + U.mObjId + "']").each(function(c, e) {
                                    e.setAttribute("mwidth", Number(e.getAttribute("mwidth")) + Number(W));
                                    MicroDraw_Redraw(e.id)
                                });
                                $("#" + mDrawFlag_SvgId + " [mlid*='" + U.mObjId + "']").each(function(c, e) {
                                    e.setAttribute("mwidth", Number(e.getAttribute("mwidth")) - Number(W));
                                    e.setAttribute("mx", Number(e.getAttribute("mx")) + Number(W));
                                    MicroDraw_Redraw(e.id)
                                });
                                if (Number(W) != 0) {
                                    MicroDraw_autoGdPic()
                                }
                                MicroDraw_optChangeEvent()
                            } else {
                                if (U.name == "H") {
                                    var S;
                                    var Q;
                                    S = $("#" + U.mObjId)[0].getAttribute("mheight");
                                    Q = b.value;
                                    var W = Number(Q) - Number(S);
                                    $("#" + U.mObjId)[0].setAttribute("mheight", Number(S) + Number(W));
                                    MicroDraw_Redraw(U.mObjId);
                                    var T = $("#" + mDrawFlag_SvgId + " [mwin=" + U.win + "]")[0];
                                    $("#" + T.getAttribute("id") + " g[mbid='']").each(function(c, e) {
                                        if (e.getAttribute("mtype").indexOf("frame") != 0) {
                                            e.setAttribute("mheight", Number(e.getAttribute("mheight")) + Number(W));
                                            MicroDraw_Redraw(e.id)
                                        }
                                    });
                                    if (Number(W) != 0) {
                                        var V = $("#" + mDrawFlag_SvgId + " [mwallbelongto=" + U.mObjId + "]")[0];
                                        if (!isEmptyOrNull(V)) {
                                            MicroDraw_Redraw_Custom_wall(V.getAttribute("id"))
                                        }
                                    }
                                    if (Number(W) != 0) {
                                        MicroDraw_reflashHandleCoorY()
                                    }
                                    if (Number(W) != 0) {
                                        MicroDraw_autoGdPic()
                                    }
                                    MicroDraw_optChangeEvent()
                                } else {
                                    if ((U.name.indexOf("H") > -1)) {
                                        var S;
                                        var Q;
                                        S = $("#" + U.mObjId)[0].getAttribute("my");
                                        Q = b.value;
                                        var W = Number(Q) - Number(S);
                                        $("#" + U.mObjId)[0].setAttribute("my", Number(S) + Number(W));
                                        MicroDraw_Redraw(U.mObjId);
                                        $("#" + mDrawFlag_SvgId + " [mbid*='" + U.mObjId + "']").each(function(c, e) {
                                            e.setAttribute("mheight", Number(e.getAttribute("mheight")) + Number(W));
                                            MicroDraw_Redraw(e.id)
                                        });
                                        $("#" + mDrawFlag_SvgId + " [mtid*='" + U.mObjId + "']").each(function(c, e) {
                                            e.setAttribute("mheight", Number(e.getAttribute("mheight")) - Number(W));
                                            e.setAttribute("my", Number(e.getAttribute("my")) + Number(W));
                                            MicroDraw_Redraw(e.id)
                                        });
                                        if (Number(W) != 0) {
                                            var V = $("#" + mDrawFlag_SvgId + " [mwallbelongto=" + U.mObjId + "]")[0];
                                            if (!isEmptyOrNull(V)) {
                                                MicroDraw_Redraw_Custom_wall(V.getAttribute("id"))
                                            }
                                        }
                                        if (Number(W) != 0) {
                                            MicroDraw_reflashHandleCoorY()
                                        }
                                        if (Number(W) != 0) {
                                            MicroDraw_autoGdPic()
                                        }
                                        MicroDraw_optChangeEvent()
                                    }
                                }
                            }
                        }
                    }
                }
                $("#" + mDrawFlag_SvgId + " [mqjbelongtoframeid]").each(function(c, e) {
                    MicroDraw_Redraw(e.id)
                });
                $("#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_FrameArc + "]").each(function(c, e) {
                    if (U.name == "W") {
                        $(e).attr("mwidth", Q)
                    }
                    MicroDraw_Redraw(e.id)
                });
                MicroDraw_ShowSizeProperty();
                MicroDraw_ShowCoordinate();
                if (MicroBudget_calcOutlookArea && typeof(MicroBudget_calcOutlookArea) == "function") {
                    MicroBudget_calcOutlookArea()
                }
            }
        }
    };
    $("#" + mDrawSizeProperty).propertygrid(J(mDrawSizeProperty));
    if ($("#" + mWEB_ORDER_DrawSizeProperty).length > 0) {
        $("#" + mWEB_ORDER_DrawSizeProperty).propertygrid(J(mWEB_ORDER_DrawSizeProperty))
    }
    var N = function(O) {
        return {
            onClickRow: function(Q, P) {
                var R = $("#" + O).propertygrid("getEditors", Q);
                if (R.length == 0) {
                    $("#" + O).propertygrid("beginEdit", Q);
                    R = $("#" + O).propertygrid("getEditors", Q)
                }
                if (R.length == 0) {
                    return true
                }
                if ($(R[0].target).hasClass("textbox-f")) {
                    $(R[0].target).textbox("textbox").focus();
                    $(R[0].target).textbox("textbox").select()
                } else {
                    $(R[0].target).focus();
                    $(R[0].target).select()
                }
                mDrawCustomObjList = ""
            },
            onAfterEdit: function(T, R, S) {
                if (!isEmptyOrNull(S.value)) {
                    origVal = $("#" + R.mObjId)[0].getAttribute(R.mPropertyName);
                    newVal = S.value;
                    $("#" + R.mObjId)[0].setAttribute(R.mPropertyName, newVal);
                    MicroDraw_Redraw(R.mObjId);
                    var Q = [];
                    for (var P = 0; P < mPublicXcxlList.length; P++) {
                        Q.push(mPublicXcxlList[P].id)
                    }
                    if (R.mPropertyName == "mxcxlid") {
                        if ($.Micro.isInArray(newVal, Q) && !$.Micro.IsEmpty(newVal)) {
                            MicroBudget_setFinishDate(newVal)
                        } else {
                            newVal = "";
                            $("#" + R.mObjId)[0].setAttribute(R.mPropertyName, newVal)
                        }
                    }
                }
            },
            onDblClickRow: function(Q, P) {
                var R = "MICRO_OBJECT_PROPERTY_EXP_DLG";
                $("<div></div>").dialog({
                    id: R,
                    title: "属性公式设置",
                    href: "../MicroBudget/WEB_BUDGET_PROPERTY_EXP.html",
                    width: 700,
                    height: 500,
                    modal: true,
                    iconCls: "icon-edit",
                    buttons: [{
                        text: "设置系列默认",
                        iconCls: "icon-ok",
                        handler: function() {
                            var W = $("#WEB_BUDGET_PROPERTY_EXP_mObjId").val();
                            var V = $("#WEB_BUDGET_PROPERTY_EXP_mPropertyName").val();
                            var U = $("#WEB_BUDGET_PROPERTY_EXP_mPropertyExp").textbox("getValue");
                            var T = $("#" + mDrawFlag_SvgId + " #" + W).attr("mtype");
                            var S = P.name;
                            MicroBudget_SELECT_ALLXLJGLIST.okFun = function() {
                                var X = function(b) {
                                    var Y = $("#WEB_BUDGET_ALLXLJGLIST").combobox("getValue");
                                    var a = {
                                        action: "AddFromGraph",
                                        xcxlId: Y,
                                        xltype: "GR",
                                        tag: V,
                                        mProText: S,
                                        mtype: T,
                                        exp: U
                                    };
                                    if (!$.Micro.IsEmpty(b)) {
                                        a.isCover = 1
                                    }
                                    var Z = false;
                                    $.ajax({
                                        url: "../MicroBase/WEB_DR_XCXLJG.ashx",
                                        data: a,
                                        type: "POST",
                                        dataType: "text",
                                        async: false,
                                        success: function(c) {
                                            if (c.substring(0, 2) == "ok") {
                                                Z = true;
                                                $.messager.alert("提示:", "保存成功！", "info");
                                                $("#MicroBudget_SELECT_ALLXLJGLIST_DLG").dialog("close")
                                            } else {
                                                if (c.indexOf("tips:") > -1) {
                                                    $.messager.confirm("提示:", c.replace("tips:", ""),
                                                    function(e) {
                                                        if (e) {
                                                            X(1)
                                                        }
                                                    })
                                                } else {
                                                    $.messager.alert("提示:", "保存失败！" + c.replace("err:", ""), "error")
                                                }
                                            }
                                        },
                                        error: function(c) {
                                            $.messager.alert("提示:", "保存失败！", "error")
                                        }
                                    });
                                    return Z
                                };
                                return X()
                            };
                            MicroBudget_SELECT_ALLXLJGLIST.dialog()
                        }
                    },
                    {
                        text: "确定",
                        iconCls: "icon-edit",
                        handler: function() {
                            var V = $("#WEB_BUDGET_PROPERTY_EXP_mObjId").val();
                            var U = $("#WEB_BUDGET_PROPERTY_EXP_mPropertyName").val();
                            var T = $("#WEB_BUDGET_PROPERTY_EXP_mPropertyExp").textbox("getValue");
                            if (isEmptyOrNull(T)) {
                                $("#" + V).removeAttr(U + "_exp");
                                var S = $("#" + V).attr("mtype");
                                if ($.inArray(S, [mDrawFlag_Custom_CornerMaterial, mDrawFlag_Custom_CornerMaterial_h]) > -1) {
                                    MicroDraw_ChangeCMAttrToDatas(V)
                                }
                            } else {
                                $("#" + V)[0].setAttribute(U + "_exp", T);
                                MicroDraw_optChangeEvent();
                                var S = $("#" + V)[0].getAttribute("mtype");
                                if (!isEmptyOrNull(S)) {
                                    if ((S == mDrawFlag_TingV || S == mDrawFlag_TingH) && U == "mexp") {
                                        MicroDraw_ChangeAllTingsPos($("#" + mDrawFlag_SvgId + " #" + V).parents("[mtype=" + mDrawFlag_Win + "]"))
                                    } else {
                                        if ($.inArray(S, [mDrawFlag_Custom_CornerMaterial, mDrawFlag_Custom_CornerMaterial_h]) > -1) {
                                            MicroDraw_ChangeCMAttrToDatas(V)
                                        }
                                    }
                                }
                            }
                            $("#" + R).dialog("destroy")
                        }
                    },
                    {
                        text: "取消",
                        iconCls: "icon-cancel",
                        handler: function() {
                            $("#" + R).dialog("destroy")
                        }
                    }],
                    onClose: function() {
                        $("#" + R).dialog("destroy")
                    },
                    onLoad: function() {
                        var U = P.mObjId;
                        var T = P.mPropertyName;
                        var S = $("#" + U)[0].getAttribute(T + "_exp");
                        if (isEmptyOrNull(S)) {
                            S = ""
                        }
                        $("#WEB_BUDGET_PROPERTY_EXP_mPropertyExp").textbox("setValue", S);
                        $("#WEB_BUDGET_PROPERTY_EXP_mObjId").val(U);
                        $("#WEB_BUDGET_PROPERTY_EXP_mPropertyName").val(T);
                        if (P.editor.type == "combobox") {
                            $.each(P.editor.options.data,
                            function(X, W) {
                                if (P.editor.options.valueField.length > 0) {
                                    $("#WEB_BUDGET_PROPERTY_EXP_DG").datagrid("insertRow", {
                                        index: $("#WEB_BUDGET_PROPERTY_EXP_DG").datagrid("getRows").length,
                                        row: {
                                            id: W[P.editor.options.valueField],
                                            text: W[P.editor.options.textField]
                                        }
                                    })
                                } else {
                                    $("#WEB_BUDGET_PROPERTY_EXP_DG").datagrid("insertRow", {
                                        index: $("#WEB_BUDGET_PROPERTY_EXP_DG").datagrid("getRows").length,
                                        row: {
                                            id: W.id,
                                            text: W.text
                                        }
                                    })
                                }
                            })
                        } else {
                            if (P.editor.type == "combogrid") {
                                $.each(P.editor.options.data,
                                function(X, W) {
                                    if (P.editor.options.idField.length > 0) {
                                        $("#WEB_BUDGET_PROPERTY_EXP_DG").datagrid("insertRow", {
                                            index: $("#WEB_BUDGET_PROPERTY_EXP_DG").datagrid("getRows").length,
                                            row: {
                                                id: W[P.editor.options.idField],
                                                text: W[P.editor.options.textField]
                                            }
                                        })
                                    }
                                })
                            }
                        }
                        var V = $("#" + mDrawOptProperty).datagrid("getRows");
                        $.each(V,
                        function(W, X) {
                            $("#WEB_BUDGET_PROPERTY_EXP_OPT_DG").datagrid("insertRow", {
                                index: $("#WEB_BUDGET_PROPERTY_EXP_OPT_DG").datagrid("getRows").length,
                                row: {
                                    optId: X.optId,
                                    optName: X.optName,
                                    optList: X.optList
                                }
                            })
                        })
                    }
                })
            },
            onBeginEdit: function(Q, P) {}
        }
    };
    $("#" + mDrawObjProperty).propertygrid(N(mDrawObjProperty));
    if ($("#" + mWEB_ORDER_DrawObjProperty).length > 0) {
        $("#" + mWEB_ORDER_DrawObjProperty).propertygrid(N(mWEB_ORDER_DrawObjProperty))
    }
    var C = "#WEB_BUDGET_opt_toolbar";
    if (WEB_BUDGET_ISSIMPLE) {
        C = ""
    }
    var K = function(O, Q, R, P) {
        C = P;
        return {
            url: "",
            iconCls: "icon-edit",
            rownumbers: Q,
            nowrap: true,
            pagination: false,
            fitColumns: false,
            autoSizeColumn: false,
            striped: false,
            collapsible: false,
            toolbar: C,
            multiSort: true,
            columns: R,
            showFooter: true,
            onLoadSuccess: function(U) {
                $("#" + O).datagrid("columnMoving");
                var S = $("#" + O).datagrid("options").toolbar;
                for (var T = 0; T < S.length; T++) {
                    $("#" + S[T].id).linkbutton({
                        plain: false
                    })
                }
                $(".datagrid-ftable tr td div").each(function(W, X) {
                    var Y = $(X).text();
                    $(X).html("<label style='font-weight: bolder;'>" + Y + "</label>")
                });
                $(this).datagrid("getPanel").find(".easyui-tooltip").tooltip({
                    showDelay: 500,
                    position: "top",
                    content: function() {
                        var W = $(this).text();
                        return W
                    }
                });
                if (!isEmptyOrNull(U)) {
                    if (U.total > 0) {
                        $.each(U.rows,
                        function(W, X) {
                            if (!X.bxdOpt) {
                                $("#" + O).datagrid("hideRow", W)
                            }
                        })
                    } else {
                        var V = function() {
                            if (!WEB_BUDGET_ISSIMPLE && $.inArray(mVersion, ["DRAW", "DRAW_M", "DRAW_JX", "ERP_ENT", "ERP_PRO"]) == -1) {
                                console.log("AddDefaultOpts");
                                var b = MicroBudget_getPropertyValue(mBudgetWinProperty, "Numx");
                                if (!$.Micro.IsEmpty(b)) {
                                    if (isTableRecordExists("WEB_BUDGET_ITEM", "Numx", b)) {
                                        var a = MicroBudget_getPropertyValue(mBudgetWinProperty, "lock");
                                        var W = a.split(",")[0];
                                        var Z = a.split(",")[1];
                                        W = $.Micro.IsEmpty(W) ? "": W;
                                        Z = $.Micro.IsEmpty(Z) ? "": Z;
                                        var X = [{
                                            id: "MGG",
                                            name: "玻璃规格",
                                            value: MicroBudget_getPropertyValue(mBudgetWinProperty, "glSpec")
                                        },
                                        {
                                            id: "MSA",
                                            name: "纱网规格",
                                            value: MicroBudget_getPropertyValue(mBudgetWinProperty, "swSpec")
                                        },
                                        {
                                            id: "MYS",
                                            name: "型材颜色",
                                            value: MicroBudget_getPropertyValue(mBudgetWinProperty, "color")
                                        },
                                        {
                                            id: "MDB",
                                            name: "底玻",
                                            value: MicroBudget_getPropertyValue(mBudgetWinProperty, "dglass")
                                        },
                                        {
                                            id: "MMB",
                                            name: "面玻",
                                            value: MicroBudget_getPropertyValue(mBudgetWinProperty, "mglass")
                                        },
                                        {
                                            id: "MGY",
                                            name: "玻璃工艺",
                                            value: MicroBudget_getPropertyValue(mBudgetWinProperty, "gy")
                                        },
                                        {
                                            id: "MLO",
                                            name: "门锁",
                                            value: W
                                        },
                                        {
                                            id: "MLS",
                                            name: "拉手",
                                            value: Z
                                        },
                                        {
                                            id: "MTC",
                                            name: "图册",
                                            value: MicroBudget_getPropertyValue(mBudgetWinProperty, "tc")
                                        },
                                        {
                                            id: "MQH",
                                            name: "墙厚",
                                            value: MicroBudget_getPropertyValue(mBudgetWinProperty, "thick")
                                        },
                                        {
                                            id: "MDJ",
                                            name: "吊脚",
                                            value: MicroBudget_getPropertyValue(mBudgetWinProperty, "dj")
                                        },
                                        {
                                            id: "MMT",
                                            name: "包套",
                                            value: MicroBudget_getPropertyValue(mBudgetWinProperty, "mt")
                                        },
                                        {
                                            id: "MZK",
                                            name: "折扣",
                                            value: MicroBudget_getPropertyValue(mBudgetWinProperty, "Discount")
                                        },
                                        {
                                            id: "MBQ",
                                            name: "标签备注",
                                            value: MicroBudget_getPropertyValue(mBudgetWinProperty, "labelmemo")
                                        }];
                                        for (var Y = 0; Y < X.length; Y++) {
                                            MicroDraw_genData_opt_addRow(mDrawOptProperty, MicroBudget_getPropertyValue(mBudgetWinProperty, "Numx"), X[Y].id, X[Y].name, X[Y].value, "", "", "", "", "1", "", true, Y + 1)
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (O == mDrawOptProperty) {
                    setTimeout(function() {
                        MicroBudget_WEB_ORDER_genData("toorder", 0, "opt")
                    },
                    500)
                }
            },
            onLoadError: function(S) {},
            onDblClickRow: function(T, S) {},
            onClickCell: function(W, X, S) {
                mWebBudgetOptCurrentRow = W;
                $("#" + O).datagrid("uncheckAll");
                var V = $("#" + O).datagrid("getRows");
                $.each(V,
                function(Y, Z) {
                    var a = $("#" + O).datagrid("getRowIndex", Z);
                    $("#" + O).datagrid("endEdit", a)
                });
                $(this).datagrid("getPanel").find(".easyui-tooltip:visible").tooltip("hide");
                $("#" + O).datagrid("beginEdit", W);
                MicroDraw_showOptValList(W);
                var T = $("#" + getDrawOptPropertyName()).datagrid("getEditor", {
                    index: W,
                    field: "optVal"
                });
                var U = $(T.target).combobox("getData");
                mWebBudgetOptCurrentRowDropDownList = [];
                $.each(U,
                function(Y, Z) {
                    mWebBudgetOptCurrentRowDropDownList.push(Z.id)
                });
                mWebBudgetOptCurrentRowDropDownList = mWebBudgetOptCurrentRowDropDownList.join(",");
                mDrawCustomObjList = "";
                Micro_DataGridFocusSelect(O, W, X)
            },
            onAfterEdit: function(V, T, U) {
                var W = "Y";
                if (!isEmptyOrNull(mPublicOptionList)) {
                    for (i = 0; i < mPublicOptionList.length; i++) {
                        if (mPublicOptionList[i].c_name.toString() == "下拉选项是否允许自定义内容") {
                            W = mPublicOptionList[i].c_value.toString();
                            break
                        }
                    }
                }
                W = $.trim(W.toUpperCase());
                if (W == "N") {
                    if (mWebBudgetOptCurrentRow == V) {
                        var X = replaceAll(replaceAll(mWebBudgetOptCurrentRowDropDownList, "'", ""), '"', "");
                        var S = replaceAll(replaceAll(T.optVal, "'", ""), '"', "");
                        if (!$.Micro.IsEmpty(S) && !$.Micro.IsEmpty(X)) {
                            if ($.inArray(S, X.split(",")) == -1) {
                                T.optVal = "";
                                $("#" + O).datagrid("refreshRow", V)
                            }
                        }
                    }
                }
                MicroDraw_optChangeEvent();
                $(this).datagrid("getPanel").find(".easyui-tooltip").tooltip({
                    showDelay: 500,
                    position: "top",
                    content: function() {
                        var Y = $(this).text();
                        return Y
                    }
                })
            },
            onEndEdit: function(U, S, T) {}
        }
    };
    $("#" + mDrawOptProperty).datagrid(K(mDrawOptProperty, true, WEB_DRAW_COLINFO_OPT, C));
    if ($("#" + mWEB_ORDER_DrawOptProperty).length > 0) {
        $("#" + mWEB_ORDER_DrawOptProperty).datagrid(K(mWEB_ORDER_DrawOptProperty, false, WEB_ORDER_DRAW_COLINFO_OPT, ""))
    }
    $("#" + mDrawPrProperty).datagrid({
        url: "",
        data: mDrawPrFooterJson,
        iconCls: "icon-edit",
        rownumbers: true,
        nowrap: true,
        pagination: false,
        fitColumns: false,
        autoSizeColumn: false,
        striped: false,
        collapsible: false,
        toolbar: "#WEB_BUDGET_pr_toolbar",
        multiSort: true,
        columns: WEB_DRAW_COLINFO_PR,
        showFooter: true,
        onLoadSuccess: function(Q) {
            $("#" + mDrawPrProperty).datagrid("columnMoving");
            var O = $("#" + mDrawPrProperty).datagrid("options").toolbar;
            for (var P = 0; P < O.length; P++) {
                $("#" + O[P].id).linkbutton({
                    plain: false
                })
            }
            $(".datagrid-ftable tr td div").each(function(R, S) {
                var T = $(S).text();
                $(S).html("<label style='font-weight: bolder;'>" + T + "</label>")
            });
            $(this).datagrid("getPanel").find(".easyui-tooltip").tooltip({
                showDelay: 500,
                position: "top",
                content: function() {
                    var R = $(this).text();
                    return R
                }
            })
        },
        onDblClickRow: function(P, O) {},
        onClickCell: function(R, S, O) {
            $("#" + mDrawPrProperty).datagrid("uncheckAll");
            var Q = $("#" + mDrawPrProperty).datagrid("getRows");
            $.each(Q,
            function(T, U) {
                var V = $("#" + mDrawPrProperty).datagrid("getRowIndex", U);
                $("#" + mDrawPrProperty).datagrid("endEdit", V)
            });
            $(this).datagrid("getPanel").find(".easyui-tooltip:visible").tooltip("hide");
            $("#" + mDrawPrProperty).datagrid("beginEdit", R);
            Micro_DataGridFocusSelect(mDrawPrProperty, R, S);
            mDrawCustomObjList = "";
            $("#" + mDrawRouteProperty).datagrid("uncheckAll");
            var P = $("#" + mDrawRouteProperty).datagrid("getRows");
            $.each(P,
            function(T, U) {
                if (Q[R].ObjId == U.ObjId && Q[R].xcxljgid == U.xcxljgid) {
                    $("#" + mDrawRouteProperty).datagrid("checkRow", T)
                }
            })
        },
        onAfterEdit: function(Q, O, P) {
            $(this).datagrid("getPanel").find(".easyui-tooltip").tooltip({
                showDelay: 500,
                position: "top",
                content: function() {
                    var R = $(this).text();
                    return R
                }
            })
        }
    });
    $("#" + mDrawGlProperty).datagrid({
        url: "",
        data: mDrawGlFooterJson,
        iconCls: "icon-edit",
        rownumbers: true,
        nowrap: true,
        pagination: false,
        fitColumns: false,
        autoSizeColumn: false,
        striped: false,
        collapsible: false,
        toolbar: "#WEB_BUDGET_gl_toolbar",
        multiSort: true,
        columns: WEB_DRAW_COLINFO_GL,
        showFooter: true,
        onLoadSuccess: function(Q) {
            $("#" + mDrawGlProperty).datagrid("columnMoving");
            var O = $("#" + mDrawGlProperty).datagrid("options").toolbar;
            for (var P = 0; P < O.length; P++) {
                $("#" + O[P].id).linkbutton({
                    plain: false
                })
            }
            $(".datagrid-ftable tr td div").each(function(R, S) {
                var T = $(S).text();
                $(S).html("<label style='font-weight: bolder;'>" + T + "</label>")
            });
            $(this).datagrid("getPanel").find(".easyui-tooltip").tooltip({
                showDelay: 500,
                position: "top",
                content: function() {
                    var R = $(this).text();
                    return R
                }
            })
        },
        onDblClickRow: function(P, O) {},
        onClickCell: function(R, S, O) {
            $("#" + mDrawGlProperty).datagrid("uncheckAll");
            var Q = $("#" + mDrawGlProperty).datagrid("getRows");
            $.each(Q,
            function(T, U) {
                var V = $("#" + mDrawGlProperty).datagrid("getRowIndex", U);
                $("#" + mDrawGlProperty).datagrid("endEdit", V)
            });
            $(this).datagrid("getPanel").find(".easyui-tooltip:visible").tooltip("hide");
            $("#" + mDrawGlProperty).datagrid("beginEdit", R);
            var P = $("#" + mDrawGlProperty).datagrid("getEditor", {
                index: R,
                field: S
            });
            $(P.target).focus();
            $(P.target).select();
            mDrawCustomObjList = ""
        },
        onAfterEdit: function(Q, O, P) {
            $(this).datagrid("getPanel").find(".easyui-tooltip").tooltip({
                showDelay: 500,
                position: "top",
                content: function() {
                    var R = $(this).text();
                    return R
                }
            })
        }
    });
    $("#" + mDrawWjProperty).datagrid({
        url: "",
        data: mDrawWjFooterJson,
        iconCls: "icon-edit",
        rownumbers: true,
        nowrap: true,
        pagination: false,
        fitColumns: false,
        autoSizeColumn: false,
        striped: false,
        collapsible: false,
        toolbar: "#WEB_BUDGET_wj_toolbar",
        multiSort: true,
        columns: WEB_DRAW_COLINFO_WJ,
        showFooter: true,
        onLoadSuccess: function(Q) {
            $("#" + mDrawWjProperty).datagrid("columnMoving");
            var O = $("#" + mDrawWjProperty).datagrid("options").toolbar;
            for (var P = 0; P < O.length; P++) {
                $("#" + O[P].id).linkbutton({
                    plain: false
                })
            }
            $(".datagrid-ftable tr td div").each(function(R, S) {
                var T = $(S).text();
                $(S).html("<label style='font-weight: bolder;'>" + T + "</label>")
            });
            $(this).datagrid("getPanel").find(".easyui-tooltip").tooltip({
                showDelay: 500,
                position: "top",
                content: function() {
                    var R = $(this).text();
                    return R
                }
            })
        },
        onDblClickRow: function(P, O) {},
        onClickCell: function(R, S, O) {
            $("#" + mDrawWjProperty).datagrid("uncheckAll");
            var Q = $("#" + mDrawWjProperty).datagrid("getRows");
            $.each(Q,
            function(T, U) {
                var V = $("#" + mDrawWjProperty).datagrid("getRowIndex", U);
                $("#" + mDrawWjProperty).datagrid("endEdit", V)
            });
            $(this).datagrid("getPanel").find(".easyui-tooltip:visible").tooltip("hide");
            $("#" + mDrawWjProperty).datagrid("beginEdit", R);
            var P = $("#" + mDrawWjProperty).datagrid("getEditor", {
                index: R,
                field: S
            });
            $(P.target).focus();
            $(P.target).select();
            mDrawCustomObjList = ""
        },
        onAfterEdit: function(Q, O, P) {
            $(this).datagrid("getPanel").find(".easyui-tooltip").tooltip({
                showDelay: 500,
                position: "top",
                content: function() {
                    var R = $(this).text();
                    return R
                }
            })
        }
    });
    $("#" + mDrawCpProperty).datagrid({
        url: "",
        data: mDrawCpFooterJson,
        iconCls: "icon-edit",
        rownumbers: true,
        nowrap: true,
        pagination: false,
        fitColumns: false,
        autoSizeColumn: false,
        striped: false,
        collapsible: false,
        toolbar: "#WEB_BUDGET_cp_toolbar",
        multiSort: true,
        columns: WEB_DRAW_COLINFO_CP,
        showFooter: true,
        onLoadSuccess: function(Q) {
            $("#" + mDrawCpProperty).datagrid("columnMoving");
            var O = $("#" + mDrawCpProperty).datagrid("options").toolbar;
            for (var P = 0; P < O.length; P++) {
                $("#" + O[P].id).linkbutton({
                    plain: false
                })
            }
            $(".datagrid-ftable tr td div").each(function(R, S) {
                var T = $(S).text();
                $(S).html("<label style='font-weight: bolder;'>" + T + "</label>")
            });
            $(this).datagrid("getPanel").find(".easyui-tooltip").tooltip({
                showDelay: 500,
                position: "top",
                content: function() {
                    var R = $(this).text();
                    return R
                }
            })
        },
        onDblClickRow: function(P, O) {},
        onClickCell: function(R, S, O) {
            $("#" + mDrawCpProperty).datagrid("uncheckAll");
            var Q = $("#" + mDrawCpProperty).datagrid("getRows");
            $.each(Q,
            function(T, U) {
                var V = $("#" + mDrawCpProperty).datagrid("getRowIndex", U);
                $("#" + mDrawCpProperty).datagrid("endEdit", V)
            });
            $(this).datagrid("getPanel").find(".easyui-tooltip:visible").tooltip("hide");
            $("#" + mDrawCpProperty).datagrid("beginEdit", R);
            var P = $("#" + mDrawCpProperty).datagrid("getEditor", {
                index: R,
                field: S
            });
            $(P.target).focus();
            $(P.target).select();
            mDrawCustomObjList = ""
        },
        onAfterEdit: function(Q, O, P) {
            $(this).datagrid("getPanel").find(".easyui-tooltip").tooltip({
                showDelay: 500,
                position: "top",
                content: function() {
                    var R = $(this).text();
                    return R
                }
            })
        }
    });
    var D = [];
    switch (mVersion) {
    case "ERP_ENT":
        D = ["DiscountFlag"];
        break;
    default:
        D = ["BjDescExp", "BjDesc", "bjAreaExp", "bjArea", "bjPriceExp", "bjPrice", "Memo", "CntExp2", "CalcFlag", "Discount"]
    }
    for (var I = 0; I < WEB_DRAW_COLINFO_BJ_SUB.length; I++) {
        if ($.inArray(WEB_DRAW_COLINFO_BJ_SUB[I].field, D) > -1) {
            WEB_DRAW_COLINFO_BJ_SUB[I].hidden = true
        }
    }
    var M = function(O, P, Q) {
        return {
            url: "",
            data: mDrawBjFooterJson,
            iconCls: "icon-edit",
            rownumbers: Q,
            nowrap: true,
            pagination: false,
            fitColumns: false,
            autoSizeColumn: false,
            striped: false,
            collapsible: false,
            toolbar: P,
            multiSort: true,
            columns: WEB_DRAW_COLINFO_BJ,
            showFooter: true,
            onLoadSuccess: function(T) {
                $("#" + O).datagrid("columnMoving");
                var R = $("#" + O).datagrid("options").toolbar;
                for (var S = 0; S < R.length; S++) {
                    $("#" + R[S].id).linkbutton({
                        plain: false
                    })
                }
                $(".datagrid-ftable tr td div").each(function(U, V) {
                    var W = $(V).text();
                    $(V).html("<label style='font-weight: bolder;'>" + W + "</label>")
                });
                $(this).datagrid("getPanel").find(".easyui-tooltip").tooltip({
                    showDelay: 500,
                    position: "top",
                    content: function() {
                        var U = $(this).text();
                        return U
                    }
                });
                if (O == mDrawBjProperty) {
                    MicroBudget_WEB_ORDER_genData("toorder", 0, "bj")
                }
            },
            onDblClickRow: function(S, R) {},
            onClickCell: function(U, V, R) {
                $("#" + O).datagrid("uncheckAll");
                var T = $("#" + O).datagrid("getRows");
                $.each(T,
                function(W, X) {
                    var Y = $("#" + O).datagrid("getRowIndex", X);
                    $("#" + O).datagrid("endEdit", Y)
                });
                $(this).datagrid("getPanel").find(".easyui-tooltip:visible").tooltip("hide");
                $("#" + O).datagrid("beginEdit", U);
                var S = $("#" + O).datagrid("getEditor", {
                    index: U,
                    field: V
                });
                $(S.target).focus();
                $(S.target).select();
                mDrawCustomObjList = ""
            },
            onBeforeEdit: function(S, R) {},
            onBeginEdit: function(T, S) {
                var U = $("#" + O).datagrid("getEditor", {
                    index: T,
                    field: "DiscountFlag"
                }).target;
                var R = $("#" + O).datagrid("getEditor", {
                    index: T,
                    field: "TotalMoneyExp"
                }).target;
                if (!$.Micro.IsEmpty(S.ObjId)) {
                    U.combobox("disable");
                    if (O == mWEB_ORDER_DrawBjProperty) {
                        R.combobox("disable")
                    }
                } else {
                    U.combobox("enable");
                    if (O == mWEB_ORDER_DrawBjProperty) {
                        R.combobox("enable")
                    }
                }
            },
            onAfterEdit: function(T, R, S) {
                $(this).datagrid("getPanel").find(".easyui-tooltip").tooltip({
                    showDelay: 500,
                    position: "top",
                    content: function() {
                        var U = $(this).text();
                        return U
                    }
                })
            }
        }
    };
    $("#" + mDrawBjProperty).datagrid(M(mDrawBjProperty, "#WEB_BUDGET_bj_toolbar", true));
    if ($("#" + mWEB_ORDER_DrawBjProperty).length > 0) {
        $("#" + mWEB_ORDER_DrawBjProperty).datagrid(M(mWEB_ORDER_DrawBjProperty, "#WEB_ORDER_bj_toolbar", false))
    }
    $("#" + mDrawLabelProperty).datagrid({
        url: "",
        data: mDrawLabelFooterJson,
        iconCls: "icon-edit",
        rownumbers: true,
        nowrap: true,
        pagination: false,
        fitColumns: false,
        autoSizeColumn: false,
        striped: false,
        collapsible: false,
        toolbar: "#WEB_BUDGET_label_toolbar",
        multiSort: true,
        columns: WEB_DRAW_COLINFO_LABEL,
        showFooter: true,
        onLoadSuccess: function(Q) {
            $("#" + mDrawLabelProperty).datagrid("columnMoving");
            var O = $("#" + mDrawLabelProperty).datagrid("options").toolbar;
            for (var P = 0; P < O.length; P++) {
                $("#" + O[P].id).linkbutton({
                    plain: false
                })
            }
            $(".datagrid-ftable tr td div").each(function(R, S) {
                var T = $(S).text();
                $(S).html("<label style='font-weight: bolder;'>" + T + "</label>")
            });
            $(this).datagrid("getPanel").find(".easyui-tooltip").tooltip({
                showDelay: 500,
                position: "top",
                content: function() {
                    var R = $(this).text();
                    return R
                }
            })
        },
        onDblClickRow: function(P, O) {},
        onClickCell: function(R, S, O) {
            $("#" + mDrawLabelProperty).datagrid("uncheckAll");
            var Q = $("#" + mDrawLabelProperty).datagrid("getRows");
            $.each(Q,
            function(T, U) {
                var V = $("#" + mDrawLabelProperty).datagrid("getRowIndex", U);
                $("#" + mDrawLabelProperty).datagrid("endEdit", V)
            });
            $(this).datagrid("getPanel").find(".easyui-tooltip:visible").tooltip("hide");
            $("#" + mDrawLabelProperty).datagrid("beginEdit", R);
            var P = $("#" + mDrawLabelProperty).datagrid("getEditor", {
                index: R,
                field: S
            });
            $(P.target).focus();
            $(P.target).select();
            mDrawCustomObjList = ""
        },
        onAfterEdit: function(Q, O, P) {
            $(this).datagrid("getPanel").find(".easyui-tooltip").tooltip({
                showDelay: 500,
                position: "top",
                content: function() {
                    var R = $(this).text();
                    return R
                }
            })
        }
    });
    var F = function(O, P, Q) {
        return {
            url: "",
            data: mDrawCostFooterJson,
            iconCls: "icon-edit",
            rownumbers: Q,
            nowrap: true,
            pagination: false,
            fitColumns: false,
            autoSizeColumn: false,
            striped: false,
            collapsible: false,
            toolbar: P,
            multiSort: true,
            columns: WEB_DRAW_COLINFO_COST,
            showFooter: true,
            onLoadSuccess: function(T) {
                $("#" + O).datagrid("columnMoving");
                var R = $("#" + O).datagrid("options").toolbar;
                for (var S = 0; S < R.length; S++) {
                    $("#" + R[S].id).linkbutton({
                        plain: false
                    })
                }
                $(".datagrid-ftable tr td div").each(function(U, V) {
                    var W = $(V).text();
                    $(V).html("<label style='font-weight: bolder;'>" + W + "</label>")
                });
                $(this).datagrid("getPanel").find(".easyui-tooltip").tooltip({
                    showDelay: 500,
                    position: "top",
                    content: function() {
                        var U = $(this).text();
                        return U
                    }
                });
                if (O == mDrawCostProperty) {
                    MicroBudget_WEB_ORDER_genData("toorder", 0, "cost")
                }
            },
            onDblClickRow: function(S, R) {},
            onClickCell: function(U, V, R) {
                $("#" + O).datagrid("uncheckAll");
                var T = $("#" + O).datagrid("getRows");
                $.each(T,
                function(W, X) {
                    var Y = $("#" + O).datagrid("getRowIndex", X);
                    $("#" + O).datagrid("endEdit", Y)
                });
                $(this).datagrid("getPanel").find(".easyui-tooltip:visible").tooltip("hide");
                $("#" + O).datagrid("beginEdit", U);
                var S = $("#" + O).datagrid("getEditor", {
                    index: U,
                    field: V
                });
                $(S.target).focus();
                $(S.target).select();
                mDrawCustomObjList = ""
            },
            onAfterEdit: function(T, R, S) {
                $(this).datagrid("getPanel").find(".easyui-tooltip").tooltip({
                    showDelay: 500,
                    position: "top",
                    content: function() {
                        var U = $(this).text();
                        return U
                    }
                })
            }
        }
    };
    $("#" + mDrawCostProperty).datagrid(F(mDrawCostProperty, "#WEB_BUDGET_cost_toolbar", true));
    if ($("#" + mWEB_ORDER_DrawCostProperty).length > 0) {
        $("#" + mWEB_ORDER_DrawCostProperty).datagrid(F(mWEB_ORDER_DrawCostProperty, "#WEB_ORDER_cost_toolbar", false))
    }
    $("#" + mDrawRouteProperty).datagrid({
        url: "",
        data: mDrawRouteFooterJson,
        iconCls: "icon-edit",
        rownumbers: true,
        nowrap: true,
        pagination: false,
        fitColumns: false,
        autoSizeColumn: false,
        striped: false,
        collapsible: false,
        toolbar: "#WEB_BUDGET_route_toolbar",
        multiSort: true,
        columns: WEB_DRAW_COLINFO_ROUTE,
        showFooter: true,
        onLoadSuccess: function(Q) {
            $("#" + mDrawRouteProperty).datagrid("columnMoving");
            var O = $("#" + mDrawRouteProperty).datagrid("options").toolbar;
            for (var P = 0; P < O.length; P++) {
                $("#" + O[P].id).linkbutton({
                    plain: false
                })
            }
            $(".datagrid-ftable tr td div").each(function(R, S) {
                var T = $(S).text();
                $(S).html("<label style='font-weight: bolder;'>" + T + "</label>")
            });
            $(this).datagrid("getPanel").find(".easyui-tooltip").tooltip({
                showDelay: 500,
                position: "top",
                content: function() {
                    var R = $(this).text();
                    return R
                }
            })
        },
        onDblClickRow: function(P, O) {},
        onClickCell: function(R, S, O) {
            $("#" + mDrawRouteProperty).datagrid("uncheckAll");
            var Q = $("#" + mDrawRouteProperty).datagrid("getRows");
            $.each(Q,
            function(T, U) {
                var V = $("#" + mDrawRouteProperty).datagrid("getRowIndex", U);
                $("#" + mDrawRouteProperty).datagrid("endEdit", V)
            });
            $(this).datagrid("getPanel").find(".easyui-tooltip:visible").tooltip("hide");
            $("#" + mDrawRouteProperty).datagrid("beginEdit", R);
            var P = $("#" + mDrawRouteProperty).datagrid("getEditor", {
                index: R,
                field: S
            });
            $(P.target).focus();
            $(P.target).select();
            mDrawCustomObjList = ""
        },
        onAfterEdit: function(Q, O, P) {
            $(this).datagrid("getPanel").find(".easyui-tooltip").tooltip({
                showDelay: 500,
                position: "top",
                content: function() {
                    var R = $(this).text();
                    return R
                }
            })
        }
    });
    $.Micro.Bind($(document), "keydown",
    function(P) {
        var O = P || window.event || arguments.callee.caller.arguments[0];
        return MicroDraw_keyDownEvt(O)
    });
    $.Micro.Bind($(document), "keyup",
    function(P) {
        var O = P || window.event || arguments.callee.caller.arguments[0];
        try {
            if (O.keyCode == 40) {
                var Q = $(O.target).parent().prev();
                if (Q.hasClass("combo-f")) {
                    Q.combo("showPanel")
                }
            }
        } catch(O) {
            console.clear()
        }
    });
    $("#WEB_BUDGET_propertyTab").tabs({
        onSelect: function(O) {
            MicroDraw_closeEditor();
            if (O == "型材") {
                if (mIsShowSplice == 1) {} else {
                    $("#WEB_BUDGET_PR_LAYOUT").layout("panel", "east").panel("close");
                    $("#WEB_BUDGET_PR_LAYOUT").layout("resize")
                }
            }
        }
    })
}
function MicroDraw_keyDownEvt(e) {
    var retVal = true;
    try {
        if (e.keyCode == 46) {
            MicroDraw_DelSelected()
        } else {
            if (e.shiftKey == 1) {
                var selectCustomObjId = "";
                var selectCustomObjType = "";
                var moveDir = "";
                if (mDrawCustomObjList.length > 0) {
                    var ls_ObjIdArr = mDrawCustomObjList.split(",");
                    for (i = 0; i < ls_ObjIdArr.length; i++) {
                        selectCustomObjId = ls_ObjIdArr[i];
                        selectCustomObjType = $("#" + selectCustomObjId)[0].getAttribute("mtype");
                        if (e && e.keyCode == 38) {
                            moveDir = "T"
                        } else {
                            if (e && e.keyCode == 40) {
                                moveDir = "B"
                            } else {
                                if (e && e.keyCode == 37) {
                                    moveDir = "L"
                                } else {
                                    if (e && e.keyCode == 39) {
                                        moveDir = "R"
                                    }
                                }
                            }
                        }
                        var offsetX = 0;
                        var offsetY = 0;
                        switch (moveDir) {
                        case "T":
                            offsetX = 0;
                            offsetY = -1;
                            break;
                        case "B":
                            offsetX = 0;
                            offsetY = 1;
                            break;
                        case "L":
                            offsetX = -1;
                            offsetY = 0;
                            break;
                        case "R":
                            offsetX = 1;
                            offsetY = 0;
                            break
                        }
                        if (selectCustomObjType == mDrawFlag_Custom_text) {
                            var node = $("#" + selectCustomObjId + "_t")[0]
                        } else {
                            if (selectCustomObjType == mDrawFlag_Custom_rect) {
                                var node = $("#" + selectCustomObjId + "_r")[0]
                            } else {
                                if (selectCustomObjType == mDrawFlag_Custom_polygon) {
                                    var node = $("#" + selectCustomObjId + "_p")[0]
                                } else {
                                    if (selectCustomObjType == mDrawFlag_Custom_circle) {
                                        var node = $("#" + selectCustomObjId + "_c")[0]
                                    } else {
                                        if (selectCustomObjType == mDrawFlag_Custom_line) {
                                            var node = $("#" + selectCustomObjId + "_l")[0]
                                        } else {
                                            if (selectCustomObjType == mDrawFlag_Custom_ruler) {
                                                var node = $("#" + selectCustomObjId)[0]
                                            } else {
                                                if (selectCustomObjType == mDrawFlag_Glass) {
                                                    var node = $("#" + selectCustomObjId)[0]
                                                } else {
                                                    if (selectCustomObjType == mDrawFlag_Pkc) {
                                                        var node = $("#" + selectCustomObjId)[0]
                                                    } else {
                                                        if (selectCustomObjType == mDrawFlag_Dkc) {
                                                            var node = $("#" + selectCustomObjId)[0]
                                                        } else {
                                                            if (selectCustomObjType.substring(0, 3) == mDrawFlag_Tlc) {
                                                                var node = $("#" + selectCustomObjId)[0]
                                                            } else {
                                                                if (selectCustomObjType == mDrawFlag_Custom_CornerMaterial) {
                                                                    var node = $("#" + selectCustomObjId + "_rect")[0]
                                                                } else {
                                                                    if (selectCustomObjType == mDrawFlag_Custom_CornerMaterial_h) {
                                                                        var node = $("#" + selectCustomObjId + "_rect")[0]
                                                                    } else {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (! (Number(offsetX) == 0 && Number(offsetY) == 0)) {
                            if (selectCustomObjType == mDrawFlag_Custom_rect) {
                                node.setAttribute("width", Number(node.getAttribute("width")) + Number(offsetX));
                                node.setAttribute("height", Number(node.getAttribute("height")) + Number(offsetY))
                            } else {
                                if (selectCustomObjType == mDrawFlag_Custom_polygon) {
                                    var x1, y1, x2, y2, x3, y3, x4, y4;
                                    var points = node.getAttribute("points");
                                    var Arr = points.split(" ");
                                    var subArr;
                                    subArr = Arr[0].split(",");
                                    x1 = subArr[0];
                                    y1 = subArr[1];
                                    subArr = Arr[1].split(",");
                                    x2 = subArr[0];
                                    y2 = subArr[1];
                                    subArr = Arr[2].split(",");
                                    x3 = subArr[0];
                                    y3 = subArr[1];
                                    subArr = Arr[3].split(",");
                                    x4 = subArr[0];
                                    y4 = subArr[1];
                                    if (moveDir == "T" || moveDir == "B") {
                                        x3 = Number(x3) + Number(offsetX);
                                        x4 = Number(x4) + Number(offsetX);
                                        y3 = Number(y3) + Number(offsetY);
                                        y4 = Number(y4) + Number(offsetY)
                                    } else {
                                        x2 = Number(x2) + Number(offsetX);
                                        x3 = Number(x3) + Number(offsetX);
                                        y2 = Number(y2) + Number(offsetY);
                                        y3 = Number(y3) + Number(offsetY)
                                    }
                                    node.setAttribute("points", x1 + "," + y1 + " " + x2 + "," + y2 + " " + x3 + "," + y3 + " " + x4 + "," + y4);
                                    var objId = node.id;
                                    var _size = $.Micro_SVG.getSVGRect($(node));
                                    var _width = _size.width;
                                    var _height = _size.height;
                                    var _mwidth = $(node).parent()[0].getAttribute("mwidth");
                                    var _mheight = $(node).parent()[0].getAttribute("mheight");
                                    var mwidth = $.Micro.MRound(_width / mDrawPixelPerM * 1000, 0);
                                    var mheight = $.Micro.MRound(_height / mDrawPixelPerM * 1000, 0);
                                    var mlr = $(node).parent()[0].getAttribute("mlr");
                                    if (mlr == "N") {
                                        if (Number(_mheight) == 0) {
                                            $(node).parent()[0].setAttribute("mwidth", mwidth)
                                        }
                                        if (Number(_mwidth) == 0) {
                                            $(node).parent()[0].setAttribute("mheight", mheight)
                                        }
                                    } else {
                                        $(node).parent()[0].setAttribute("mwidth", mwidth);
                                        $(node).parent()[0].setAttribute("mheight", mheight)
                                    }
                                } else {
                                    if (selectCustomObjType == mDrawFlag_Custom_line) {
                                        node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                        node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY))
                                    } else {
                                        if (selectCustomObjType == mDrawFlag_Custom_circle) {
                                            if (Number(offsetX) != 0) {
                                                node.setAttribute("cx", Number(node.getAttribute("cx")) + Number(offsetX));
                                                node.setAttribute("r", Number(node.getAttribute("r")) + Number(offsetX))
                                            } else {
                                                node.setAttribute("cy", Number(node.getAttribute("cy")) + Number(offsetY));
                                                node.setAttribute("r", Number(node.getAttribute("r")) + Number(offsetY))
                                            }
                                        } else {
                                            if (selectCustomObjType == mDrawFlag_Custom_ruler) {
                                                var nodeId = node.getAttribute("id");
                                                var nodeL1 = $("#" + nodeId + "_l1")[0];
                                                var nodeL2 = $("#" + nodeId + "_l2")[0];
                                                var nodeL3 = $("#" + nodeId + "_l3")[0];
                                                var nodeTxt = $("#" + nodeId + "_t")[0];
                                                var text = nodeTxt.textContent;
                                                var x1 = nodeL2.getAttribute("x1");
                                                var y1 = nodeL2.getAttribute("y1");
                                                var x2 = nodeL2.getAttribute("x2");
                                                var y2 = nodeL2.getAttribute("y2");
                                                x2 = Number(x2) + Number(offsetX);
                                                y2 = Number(y2) + Number(offsetY);
                                                var ArrStr = MicroDraw_getRulerDataInfo(x1, y1, x2, y2, text);
                                                var Arr = ArrStr.split(",");
                                                x1 = Arr[0];
                                                y1 = Arr[1];
                                                x2 = Arr[2];
                                                y2 = Arr[3];
                                                xx1 = Arr[4];
                                                yy1 = Arr[5];
                                                xx2 = Arr[6];
                                                yy2 = Arr[7];
                                                xx3 = Arr[8];
                                                yy3 = Arr[9];
                                                xx4 = Arr[10];
                                                yy4 = Arr[11];
                                                tx1 = Arr[12];
                                                ty1 = Arr[13];
                                                nodeL1.setAttribute("x1", xx1);
                                                nodeL1.setAttribute("y1", yy1);
                                                nodeL1.setAttribute("x2", xx2);
                                                nodeL1.setAttribute("y2", yy2);
                                                nodeL2.setAttribute("x1", x1);
                                                nodeL2.setAttribute("y1", y1);
                                                nodeL2.setAttribute("x2", x2);
                                                nodeL2.setAttribute("y2", y2);
                                                nodeL3.setAttribute("x1", xx3);
                                                nodeL3.setAttribute("y1", yy3);
                                                nodeL3.setAttribute("x2", xx4);
                                                nodeL3.setAttribute("y2", yy4);
                                                nodeTxt.setAttribute("x", tx1);
                                                nodeTxt.setAttribute("y", ty1)
                                            } else {
                                                if (selectCustomObjType == mDrawFlag_Glass) {
                                                    MicroDraw_glass_resize(selectCustomObjId, 0, 0, offsetX, offsetY)
                                                } else {
                                                    if (selectCustomObjType == mDrawFlag_Pkc) {
                                                        MicroDraw_pkc_resize(selectCustomObjId, 0, 0, offsetX, offsetY)
                                                    } else {
                                                        if (selectCustomObjType == mDrawFlag_Dkc) {
                                                            MicroDraw_dkc_resize(selectCustomObjId, 0, 0, offsetX, offsetY)
                                                        } else {
                                                            if (selectCustomObjType.substring(0, 3) == mDrawFlag_Tlc) {
                                                                MicroDraw_tlc_resize(selectCustomObjId, 0, 0, offsetX, offsetY)
                                                            } else {
                                                                if (selectCustomObjType == mDrawFlag_Custom_CornerMaterial) {
                                                                    var nheight = Number(node.getAttribute("height")) + Number(offsetY);
                                                                    node.setAttribute("height", nheight);
                                                                    $("#" + selectCustomObjId).attr("mheight", (nheight / mDrawPixelPerM * 1000).toFixed(2))
                                                                } else {
                                                                    if (selectCustomObjType == mDrawFlag_Custom_CornerMaterial_h) {
                                                                        var mwidth = Number(node.getAttribute("width")) + Number(offsetX);
                                                                        node.setAttribute("width", mwidth);
                                                                        $("#" + selectCustomObjId).attr("mwidth", (mwidth / mDrawPixelPerM * 1000).toFixed(2))
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            retVal = false
                        } else {
                            retVal = true
                        }
                    }
                }
                MicroDraw_AddCustomControlPoint(mDrawCustomObjList)
            } else {
                if (e.ctrlKey == 1 && e.keyCode == 67) {
                    var selectCustomObjId = "";
                    var selectCustomObjType = "";
                    var newIdList = "";
                    if (WEB_BUDGET_ISSIMPLE) {
                        return
                    }
                    if (mDrawCustomObjList.length > 0) {
                        var ls_ObjIdArr = mDrawCustomObjList.split(",");
                        for (i = 0; i < ls_ObjIdArr.length; i++) {
                            selectCustomObjId = ls_ObjIdArr[i];
                            selectNode = $("#" + selectCustomObjId)[0];
                            selectCustomObjType = selectNode.getAttribute("mtype");
                            pNode = selectNode.parentNode;
                            pMtype = pNode.getAttribute("mtype");
                            if (pMtype == mDrawFlag_Custom_g) {
                                if (newIdList.indexOf(pNode.getAttribute("id")) == -1) {
                                    newIdList = newIdList + "," + pNode.getAttribute("id")
                                }
                            } else {
                                newIdList = newIdList + "," + selectCustomObjId
                            }
                        }
                        if (newIdList.substr(0, 1) == ",") {
                            newIdList = newIdList.substr(1)
                        }
                        mDrawCopyingObjId = newIdList
                    }
                } else {
                    if (e.ctrlKey == 1 && e.keyCode == 86) {
                        var selectCustomObjId = "";
                        var selectCustomObjType = "";
                        var newControlList = "";
                        if (WEB_BUDGET_ISSIMPLE) {
                            return
                        }
                        if (!$.Micro.IsEmpty(mDrawCopyingObjId)) {
                            var ls_ObjIdArr = mDrawCopyingObjId.split(",");
                            for (i = 0; i < ls_ObjIdArr.length; i++) {
                                selectCustomObjId = ls_ObjIdArr[i];
                                if ($("#" + selectCustomObjId).length == 0) {
                                    continue
                                }
                                selectCustomObjType = $("#" + selectCustomObjId)[0].getAttribute("mtype");
                                selectNode = $("#" + selectCustomObjId)[0];
                                var selNodeID = $(selectNode).attr("id");
                                var newGuid;
                                if (selectCustomObjType == mDrawFlag_Custom_g) {
                                    var newStr;
                                    if (mDrawIDNameStyle == 1) {
                                        var rndNum = RandomNumBoth(0, 10000).toString();
                                        newGuid = MicroDraw_GUID()
                                    } else {
                                        if (mDrawIDNameStyle == 2) {
                                            newGuid = MicroDraw_NewUniqueID($("#" + mDrawFlag_SvgId), selectCustomObjType)
                                        }
                                    }
                                    var cloneElement = selectNode.cloneNode(true);
                                    cloneElement.setAttribute("id", newGuid);
                                    if (mDrawIDNameStyle == 1) {
                                        newStr = $(cloneElement).html();
                                        newStr = replaceAll(newStr, ' id="', ' id="' + rndNum + "")
                                    } else {
                                        if (mDrawIDNameStyle == 2) {
                                            var cloneSVGidObjs = $(cloneElement).find("[id][mtype]");
                                            var clone_oriIDs = [];
                                            var clone_newIDs = [];
                                            $.each(cloneSVGidObjs,
                                            function() {
                                                with($(this)) {
                                                    var id = attr("id");
                                                    var mtype = attr("mtype")
                                                }
                                                if (!$.Micro.IsEmpty(id) && !$.Micro.IsEmpty(mtype)) {
                                                    clone_oriIDs.push(id);
                                                    var newid = MicroDraw_NewUniqueID($("#" + mDrawFlag_SvgId), mtype);
                                                    clone_newIDs.push(newid);
                                                    $(this).attr("id", newid)
                                                }
                                            });
                                            newStr = $(cloneElement).html();
                                            for (var i = 0; i < clone_oriIDs.length; i++) {
                                                newStr = replaceAll(newStr, clone_oriIDs[i], clone_newIDs[i])
                                            }
                                        }
                                    }
                                    $(cloneElement).html(newStr);
                                    var pNode = selectNode.parentNode;
                                    pNode.appendChild(cloneElement)
                                } else {
                                    var newStr;
                                    var cloneElement = selectNode.cloneNode(true);
                                    if (mDrawIDNameStyle == 1) {
                                        var rndNum = RandomNumBoth(0, 10000).toString();
                                        newGuid = rndNum + selNodeID
                                    } else {
                                        if (mDrawIDNameStyle == 2) {
                                            newGuid = MicroDraw_NewUniqueID($("#" + mDrawFlag_SvgId), selectCustomObjType)
                                        }
                                    }
                                    cloneElement.setAttribute("id", newGuid);
                                    if (mDrawIDNameStyle == 1) {
                                        newStr = $(cloneElement).html();
                                        newStr = replaceAll(newStr, ' id="', ' id="' + rndNum + "")
                                    } else {
                                        if (mDrawIDNameStyle == 2) {
                                            var cloneSVGidObjs = $(cloneElement).find("[id][mtype]");
                                            newStr = $(cloneElement).html();
                                            if (cloneSVGidObjs.length > 0) {
                                                var clone_oriIDs = [];
                                                var clone_newIDs = [];
                                                $.each(cloneSVGidObjs,
                                                function() {
                                                    with($(this)) {
                                                        var id = attr("id");
                                                        var mtype = attr("mtype")
                                                    }
                                                    if (!$.Micro.IsEmpty(id) && !$.Micro.IsEmpty(mtype)) {
                                                        clone_oriIDs.push(id);
                                                        var newid = MicroDraw_NewUniqueID($("#" + mDrawFlag_SvgId), mtype);
                                                        clone_newIDs.push(newid);
                                                        $(this).attr("id", newid)
                                                    }
                                                });
                                                newStr = replaceAll(newStr, selNodeID, newGuid);
                                                for (var i = 0; i < clone_oriIDs.length; i++) {
                                                    newStr = replaceAll(newStr, clone_oriIDs[i], clone_newIDs[i])
                                                }
                                            } else {
                                                newStr = replaceAll(newStr, selNodeID, newGuid)
                                            }
                                        }
                                    }
                                    $(cloneElement).html(newStr);
                                    var pNode = selectNode.parentNode;
                                    pNode.appendChild(cloneElement);
                                    var cloneframeRect;
                                    $.each($(cloneElement).find("[mtype]"),
                                    function() {
                                        var _this = $(this);
                                        if (mDrawIDNameStyle == 1) {
                                            var mlid = _this.attr("mlid");
                                            if (mlid != "") {
                                                mlid = rndNum + mlid;
                                                mlid = replaceAll(mlid, ",", ("," + rndNum));
                                                _this.attr("mlid", mlid)
                                            }
                                            var mrid = _this.attr("mrid");
                                            if (mrid != "") {
                                                mrid = rndNum + mrid;
                                                mrid = replaceAll(mrid, ",", ("," + rndNum));
                                                _this.attr("mrid", mrid)
                                            }
                                            var mtid = _this.attr("mtid");
                                            if (mtid != "") {
                                                mtid = rndNum + mtid;
                                                mtid = replaceAll(mtid, ",", ("," + rndNum));
                                                _this.attr("mtid", mtid)
                                            }
                                            var mbid = _this.attr("mbid");
                                            if (mbid != "") {
                                                mbid = rndNum + mbid;
                                                mbid = replaceAll(mbid, ",", ("," + rndNum));
                                                _this.attr("mbid", mbid)
                                            }
                                        }
                                        if (_this.attr("mtype") == "frameRect") {
                                            cloneframeRect = _this
                                        }
                                    });
                                    $.each($("#" + mDrawFlag_SvgId).find("[mwin]"),
                                    function(_index) {
                                        $(this).attr("mwin", "win" + (_index + 1))
                                    });
                                    if ($(cloneElement).attr("mtype") == "win") {
                                        MicroDraw_MoveFrameWinPostion([{
                                            win: $(cloneElement),
                                            x_dev: 50,
                                            y_dev: 50
                                        }]);
                                        MicroDraw_reflashGlassFlag();
                                        if (cloneframeRect.attr("mwall") == "Y") {
                                            var mwall = cloneframeRect.attr("mwall");
                                            var mgdpic = cloneframeRect.attr("mgdpic");
                                            var mwallid = MicroDraw_GUID();
                                            var x = 0;
                                            var y = 0;
                                            var mfill = mDrawWallColor;
                                            var mstroke = "#000000";
                                            var mstrokewidth = "1px";
                                            var mwallwidth = mDrawWallWidth;
                                            var mwallheight = mDrawWallHeight;
                                            var mwallrow = mDrawWallRow;
                                            var mwallrealwidth;
                                            var frameId = cloneframeRect.attr("id");
                                            x = $("#" + frameId + "_r1")[0].getAttribute("x");
                                            y = Number($("#" + frameId + "_r1")[0].getAttribute("y")) + Number($("#" + frameId + "_r1")[0].getAttribute("height"));
                                            mwallrealwidth = $("#" + frameId)[0].getAttribute("mwidth");
                                            MicroDraw_AddCustom_Wall(mwallid, x, y, mwallrealwidth, mfill, mwallwidth, mwallheight, mwallrow, frameId)
                                        }
                                        if (cloneframeRect.attr("mgdpic") == "Y") {
                                            MicroDraw_ShowCoordinate()
                                        }
                                        return true
                                    } else {
                                        if ($(cloneElement).attr("mtype") == mDrawFlag_WinArcs) {
                                            MicroDraw_MoveFrameWinPostion([{
                                                win: $(cloneElement),
                                                x_dev: 50,
                                                y_dev: 50
                                            }]);
                                            MicroDraw_reflashGlassFlag();
                                            MicroDraw_ShowCoordinateWinArcs($(cloneElement));
                                            mDrawCopyingObjId = "";
                                            return true
                                        }
                                    }
                                }
                                $("#" + newGuid + " text").each(function(i, o) {
                                    mtype = o.parentNode.getAttribute("mtype");
                                    if (mtype == mDrawFlag_Custom_text) {
                                        o.setAttribute("x", Number(o.getAttribute("x")) + 50);
                                        o.setAttribute("y", Number(o.getAttribute("y")) + 50)
                                    }
                                });
                                $("#" + newGuid + " rect").each(function(i, o) {
                                    mtype = o.parentNode.getAttribute("mtype");
                                    if (mtype == mDrawFlag_Custom_rect) {
                                        o.setAttribute("x", Number(o.getAttribute("x")) + 50);
                                        o.setAttribute("y", Number(o.getAttribute("y")) + 50)
                                    }
                                });
                                $("#" + newGuid + " circle").each(function(i, o) {
                                    mtype = o.parentNode.getAttribute("mtype");
                                    if (mtype == mDrawFlag_Custom_circle) {
                                        o.setAttribute("cx", Number(o.getAttribute("cx")) + 50);
                                        o.setAttribute("cy", Number(o.getAttribute("cy")) + 50)
                                    }
                                });
                                $("#" + newGuid + " line").each(function(i, o) {
                                    mtype = o.parentNode.getAttribute("mtype");
                                    if (mtype == mDrawFlag_Custom_line) {
                                        o.setAttribute("x1", Number(o.getAttribute("x1")) + 50);
                                        o.setAttribute("x2", Number(o.getAttribute("x2")) + 50)
                                    }
                                });
                                $("#" + newGuid + " polygon").each(function(i, o) {
                                    mtype = o.parentNode.getAttribute("mtype");
                                    if (mtype == mDrawFlag_Custom_polygon) {
                                        var mwidth = o.parentNode.getAttribute("mwidth");
                                        var mheight = o.parentNode.getAttribute("mheight");
                                        var points = o.getAttribute("points");
                                        points = replaceAll(points, " ", ",");
                                        var Arr = points.split(",");
                                        if (Number(mwidth) > 0 && Number(mheight) == 0) {
                                            Arr[1] = Number(Arr[1]) + 20;
                                            Arr[3] = Number(Arr[3]) + 20;
                                            Arr[5] = Number(Arr[5]) + 20;
                                            Arr[7] = Number(Arr[7]) + 20
                                        } else {
                                            if (Number(mwidth) == 0 && Number(mheight) > 0) {
                                                Arr[0] = Number(Arr[0]) + 20;
                                                Arr[2] = Number(Arr[2]) + 20;
                                                Arr[4] = Number(Arr[4]) + 20;
                                                Arr[6] = Number(Arr[6]) + 20
                                            } else {
                                                Arr[1] = Number(Arr[1]) + 20;
                                                Arr[3] = Number(Arr[3]) + 20;
                                                Arr[5] = Number(Arr[5]) + 20;
                                                Arr[7] = Number(Arr[7]) + 20
                                            }
                                        }
                                        o.setAttribute("points", Arr[0] + "," + Arr[1] + " " + Arr[2] + "," + Arr[3] + " " + Arr[4] + "," + Arr[5] + " " + Arr[6] + "," + Arr[7])
                                    }
                                });
                                $("#" + newGuid + " path").each(function(i, o) {
                                    mtype = o.parentNode.parentNode.getAttribute("mtype");
                                    if (mtype == mDrawFlag_Custom_arc) {
                                        var d = o.getAttribute("d");
                                        d = replaceAll(d, "M", "");
                                        d = replaceAll(d, " A ", ",");
                                        d = replaceAll(d, " ", ",");
                                        var x1, y1, x2, y2;
                                        var Arr = d.split(",");
                                        x1 = Arr[0];
                                        y1 = Arr[1];
                                        x2 = Arr[7];
                                        y2 = Arr[8];
                                        x1 = Number(x1) + Number(30);
                                        y1 = Number(y1) + Number(30);
                                        x2 = Number(x2) + Number(30);
                                        y2 = Number(y2) + Number(30);
                                        Arr[0] = x1;
                                        Arr[1] = y1;
                                        Arr[7] = x2;
                                        Arr[8] = y2;
                                        o.setAttributeNS(null, "d", "M" + Arr[0].toString() + " " + Arr[1].toString() + " A " + Arr[2].toString() + " " + Arr[3].toString() + "," + Arr[4].toString() + "," + Arr[5].toString() + "," + Arr[6].toString() + "," + Arr[7].toString() + " " + Arr[8].toString() + "")
                                    }
                                });
                                $("#" + newGuid + " line").each(function(i, o) {
                                    mtype = o.parentNode.getAttribute("mtype");
                                    if (mtype == mDrawFlag_Custom_ruler) {
                                        var pId = o.parentNode.getAttribute("id");
                                        if (o.id.indexOf("_l2") >= 0) {
                                            if (o.getAttribute("y1") == o.getAttribute("y2")) {
                                                var offsetX = 0;
                                                var offsetY = 20;
                                                var node = $("#" + pId + "_l1")[0];
                                                node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                                node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                                node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                                node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY));
                                                var node = $("#" + pId + "_l2")[0];
                                                node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                                node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                                node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                                node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY));
                                                var node = $("#" + pId + "_l3")[0];
                                                node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                                node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                                node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                                node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY));
                                                var node = $("#" + pId + "_t")[0];
                                                node.setAttribute("x", Number(node.getAttribute("x")) + Number(offsetX));
                                                node.setAttribute("y", Number(node.getAttribute("y")) + Number(offsetY))
                                            } else {
                                                if (o.getAttribute("x1") == o.getAttribute("x2")) {
                                                    var offsetX = 20;
                                                    var offsetY = 0;
                                                    var node = $("#" + pId + "_l1")[0];
                                                    node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                                    node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                                    node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                                    node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY));
                                                    var node = $("#" + pId + "_l2")[0];
                                                    node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                                    node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                                    node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                                    node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY));
                                                    var node = $("#" + pId + "_l3")[0];
                                                    node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                                    node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                                    node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                                    node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY));
                                                    var node = $("#" + pId + "_t")[0];
                                                    node.setAttribute("x", Number(node.getAttribute("x")) + Number(offsetX));
                                                    node.setAttribute("y", Number(node.getAttribute("y")) + Number(offsetY))
                                                } else {
                                                    var offsetX = 30;
                                                    var offsetY = 0;
                                                    var node = $("#" + pId + "_l1")[0];
                                                    node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                                    node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                                    node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                                    node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY));
                                                    var node = $("#" + pId + "_l2")[0];
                                                    node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                                    node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                                    node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                                    node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY));
                                                    var node = $("#" + pId + "_l3")[0];
                                                    node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                                    node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                                    node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                                    node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY));
                                                    var node = $("#" + pId + "_t")[0];
                                                    node.setAttribute("x", Number(node.getAttribute("x")) + Number(offsetX));
                                                    node.setAttribute("y", Number(node.getAttribute("y")) + Number(offsetY))
                                                }
                                            }
                                            var node = $("#" + pId + "_l1")[0];
                                            node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                            node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                            node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                            node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY));
                                            var node = $("#" + pId + "_l2")[0];
                                            node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                            node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                            node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                            node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY));
                                            var node = $("#" + pId + "_l3")[0];
                                            node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                            node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                            node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                            node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY));
                                            var node = $("#" + pId + "_t")[0];
                                            node.setAttribute("x", Number(node.getAttribute("x")) + Number(offsetX));
                                            node.setAttribute("y", Number(node.getAttribute("y")) + Number(offsetY))
                                        }
                                    }
                                });
                                $("#" + newGuid + " text").each(function(i, o) {
                                    mtype = o.parentNode.getAttribute("mtype");
                                    if (mtype == mDrawFlag_Glass || mtype == mDrawFlag_Pkc) {
                                        o.setAttribute("x", Number(o.getAttribute("x")) + 50);
                                        o.setAttribute("y", Number(o.getAttribute("y")) + 50);
                                        MicroDraw_reflashGlassFlag()
                                    }
                                });
                                $("#" + newGuid + " rect").each(function(i, o) {
                                    mtype = o.parentNode.getAttribute("mtype");
                                    if (mtype == mDrawFlag_Glass || mtype == mDrawFlag_Pkc) {
                                        o.setAttribute("x", Number(o.getAttribute("x")) + 50);
                                        o.setAttribute("y", Number(o.getAttribute("y")) + 50);
                                        MicroDraw_reflashGlassFlag()
                                    }
                                });
                                $("#" + newGuid + " line").each(function(i, o) {
                                    mtype = o.parentNode.getAttribute("mtype");
                                    if (mtype == mDrawFlag_Glass || mtype == mDrawFlag_Pkc) {
                                        o.setAttribute("x1", Number(o.getAttribute("x1")) + 50);
                                        o.setAttribute("x2", Number(o.getAttribute("x2")) + 50);
                                        o.setAttribute("y1", Number(o.getAttribute("y1")) + 50);
                                        o.setAttribute("y2", Number(o.getAttribute("y2")) + 50);
                                        MicroDraw_reflashGlassFlag()
                                    }
                                });
                                if (selectCustomObjType.substr(0, 3) == mDrawFlag_Tlc) {
                                    $("#" + newGuid + " text").each(function(i, o) {
                                        o.setAttribute("x", Number(o.getAttribute("x")) + 50);
                                        o.setAttribute("y", Number(o.getAttribute("y")) + 50)
                                    });
                                    $("#" + newGuid + " rect").each(function(i, o) {
                                        alert(o.id);
                                        o.setAttribute("x", Number(o.getAttribute("x")) + 50);
                                        o.setAttribute("y", Number(o.getAttribute("y")) + 50)
                                    });
                                    $("#" + newGuid + " line").each(function(i, o) {
                                        o.setAttribute("x1", Number(o.getAttribute("x1")) + 50);
                                        o.setAttribute("x2", Number(o.getAttribute("x2")) + 50);
                                        o.setAttribute("y1", Number(o.getAttribute("y1")) + 50);
                                        o.setAttribute("y2", Number(o.getAttribute("y2")) + 50)
                                    });
                                    MicroDraw_reflashGlassFlag()
                                }
                                if ($("#" + mDrawFlag_SvgId + " #" + newGuid).attr("mtype") == mDrawFlag_Custom_arc) {
                                    MicroDraw_DrawDiviArcKT(newGuid)
                                }
                                newControlList = newControlList + "," + newGuid
                            }
                            if (newControlList.substr(0, 1) == ",") {
                                newControlList = newControlList.substr(1)
                            }
                            var ls_newIdList = "";
                            var ls_newControlArr = newControlList.split(",");
                            for (i = 0; i < ls_newControlArr.length; i++) {
                                selectCustomObjId = ls_newControlArr[i];
                                selectCustomObjType = $("#" + selectCustomObjId)[0].getAttribute("mtype");
                                selectNode = $("#" + selectCustomObjId)[0];
                                if (selectCustomObjType == mDrawFlag_Custom_g) {
                                    $.each($("#" + selectCustomObjId).children(),
                                    function(i, c) {
                                        ls_newIdList = ls_newIdList + "," + c.id
                                    })
                                } else {
                                    ls_newIdList = ls_newIdList + "," + selectCustomObjId
                                }
                            }
                            if (ls_newIdList.substr(0, 1) == ",") {
                                ls_newIdList = ls_newIdList.substr(1)
                            }
                            mDrawCustomObjList = ls_newIdList;
                            MicroDraw_AddCustomControlPoint(mDrawCustomObjList);
                            mDrawCopyingObjId = ""
                        }
                    } else {
                        if (e.keyCode == 38 || e.keyCode == 40 || e.keyCode == 37 || e.keyCode == 39) {
                            var isWin = "N";
                            var mtype = "";
                            if ($("#" + mDrawCustomObjList).length > 0) {
                                mtype = $("#" + mDrawCustomObjList)[0].getAttribute("mtype")
                            }
                            if (isEmptyOrNull(mtype)) {
                                mtype = ""
                            }
                            if (mtype == mDrawFlag_Win || mtype == mDrawFlag_WinArcs) {
                                isWin = "Y"
                            }
                            if (isWin == "Y") {
                                var winId = mDrawCustomObjList;
                                if (e && e.keyCode == 38) {
                                    moveDir = "T"
                                } else {
                                    if (e && e.keyCode == 40) {
                                        moveDir = "B"
                                    } else {
                                        if (e && e.keyCode == 37) {
                                            moveDir = "L"
                                        } else {
                                            if (e && e.keyCode == 39) {
                                                moveDir = "R"
                                            }
                                        }
                                    }
                                }
                                var offsetX = 0;
                                var offsetY = 0;
                                switch (moveDir) {
                                case "T":
                                    offsetX = 0;
                                    offsetY = -1;
                                    break;
                                case "B":
                                    offsetX = 0;
                                    offsetY = 1;
                                    break;
                                case "L":
                                    offsetX = -1;
                                    offsetY = 0;
                                    break;
                                case "R":
                                    offsetX = 1;
                                    offsetY = 0;
                                    break
                                }
                                MicroDraw_MoveFrameWinPostion([{
                                    win: $("#" + mDrawFlag_SvgId + " #" + winId),
                                    x_dev: offsetX,
                                    y_dev: offsetY
                                }]);
                                MicroDraw_ShowSizeProperty();
                                MicroDraw_ShowCoordinate();
                                MicroDraw_CombWinSetPos();
                                retVal = false
                            } else {
                                var selectCustomObjId = "";
                                var selectCustomObjType = "";
                                var moveDir = "";
                                if (mDrawCustomObjList.length > 0) {
                                    if (!isEmptyOrNull(mDrawPolygonPointMoveInfo)) {
                                        var ArrInfo = mDrawPolygonPointMoveInfo.split(",");
                                        var selectObjId = ArrInfo[0] + "_p";
                                        var mmoving = ArrInfo[1];
                                        var selectObjNode = $("#" + selectObjId)[0];
                                        if (e && e.keyCode == 38) {
                                            moveDir = "T"
                                        } else {
                                            if (e && e.keyCode == 40) {
                                                moveDir = "B"
                                            } else {
                                                if (e && e.keyCode == 37) {
                                                    moveDir = "L"
                                                } else {
                                                    if (e && e.keyCode == 39) {
                                                        moveDir = "R"
                                                    }
                                                }
                                            }
                                        }
                                        var offsetX = 0;
                                        var offsetY = 0;
                                        switch (moveDir) {
                                        case "T":
                                            offsetX = 0;
                                            offsetY = -1;
                                            break;
                                        case "B":
                                            offsetX = 0;
                                            offsetY = 1;
                                            break;
                                        case "L":
                                            offsetX = -1;
                                            offsetY = 0;
                                            break;
                                        case "R":
                                            offsetX = 1;
                                            offsetY = 0;
                                            break
                                        }
                                        var x1, y1, x2, y2, x3, y3, x4, y4;
                                        var points = selectObjNode.getAttribute("points");
                                        var Arr = points.split(" ");
                                        var subArr;
                                        subArr = Arr[0].split(",");
                                        x1 = subArr[0];
                                        y1 = subArr[1];
                                        subArr = Arr[1].split(",");
                                        x2 = subArr[0];
                                        y2 = subArr[1];
                                        subArr = Arr[2].split(",");
                                        x3 = subArr[0];
                                        y3 = subArr[1];
                                        subArr = Arr[3].split(",");
                                        x4 = subArr[0];
                                        y4 = subArr[1];
                                        switch (mmoving) {
                                        case "lt":
                                            x1 = Number(x1) + Number(offsetX);
                                            y1 = Number(y1) + Number(offsetY);
                                            break;
                                        case "rt":
                                            x2 = Number(x2) + Number(offsetX);
                                            y2 = Number(y2) + Number(offsetY);
                                            break;
                                        case "rb":
                                            x3 = Number(x3) + Number(offsetX);
                                            y3 = Number(y3) + Number(offsetY);
                                            break;
                                        case "lb":
                                            x4 = Number(x4) + Number(offsetX);
                                            y4 = Number(y4) + Number(offsetY);
                                            break
                                        }
                                        selectObjNode.setAttribute("points", x1 + "," + y1 + " " + x2 + "," + y2 + " " + x3 + "," + y3 + " " + x4 + "," + y4);
                                        mDrawCustomObjList = ArrInfo[0];
                                        retVal = false
                                    } else {
                                        var ls_ObjIdArr = mDrawCustomObjList.split(",");
                                        for (i = 0; i < ls_ObjIdArr.length; i++) {
                                            selectCustomObjId = ls_ObjIdArr[i];
                                            selectCustomObjType = $("#" + selectCustomObjId)[0].getAttribute("mtype");
                                            if (e && e.keyCode == 38) {
                                                moveDir = "T"
                                            } else {
                                                if (e && e.keyCode == 40) {
                                                    moveDir = "B"
                                                } else {
                                                    if (e && e.keyCode == 37) {
                                                        moveDir = "L"
                                                    } else {
                                                        if (e && e.keyCode == 39) {
                                                            moveDir = "R"
                                                        }
                                                    }
                                                }
                                            }
                                            var offsetX = 0;
                                            var offsetY = 0;
                                            switch (moveDir) {
                                            case "T":
                                                offsetX = 0;
                                                offsetY = -1;
                                                break;
                                            case "B":
                                                offsetX = 0;
                                                offsetY = 1;
                                                break;
                                            case "L":
                                                offsetX = -1;
                                                offsetY = 0;
                                                break;
                                            case "R":
                                                offsetX = 1;
                                                offsetY = 0;
                                                break
                                            }
                                            if (selectCustomObjType == mDrawFlag_Custom_text) {
                                                var node = $("#" + selectCustomObjId + "_t")[0]
                                            } else {
                                                if (selectCustomObjType == mDrawFlag_Custom_rect) {
                                                    var node = $("#" + selectCustomObjId + "_r")[0]
                                                } else {
                                                    if (selectCustomObjType == mDrawFlag_Custom_polygon) {
                                                        var node = $("#" + selectCustomObjId + "_p")[0]
                                                    } else {
                                                        if (selectCustomObjType == mDrawFlag_Custom_arc) {
                                                            var node = $("#" + selectCustomObjId)[0]
                                                        } else {
                                                            if (selectCustomObjType == mDrawFlag_Custom_circle) {
                                                                var node = $("#" + selectCustomObjId + "_c")[0]
                                                            } else {
                                                                if (selectCustomObjType == mDrawFlag_Custom_line) {
                                                                    var node = $("#" + selectCustomObjId + "_l")[0]
                                                                } else {
                                                                    if (selectCustomObjType == mDrawFlag_Custom_ruler) {
                                                                        var node = $("#" + selectCustomObjId)[0]
                                                                    } else {
                                                                        if (selectCustomObjType == mDrawFlag_Glass) {
                                                                            var node = $("#" + selectCustomObjId)[0]
                                                                        } else {
                                                                            if (selectCustomObjType == mDrawFlag_Pkc) {
                                                                                var node = $("#" + selectCustomObjId)[0]
                                                                            } else {
                                                                                if (selectCustomObjType == mDrawFlag_Dkc) {
                                                                                    var node = $("#" + selectCustomObjId)[0]
                                                                                } else {
                                                                                    if (selectCustomObjType.substring(0, 3) == mDrawFlag_Tlc) {
                                                                                        var node = $("#" + selectCustomObjId)[0]
                                                                                    } else {
                                                                                        if (selectCustomObjType == mDrawFlag_Custom_wall) {
                                                                                            var node = $("#" + selectCustomObjId)[0]
                                                                                        } else {
                                                                                            if (selectCustomObjType == mDrawFlag_Custom_impSvg) {
                                                                                                var node = $("#" + selectCustomObjId + "_mImpSvgId")[0]
                                                                                            } else {
                                                                                                if (selectCustomObjType == mDrawFlag_Custom_CornerMaterial) {
                                                                                                    var node = $("#" + selectCustomObjId + "_rect")[0]
                                                                                                } else {
                                                                                                    if (selectCustomObjType == mDrawFlag_Custom_CornerMaterial_h) {
                                                                                                        var node = $("#" + selectCustomObjId + "_rect")[0]
                                                                                                    } else {}
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            if (! (Number(offsetX) == 0 && Number(offsetY) == 0)) {
                                                if (selectCustomObjType == mDrawFlag_Custom_text || selectCustomObjType == mDrawFlag_Custom_rect || selectCustomObjType == mDrawFlag_Custom_CornerMaterial || selectCustomObjType == mDrawFlag_Custom_CornerMaterial_h) {
                                                    node.setAttribute("x", Number(node.getAttribute("x")) + Number(offsetX));
                                                    node.setAttribute("y", Number(node.getAttribute("y")) + Number(offsetY))
                                                } else {
                                                    if (selectCustomObjType == mDrawFlag_Custom_polygon) {
                                                        var x1, y1, x2, y2, x3, y3, x4, y4;
                                                        var points = node.getAttribute("points");
                                                        var Arr = points.split(" ");
                                                        var subArr;
                                                        subArr = Arr[0].split(",");
                                                        x1 = subArr[0];
                                                        y1 = subArr[1];
                                                        subArr = Arr[1].split(",");
                                                        x2 = subArr[0];
                                                        y2 = subArr[1];
                                                        subArr = Arr[2].split(",");
                                                        x3 = subArr[0];
                                                        y3 = subArr[1];
                                                        subArr = Arr[3].split(",");
                                                        x4 = subArr[0];
                                                        y4 = subArr[1];
                                                        x1 = Number(x1) + Number(offsetX);
                                                        x2 = Number(x2) + Number(offsetX);
                                                        x3 = Number(x3) + Number(offsetX);
                                                        x4 = Number(x4) + Number(offsetX);
                                                        y1 = Number(y1) + Number(offsetY);
                                                        y2 = Number(y2) + Number(offsetY);
                                                        y3 = Number(y3) + Number(offsetY);
                                                        y4 = Number(y4) + Number(offsetY);
                                                        node.setAttribute("points", x1 + "," + y1 + " " + x2 + "," + y2 + " " + x3 + "," + y3 + " " + x4 + "," + y4)
                                                    } else {
                                                        if (selectCustomObjType == mDrawFlag_Custom_arc) {
                                                            var nodeId = node.getAttribute("id");
                                                            var nodeP1 = $("#" + nodeId + "_p1")[0];
                                                            var nodeP2 = $("#" + nodeId + "_p2")[0];
                                                            var d1 = nodeP1.getAttribute("d");
                                                            var d2 = nodeP2.getAttribute("d");
                                                            d1 = replaceAll(d1, "M", "");
                                                            d1 = replaceAll(d1, " A ", ",");
                                                            d1 = replaceAll(d1, " ", ",");
                                                            var Arr1 = d1.split(",");
                                                            d2 = replaceAll(d2, "M", "");
                                                            d2 = replaceAll(d2, " A ", ",");
                                                            d2 = replaceAll(d2, " ", ",");
                                                            var Arr2 = d2.split(",");
                                                            Arr1[0] = Number(Arr1[0]) + Number(offsetX);
                                                            Arr1[1] = Number(Arr1[1]) + Number(offsetY);
                                                            Arr1[7] = Number(Arr1[7]) + Number(offsetX);
                                                            Arr1[8] = Number(Arr1[8]) + Number(offsetY);
                                                            Arr2[0] = Number(Arr2[0]) + Number(offsetX);
                                                            Arr2[1] = Number(Arr2[1]) + Number(offsetY);
                                                            Arr2[7] = Number(Arr2[7]) + Number(offsetX);
                                                            Arr2[8] = Number(Arr2[8]) + Number(offsetY);
                                                            nodeP1.setAttribute("d", "M" + Arr1[0].toString() + " " + Arr1[1].toString() + " A " + Arr1[2].toString() + " " + Arr1[3].toString() + "," + Arr1[4].toString() + "," + Arr1[5].toString() + "," + Arr1[6].toString() + "," + Arr1[7].toString() + " " + Arr1[8].toString() + "");
                                                            nodeP2.setAttribute("d", "M" + Arr2[0].toString() + " " + Arr2[1].toString() + " A " + Arr2[2].toString() + " " + Arr2[3].toString() + "," + Arr2[4].toString() + "," + Arr2[5].toString() + "," + Arr2[6].toString() + "," + Arr2[7].toString() + " " + Arr2[8].toString() + "");
                                                            mDrawFlag_Custom_arc_bf;
                                                            $.each($("#" + nodeId + " rect"),
                                                            function(i, o) {
                                                                o.setAttribute("x", Arr1[0]);
                                                                o.setAttribute("y", Arr1[1])
                                                            })
                                                        } else {
                                                            if (selectCustomObjType == mDrawFlag_Custom_line) {
                                                                node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                                                node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                                                node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                                                node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY))
                                                            } else {
                                                                if (selectCustomObjType == mDrawFlag_Custom_circle) {
                                                                    node.setAttribute("cx", Number(node.getAttribute("cx")) + Number(offsetX));
                                                                    node.setAttribute("cy", Number(node.getAttribute("cy")) + Number(offsetY))
                                                                } else {
                                                                    if (selectCustomObjType == mDrawFlag_Custom_ruler) {
                                                                        var nodeId = node.getAttribute("id");
                                                                        var nodeL1 = $("#" + nodeId + "_l1")[0];
                                                                        var nodeL2 = $("#" + nodeId + "_l2")[0];
                                                                        var nodeL3 = $("#" + nodeId + "_l3")[0];
                                                                        var nodeTxt = $("#" + nodeId + "_t")[0];
                                                                        nodeL1.setAttribute("x1", Number(nodeL1.getAttribute("x1")) + Number(offsetX));
                                                                        nodeL1.setAttribute("y1", Number(nodeL1.getAttribute("y1")) + Number(offsetY));
                                                                        nodeL1.setAttribute("x2", Number(nodeL1.getAttribute("x2")) + Number(offsetX));
                                                                        nodeL1.setAttribute("y2", Number(nodeL1.getAttribute("y2")) + Number(offsetY));
                                                                        nodeL2.setAttribute("x1", Number(nodeL2.getAttribute("x1")) + Number(offsetX));
                                                                        nodeL2.setAttribute("y1", Number(nodeL2.getAttribute("y1")) + Number(offsetY));
                                                                        nodeL2.setAttribute("x2", Number(nodeL2.getAttribute("x2")) + Number(offsetX));
                                                                        nodeL2.setAttribute("y2", Number(nodeL2.getAttribute("y2")) + Number(offsetY));
                                                                        nodeL3.setAttribute("x1", Number(nodeL3.getAttribute("x1")) + Number(offsetX));
                                                                        nodeL3.setAttribute("y1", Number(nodeL3.getAttribute("y1")) + Number(offsetY));
                                                                        nodeL3.setAttribute("x2", Number(nodeL3.getAttribute("x2")) + Number(offsetX));
                                                                        nodeL3.setAttribute("y2", Number(nodeL3.getAttribute("y2")) + Number(offsetY));
                                                                        nodeTxt.setAttribute("x", Number(nodeTxt.getAttribute("x")) + Number(offsetX));
                                                                        nodeTxt.setAttribute("y", Number(nodeTxt.getAttribute("y")) + Number(offsetY))
                                                                    } else {
                                                                        if (selectCustomObjType == mDrawFlag_Glass) {
                                                                            var nodeId = node.getAttribute("id");
                                                                            var node_r1 = $("#" + nodeId + "_r1")[0];
                                                                            var node_r2 = $("#" + nodeId + "_r2")[0];
                                                                            var node_t1 = $("#" + nodeId + "_t1")[0];
                                                                            var node_t2 = $("#" + nodeId + "_t2")[0];
                                                                            var node_t3 = $("#" + nodeId + "_t3")[0];
                                                                            var node_t4 = $("#" + nodeId + "_t4")[0];
                                                                            var node_l1 = $("#" + nodeId + "_l1")[0];
                                                                            var node_l2 = $("#" + nodeId + "_l2")[0];
                                                                            var node_l3 = $("#" + nodeId + "_l3")[0];
                                                                            node_r1.setAttribute("x", Number(node_r1.getAttribute("x")) + Number(offsetX));
                                                                            node_r1.setAttribute("y", Number(node_r1.getAttribute("y")) + Number(offsetY));
                                                                            node_r2.setAttribute("x", Number(node_r2.getAttribute("x")) + Number(offsetX));
                                                                            node_r2.setAttribute("y", Number(node_r2.getAttribute("y")) + Number(offsetY));
                                                                            node_t1.setAttribute("x1", Number(node_t1.getAttribute("x1")) + Number(offsetX));
                                                                            node_t1.setAttribute("y1", Number(node_t1.getAttribute("y1")) + Number(offsetY));
                                                                            node_t1.setAttribute("x2", Number(node_t1.getAttribute("x2")) + Number(offsetX));
                                                                            node_t1.setAttribute("y2", Number(node_t1.getAttribute("y2")) + Number(offsetY));
                                                                            node_t2.setAttribute("x1", Number(node_t2.getAttribute("x1")) + Number(offsetX));
                                                                            node_t2.setAttribute("y1", Number(node_t2.getAttribute("y1")) + Number(offsetY));
                                                                            node_t2.setAttribute("x2", Number(node_t2.getAttribute("x2")) + Number(offsetX));
                                                                            node_t2.setAttribute("y2", Number(node_t2.getAttribute("y2")) + Number(offsetY));
                                                                            node_t3.setAttribute("x1", Number(node_t3.getAttribute("x1")) + Number(offsetX));
                                                                            node_t3.setAttribute("y1", Number(node_t3.getAttribute("y1")) + Number(offsetY));
                                                                            node_t3.setAttribute("x2", Number(node_t3.getAttribute("x2")) + Number(offsetX));
                                                                            node_t3.setAttribute("y2", Number(node_t3.getAttribute("y2")) + Number(offsetY));
                                                                            node_t4.setAttribute("x1", Number(node_t4.getAttribute("x1")) + Number(offsetX));
                                                                            node_t4.setAttribute("y1", Number(node_t4.getAttribute("y1")) + Number(offsetY));
                                                                            node_t4.setAttribute("x2", Number(node_t4.getAttribute("x2")) + Number(offsetX));
                                                                            node_t4.setAttribute("y2", Number(node_t4.getAttribute("y2")) + Number(offsetY));
                                                                            node_l1.setAttribute("x1", Number(node_l1.getAttribute("x1")) + Number(offsetX));
                                                                            node_l1.setAttribute("y1", Number(node_l1.getAttribute("y1")) + Number(offsetY));
                                                                            node_l1.setAttribute("x2", Number(node_l1.getAttribute("x2")) + Number(offsetX));
                                                                            node_l1.setAttribute("y2", Number(node_l1.getAttribute("y2")) + Number(offsetY));
                                                                            node_l2.setAttribute("x1", Number(node_l2.getAttribute("x1")) + Number(offsetX));
                                                                            node_l2.setAttribute("y1", Number(node_l2.getAttribute("y1")) + Number(offsetY));
                                                                            node_l2.setAttribute("x2", Number(node_l2.getAttribute("x2")) + Number(offsetX));
                                                                            node_l2.setAttribute("y2", Number(node_l2.getAttribute("y2")) + Number(offsetY));
                                                                            node_l3.setAttribute("x1", Number(node_l3.getAttribute("x1")) + Number(offsetX));
                                                                            node_l3.setAttribute("y1", Number(node_l3.getAttribute("y1")) + Number(offsetY));
                                                                            node_l3.setAttribute("x2", Number(node_l3.getAttribute("x2")) + Number(offsetX));
                                                                            node_l3.setAttribute("y2", Number(node_l3.getAttribute("y2")) + Number(offsetY));
                                                                            var ytThick = Number(mDrawSvgViewBox * mDrawThickYt);
                                                                            var fanThick = Number(mDrawSvgViewBox * mDrawThickFan);
                                                                            var node_txtr = $("#" + nodeId + "_txtr")[0];
                                                                            var node_txt = $("#" + nodeId + "_txt")[0];
                                                                            if (!isEmptyOrNull(node_txtr)) {
                                                                                node_txtr.setAttribute("x", Number(node_txtr.getAttribute("x")) + Number(offsetX));
                                                                                node_txtr.setAttribute("y", Number(node_txtr.getAttribute("y")) + Number(offsetY));
                                                                                node_txt.setAttribute("x", Number(node_txt.getAttribute("x")) + Number(offsetX));
                                                                                node_txt.setAttribute("y", Number(node_txt.getAttribute("y")) + Number(offsetY))
                                                                            }
                                                                        } else {
                                                                            if (selectCustomObjType == mDrawFlag_Pkc) {
                                                                                var nodeId = node.getAttribute("id");
                                                                                var node_r1 = $("#" + nodeId + "_r1")[0];
                                                                                var node_r2 = $("#" + nodeId + "_r2")[0];
                                                                                var node_r3 = $("#" + nodeId + "_r3")[0];
                                                                                var node_l1 = $("#" + nodeId + "_l1")[0];
                                                                                var node_l2 = $("#" + nodeId + "_l2")[0];
                                                                                var node_l3 = $("#" + nodeId + "_l3")[0];
                                                                                var node_l4 = $("#" + nodeId + "_l4")[0];
                                                                                var node_y1 = $("#" + nodeId + "_y1")[0];
                                                                                var node_y2 = $("#" + nodeId + "_y2")[0];
                                                                                var node_y3 = $("#" + nodeId + "_y3")[0];
                                                                                var node_y4 = $("#" + nodeId + "_y4")[0];
                                                                                var node_f1 = $("#" + nodeId + "_f1")[0];
                                                                                var node_f2 = $("#" + nodeId + "_f2")[0];
                                                                                var node_f3 = $("#" + nodeId + "_f3")[0];
                                                                                var node_f4 = $("#" + nodeId + "_f4")[0];
                                                                                var node_h1 = $("#" + nodeId + "_h1")[0];
                                                                                var node_h2 = $("#" + nodeId + "_h2")[0];
                                                                                node_r1.setAttribute("x", Number(node_r1.getAttribute("x")) + Number(offsetX));
                                                                                node_r1.setAttribute("y", Number(node_r1.getAttribute("y")) + Number(offsetY));
                                                                                node_r2.setAttribute("x", Number(node_r2.getAttribute("x")) + Number(offsetX));
                                                                                node_r2.setAttribute("y", Number(node_r2.getAttribute("y")) + Number(offsetY));
                                                                                node_r3.setAttribute("x", Number(node_r3.getAttribute("x")) + Number(offsetX));
                                                                                node_r3.setAttribute("y", Number(node_r3.getAttribute("y")) + Number(offsetY));
                                                                                node_l1.setAttribute("x1", Number(node_l1.getAttribute("x1")) + Number(offsetX));
                                                                                node_l1.setAttribute("y1", Number(node_l1.getAttribute("y1")) + Number(offsetY));
                                                                                node_l1.setAttribute("x2", Number(node_l1.getAttribute("x2")) + Number(offsetX));
                                                                                node_l1.setAttribute("y2", Number(node_l1.getAttribute("y2")) + Number(offsetY));
                                                                                node_l2.setAttribute("x1", Number(node_l2.getAttribute("x1")) + Number(offsetX));
                                                                                node_l2.setAttribute("y1", Number(node_l2.getAttribute("y1")) + Number(offsetY));
                                                                                node_l2.setAttribute("x2", Number(node_l2.getAttribute("x2")) + Number(offsetX));
                                                                                node_l2.setAttribute("y2", Number(node_l2.getAttribute("y2")) + Number(offsetY));
                                                                                node_l3.setAttribute("x1", Number(node_l3.getAttribute("x1")) + Number(offsetX));
                                                                                node_l3.setAttribute("y1", Number(node_l3.getAttribute("y1")) + Number(offsetY));
                                                                                node_l3.setAttribute("x2", Number(node_l3.getAttribute("x2")) + Number(offsetX));
                                                                                node_l3.setAttribute("y2", Number(node_l3.getAttribute("y2")) + Number(offsetY));
                                                                                node_l4.setAttribute("x1", Number(node_l4.getAttribute("x1")) + Number(offsetX));
                                                                                node_l4.setAttribute("y1", Number(node_l4.getAttribute("y1")) + Number(offsetY));
                                                                                node_l4.setAttribute("x2", Number(node_l4.getAttribute("x2")) + Number(offsetX));
                                                                                node_l4.setAttribute("y2", Number(node_l4.getAttribute("y2")) + Number(offsetY));
                                                                                node_y1.setAttribute("x1", Number(node_y1.getAttribute("x1")) + Number(offsetX));
                                                                                node_y1.setAttribute("y1", Number(node_y1.getAttribute("y1")) + Number(offsetY));
                                                                                node_y1.setAttribute("x2", Number(node_y1.getAttribute("x2")) + Number(offsetX));
                                                                                node_y1.setAttribute("y2", Number(node_y1.getAttribute("y2")) + Number(offsetY));
                                                                                node_y2.setAttribute("x1", Number(node_y2.getAttribute("x1")) + Number(offsetX));
                                                                                node_y2.setAttribute("y1", Number(node_y2.getAttribute("y1")) + Number(offsetY));
                                                                                node_y2.setAttribute("x2", Number(node_y2.getAttribute("x2")) + Number(offsetX));
                                                                                node_y2.setAttribute("y2", Number(node_y2.getAttribute("y2")) + Number(offsetY));
                                                                                node_y3.setAttribute("x1", Number(node_y3.getAttribute("x1")) + Number(offsetX));
                                                                                node_y3.setAttribute("y1", Number(node_y3.getAttribute("y1")) + Number(offsetY));
                                                                                node_y3.setAttribute("x2", Number(node_y3.getAttribute("x2")) + Number(offsetX));
                                                                                node_y3.setAttribute("y2", Number(node_y3.getAttribute("y2")) + Number(offsetY));
                                                                                node_y4.setAttribute("x1", Number(node_y4.getAttribute("x1")) + Number(offsetX));
                                                                                node_y4.setAttribute("y1", Number(node_y4.getAttribute("y1")) + Number(offsetY));
                                                                                node_y4.setAttribute("x2", Number(node_y4.getAttribute("x2")) + Number(offsetX));
                                                                                node_y4.setAttribute("y2", Number(node_y4.getAttribute("y2")) + Number(offsetY));
                                                                                node_f1.setAttribute("x1", Number(node_f1.getAttribute("x1")) + Number(offsetX));
                                                                                node_f1.setAttribute("y1", Number(node_f1.getAttribute("y1")) + Number(offsetY));
                                                                                node_f1.setAttribute("x2", Number(node_f1.getAttribute("x2")) + Number(offsetX));
                                                                                node_f1.setAttribute("y2", Number(node_f1.getAttribute("y2")) + Number(offsetY));
                                                                                node_f2.setAttribute("x1", Number(node_f2.getAttribute("x1")) + Number(offsetX));
                                                                                node_f2.setAttribute("y1", Number(node_f2.getAttribute("y1")) + Number(offsetY));
                                                                                node_f2.setAttribute("x2", Number(node_f2.getAttribute("x2")) + Number(offsetX));
                                                                                node_f2.setAttribute("y2", Number(node_f2.getAttribute("y2")) + Number(offsetY));
                                                                                node_f3.setAttribute("x1", Number(node_f3.getAttribute("x1")) + Number(offsetX));
                                                                                node_f3.setAttribute("y1", Number(node_f3.getAttribute("y1")) + Number(offsetY));
                                                                                node_f3.setAttribute("x2", Number(node_f3.getAttribute("x2")) + Number(offsetX));
                                                                                node_f3.setAttribute("y2", Number(node_f3.getAttribute("y2")) + Number(offsetY));
                                                                                node_f4.setAttribute("x1", Number(node_f4.getAttribute("x1")) + Number(offsetX));
                                                                                node_f4.setAttribute("y1", Number(node_f4.getAttribute("y1")) + Number(offsetY));
                                                                                node_f4.setAttribute("x2", Number(node_f4.getAttribute("x2")) + Number(offsetX));
                                                                                node_f4.setAttribute("y2", Number(node_f4.getAttribute("y2")) + Number(offsetY));
                                                                                node_h1.setAttribute("x", Number(node_h1.getAttribute("x")) + Number(offsetX));
                                                                                node_h1.setAttribute("y", Number(node_h1.getAttribute("y")) + Number(offsetY));
                                                                                node_h2.setAttribute("x", Number(node_h2.getAttribute("x")) + Number(offsetX));
                                                                                node_h2.setAttribute("y", Number(node_h2.getAttribute("y")) + Number(offsetY));
                                                                                var ytThick = Number(mDrawSvgViewBox * mDrawThickYt);
                                                                                var fanThick = Number(mDrawSvgViewBox * mDrawThickFan);
                                                                                var node_txtr = $("#" + nodeId + "_txtr")[0];
                                                                                var node_txt = $("#" + nodeId + "_txt")[0];
                                                                                if (!isEmptyOrNull(node_txtr)) {
                                                                                    node_txtr.setAttribute("x", Number(node_txtr.getAttribute("x")) + Number(offsetX));
                                                                                    node_txtr.setAttribute("y", Number(node_txtr.getAttribute("y")) + Number(offsetY));
                                                                                    node_txt.setAttribute("x", Number(node_txt.getAttribute("x")) + Number(offsetX));
                                                                                    node_txt.setAttribute("y", Number(node_txt.getAttribute("y")) + Number(offsetY))
                                                                                }
                                                                            } else {
                                                                                if (selectCustomObjType == mDrawFlag_Dkc) {
                                                                                    MicroDraw_dkc_resize(selectCustomObjId, offsetX, offsetY, 0, 0)
                                                                                } else {
                                                                                    if (selectCustomObjType.substring(0, 3) == mDrawFlag_Tlc) {
                                                                                        MicroDraw_tlc_resize(selectCustomObjId, offsetX, offsetY, 0, 0)
                                                                                    } else {
                                                                                        if (selectCustomObjType == mDrawFlag_Custom_wall) {
                                                                                            var nodeId = node.getAttribute("id");
                                                                                            var nodeRect = $("#" + nodeId + "_r")[0];
                                                                                            nodeRect.setAttribute("x", Number(nodeRect.getAttribute("x")) + Number(offsetX));
                                                                                            nodeRect.setAttribute("y", Number(nodeRect.getAttribute("y")) + Number(offsetY));
                                                                                            $("#" + nodeId + " line").each(function(j, ln) {
                                                                                                ln.setAttribute("x1", Number(ln.getAttribute("x1")) + Number(offsetX));
                                                                                                ln.setAttribute("x2", Number(ln.getAttribute("x2")) + Number(offsetX));
                                                                                                ln.setAttribute("y1", Number(ln.getAttribute("y1")) + Number(offsetY));
                                                                                                ln.setAttribute("y2", Number(ln.getAttribute("y2")) + Number(offsetY))
                                                                                            })
                                                                                        } else {
                                                                                            if (selectCustomObjType == mDrawFlag_Custom_impSvg) {
                                                                                                var nodeId = selectCustomObjId;
                                                                                                var nodeSvgId = node.getAttribute("id");
                                                                                                var nodeSvgBackgroundId = selectCustomObjId + "_mImpSvgBackGround";
                                                                                                $("#" + nodeId)[0].setAttribute("moffsetx", Number($("#" + nodeId)[0].getAttribute("moffsetx")) + Number(offsetX));
                                                                                                $("#" + nodeId)[0].setAttribute("moffsety", Number($("#" + nodeId)[0].getAttribute("moffsety")) + Number(offsetY));
                                                                                                var mscale = $("#" + nodeId)[0].getAttribute("mscale");
                                                                                                var mrotate = $("#" + nodeId)[0].getAttribute("mrotate");
                                                                                                var morigx = $("#" + nodeId)[0].getAttribute("morigx");
                                                                                                var morigy = $("#" + nodeId)[0].getAttribute("morigy");
                                                                                                var moffsetx = $("#" + nodeId)[0].getAttribute("moffsetx");
                                                                                                var moffsety = $("#" + nodeId)[0].getAttribute("moffsety");
                                                                                                var mscalex = "0";
                                                                                                var mscaley = "0";
                                                                                                if (mscale.indexOf(" ") > 0) {
                                                                                                    mscalex = mscale.substr(0, mscale.indexOf(" "));
                                                                                                    mscaley = mscale.substr(mscale.indexOf(" ") + 1)
                                                                                                } else {
                                                                                                    mscalex = mscale;
                                                                                                    mscaley = mscale
                                                                                                }
                                                                                                $("#" + nodeSvgId)[0].setAttribute("transform", "scale(" + mscale + ") rotate(" + mrotate + " " + morigx + " " + morigy + ") translate(" + (Number(moffsetx) / Number(mscalex)).toString() + ", " + (Number(moffsety) / Number(mscaley)).toString() + ")");
                                                                                                $("#" + nodeSvgBackgroundId)[0].setAttribute("x", Number($("#" + nodeSvgBackgroundId)[0].getAttribute("x")) + Number(offsetX));
                                                                                                $("#" + nodeSvgBackgroundId)[0].setAttribute("y", Number($("#" + nodeSvgBackgroundId)[0].getAttribute("y")) + Number(offsetY))
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                retVal = false
                                            } else {
                                                retVal = true
                                            }
                                        }
                                    }
                                }
                                MicroDraw_AddCustomControlPoint(mDrawCustomObjList);
                                $("[mtype='" + mDrawFlag_Custom_arc + "']").each(function(i, o) {
                                    MicroDraw_Redraw(o.id);
                                    MicroDraw_AutoRuler(o.id)
                                })
                            }
                        } else {
                            retVal = true
                        }
                    }
                }
            }
        }
    } catch(evt) {
        console.clear();
        return retVal
    }
    return retVal
}
function MicroDraw_Frame_ClickAddRect(S, F, I, H) {
    $("[mselected=1]").attr("mselected", 0);
    mDrawSelectObjId = "";
    var B = document.getElementById(S);
    var A;
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
        B = $("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]')[0]
    }
    var G = 0;
    G = MicroDraw_getTagMaxVal($("#" + S), "mwin", "win");
    MicroDraw_StepRecord();
    var Q = mDrawFlag_Win + MicroDraw_GUID();
    var N = MicroDraw_GUID();
    var J = 150 * mDrawSvgViewBox;
    var K = 50 * mDrawSvgViewBox;
    var P = 0;
    var D = 0;
    P = (F / 1000) * mDrawPixelPerM;
    D = (I / 1000) * mDrawPixelPerM;
    var C = document.createElementNS(mDrawSvgNS, "g");
    var E = document.createElementNS(mDrawSvgNS, "g");
    var M = "Y";
    if (!isEmptyOrNull(mPublicOptionList)) {
        for (i = 0; i < mPublicOptionList.length; i++) {
            if (mPublicOptionList[i].c_name.toString() == "是否显示轨道图") {
                M = mPublicOptionList[i].c_value.toString();
                break
            }
        }
    }
    C.setAttributeNS(null, "id", Q);
    C.setAttributeNS(null, "mtype", mDrawFlag_Win);
    C.setAttributeNS(null, "mwin", mDrawFlag_Win + (Number(G) + 1).toString());
    E.setAttributeNS(null, "id", N);
    E.setAttributeNS(null, "mtype", mDrawFlag_FrameRect);
    E.setAttributeNS(null, "mpjstyle", H);
    E.setAttributeNS(null, "mwidth", F);
    E.setAttributeNS(null, "mheight", I);
    E.setAttributeNS(null, "mlid", "");
    E.setAttributeNS(null, "mrid", "");
    E.setAttributeNS(null, "mtid", "");
    E.setAttributeNS(null, "mbid", "");
    E.setAttributeNS(null, "mxcxlid", "");
    E.setAttributeNS(null, "mwall", "N");
    E.setAttributeNS(null, "mgdpic", M);
    E.setAttributeNS(null, "mgduptxt", "室外");
    E.setAttributeNS(null, "mgddowntxt", "室内");
    E.setAttributeNS(null, "mhideframe", "N");
    E.setAttributeNS(null, "mhidelframe", "N");
    E.setAttributeNS(null, "mhiderframe", "N");
    E.setAttributeNS(null, "mhideallframe", "N");
    E.setAttributeNS(null, "mgdpicwj", "Y");
    E.setAttributeNS(null, "mshowglassfan", "Y");
    E.setAttributeNS(null, "mgdpiccoor", "N");
    var W = document.createElementNS(mDrawSvgNS, "rect");
    W.setAttributeNS(null, "id", N + "_r1");
    W.setAttributeNS(null, "x", J);
    W.setAttributeNS(null, "y", K);
    W.setAttributeNS(null, "width", P);
    W.setAttributeNS(null, "height", D);
    W.setAttributeNS(null, "fill", "white");
    W.setAttributeNS(null, "stroke", "black");
    W.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
    W.setAttributeNS(null, "mselect", "1");
    W.setAttributeNS(null, "mselected", "0");
    var R = document.createElementNS(mDrawSvgNS, "rect");
    R.setAttributeNS(null, "id", N + "_r2");
    R.setAttributeNS(null, "x", J + mDrawThickFrame * mDrawSvgViewBox);
    R.setAttributeNS(null, "y", K + mDrawThickFrame * mDrawSvgViewBox);
    R.setAttributeNS(null, "width", P - 2 * mDrawThickFrame * mDrawSvgViewBox);
    R.setAttributeNS(null, "height", D - 2 * mDrawThickFrame * mDrawSvgViewBox);
    R.setAttributeNS(null, "fill", "white");
    R.setAttributeNS(null, "stroke", "black");
    R.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
    R.setAttributeNS(null, "mselect", "1");
    R.setAttributeNS(null, "mselected", "0");
    var O = document.createElementNS(mDrawSvgNS, "line");
    var L = document.createElementNS(mDrawSvgNS, "line");
    var T = document.createElementNS(mDrawSvgNS, "line");
    var U = document.createElementNS(mDrawSvgNS, "line");
    switch (H) {
    case "45":
        O.setAttributeNS(null, "id", N + "_l1");
        O.setAttributeNS(null, "x1", J);
        O.setAttributeNS(null, "y1", K);
        O.setAttributeNS(null, "x2", J + mDrawThickFrame * mDrawSvgViewBox);
        O.setAttributeNS(null, "y2", K + mDrawThickFrame * mDrawSvgViewBox);
        O.setAttributeNS(null, "stroke", "black");
        O.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        L.setAttributeNS(null, "id", N + "_l2");
        L.setAttributeNS(null, "x1", J + P);
        L.setAttributeNS(null, "y1", K);
        L.setAttributeNS(null, "x2", J + P - mDrawThickFrame * mDrawSvgViewBox);
        L.setAttributeNS(null, "y2", K + mDrawThickFrame * mDrawSvgViewBox);
        L.setAttributeNS(null, "stroke", "black");
        L.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        T.setAttributeNS(null, "id", N + "_l3");
        T.setAttributeNS(null, "x1", J + P);
        T.setAttributeNS(null, "y1", K + D);
        T.setAttributeNS(null, "x2", J + P - mDrawThickFrame * mDrawSvgViewBox);
        T.setAttributeNS(null, "y2", K + D - mDrawThickFrame * mDrawSvgViewBox);
        T.setAttributeNS(null, "stroke", "black");
        T.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        U.setAttributeNS(null, "id", N + "_l4");
        U.setAttributeNS(null, "x1", J);
        U.setAttributeNS(null, "y1", K + D);
        U.setAttributeNS(null, "x2", J + mDrawThickFrame * mDrawSvgViewBox);
        U.setAttributeNS(null, "y2", K + D - mDrawThickFrame * mDrawSvgViewBox);
        U.setAttributeNS(null, "stroke", "black");
        U.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        break;
    case "H":
        O.setAttributeNS(null, "id", N + "_l1");
        O.setAttributeNS(null, "x1", J);
        O.setAttributeNS(null, "y1", K + mDrawThickFrame * mDrawSvgViewBox);
        O.setAttributeNS(null, "x2", J + mDrawThickFrame * mDrawSvgViewBox);
        O.setAttributeNS(null, "y2", K + mDrawThickFrame * mDrawSvgViewBox);
        O.setAttributeNS(null, "stroke", "black");
        O.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        L.setAttributeNS(null, "id", N + "_l2");
        L.setAttributeNS(null, "x1", J + P);
        L.setAttributeNS(null, "y1", K + mDrawThickFrame * mDrawSvgViewBox);
        L.setAttributeNS(null, "x2", J + P - mDrawThickFrame * mDrawSvgViewBox);
        L.setAttributeNS(null, "y2", K + mDrawThickFrame * mDrawSvgViewBox);
        L.setAttributeNS(null, "stroke", "black");
        L.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        T.setAttributeNS(null, "id", N + "_l3");
        T.setAttributeNS(null, "x1", J + P);
        T.setAttributeNS(null, "y1", K + D - mDrawThickFrame * mDrawSvgViewBox);
        T.setAttributeNS(null, "x2", J + P - mDrawThickFrame * mDrawSvgViewBox);
        T.setAttributeNS(null, "y2", K + D - mDrawThickFrame * mDrawSvgViewBox);
        T.setAttributeNS(null, "stroke", "black");
        T.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        U.setAttributeNS(null, "id", N + "_l4");
        U.setAttributeNS(null, "x1", J);
        U.setAttributeNS(null, "y1", K + D - mDrawThickFrame * mDrawSvgViewBox);
        U.setAttributeNS(null, "x2", J + mDrawThickFrame * mDrawSvgViewBox);
        U.setAttributeNS(null, "y2", K + D - mDrawThickFrame * mDrawSvgViewBox);
        U.setAttributeNS(null, "stroke", "black");
        U.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        break;
    case "V":
        O.setAttributeNS(null, "id", N + "_l1");
        O.setAttributeNS(null, "x1", J + mDrawThickFrame * mDrawSvgViewBox);
        O.setAttributeNS(null, "y1", K);
        O.setAttributeNS(null, "x2", J + mDrawThickFrame * mDrawSvgViewBox);
        O.setAttributeNS(null, "y2", K + mDrawThickFrame * mDrawSvgViewBox);
        O.setAttributeNS(null, "stroke", "black");
        O.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        L.setAttributeNS(null, "id", N + "_l2");
        L.setAttributeNS(null, "x1", J + P - mDrawThickFrame * mDrawSvgViewBox);
        L.setAttributeNS(null, "y1", K);
        L.setAttributeNS(null, "x2", J + P - mDrawThickFrame * mDrawSvgViewBox);
        L.setAttributeNS(null, "y2", K + mDrawThickFrame * mDrawSvgViewBox);
        L.setAttributeNS(null, "stroke", "black");
        L.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        T.setAttributeNS(null, "id", N + "_l3");
        T.setAttributeNS(null, "x1", J + P - mDrawThickFrame * mDrawSvgViewBox);
        T.setAttributeNS(null, "y1", K + D);
        T.setAttributeNS(null, "x2", J + P - mDrawThickFrame * mDrawSvgViewBox);
        T.setAttributeNS(null, "y2", K + D - mDrawThickFrame * mDrawSvgViewBox);
        T.setAttributeNS(null, "stroke", "black");
        T.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        U.setAttributeNS(null, "id", N + "_l4");
        U.setAttributeNS(null, "x1", J + mDrawThickFrame * mDrawSvgViewBox);
        U.setAttributeNS(null, "y1", K + D);
        U.setAttributeNS(null, "x2", J + mDrawThickFrame * mDrawSvgViewBox);
        U.setAttributeNS(null, "y2", K + D - mDrawThickFrame * mDrawSvgViewBox);
        U.setAttributeNS(null, "stroke", "black");
        U.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        break;
    case "45V":
        O.setAttributeNS(null, "id", N + "_l1");
        O.setAttributeNS(null, "x1", J);
        O.setAttributeNS(null, "y1", K);
        O.setAttributeNS(null, "x2", J + mDrawThickFrame * mDrawSvgViewBox);
        O.setAttributeNS(null, "y2", K + mDrawThickFrame * mDrawSvgViewBox);
        O.setAttributeNS(null, "stroke", "black");
        O.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        L.setAttributeNS(null, "id", N + "_l2");
        L.setAttributeNS(null, "x1", J + P);
        L.setAttributeNS(null, "y1", K);
        L.setAttributeNS(null, "x2", J + P - mDrawThickFrame * mDrawSvgViewBox);
        L.setAttributeNS(null, "y2", K + mDrawThickFrame * mDrawSvgViewBox);
        L.setAttributeNS(null, "stroke", "black");
        L.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        T.setAttributeNS(null, "id", N + "_l3");
        T.setAttributeNS(null, "x1", J + P - mDrawThickFrame * mDrawSvgViewBox);
        T.setAttributeNS(null, "y1", K + D);
        T.setAttributeNS(null, "x2", J + P - mDrawThickFrame * mDrawSvgViewBox);
        T.setAttributeNS(null, "y2", K + D - mDrawThickFrame * mDrawSvgViewBox);
        T.setAttributeNS(null, "stroke", "black");
        T.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        U.setAttributeNS(null, "id", N + "_l4");
        U.setAttributeNS(null, "x1", J + mDrawThickFrame * mDrawSvgViewBox);
        U.setAttributeNS(null, "y1", K + D);
        U.setAttributeNS(null, "x2", J + mDrawThickFrame * mDrawSvgViewBox);
        U.setAttributeNS(null, "y2", K + D - mDrawThickFrame * mDrawSvgViewBox);
        U.setAttributeNS(null, "stroke", "black");
        U.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px")
    }
    E.appendChild(W);
    E.appendChild(R);
    E.appendChild(O);
    E.appendChild(L);
    E.appendChild(T);
    E.appendChild(U);
    C.appendChild(E);
    B.appendChild(C);
    MicroDraw_Area_Add(Q, MicroDraw_GUID(), J + mDrawThickFrame * mDrawSvgViewBox, K + mDrawThickFrame * mDrawSvgViewBox, P - 2 * mDrawThickFrame * mDrawSvgViewBox, D - 2 * mDrawThickFrame * mDrawSvgViewBox, 0, 0, F, I, "", "", "", "");
    var V = $(C).find("[mtype=" + mDrawFlag_Area + "] rect");
    V.attr("mselected", 1);
    mDrawSelectObjId = V.eq(0).attr("id");
    MicroDraw_Glass_ClickAddGlass();
    MicroDraw_ShowSizeProperty();
    MicroDraw_ShowCoordinate();
    MicroDraw_autoGdPic();
    MicroDraw_StepRecord();
    return Q
}
function MicroDraw_Ting_ClickAddV() {
    if (! (mDrawSelectObjId.length > 0)) {
        jQuery.messager.alert("提示:", "请选择对象后再增加挺！", "info");
        return
    }
    var U = $("[mselected='1']")[0];
    var Z = U.parentNode;
    var E = Z.parentNode;
    if ($(U).parents("g[mtype=" + mDrawFlag_Win + "]").length == 0 && $(U).parents("g[mtype=" + mDrawFlag_WinArcs + "]").length == 0) {
        jQuery.messager.alert("提示:", "暂时只能在 常规框  中增加挺！", "info");
        return
    }
    if (! (Z.getAttribute("mtype") == mDrawFlag_Area || Z.getAttribute("mtype") == mDrawFlag_Glass || Z.getAttribute("mtype") == mDrawFlag_ArcsGlass)) {
        jQuery.messager.alert("提示:", "只能在 区域 或 玻璃 中增加挺！", "info");
        return
    }
    MicroDraw_AddObjDelFrameArc($(Z));
    var B;
    var c, P, J, W;
    var D, G, S, X;
    var Y, N, Q, a;
    B = Z.getAttribute("mtype");
    c = Z.getAttribute("mlid");
    P = Z.getAttribute("mrid");
    J = Z.getAttribute("mtid");
    W = Z.getAttribute("mbid");
    D = Z.getAttribute("mx");
    G = Z.getAttribute("my");
    S = Z.getAttribute("mwidth");
    X = Z.getAttribute("mheight");
    Y = U.getAttribute("x");
    N = U.getAttribute("y");
    Q = U.getAttribute("width");
    a = U.getAttribute("height");
    origId = Z.getAttribute("id");
    var K = $(U).parents("g[mtype=" + mDrawFlag_WinArcs + "]");
    if (K.length > 0) {
        var A = MicroDraw_AddArcsTing($(U), "V");
        MicroDraw_ShowCoordinateWinArcs(K);
        return A
    }
    E.removeChild(Z);
    var A;
    if (B == mDrawFlag_Area) {
        var H, b, C;
        H = MicroDraw_GUID();
        b = MicroDraw_GUID();
        C = MicroDraw_GUID();
        A = C;
        MicroDraw_Area_Add(E.getAttribute("id"), H, Y, N, Q / 2 - (mDrawThickTing * mDrawSvgViewBox) / 2, a, D, G, S / 2, X, c, C, J, W);
        var T = document.createElementNS(mDrawSvgNS, "g");
        var R = document.createElementNS(mDrawSvgNS, "rect");
        T.setAttributeNS(null, "id", C);
        T.setAttributeNS(null, "mtype", mDrawFlag_TingV);
        T.setAttributeNS(null, "mx", Number(D) + Number(S / 2));
        T.setAttributeNS(null, "my", G);
        T.setAttributeNS(null, "mwidth", 0);
        T.setAttributeNS(null, "mheight", X);
        T.setAttributeNS(null, "mlid", H);
        T.setAttributeNS(null, "mrid", b);
        T.setAttributeNS(null, "mtid", J);
        T.setAttributeNS(null, "mbid", W);
        T.setAttributeNS(null, "mflag", "W" + (MicroDraw_getTagMaxVal($("#" + E.getAttribute("id") + " [mtype='" + mDrawFlag_TingV + "']"), "mflag", "W", true) + 1));
        T.setAttributeNS(null, "mtotallen", "N");
        T.setAttributeNS(null, "mexp", "");
        T.setAttributeNS(null, "mkind", "N");
        T.setAttributeNS(null, "mtl", "0");
        T.setAttributeNS(null, "mtr", "0");
        R.setAttributeNS(null, "id", C + "_r1");
        R.setAttributeNS(null, "x", Number(Y) + Number(Q / 2) - Number((mDrawThickTing * mDrawSvgViewBox) / 2));
        R.setAttributeNS(null, "y", N);
        R.setAttributeNS(null, "width", (mDrawThickTing * mDrawSvgViewBox));
        R.setAttributeNS(null, "height", a);
        R.setAttributeNS(null, "fill", "white");
        R.setAttributeNS(null, "stroke", "black");
        R.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        R.setAttributeNS(null, "mselect", "1");
        R.setAttributeNS(null, "mselected", "0");
        T.appendChild(R);
        E.appendChild(T);
        MicroDraw_Area_Add(E.getAttribute("id"), b, Number(Y) + Number(Q / 2) + Number((mDrawThickTing * mDrawSvgViewBox) / 2), N, Number(Q / 2) - Number((mDrawThickTing * mDrawSvgViewBox) / 2), a, Number(D) + Number(S / 2), G, S / 2, X, C, P, J, W);
        var V = MicroDraw_GetObjProperty(J, "mbid");
        V = V.replace(origId, H + "," + C + "," + b);
        MicroDraw_SetObjProperty(J, "mbid", V);
        var L = MicroDraw_GetObjProperty(W, "mtid");
        L = L.replace(origId, H + "," + C + "," + b);
        MicroDraw_SetObjProperty(W, "mtid", L);
        var O = MicroDraw_GetObjProperty(c, "mrid");
        O = O.replace(origId, H);
        MicroDraw_SetObjProperty(c, "mrid", O);
        var F = MicroDraw_GetObjProperty(P, "mlid");
        F = F.replace(origId, b);
        MicroDraw_SetObjProperty(P, "mlid", F);
        MicroDraw_Redraw(H);
        MicroDraw_Redraw(b)
    } else {
        var H, b, C;
        H = MicroDraw_GUID();
        b = MicroDraw_GUID();
        C = MicroDraw_GUID();
        A = C;
        MicroDraw_Glass_Add(E.getAttribute("id"), H, Y, N, Q / 2 - (mDrawThickTing * mDrawSvgViewBox) / 2, a, D, G, S / 2, X, c, C, J, W);
        var T = document.createElementNS(mDrawSvgNS, "g");
        var R = document.createElementNS(mDrawSvgNS, "rect");
        T.setAttributeNS(null, "id", C);
        T.setAttributeNS(null, "mtype", mDrawFlag_TingV);
        T.setAttributeNS(null, "mx", Number(D) + Number(S / 2));
        T.setAttributeNS(null, "my", G);
        T.setAttributeNS(null, "mwidth", 0);
        T.setAttributeNS(null, "mheight", X);
        T.setAttributeNS(null, "mlid", H);
        T.setAttributeNS(null, "mrid", b);
        T.setAttributeNS(null, "mtid", J);
        T.setAttributeNS(null, "mbid", W);
        T.setAttributeNS(null, "mflag", "W" + Number($("#" + E.getAttribute("id") + " [mtype='" + mDrawFlag_TingV + "']").length + 1));
        T.setAttributeNS(null, "mflag", "W" + (MicroDraw_getTagMaxVal($("#" + E.getAttribute("id") + " [mtype='" + mDrawFlag_TingV + "']"), "mflag", "W", true) + 1));
        T.setAttributeNS(null, "mtotallen", "N");
        T.setAttributeNS(null, "mexp", "");
        T.setAttributeNS(null, "mkind", "N");
        T.setAttributeNS(null, "mtl", "0");
        T.setAttributeNS(null, "mtr", "0");
        R.setAttributeNS(null, "id", C + "_r1");
        R.setAttributeNS(null, "x", Number(Y) + Number(Q / 2) - Number((mDrawThickTing * mDrawSvgViewBox) / 2));
        R.setAttributeNS(null, "y", N);
        R.setAttributeNS(null, "width", (mDrawThickTing * mDrawSvgViewBox));
        R.setAttributeNS(null, "height", a);
        R.setAttributeNS(null, "fill", "white");
        R.setAttributeNS(null, "stroke", "black");
        R.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        R.setAttributeNS(null, "mselect", "1");
        R.setAttributeNS(null, "mselected", "0");
        T.appendChild(R);
        E.appendChild(T);
        MicroDraw_Glass_Add(E.getAttribute("id"), b, Number(Y) + Number(Q / 2) + Number((mDrawThickTing * mDrawSvgViewBox) / 2), N, Number(Q / 2) - Number((mDrawThickTing * mDrawSvgViewBox) / 2), a, Number(D) + Number(S / 2), G, S / 2, X, C, P, J, W);
        var V = MicroDraw_GetObjProperty(J, "mbid");
        V = V.replace(origId, H + "," + C + "," + b);
        MicroDraw_SetObjProperty(J, "mbid", V);
        var L = MicroDraw_GetObjProperty(W, "mtid");
        L = L.replace(origId, H + "," + C + "," + b);
        MicroDraw_SetObjProperty(W, "mtid", L);
        var O = MicroDraw_GetObjProperty(c, "mrid");
        O = O.replace(origId, H);
        MicroDraw_SetObjProperty(c, "mrid", O);
        var F = MicroDraw_GetObjProperty(P, "mlid");
        F = F.replace(origId, b);
        MicroDraw_SetObjProperty(P, "mlid", F);
        MicroDraw_Redraw(H);
        MicroDraw_Redraw(b)
    }
    MicroDraw_ShowSizeProperty();
    MicroDraw_ShowCoordinate();
    MicroDraw_reflashGlassFlag();
    MicroDraw_autoGdPic();
    MicroDraw_StepRecord();
    var M = $("#" + mDrawFlag_SvgId + " #" + A).parents("[mtype=" + mDrawFlag_Win + "]");
    var I = MicroDraw_getTagMaxVal(M, "mting", "ting") + 1;
    $("#" + mDrawFlag_SvgId + " #" + A).attr("mting", I);
    return A
}
function MicroDraw_Ting_ClickAddH() {
    if (! (mDrawSelectObjId.length > 0)) {
        jQuery.messager.alert("提示:", "请选择对象后再增加挺！", "info");
        return
    }
    var V = $("[mselected='1']")[0];
    var a = V.parentNode;
    var F = a.parentNode;
    if ($(V).parents("g[mtype=" + mDrawFlag_Win + "]").length == 0 && $(V).parents("g[mtype=" + mDrawFlag_WinArcs + "]").length == 0) {
        jQuery.messager.alert("提示:", "暂时只能在 常规框  中增加挺！", "info");
        return
    }
    if (! (a.getAttribute("mtype") == mDrawFlag_Area || a.getAttribute("mtype") == mDrawFlag_Glass || a.getAttribute("mtype") == mDrawFlag_ArcsGlass)) {
        jQuery.messager.alert("提示:", "只能在 区域 或 玻璃 中增加挺！", "info");
        return
    }
    MicroDraw_AddObjDelFrameArc($(a));
    var B;
    var e, R, K, X;
    var D, H, U, Y;
    var Z, O, S, b;
    var Q;
    B = a.getAttribute("mtype");
    e = a.getAttribute("mlid");
    R = a.getAttribute("mrid");
    K = a.getAttribute("mtid");
    X = a.getAttribute("mbid");
    D = a.getAttribute("mx");
    H = a.getAttribute("my");
    U = a.getAttribute("mwidth");
    Y = a.getAttribute("mheight");
    Z = V.getAttribute("x");
    O = V.getAttribute("y");
    S = V.getAttribute("width");
    b = V.getAttribute("height");
    Q = a.getAttribute("id");
    var L = $(V).parents("g[mtype=" + mDrawFlag_WinArcs + "]");
    if (L.length > 0) {
        var A = MicroDraw_AddArcsTing($(V), "H");
        MicroDraw_ShowCoordinateWinArcs(L);
        return A
    }
    F.removeChild(a);
    var A;
    if (B == mDrawFlag_Area) {
        var C, I, G;
        C = MicroDraw_GUID();
        I = MicroDraw_GUID();
        G = MicroDraw_GUID();
        A = I;
        MicroDraw_Area_Add(F.getAttribute("id"), C, Z, O, S, b / 2 - (mDrawThickTing * mDrawSvgViewBox) / 2, D, H, U, Y / 2, e, R, K, I);
        var P = document.createElementNS(mDrawSvgNS, "g");
        var c = document.createElementNS(mDrawSvgNS, "rect");
        P.setAttributeNS(null, "id", I);
        P.setAttributeNS(null, "mtype", mDrawFlag_TingH);
        P.setAttributeNS(null, "mx", D);
        P.setAttributeNS(null, "my", Number(H) + Number(Y / 2));
        P.setAttributeNS(null, "mwidth", U);
        P.setAttributeNS(null, "mheight", 0);
        P.setAttributeNS(null, "mlid", e);
        P.setAttributeNS(null, "mrid", R);
        P.setAttributeNS(null, "mtid", C);
        P.setAttributeNS(null, "mbid", G);
        P.setAttributeNS(null, "mflag", "H" + (MicroDraw_getTagMaxVal($("#" + F.getAttribute("id") + " [mtype='" + mDrawFlag_TingH + "']"), "mflag", "H", true) + 1));
        P.setAttributeNS(null, "mtotallen", "N");
        P.setAttributeNS(null, "mexp", "");
        P.setAttributeNS(null, "mkind", "N");
        P.setAttributeNS(null, "mtl", "0");
        P.setAttributeNS(null, "mtr", "0");
        c.setAttributeNS(null, "id", I + "_r1");
        c.setAttributeNS(null, "x", Z);
        c.setAttributeNS(null, "y", Number(O) + Number(b / 2) - Number((mDrawThickTing * mDrawSvgViewBox) / 2));
        c.setAttributeNS(null, "width", S);
        c.setAttributeNS(null, "height", (mDrawThickTing * mDrawSvgViewBox));
        c.setAttributeNS(null, "fill", "white");
        c.setAttributeNS(null, "stroke", "black");
        c.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        c.setAttributeNS(null, "mselect", "1");
        c.setAttributeNS(null, "mselected", "0");
        P.appendChild(c);
        F.appendChild(P);
        MicroDraw_Area_Add(F.getAttribute("id"), G, Z, Number(O) + Number(b / 2) + Number((mDrawThickTing * mDrawSvgViewBox) / 2), S, Number(b / 2) - Number((mDrawThickTing * mDrawSvgViewBox) / 2), D, Number(H) + Number(Y / 2), U, Y / 2, e, R, I, X);
        var W = MicroDraw_GetObjProperty(K, "mbid");
        W = W.replace(Q, C);
        MicroDraw_SetObjProperty(K, "mbid", W);
        var M = MicroDraw_GetObjProperty(X, "mtid");
        M = M.replace(Q, G);
        MicroDraw_SetObjProperty(X, "mtid", M);
        var E = MicroDraw_GetObjProperty(e, "mrid");
        E = E.replace(Q, C + "," + I + "," + G);
        MicroDraw_SetObjProperty(e, "mrid", E);
        var N = MicroDraw_GetObjProperty(R, "mlid");
        N = N.replace(Q, C + "," + I + "," + G);
        MicroDraw_SetObjProperty(R, "mlid", N);
        MicroDraw_Redraw(C);
        MicroDraw_Redraw(G)
    } else {
        var C, I, G;
        C = MicroDraw_GUID();
        I = MicroDraw_GUID();
        G = MicroDraw_GUID();
        A = I;
        MicroDraw_Glass_Add(F.getAttribute("id"), C, Z, O, S, b / 2 - (mDrawThickTing * mDrawSvgViewBox) / 2, D, H, U, Y / 2, e, R, K, I);
        var P = document.createElementNS(mDrawSvgNS, "g");
        var c = document.createElementNS(mDrawSvgNS, "rect");
        P.setAttributeNS(null, "id", I);
        P.setAttributeNS(null, "mtype", mDrawFlag_TingH);
        P.setAttributeNS(null, "mx", D);
        P.setAttributeNS(null, "my", Number(H) + Number(Y / 2));
        P.setAttributeNS(null, "mwidth", U);
        P.setAttributeNS(null, "mheight", 0);
        P.setAttributeNS(null, "mlid", e);
        P.setAttributeNS(null, "mrid", R);
        P.setAttributeNS(null, "mtid", C);
        P.setAttributeNS(null, "mbid", G);
        P.setAttributeNS(null, "mflag", "H" + (MicroDraw_getTagMaxVal($("#" + F.getAttribute("id") + " [mtype='" + mDrawFlag_TingH + "']"), "mflag", "H", true) + 1));
        P.setAttributeNS(null, "mtotallen", "N");
        P.setAttributeNS(null, "mexp", "");
        P.setAttributeNS(null, "mkind", "N");
        P.setAttributeNS(null, "mtl", "0");
        P.setAttributeNS(null, "mtr", "0");
        c.setAttributeNS(null, "id", I + "_r1");
        c.setAttributeNS(null, "x", Z);
        c.setAttributeNS(null, "y", Number(O) + Number(b / 2) - Number((mDrawThickTing * mDrawSvgViewBox) / 2));
        c.setAttributeNS(null, "width", S);
        c.setAttributeNS(null, "height", (mDrawThickTing * mDrawSvgViewBox));
        c.setAttributeNS(null, "fill", "white");
        c.setAttributeNS(null, "stroke", "black");
        c.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        c.setAttributeNS(null, "mselect", "1");
        c.setAttributeNS(null, "mselected", "0");
        P.appendChild(c);
        F.appendChild(P);
        MicroDraw_Glass_Add(F.getAttribute("id"), G, Z, Number(O) + Number(b / 2) + Number((mDrawThickTing * mDrawSvgViewBox) / 2), S, Number(b / 2) - Number((mDrawThickTing * mDrawSvgViewBox) / 2), D, Number(H) + Number(Y / 2), U, Y / 2, e, R, I, X);
        var W = MicroDraw_GetObjProperty(K, "mbid");
        W = W.replace(Q, C);
        MicroDraw_SetObjProperty(K, "mbid", W);
        var M = MicroDraw_GetObjProperty(X, "mtid");
        M = M.replace(Q, G);
        MicroDraw_SetObjProperty(X, "mtid", M);
        var E = MicroDraw_GetObjProperty(e, "mrid");
        E = E.replace(Q, C + "," + I + "," + G);
        MicroDraw_SetObjProperty(e, "mrid", E);
        var N = MicroDraw_GetObjProperty(R, "mlid");
        N = N.replace(Q, C + "," + I + "," + G);
        MicroDraw_SetObjProperty(R, "mlid", N);
        MicroDraw_Redraw(C);
        MicroDraw_Redraw(G)
    }
    MicroDraw_ShowSizeProperty();
    MicroDraw_ShowCoordinate();
    MicroDraw_reflashGlassFlag();
    MicroDraw_autoGdPic();
    MicroDraw_StepRecord();
    var T = $("#" + mDrawFlag_SvgId + " #" + A).parents("[mtype=" + mDrawFlag_Win + "]");
    var J = MicroDraw_getTagMaxVal(T, "mting", "ting") + 1;
    $("#" + mDrawFlag_SvgId + " #" + A).attr("mting", J);
    return A
}
function MicroDraw_Glass_ClickAddGlass() {
    if (! (mDrawSelectObjId.length > 0)) {
        jQuery.messager.alert("提示:", "请选择对象后再增加玻璃！", "info");
        return
    }
    var U = $("#" + mDrawFlag_SvgId + " [mselected='1']")[0];
    var c = $(U).parents("[mtype]:first").get(0);
    var G = c.parentNode;
    var T;
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0 && $(U).parents('[mtype="' + mDrawFlag_Win + '"]').length == 0) {
        T = G;
        G = G.parentNode
    }
    if ($.inArray($(c).attr("mtype"), [mDrawFlag_FrameRect, mDrawFlag_TingV, mDrawFlag_TingH, mDrawFlag_FrameArcs, mDrawFlag_FrameArcsTingH, mDrawFlag_FrameArcsTingV]) > -1) {
        jQuery.messager.alert("提示:", "不能在当前区域增加玻璃！", "info");
        return
    }
    MicroDraw_AddObjDelFrameArc($(c));
    var A;
    var f, Q, L, Z;
    var D, I, S, a;
    var b, N, R, e;
    var P;
    var M, B, F, J;
    A = c.getAttribute("mtype");
    f = c.getAttribute("mlid");
    Q = c.getAttribute("mrid");
    L = c.getAttribute("mtid");
    Z = c.getAttribute("mbid");
    D = c.getAttribute("mx");
    I = c.getAttribute("my");
    S = c.getAttribute("mwidth");
    a = c.getAttribute("mheight");
    M = c.getAttribute("mcx_exp");
    B = c.getAttribute("mcy_exp");
    F = c.getAttribute("mcwidth_exp");
    J = c.getAttribute("mcheight_exp");
    b = U.getAttribute("x");
    N = U.getAttribute("y");
    R = U.getAttribute("width");
    e = U.getAttribute("height");
    P = c.getAttribute("id");
    var X = MicroDraw_GUID();
    var K = $(c).parents("[mtype=" + mDrawFlag_WinArcs + "]");
    if (K.length > 0) {
        var O;
        var C = MicroDraw_getSelectedArcsAreaPath($(c));
        O = {
            "id": X,
            "mtype": mDrawFlag_ArcsGlass,
            "mwidth": S,
            "mheight": a,
            "mlid": f,
            "mrid": Q,
            "mtid": L,
            "mbid": Z,
            "mx": D,
            "my": I,
            "myt": "Y"
        };
        MicroDraw_RedrawArcsGlass(X, {
            twin: K,
            g_attrs: O,
            path_d: C
        });
        MicroDraw_RedrawWinArcs(K)
    }
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0 && $(U).parents('[mtype="' + mDrawFlag_Win + '"]').length == 0) {
        T.removeChild(c)
    } else {
        G.removeChild(c)
    }
    if (K.length == 0) {
        MicroDraw_Glass_Add(G.getAttribute("id"), X, b, N, R, e, D, I, S, a, f, Q, L, Z, M, B, F, J)
    }
    var V = MicroDraw_GetObjProperty(L, "mbid");
    V = V.replace(P, X);
    MicroDraw_SetObjProperty(L, "mbid", V);
    var E = MicroDraw_GetObjProperty(Z, "mtid");
    E = E.replace(P, X);
    MicroDraw_SetObjProperty(Z, "mtid", E);
    var Y = MicroDraw_GetObjProperty(f, "mrid");
    Y = Y.replace(P, X);
    MicroDraw_SetObjProperty(f, "mrid", Y);
    var H = MicroDraw_GetObjProperty(Q, "mlid");
    H = H.replace(P, X);
    MicroDraw_SetObjProperty(Q, "mlid", H);
    MicroDraw_GraphXljgDefault($("#" + X).parents("[mwin]"), $("#" + X));
    MicroDraw_Redraw(X);
    MicroDraw_reflashGlassFlag();
    MicroDraw_autoGdPic();
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0 && $("#" + X).parents('[mtype="' + mDrawFlag_ScaleG + '"]').length == 0) {
        var W;
        W = $("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]')[0];
        W.appendChild($("#" + X)[0])
    }
    MicroDraw_StepRecord();
    mDrawSelectObjId = "";
    return X
}
function MicroDraw_Glass_EqualDIVGlass(divPos) {
    mXcxljgStrArray = new Array();
    if (! (mDrawSelectObjId.length > 0)) {
        jQuery.messager.alert("提示:", "请选择对象后再增加玻璃！", "info");
        return
    }
    var node = $("[mselected='1']")[0];
    if ($(node).parents("[mtype=" + mDrawFlag_WinArcs + "]").length > 0) {
        jQuery.messager.alert("提示:", "暂不支持外弧窗玻璃等分功能！", "info");
        return
    }
    var pNode = node.parentNode;
    var ppNode = pNode.parentNode;
    if (pNode.getAttribute("mtype") == mDrawFlag_FrameRect || pNode.getAttribute("mtype") == mDrawFlag_TingV || pNode.getAttribute("mtype") == mDrawFlag_TingH) {
        jQuery.messager.alert("提示:", "不能在当前区域增加玻璃！", "info");
        return
    }
    var _parents = $.Micro.MergeObjs([$(node).parents("[mtype=" + mDrawFlag_Glass + "]"), $(node).parents("[mtype=" + mDrawFlag_Area + "]")]);
    var addTag = false;
    var W0, H0;
    $.each(_parents,
    function() {
        var mlid = $(this).attr("mlid");
        var mrid = $(this).attr("mrid");
        var mtid = $(this).attr("mtid");
        var mbid = $(this).attr("mbid");
        if ($.Micro.IsEmpty(mlid) && $.Micro.IsEmpty(mrid) && $.Micro.IsEmpty(mtid) && $.Micro.IsEmpty(mbid)) {
            addTag = true;
            W0 = "W";
            H0 = "H"
        } else {
            if ($.Micro.IsEmpty(mlid) && $.Micro.IsEmpty(mrid) && $.Micro.IsEmpty(mtid) && !$.Micro.IsEmpty(mbid) && divPos == "X") {
                addTag = true;
                var mflag = $("#" + mDrawFlag_SvgId + " #" + mbid).attr("mflag");
                W0 = "W";
                H0 = mflag
            } else {
                if ($.Micro.IsEmpty(mlid) && $.Micro.IsEmpty(mrid) && !$.Micro.IsEmpty(mtid) && $.Micro.IsEmpty(mbid) && divPos == "X") {
                    addTag = true;
                    var mflag = $("#" + mDrawFlag_SvgId + " #" + mtid).attr("mflag");
                    W0 = "W";
                    H0 = "H-" + mflag
                } else {
                    if ($.Micro.IsEmpty(mlid) && !$.Micro.IsEmpty(mrid) && $.Micro.IsEmpty(mtid) && $.Micro.IsEmpty(mbid) && divPos == "Y") {
                        addTag = true;
                        var mflag = $("#" + mDrawFlag_SvgId + " #" + mrid).attr("mflag");
                        W0 = mflag;
                        H0 = "H"
                    } else {
                        if (!$.Micro.IsEmpty(mlid) && $.Micro.IsEmpty(mrid) && $.Micro.IsEmpty(mtid) && $.Micro.IsEmpty(mbid) && divPos == "Y") {
                            addTag = true;
                            var mflag = $("#" + mDrawFlag_SvgId + " #" + mlid).attr("mflag");
                            W0 = "W-" + mflag;
                            H0 = "H"
                        }
                    }
                }
            }
        }
    });
    if (!addTag) {
        jQuery.messager.alert("提示:", "不能在当前区域等分玻璃！", "info");
        return
    }
    var tframe = $(node).parents("[mtype=" + mDrawFlag_Win + "]").find("[mtype=" + mDrawFlag_FrameRect + "]:first");
    var mxcxlid = tframe.attr("mxcxlid");
    if ($.Micro.IsEmpty(mxcxlid)) {
        jQuery.messager.alert("提示:", "请先选择系列结构后，再等分玻璃！", "info");
        return
    }
    $.messager.prompt("玻璃等分数：", "请输入玻璃等分数：",
    function(r) {
        if (r) {
            if (!isNaN(r)) {
                if (r < 2) {
                    jQuery.messager.alert("提示:", "等分数不能小于2！", "error");
                    return
                }
                main($.trim(r))
            } else {
                jQuery.messager.alert("提示:", "等分数只能输入数字！", "error");
                return
            }
        }
    });
    var main = function(divNum) {
        var mcflId = MicroDraw_genData_getMcflIdByXcxlid(mxcxlid);
        var xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(mxcxlid);
        if ($.Micro.IsEmpty(xcxljgStr)) {
            return true
        }
        var xcxljgJson = eval("(" + xcxljgStr + ")");
        var FCNT = MicroDraw_genData_calcExp(mcflId, "FCNT", tframe.attr("id"), xcxljgJson);
        var GCNT = MicroDraw_genData_calcExp(mcflId, "GCNT", tframe.attr("id"), xcxljgJson);
        var glassID = MicroDraw_Glass_ClickAddGlass();
        var tglass = $("#" + mDrawFlag_SvgId + " #" + glassID);
        var twin = tglass.parents("[mtype=" + mDrawFlag_Win + "]");
        var selObj;
        var tingID;
        var tingIDs = [];
        for (var i = 0; i < divNum - 1; i++) {
            if ($.Micro.IsEmpty(tingID)) {
                tglass = $("#" + mDrawFlag_SvgId + " #" + glassID)
            } else {
                if (divPos == "X") {
                    tglass = $("#" + mDrawFlag_SvgId + " #" + $("#" + mDrawFlag_SvgId + " #" + tingID).attr("mrid"))
                } else {
                    tglass = $("#" + mDrawFlag_SvgId + " #" + $("#" + mDrawFlag_SvgId + " #" + tingID).attr("mbid"))
                }
            }
            selObj = tglass.find("rect");
            selObj.attr("mselected", 1);
            mDrawSelectObjId = selObj.eq(0).attr("id");
            if (divPos == "X") {
                tingID = MicroDraw_Ting_ClickAddV()
            } else {
                tingID = MicroDraw_Ting_ClickAddH()
            }
            tingIDs.push(tingID)
        }
        var NKW;
        var AllTingW = "";
        var tempW = "";
        if (mcflId == 2) {
            var tempW = (GCNT > 0 && FCNT == 0) ? "GW": "KW"
        } else {
            tempW = "KW"
        }
        for (var i = 0; i < tingIDs.length; i++) {
            if (AllTingW != "") {
                AllTingW += "+"
            }
            var tingtag = twin.find("#" + tingIDs[i]).attr("mting").replace("ting", "");
            AllTingW += "T" + tingtag + "_TL+T" + tingtag + "_TR"
        }
        if (divPos == "X") {
            NKW = "(" + W0 + "-2*(" + tempW + "+BFGBW)-(" + AllTingW + "))/" + divNum
        } else {
            if (mcflId == 2) {
                NKW = "(" + H0 + "-2*GW-(" + AllTingW + "))/" + divNum
            } else {
                NKW = "(" + H0 + "-2*(KW+BFGBW)-(" + AllTingW + "))/" + divNum
            }
        }
        var AllTingWArr = AllTingW.split("+");
        for (var i = 1; i < divNum; i++) {
            var TingWStr = "";
            for (var j = 0; j < 2 * (i - 1) + 1; j++) {
                if (TingWStr != "") {
                    TingWStr += "+"
                }
                TingWStr += AllTingWArr[j]
            }
            var mexp;
            if (divPos == "X") {
                mexp = "(" + tempW + "+BFGBW)+" + NKW + "*" + i + "+" + TingWStr
            } else {
                if (mcflId == 2) {
                    mexp = "GW+" + NKW + "*" + i + "+" + TingWStr
                } else {
                    mexp = "(KW+BFGBW)+" + NKW + "*" + i + "+" + TingWStr
                }
            }
            $("#" + mDrawFlag_SvgId + " #" + tingIDs[i - 1]).attr("mexp", mexp)
        }
        MicroDraw_ChangeAllTingsPos(twin)
    }
}
function MicroDraw_Pkc_ClickAddPkc(S) {
    if (! (mDrawSelectObjId.length > 0)) {
        jQuery.messager.alert("提示:", "请选择对象后再增加扇！", "info");
        return
    }
    var Aa = $("[mselected='1']")[0];
    var Ai = $(Aa).parents("[mtype]:first").get(0);
    var Al = Ai.parentNode;
    var Q;
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0 && $(Aa).parents('[mtype="' + mDrawFlag_Win + '"]').length == 0) {
        Q = Al;
        Al = Al.parentNode
    }
    var B = S.indexOf("L") > -1 ? "L": "R";
    if ($.inArray($(Ai).attr("mtype"), [mDrawFlag_FrameRect, mDrawFlag_TingV, mDrawFlag_TingH, mDrawFlag_FrameArcs, mDrawFlag_FrameArcsTingH, mDrawFlag_FrameArcsTingV]) > -1) {
        jQuery.messager.alert("提示:", "不能在当前区域增加扇！", "info");
        return
    }
    MicroDraw_AddObjDelFrameArc($(Ai));
    var Ag;
    var Au, o, n, f;
    var Af, s, As, C;
    var Ah, R, M, V;
    var r;
    Ag = Ai.getAttribute("mtype");
    Au = Ai.getAttribute("mlid");
    o = Ai.getAttribute("mrid");
    n = Ai.getAttribute("mtid");
    f = Ai.getAttribute("mbid");
    Af = Ai.getAttribute("mx");
    s = Ai.getAttribute("my");
    As = Ai.getAttribute("mwidth");
    C = Ai.getAttribute("mheight");
    var Ao = Ai.getAttribute("mcx_exp");
    var An = Ai.getAttribute("mcy_exp");
    var Ad = Ai.getAttribute("mcwidth_exp");
    var Aq = Ai.getAttribute("mcheight_exp");
    if ($.Micro.IsEmpty(Ao)) {
        Ao = ""
    }
    if ($.Micro.IsEmpty(An)) {
        An = ""
    }
    if ($.Micro.IsEmpty(Ad)) {
        Ad = ""
    }
    if ($.Micro.IsEmpty(Aq)) {
        Aq = ""
    }
    var H = Ai.getAttribute("mgdshowstyle");
    var P = Ai.getAttribute("mgdid");
    var Y = Ai.getAttribute("mgdscale");
    Ah = Aa.getAttribute("x");
    R = Aa.getAttribute("y");
    M = Aa.getAttribute("width");
    V = Aa.getAttribute("height");
    r = Ai.getAttribute("id");
    var F = MicroDraw_GUID();
    var At = $(Ai).parents("[mtype=" + mDrawFlag_WinArcs + "]");
    if (At.length > 0) {
        var a;
        var Aj = MicroDraw_getSelectedArcsAreaPath($(Ai));
        a = {
            "id": F,
            "mtype": mDrawFlag_ArcsPkc,
            "mwidth": As,
            "mheight": C,
            "mlid": Au,
            "mrid": o,
            "mtid": n,
            "mbid": f,
            "mx": Af,
            "my": s,
            "myt": "Y",
            "mopendir": S,
            "mjs": "Y"
        };
        $(Ai).remove();
        MicroDraw_RedrawArcsPkc(F, {
            twin: At,
            g_attrs: a,
            path_d: Aj
        });
        MicroDraw_RedrawWinArcs(At)
    } else {
        var Ax = document.createElementNS(mDrawSvgNS, "g");
        Ax.setAttributeNS(null, "id", F);
        Ax.setAttributeNS(null, "mtype", mDrawFlag_Pkc);
        Ax.setAttributeNS(null, "mx", Af);
        Ax.setAttributeNS(null, "my", s);
        Ax.setAttributeNS(null, "mwidth", As);
        Ax.setAttributeNS(null, "mheight", C);
        Ax.setAttributeNS(null, "mlid", Au);
        Ax.setAttributeNS(null, "mrid", o);
        Ax.setAttributeNS(null, "mtid", n);
        Ax.setAttributeNS(null, "mbid", f);
        Ax.setAttributeNS(null, "mcx_exp", Ao);
        Ax.setAttributeNS(null, "mcy_exp", An);
        Ax.setAttributeNS(null, "mcwidth_exp", Ad);
        Ax.setAttributeNS(null, "mcheight_exp", Aq);
        var U = MicroDraw_getXcxlValueByObjId(Al.getAttribute("id"), "O", "扇拼接方式", "prid");
        if (isEmptyOrNull(U)) {
            U = "45"
        }
        Ax.setAttributeNS(null, "mfanpjstyle", U);
        var T = MicroDraw_getXcxlValueByObjId(Al.getAttribute("id"), "O", "扇压线", "prid");
        if (isEmptyOrNull(T)) {
            T = "Y"
        }
        Ax.setAttributeNS(null, "myt", T);
        var Ak = MicroDraw_getXcxlValueByObjId(Al.getAttribute("id"), "O", "扇压线拼接方式", "prid");
        if (isEmptyOrNull(Ak)) {
            Ak = "45"
        }
        Ax.setAttributeNS(null, "mytpjstyle", Ak);
        Ax.setAttributeNS(null, "mopendir", S);
        Ax.setAttributeNS(null, "mswopendir", B);
        Ax.setAttributeNS(null, "msw", "N");
        Ax.setAttributeNS(null, "mfdt", "N");
        Ax.setAttributeNS(null, "mchange", "N");
        Ax.setAttributeNS(null, "mglass", "");
        Ax.setAttributeNS(null, "mjscoor", "N");
        Ax.setAttributeNS(null, "mjs", "Y");
        Ax.setAttributeNS(null, "mjscooroffset", "X + W + 20");
        Ax.setAttributeNS(null, "mjsldheight", "0");
        Ax.setAttributeNS(null, "mjsctheight", "0");
        if ($.Micro.IsEmpty(H)) {
            H = "0"
        }
        Ax.setAttributeNS(null, "mgdshowstyle", H);
        if ($.Micro.IsEmpty(P)) {
            P = ""
        }
        Ax.setAttributeNS(null, "mgdid", P);
        if ($.Micro.IsEmpty(Y)) {
            Y = mDrawFlag_DefinedgdScale
        }
        Ax.setAttributeNS(null, "mgdscale", Y);
        Ax.setAttributeNS(null, "mgdopendir", "上");
        Ax.setAttributeNS(null, "mswgdopendir", "系统默认");
        Ax.setAttributeNS(null, "mgdglasstxt", "玻扇");
        Ax.setAttributeNS(null, "mgdswtxt", "纱扇");
        Ax.setAttributeNS(null, "mzhtype", "无");
        Ax.setAttributeNS(null, "mzhgap", "600");
        Ax.setAttributeNS(null, "mutext", "");
        Ax.setAttributeNS(null, "mdtext", "");
        Ax.setAttributeNS(null, "mltext", "");
        Ax.setAttributeNS(null, "mrtext", "");
        Ax.setAttributeNS(null, "mglassfhl", "N");
        Ax.setAttributeNS(null, "mglassfhlheight", "0");
        Al.appendChild(Ax);
        if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0 && $(Aa).parents('[mtype="' + mDrawFlag_Win + '"]').length == 0) {
            Q.removeChild(Ai)
        } else {
            Al.removeChild(Ai)
        }
        var l = "";
        var Ap = Number(mDrawSvgViewBox * mDrawThickFan);
        var A = Number(mDrawSvgViewBox * mDrawThickYt);
        var W, E, G, v;
        var X, e, Av, w;
        var Aw, c, p, b;
        var Am, J, Z, I;
        var D, Ar, m, Ab;
        var Ae, t, K, q;
        W = Ah;
        X = R;
        Aw = (Number(Ah) + Number(Ap));
        Am = (Number(R) + Number(Ap));
        D = (Number(Ah) + Number(Ap) + Number(A));
        Ae = (Number(R) + Number(Ap) + Number(A));
        E = (Number(Ah) + Number(M));
        e = R;
        c = (Number(Ah) + Number(M) - Number(Ap));
        J = (Number(R) + Number(Ap));
        Ar = (Number(Ah) + Number(M) - Number(Ap) - Number(A));
        t = (Number(R) + Number(Ap) + Number(A));
        G = (Number(Ah) + Number(M));
        Av = (Number(R) + Number(V));
        p = (Number(Ah) + Number(M) - Number(Ap));
        Z = (Number(R) + Number(V) - Number(Ap));
        m = (Number(Ah) + Number(M) - Number(Ap) - Number(A));
        K = (Number(R) + Number(V) - Number(Ap) - Number(A));
        v = Ah;
        w = (Number(R) + Number(V));
        b = (Number(Ah) + Number(Ap));
        I = (Number(R) + Number(V) - Number(Ap));
        Ab = (Number(Ah) + Number(Ap) + Number(A));
        q = (Number(R) + Number(V) - Number(Ap) - Number(A));
        l = l + '<rect id="' + F + '_r1" x="' + Ah + '" y="' + R + '" width="' + M + '" height="' + V + '" fill="#FFFFFF" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" mselect="1" mselected="0"/>';
        l = l + '<rect id="' + F + '_r2" x="' + (Number(Ah) + Ap) + '" y="' + (Number(R) + Ap) + '" width="' + (Number(M) - 2 * Ap) + '" height="' + (Number(V) - 2 * Ap) + '" fill="#FFFFFF" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" mselect="1" mselected="0"/>';
        l = l + '<rect id="' + F + '_r3" x="' + ((Number(Ah) + Ap) + A) + '" y="' + (Number(R) + Ap + A) + '" width="' + (Number(M) - 2 * Ap - 2 * A) + '" height="' + (Number(V) - 2 * Ap - 2 * A) + '" fill="#FFFFFF" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" mselect="1" mselected="0"/>';
        l = l + '<line id="' + F + '_l1" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + W + '" y1="' + X + '" x2="' + Aw + '" y2="' + Am + '"/>';
        l = l + '<line id="' + F + '_l2" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + E + '" y1="' + e + '" x2="' + c + '" y2="' + J + '"/>';
        l = l + '<line id="' + F + '_l3" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + G + '" y1="' + Av + '" x2="' + p + '" y2="' + Z + '"/>';
        l = l + '<line id="' + F + '_l4" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + v + '" y1="' + w + '" x2="' + b + '" y2="' + I + '"/>';
        l = l + '<line id="' + F + '_y1" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + Aw + '" y1="' + Am + '" x2="' + D + '" y2="' + Ae + '"/>';
        l = l + '<line id="' + F + '_y2" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + c + '" y1="' + J + '" x2="' + Ar + '" y2="' + t + '"/>';
        l = l + '<line id="' + F + '_y3" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + p + '" y1="' + Z + '" x2="' + m + '" y2="' + K + '"/>';
        l = l + '<line id="' + F + '_y4" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + b + '" y1="' + I + '" x2="' + Ab + '" y2="' + q + '"/>';
        l = l + '<line id="' + F + '_f1" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + D + '" y1="' + Ae + '" x2="' + Ar + '" y2="' + (Number(R) + Number(V) / 2) + '" style="display:inline"/>';
        l = l + '<line id="' + F + '_f2" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + Ar + '" y1="' + (Number(R) + Number(V) / 2) + '" x2="' + Ab + '" y2="' + q + '" style="display:inline"/>';
        l = l + '<line id="' + F + '_f3" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + D + '" y1="' + Ae + '" x2="' + Ar + '" y2="' + (Number(R) + Number(V) / 2) + '" style="display:inline"/>';
        l = l + '<line id="' + F + '_f4" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + Ar + '" y1="' + (Number(R) + Number(V) / 2) + '" x2="' + Ab + '" y2="' + q + '" style="display:inline"/>';
        l = l + '<rect id="' + F + '_h1" x="' + (Number(Ah) + Number(Ap) / 2 - (Number(4) * Number(mDrawSvgViewBox)) / 2) + '" y="' + (Number(R) + Number(V) / 2 - (Number(16) * Number(mDrawSvgViewBox)) / 2) + '" width="' + Number(4) * Number(mDrawSvgViewBox) + '" height="' + Number(16) * Number(mDrawSvgViewBox) + '" fill="#000000" stroke="#000000"/>';
        l = l + '<rect id="' + F + '_h2" x="' + (Number(Ah) + Number(Ap) / 2 - (Number(4) * Number(mDrawSvgViewBox)) / 2) + '" y="' + (Number(R) + Number(V) / 2 - (Number(4) * Number(mDrawSvgViewBox)) / 2) + '"  width="' + Number(18) * Number(mDrawSvgViewBox) + '" height="' + Number(4) * Number(mDrawSvgViewBox) + '" fill="#000000" stroke="#000000"/>';
        l = l + '<rect id="' + F + '_h3" x="' + (Number(Ah) + Number(Ap) / 2 - (Number(4) * Number(mDrawSvgViewBox)) / 2) + '" y="' + (Number(R) + Number(V) / 2 - (Number(16) * Number(mDrawSvgViewBox)) / 2) + '" width="' + Number(4) * Number(mDrawSvgViewBox) + '" height="' + Number(16) * Number(mDrawSvgViewBox) + '" fill="#000000" stroke="#000000" style="display:none" />';
        l = l + '<rect id="' + F + '_h4" x="' + (Number(Ah) + Number(Ap) / 2 - (Number(4) * Number(mDrawSvgViewBox)) / 2) + '" y="' + (Number(R) + Number(V) / 2 - (Number(4) * Number(mDrawSvgViewBox)) / 2) + '"  width="' + Number(18) * Number(mDrawSvgViewBox) + '" height="' + Number(4) * Number(mDrawSvgViewBox) + '" fill="#000000" stroke="#000000" style="display:none"/>';
        if (mDraw_GlassFlagRectBorder) {
            l = l + '<rect id="' + F + '_txtr" x="' + (Number(Ah) + Number(Ap) + Number(A) + Number(4)) + '" y="' + (Number(R) + Number(V) - Number(Ap) - Number(A) - Number(18) - Number(4)) + '" width="' + mDraw_GlassFlagRectW + '" height="' + mDraw_GlassFlagRectH + '" fill="' + mDrawGlassColor + '" stroke="black" stroke-width="1px" mselect="1" ></rect>'
        } else {
            l = l + '<rect id="' + F + '_txtr" x="' + (Number(Ah) + Number(Ap) + Number(A) + Number(4)) + '" y="' + (Number(R) + Number(V) - Number(Ap) - Number(A) - Number(18) - Number(4)) + '" width="' + mDraw_GlassFlagRectW + '" height="' + mDraw_GlassFlagRectH + '" fill="' + mDrawGlassColor + '" stroke="' + mDrawGlassColor + '" stroke-width="1px" mselect="1" ></rect>'
        }
        l = l + '<text id="' + F + '_txt" x="' + (Number(Ah) + Number(Ap) + Number(A) + Number(8)) + '" y="' + (Number(R) + Number(V) - Number(Ap) - Number(A) - Number(8)) + '" font-size="' + mDraw_GlassFlagFontSize + '" fill="##000000" font-weight="' + mDraw_GlassFlagFontWeight + '" >F12</text>';
        $("#" + F).html(l)
    }
    var Ac = MicroDraw_GetObjProperty(n, "mbid");
    Ac = Ac.replace(r, F);
    MicroDraw_SetObjProperty(n, "mbid", Ac);
    var N = MicroDraw_GetObjProperty(f, "mtid");
    N = N.replace(r, F);
    MicroDraw_SetObjProperty(f, "mtid", N);
    var u = MicroDraw_GetObjProperty(Au, "mrid");
    u = u.replace(r, F);
    MicroDraw_SetObjProperty(Au, "mrid", u);
    var L = MicroDraw_GetObjProperty(o, "mlid");
    L = L.replace(r, F);
    MicroDraw_SetObjProperty(o, "mlid", L);
    MicroDraw_GraphXljgDefault($("#" + F).parents("[mwin]"), $("#" + F));
    MicroDraw_Redraw(F);
    MicroDraw_reflashGlassFlag();
    MicroDraw_autoGdPic();
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0 && $("#" + F).parents('[mtype="' + mDrawFlag_ScaleG + '"]').length == 0) {
        var O;
        O = $("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]')[0];
        O.appendChild($("#" + F)[0])
    }
    MicroDraw_StepRecord()
}
function MicroDraw_Dkc_ClickAddDkc(G, H, Z, l, S) {
    var W = $("[mselected='1']")[0];
    var c = $(W).parents("[mtype]:first").get(0);
    var I = c.parentNode;
    if (c.getAttribute("mtype") == mDrawFlag_FrameRect || c.getAttribute("mtype") == mDrawFlag_TingV || c.getAttribute("mtype") == mDrawFlag_TingH) {
        jQuery.messager.alert("提示:", "不能在当前区域增加扇！", "info");
        return
    }
    MicroDraw_AddObjDelFrameArc($(c));
    var a;
    var o, R, Q, P;
    var p, U, m, A;
    var b, K, F, M;
    var T;
    a = c.getAttribute("mtype");
    o = c.getAttribute("mlid");
    R = c.getAttribute("mrid");
    Q = c.getAttribute("mtid");
    P = c.getAttribute("mbid");
    p = c.getAttribute("mx");
    U = c.getAttribute("my");
    m = c.getAttribute("mwidth");
    A = c.getAttribute("mheight");
    var f = c.getAttribute("mcx_exp");
    var e = c.getAttribute("mcy_exp");
    var Y = c.getAttribute("mcwidth_exp");
    var g = c.getAttribute("mcheight_exp");
    if ($.Micro.IsEmpty(f)) {
        f = ""
    }
    if ($.Micro.IsEmpty(e)) {
        e = ""
    }
    if ($.Micro.IsEmpty(Y)) {
        Y = ""
    }
    if ($.Micro.IsEmpty(g)) {
        g = ""
    }
    b = W.getAttribute("x");
    K = W.getAttribute("y");
    F = W.getAttribute("width");
    M = W.getAttribute("height");
    T = c.getAttribute("id");
    var O = MicroDraw_getXcxlValueByObjId(I.getAttribute("id"), "O", "扇拼接方式", "prid");
    var N = MicroDraw_getXcxlValueByObjId(I.getAttribute("id"), "O", "扇压线", "prid");
    var D = MicroDraw_getXcxlValueByObjId(I.getAttribute("id"), "O", "扇压线拼接方式", "prid");
    if (!isEmptyOrNull(O)) {
        Z = O
    }
    if (!isEmptyOrNull(N)) {
        l = N
    }
    if (!isEmptyOrNull(D)) {
        S = D
    }
    var B = MicroDraw_GUID();
    var n = $(c).parents("[mtype=" + mDrawFlag_WinArcs + "]");
    if (n.length > 0) {
        var L;
        var J = MicroDraw_getSelectedArcsAreaPath($(c));
        L = {
            "id": B,
            "mtype": mDrawFlag_ArcsDkc,
            "mwidth": m,
            "mheight": A,
            "mlid": o,
            "mrid": R,
            "mtid": Q,
            "mbid": P,
            "mx": p,
            "my": U,
            "mfanhasyt": "Y",
            "mjs": "Y"
        };
        $(c).remove();
        MicroDraw_RedrawArcsPkc(B, {
            twin: n,
            g_attrs: L,
            path_d: J
        });
        MicroDraw_RedrawWinArcs(n)
    } else {
        I.removeChild(c);
        MicroDraw_Dkc_Add(I.getAttribute("id"), B, b, K, F, M, p, U, m, A, o, R, Q, P, 2, G, "0,0", "0,0", "PKC_L,PKC_R", H, Z, l, S, "N", "N", "Y", "N", "X + W + 20", 0, 0, "上", "玻扇", "纱扇", "无", 600, "", "", "", "", "", "", "N", 0, f, e, Y, g, "", "", "", "N", "", "", "", "", "", "N", 0)
    }
    var X = MicroDraw_GetObjProperty(Q, "mbid");
    X = X.replace(T, B);
    MicroDraw_SetObjProperty(Q, "mbid", X);
    var C = MicroDraw_GetObjProperty(P, "mtid");
    C = C.replace(T, B);
    MicroDraw_SetObjProperty(P, "mtid", C);
    var V = MicroDraw_GetObjProperty(o, "mrid");
    V = V.replace(T, B);
    MicroDraw_SetObjProperty(o, "mrid", V);
    var E = MicroDraw_GetObjProperty(R, "mlid");
    E = E.replace(T, B);
    MicroDraw_SetObjProperty(R, "mlid", E);
    MicroDraw_GraphXljgDefault($("#" + B).parents("[mwin]"), $("#" + B));
    MicroDraw_Redraw(B);
    MicroDraw_reflashGlassFlag();
    MicroDraw_autoGdPic();
    MicroDraw_StepRecord()
}
function MicroDraw_Dkc_Add(Aq, Ay, As, At, Aw, Ax, U, Ac, Al, C, Au, Av, Aj, u, AG, a, q, X, AR, O, D, E, B, Y, F, Af, r, AV, V, P, I, AP, b, K, Ai, AQ, AU, t, T, AN, c, AC, Az, AK, AL, AA, W, Ap, G, AT, AD, Q, AS, Ad, Ab, Ah, Ag, l) {
    var p = Number(mDrawSvgViewBox * mDrawThickFan);
    var AH = Number(mDrawSvgViewBox * mDrawThickYt);
    var An = Number(mDrawSvgViewBox * mDrawThickTing);
    var AF = document.getElementById(Aq);
    var L = Ay;
    var A = Ay;
    var s = mDrawFlag_Dkc;
    var AB = document.createElementNS(mDrawSvgNS, "g");
    AB.setAttributeNS(null, "id", L);
    AB.setAttributeNS(null, "mtype", s);
    AB.setAttributeNS(null, "mx", U);
    AB.setAttributeNS(null, "my", Ac);
    AB.setAttributeNS(null, "mwidth", Al);
    AB.setAttributeNS(null, "mheight", C);
    AB.setAttributeNS(null, "mlid", Au);
    AB.setAttributeNS(null, "mrid", Av);
    AB.setAttributeNS(null, "mtid", Aj);
    AB.setAttributeNS(null, "mbid", u);
    AB.setAttributeNS(null, "mtldir", "lr");
    AB.setAttributeNS(null, "mfancnt", 2);
    AB.setAttributeNS(null, "mfantype", a);
    AB.setAttributeNS(null, "mfanlayer", q);
    AB.setAttributeNS(null, "mfanoffset", X);
    AB.setAttributeNS(null, "mfantlcflag", AR);
    AB.setAttributeNS(null, "mfanswflag", O);
    AB.setAttributeNS(null, "mfanpjstyle", D);
    AB.setAttributeNS(null, "mfanhasyt", E);
    AB.setAttributeNS(null, "mfanytpjstyle", B);
    AB.setAttributeNS(null, "mfdt", Y);
    AB.setAttributeNS(null, "mglassfhl", Ag);
    AB.setAttributeNS(null, "mglassfhlheight", l);
    AB.setAttributeNS(null, "mchange", F);
    AB.setAttributeNS(null, "mglass", AQ);
    AB.setAttributeNS(null, "mjscoor", r);
    AB.setAttributeNS(null, "mjs", Af);
    AB.setAttributeNS(null, "mjscooroffset", AV);
    AB.setAttributeNS(null, "mjsldheight", V);
    AB.setAttributeNS(null, "mjsctheight", P);
    if ($.Micro.IsEmpty(Ap)) {
        Ap = 0
    }
    AB.setAttributeNS(null, "mgdshowstyle", Ap);
    if ($.Micro.IsEmpty(G)) {
        G = ""
    }
    AB.setAttributeNS(null, "mgdid", G);
    if ($.Micro.IsEmpty(AT)) {
        AT = mDrawFlag_DefinedgdScale
    }
    AB.setAttributeNS(null, "mgdscale", AT);
    AB.setAttributeNS(null, "mgdopendir", I);
    AB.setAttributeNS(null, "mgdglasstxt", AP);
    AB.setAttributeNS(null, "mgdswtxt", b);
    AB.setAttributeNS(null, "mzhtype", K);
    AB.setAttributeNS(null, "mzhgap", Ai);
    AB.setAttributeNS(null, "msa", t);
    AB.setAttributeNS(null, "mtech", T);
    AB.setAttributeNS(null, "mdb", AN);
    AB.setAttributeNS(null, "mmb", c);
    AB.setAttributeNS(null, "mleftcoor", AC);
    AB.setAttributeNS(null, "mleftwidth", Az);
    if ($.Micro.IsEmpty(AK)) {
        AK = ""
    }
    if ($.Micro.IsEmpty(AL)) {
        AL = ""
    }
    if ($.Micro.IsEmpty(AA)) {
        AA = ""
    }
    if ($.Micro.IsEmpty(W)) {
        W = ""
    }
    AB.setAttributeNS(null, "mcx_exp", AK);
    AB.setAttributeNS(null, "mcy_exp", AL);
    AB.setAttributeNS(null, "mcwidth_exp", AA);
    AB.setAttributeNS(null, "mcheight_exp", W);
    if ($.Micro.IsEmpty(Ah)) {
        Ah = mDrawFlag_PK_zsStyle[0].id
    }
    AB.setAttributeNS(null, "mzsstyle", Ah);
    var Q = Q || "";
    var AS = AS || "";
    var Ad = Ad || "";
    var Ab = Ab || "";
    AB.setAttributeNS(null, "mutext", Q);
    AB.setAttributeNS(null, "mdtext", AS);
    AB.setAttributeNS(null, "mltext", Ad);
    AB.setAttributeNS(null, "mrtext", Ab);
    if ($.Micro.IsEmpty(AD)) {
        AD = 1
    }
    AB.setAttributeNS(null, "mfdtstyle", AD);
    AF.appendChild(AB);
    var v = document.createElementNS(mDrawSvgNS, "rect");
    v.setAttributeNS(null, "id", L + "_bg");
    v.setAttributeNS(null, "x", As);
    v.setAttributeNS(null, "y", At);
    v.setAttributeNS(null, "width", Aw);
    v.setAttributeNS(null, "height", Ax);
    v.setAttributeNS(null, "fill", "#FFFFFF");
    v.setAttributeNS(null, "mselect", "1");
    AB.appendChild(v);
    var N = 0;
    var Aa = X.split(",");
    for (i = 0; i < Aa.length; i++) {
        if (Aa[i].toString() == "1") {
            if (E == "Y") {
                N = Number(N) + Number(p) + Number(AH)
            } else {
                N = Number(N) + Number(p)
            }
        }
    }
    var AI = As;
    var Ak = At;
    var m = 0;
    if (Az > 0) {
        m = ((Number(Az) * (Number(Aw) + Number(N))) / Number(Al)).toFixed(0)
    } else {
        m = (Number(Aw) + Number(N)) / Number(AG)
    }
    var R = Ax;
    var e = a.split(",");
    var Ao = AR.split(",");
    var Ae = O.split(",");
    for (i = 0; i < Number(AG); i++) {
        var Am = L + "_fan" + (Number(i) + 1).toString();
        var AJ = document.createElementNS(mDrawSvgNS, "g");
        AJ.setAttributeNS(null, "id", Am);
        AB.appendChild(AJ);
        var AE = 0;
        if (Aa[i].toString() == "1") {
            if (E == "Y") {
                AE = Number(p) + Number(AH)
            } else {
                AE = Number(p)
            }
        }
        AI = Number(AI) - Number(AE);
        if (i == 1) {
            m = (Number(Aw) + Number(N)) - m
        }
        fanHtml = MicroDraw_getFanHtml("lr", Am, AI, Ak, m, R, e[i], Ao[i], Ae[i], D, E, B, Y, K, Ai, AD, Ah, Ag, l);
        $("#" + Am).html(fanHtml);
        AI = Number(AI) + Number(m)
    }
    var J = q.split(",");
    for (k = 0; k < Number(AG); k++) {
        for (i = 0; i < Number(AG); i++) {
            if (J[i].toString() == k.toString()) {
                var Am = L + "_fan" + (Number(i) + 1).toString();
                var AO = $("#" + Am)[0];
                AO.parentNode.appendChild(AO)
            }
        }
    }
    var o = document.createElementNS(mDrawSvgNS, "rect");
    o.setAttributeNS(null, "id", L + "_txtr");
    o.setAttributeNS(null, "x", Number(As) + Number(p) + Number(AH) + Number(4));
    o.setAttributeNS(null, "y", Number(At) + Number(Ax) - Number(p) - Number(AH) - Number(18) - Number(4));
    o.setAttributeNS(null, "width", mDraw_GlassFlagRectW);
    o.setAttributeNS(null, "height", mDraw_GlassFlagRectH);
    o.setAttributeNS(null, "fill", mDrawGlassColor);
    if (mDraw_GlassFlagRectBorder) {
        o.setAttributeNS(null, "stroke", "black")
    } else {
        o.setAttributeNS(null, "stroke", mDrawGlassColor)
    }
    o.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
    o.setAttributeNS(null, "mselect", "1");
    o.setAttributeNS(null, "mselected", "0");
    var n = document.createElementNS(mDrawSvgNS, "text");
    n.setAttributeNS(null, "id", L + "_txt");
    n.setAttributeNS(null, "x", Number(As) + Number(p) + Number(AH) + Number(8));
    n.setAttributeNS(null, "y", Number(At) + Number(Ax) - Number(p) - Number(AH) - Number(8));
    n.setAttributeNS(null, "font-size", mDraw_GlassFlagFontSize);
    n.textContent = AU;
    n.setAttributeNS(null, "fill", "#000000");
    n.setAttributeNS(null, "font-weight", mDraw_GlassFlagFontWeight);
    AB.appendChild(o);
    AB.appendChild(n);
    MicroDraw_reflashHandle($("#" + L));
    var M = Number(Aw);
    var AM = Number(Ax);
    $("#" + A + "_txt_def_u,#" + A + "_txt_def_d,#" + A + "_txt_def_l,#" + A + "_txt_def_r").remove();
    var Ar;
    var S;
    var H, f;
    if (!$.Micro.IsEmpty(Q)) {
        H = Number(As) + M / 4;
        f = Number(At) + (AH + An) * 2 + p;
        Ar = {
            id: A + "_txt_def_u",
            x: H,
            y: f,
            "font-size": "16",
            "font-weight": "400",
            "fill": "#FF0000"
        };
        S = $.MicroSVG.makeSVG("text", Ar);
        S.textContent = Q;
        $("#" + A).append($(S));
        var Z = $.MicroSVG.getSVGRect($(S));
        $(S).attr("x", H - Z.width / 2)
    }
    if (!$.Micro.IsEmpty(AS)) {
        H = Number(As) + M / 4;
        f = Number(At) + AM - (AH + An + p);
        Ar = {
            id: A + "_txt_def_d",
            x: H,
            y: f,
            "font-size": "16",
            "font-weight": "400",
            "fill": "#FF0000"
        };
        S = $.MicroSVG.makeSVG("text", Ar);
        S.textContent = AS;
        $("#" + A).append($(S));
        var Z = $.MicroSVG.getSVGRect($(S));
        $(S).attr("x", H - Z.width / 2)
    }
    if (!$.Micro.IsEmpty(Ad)) {
        H = Number(As) + (AH + An + p);
        f = Number(At) + AM / 2;
        Ar = {
            id: A + "_txt_def_l",
            x: H,
            y: f,
            "font-size": "16",
            "font-weight": "400",
            "fill": "#FF0000",
        };
        S = $.MicroSVG.makeSVG("text", Ar);
        S.textContent = Ad;
        $("#" + A).append($(S))
    }
    if (!$.Micro.IsEmpty(Ab)) {
        H = Number(As) + M - (AH + An + p);
        f = Number(At) + AM / 2;
        Ar = {
            id: A + "_txt_def_r",
            x: H,
            y: f,
            "font-size": "16",
            "font-weight": "400",
            "fill": "#FF0000",
        };
        S = $.MicroSVG.makeSVG("text", Ar);
        S.textContent = Ab;
        $("#" + A).append($(S));
        var Z = $.MicroSVG.getSVGRect($(S));
        $(S).attr("x", H - Z.width)
    }
    MicroDraw_drawGlassFhl({
        objId: L,
        returnType: ""
    })
}
function MicroDraw_Tlc_ClickAddTlc(Ab, A, H, Aa, P, S, K, E, v, Y, g, Ae, a, M, t, Ad, N) {
    if (! (mDrawSelectObjId.length > 0)) {
        jQuery.messager.alert("提示:", "请选择对象后再增加扇！", "info");
        return
    }
    var e = $("[mselected='1']")[0];
    var o = e.parentNode;
    var L = o.parentNode;
    if ($(e).parents("[mtype=" + mDrawFlag_WinArcs + "]").length > 0) {
        jQuery.messager.alert("提示:", "暂不支持外弧窗增加扇功能！", "info");
        return
    }
    var C;
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0 && $(e).parents('[mtype="' + mDrawFlag_Win + '"]').length == 0) {
        C = L;
        L = L.parentNode
    }
    if (o.getAttribute("mtype") == mDrawFlag_FrameRect || o.getAttribute("mtype") == mDrawFlag_TingV || o.getAttribute("mtype") == mDrawFlag_TingH) {
        jQuery.messager.alert("提示:", "不能在当前区域增加扇！", "info");
        return
    }
    MicroDraw_AddObjDelFrameArc($(o));
    var m;
    var Ac, V, U, T;
    var l, b, w, F;
    var n, p, G, O;
    var Z;
    m = o.getAttribute("mtype");
    Ac = o.getAttribute("mlid");
    V = o.getAttribute("mrid");
    U = o.getAttribute("mtid");
    T = o.getAttribute("mbid");
    l = o.getAttribute("mx");
    b = o.getAttribute("my");
    w = o.getAttribute("mwidth");
    F = o.getAttribute("mheight");
    var W = o.getAttribute("mcx_exp");
    var s = o.getAttribute("mcy_exp");
    var r = o.getAttribute("mcwidth_exp");
    var u = o.getAttribute("mcheight_exp");
    n = e.getAttribute("x");
    p = e.getAttribute("y");
    G = e.getAttribute("width");
    O = e.getAttribute("height");
    Z = o.getAttribute("id");
    var R = MicroDraw_getXcxlValueByObjId(L.getAttribute("id"), "O", "扇拼接方式", "prid");
    var Q = MicroDraw_getXcxlValueByObjId(L.getAttribute("id"), "O", "扇压线", "prid");
    var X = MicroDraw_getXcxlValueByObjId(L.getAttribute("id"), "O", "扇压线拼接方式", "prid");
    var c = "";
    if (!isEmptyOrNull(R)) {
        E = R
    }
    if (!isEmptyOrNull(Q)) {
        v = Q
    }
    if (!isEmptyOrNull(X)) {
        Y = X
    }
    if (!isEmptyOrNull(c)) {
        g = c
    }
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0 && $(e).parents('[mtype="' + mDrawFlag_Win + '"]').length == 0) {
        C.removeChild(o)
    } else {
        L.removeChild(o)
    }
    var I = MicroDraw_GUID();
    MicroDraw_Tlc_Add(L.getAttribute("id"), Ab, I, n, p, G, O, l, b, w, F, Ac, V, U, T, A, H, Aa, P, S, K, E, v, Y, g, "F12", Ae, a, M, t, Ad, N, "", "", "", W, s, r, u, "N", "X + W + 20", "0", "0", "N", "");
    var f = MicroDraw_GetObjProperty(U, "mbid");
    f = f.replace(Z, I);
    MicroDraw_SetObjProperty(U, "mbid", f);
    var D = MicroDraw_GetObjProperty(T, "mtid");
    D = D.replace(Z, I);
    MicroDraw_SetObjProperty(T, "mtid", D);
    var B = MicroDraw_GetObjProperty(Ac, "mrid");
    B = B.replace(Z, I);
    MicroDraw_SetObjProperty(Ac, "mrid", B);
    var q = MicroDraw_GetObjProperty(V, "mlid");
    q = q.replace(Z, I);
    MicroDraw_SetObjProperty(V, "mlid", q);
    MicroDraw_GraphXljgDefault($("#" + I).parents("[mwin]"), $("#" + I));
    MicroDraw_Redraw(I);
    MicroDraw_reflashGlassFlag();
    MicroDraw_autoGdPic();
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0 && $("#" + I).parents('[mtype="' + mDrawFlag_ScaleG + '"]').length == 0) {
        var J;
        J = $("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]')[0];
        J.appendChild($("#" + I)[0])
    }
    MicroDraw_StepRecord()
}
function MicroDraw_Tlc_Add(Ai, Y, Av, Ak, Al, Aq, As, P, r, Ad, C, An, Ap, Ab, o, a, V, f, S, AM, s, D, E, Ao, AL, AO, n, O, AI, Aw, t, W, Ah, F, AN, AG, AH, Ax, R, l, AP, Q, L, Ag, I) {
    var Aa = document.getElementById(Ai);
    var e = Number(mDrawSvgViewBox * mDrawThickFan);
    var AD = Number(mDrawSvgViewBox * mDrawThickYt);
    var J = Av;
    var m = mDrawFlag_Tlc + "_" + a + "_" + replaceAll(V, ",", "") + "_" + replaceAll(f, ",", "");
    var Ay = document.createElementNS(mDrawSvgNS, "g");
    Ay.setAttributeNS(null, "id", J);
    Ay.setAttributeNS(null, "mtype", m);
    Ay.setAttributeNS(null, "mx", P);
    Ay.setAttributeNS(null, "my", r);
    Ay.setAttributeNS(null, "mwidth", Ad);
    Ay.setAttributeNS(null, "mheight", C);
    Ay.setAttributeNS(null, "mlid", An);
    Ay.setAttributeNS(null, "mrid", Ap);
    Ay.setAttributeNS(null, "mtid", Ab);
    Ay.setAttributeNS(null, "mbid", o);
    Ay.setAttributeNS(null, "mtldir", Y);
    Ay.setAttributeNS(null, "mfancnt", a);
    Ay.setAttributeNS(null, "mfantype", V);
    Ay.setAttributeNS(null, "mfanlayer", f);
    Ay.setAttributeNS(null, "mfanoffset", S);
    Ay.setAttributeNS(null, "mfantlcflag", AM);
    Ay.setAttributeNS(null, "mfanswflag", s);
    Ay.setAttributeNS(null, "mfanpjstyle", D);
    Ay.setAttributeNS(null, "mfanhasyt", E);
    Ay.setAttributeNS(null, "mfanytpjstyle", Ao);
    Ay.setAttributeNS(null, "mglass", AL);
    Ay.setAttributeNS(null, "msa", n);
    Ay.setAttributeNS(null, "mtech", O);
    Ay.setAttributeNS(null, "mdb", AI);
    Ay.setAttributeNS(null, "mmb", Aw);
    Ay.setAttributeNS(null, "mfanls", t);
    Ay.setAttributeNS(null, "mfanlsstate", W);
    Ay.setAttributeNS(null, "mjscoor", l);
    Ay.setAttributeNS(null, "mjscooroffset", AP);
    Ay.setAttributeNS(null, "mjsldheight", Q);
    Ay.setAttributeNS(null, "mjsctheight", L);
    if ($.Micro.IsEmpty(Ah)) {
        Ah = 0
    }
    Ay.setAttributeNS(null, "mgdshowstyle", Ah);
    if ($.Micro.IsEmpty(F)) {
        F = ""
    }
    Ay.setAttributeNS(null, "mgdid", F);
    if ($.Micro.IsEmpty(AN)) {
        AN = mDrawFlag_DefinedgdScale
    }
    Ay.setAttributeNS(null, "mgdscale", AN);
    if ($.Micro.IsEmpty(AG)) {
        AG = ""
    }
    if ($.Micro.IsEmpty(AH)) {
        AH = ""
    }
    if ($.Micro.IsEmpty(Ax)) {
        Ax = ""
    }
    if ($.Micro.IsEmpty(R)) {
        R = ""
    }
    Ay.setAttributeNS(null, "mcx_exp", AG);
    Ay.setAttributeNS(null, "mcy_exp", AH);
    Ay.setAttributeNS(null, "mcwidth_exp", Ax);
    Ay.setAttributeNS(null, "mcheight_exp", R);
    if ($.Micro.IsEmpty(Ag)) {
        Ag = "N"
    }
    if ($.Micro.IsEmpty(I)) {
        I = ""
    }
    Ay.setAttributeNS(null, "mfancoorshow", Ag);
    Ay.setAttributeNS(null, "mfanwidth", I);
    Aa.appendChild(Ay);
    var B = document.createElementNS(mDrawSvgNS, "rect");
    B.setAttributeNS(null, "id", J + "_bg");
    B.setAttributeNS(null, "x", Ak);
    B.setAttributeNS(null, "y", Al);
    B.setAttributeNS(null, "width", Aq);
    B.setAttributeNS(null, "height", As);
    B.setAttributeNS(null, "fill", "#FFFFFF");
    B.setAttributeNS(null, "mselect", "1");
    Ay.appendChild(B);
    var K = 0;
    var p = S.split(",");
    for (At = 0; At < p.length; At++) {
        if (p[At].toString() == "1") {
            if (E == "Y") {
                K = Number(K) + Number(e) + Number(AD)
            } else {
                K = Number(K) + Number(e)
            }
        }
    }
    if (Y == "lr") {
        var Aj = Ak;
        var Ac = Al;
        var Af = (Number(Aq) + Number(K)) / Number(a);
        var M = As;
        var X = V.split(",");
        var AK = AM.split(",");
        var u = s.split(",");
        var Az = [];
        var AE = [];
        var AF = 0,
        H = 0;
        if (!$.Micro.IsEmpty(I)) {
            Az = I.split(",")
        }
        var Ar = 0;
        if (Az.length > 0) {
            for (var At = 0; At < X.length; At++) {
                if (X[At] == "f") {
                    var Au = 0;
                    if (Ar < Az.length) {
                        Au = Number(Az[Ar]) / 1000 * mDrawPixelPerM
                    } else {
                        Au = Af
                    }
                    AE.push(Au);
                    H += Au;
                    Ar++
                } else {
                    AE.push(0);
                    AF++
                }
            }
            var Am = ((Number(Aq) + Number(K)) - H) / AF;
            for (var At = 0; At < AE.length; At++) {
                if (AE[At] == 0) {
                    AE[At] = Am
                }
            }
        }
        for (At = 0; At < Number(a); At++) {
            var Ae = J + "_fan" + (Number(At) + 1).toString();
            var v = document.createElementNS(mDrawSvgNS, "g");
            v.setAttributeNS(null, "id", Ae);
            Ay.appendChild(v);
            var AB = 0;
            if (p[At].toString() == "1") {
                if (E == "Y") {
                    AB = Number(e) + Number(AD)
                } else {
                    AB = Number(e)
                }
            }
            Aj = Number(Aj) - Number(AB);
            if (AE.length > 0) {
                Af = AE[At]
            }
            fanHtml = MicroDraw_getFanHtml(Y, Ae, Aj, Ac, Af, M, X[At], AK[At], u[At], D, E, Ao, "N", "无", 400, "N", 0);
            $("#" + Ae).html(fanHtml);
            Aj = Number(Aj) + Number(Af)
        }
    } else {
        var Aj = Ak;
        var Ac = Al;
        var Af = Aq;
        var M = (Number(As) + Number(K)) / Number(a);
        var X = V.split(",");
        var AK = AM.split(",");
        var u = s.split(",");
        for (At = 0; At < Number(a); At++) {
            var Ae = J + "_fan" + (Number(At) + 1).toString();
            var v = document.createElementNS(mDrawSvgNS, "g");
            v.setAttributeNS(null, "id", Ae);
            Ay.appendChild(v);
            var AC = 0;
            if (p[At].toString() == "1") {
                if (E == "Y") {
                    AC = Number(e) + Number(AD)
                } else {
                    AC = Number(e)
                }
            }
            Ac = Number(Ac) - Number(AC);
            fanHtml = MicroDraw_getFanHtml(Y, Ae, Aj, Ac, Af, M, X[At], AK[At], u[At], D, E, Ao, "N", "无", 400, "N", 0);
            $("#" + Ae).html(fanHtml);
            Ac = Number(Ac) + Number(M)
        }
    }
    var G = f.split(",");
    for (k = 0; k < Number(a); k++) {
        for (At = 0; At < Number(a); At++) {
            if (G[At].toString() == k.toString()) {
                var Ae = J + "_fan" + (Number(At) + 1).toString();
                var AJ = $("#" + Ae)[0];
                AJ.parentNode.appendChild(AJ)
            }
        }
    }
    var q = false;
    var U = 0;
    var AA = 0;
    var T = Number(Ak);
    var A = Number(Ak);
    var N = replaceAll(V, ",", "");
    if (N.indexOf("g") >= 0) {
        q = true;
        U = N.indexOf("g") + 1;
        AA = N.indexOf("f") + 1;
        T = $("#" + Av + "_fan" + U + "_r1").attr("x");
        A = $("#" + Av + "_fan" + AA + "_r1").attr("x")
    }
    var Z = "G1";
    if ($.isArray(AO)) {
        Z = AO[1];
        AO = AO[0]
    }
    var c = document.createElementNS(mDrawSvgNS, "rect");
    c.setAttributeNS(null, "id", J + "_txtr");
    c.setAttributeNS(null, "x", Number(A) + Number(e) + Number(AD) + Number(4));
    c.setAttributeNS(null, "y", Number(Al) + Number(As) - Number(e) - Number(AD) - Number(18) - Number(4));
    c.setAttributeNS(null, "width", mDraw_GlassFlagRectW);
    c.setAttributeNS(null, "height", mDraw_GlassFlagRectH);
    c.setAttributeNS(null, "fill", mDrawGlassColor);
    if (mDraw_GlassFlagRectBorder) {
        c.setAttributeNS(null, "stroke", "black")
    } else {
        c.setAttributeNS(null, "stroke", mDrawGlassColor)
    }
    c.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
    c.setAttributeNS(null, "mselect", "1");
    c.setAttributeNS(null, "mselected", "0");
    var b = document.createElementNS(mDrawSvgNS, "text");
    b.setAttributeNS(null, "id", J + "_txt");
    b.setAttributeNS(null, "x", Number(A) + Number(e) + Number(AD) + Number(8));
    b.setAttributeNS(null, "y", Number(Al) + Number(As) - Number(e) - Number(AD) - Number(8));
    b.setAttributeNS(null, "font-size", mDraw_GlassFlagFontSize);
    b.textContent = AO;
    b.setAttributeNS(null, "fill", "#000000");
    b.setAttributeNS(null, "font-weight", mDraw_GlassFlagFontWeight);
    Ay.appendChild(c);
    Ay.appendChild(b);
    if (q) {
        var c = document.createElementNS(mDrawSvgNS, "rect");
        c.setAttributeNS(null, "id", J + "_txtg");
        c.setAttributeNS(null, "x", Number(T) + Number(e) + Number(AD) + Number(4));
        c.setAttributeNS(null, "y", Number(Al) + Number(As) - Number(e) - Number(AD) - Number(18) - Number(4));
        c.setAttributeNS(null, "width", mDraw_GlassFlagRectW);
        c.setAttributeNS(null, "height", mDraw_GlassFlagRectH);
        c.setAttributeNS(null, "fill", mDrawGlassColor);
        if (mDraw_GlassFlagRectBorder) {
            c.setAttributeNS(null, "stroke", "black")
        } else {
            c.setAttributeNS(null, "stroke", mDrawGlassColor)
        }
        c.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        c.setAttributeNS(null, "mselect", "1");
        c.setAttributeNS(null, "mselected", "0");
        var b = document.createElementNS(mDrawSvgNS, "text");
        b.setAttributeNS(null, "id", J + "_txt2");
        b.setAttributeNS(null, "x", Number(T) + Number(e) + Number(AD) + Number(8));
        b.setAttributeNS(null, "y", Number(Al) + Number(As) - Number(e) - Number(AD) - Number(8));
        b.setAttributeNS(null, "font-size", mDraw_GlassFlagFontSize);
        b.textContent = Z;
        b.setAttributeNS(null, "fill", "#000000");
        b.setAttributeNS(null, "font-weight", mDraw_GlassFlagFontWeight);
        Ay.appendChild(c);
        Ay.appendChild(b)
    }
}
function MicroDraw_Zdm_ClickAddZdm(V, Z, I, t, M, E, r, P, b, X, K, o) {
    if (! (mDrawSelectObjId.length > 0)) {
        jQuery.messager.alert("提示:", "请选择对象后再增加扇！", "info");
        return
    }
    var F = $("[mselected='1']")[0];
    var p = F.parentNode;
    var J = p.parentNode;
    if ($(F).parents("[mtype=" + mDrawFlag_WinArcs + "]").length > 0) {
        jQuery.messager.alert("提示:", "暂不支持外弧窗增加扇功能！", "info");
        return
    }
    if (p.getAttribute("mtype") == mDrawFlag_FrameRect || p.getAttribute("mtype") == mDrawFlag_TingV || p.getAttribute("mtype") == mDrawFlag_TingH) {
        jQuery.messager.alert("提示:", "不能在当前区域增加扇！", "info");
        return
    }
    MicroDraw_AddObjDelFrameArc($(p));
    var g;
    var u, S, R, Q;
    var f, Y, s, A;
    var l, m, H, L;
    var W;
    g = p.getAttribute("mtype");
    u = p.getAttribute("mlid");
    S = p.getAttribute("mrid");
    R = p.getAttribute("mtid");
    Q = p.getAttribute("mbid");
    f = p.getAttribute("mx");
    Y = p.getAttribute("my");
    s = p.getAttribute("mwidth");
    A = p.getAttribute("mheight");
    var T = p.getAttribute("mcx_exp");
    var n = p.getAttribute("mcy_exp");
    var e = p.getAttribute("mcwidth_exp");
    var q = p.getAttribute("mcheight_exp");
    l = F.getAttribute("x");
    m = F.getAttribute("y");
    H = F.getAttribute("width");
    L = F.getAttribute("height");
    W = p.getAttribute("id");
    var O = MicroDraw_getXcxlValueByObjId(J.getAttribute("id"), "O", "扇拼接方式", "prid");
    var N = MicroDraw_getXcxlValueByObjId(J.getAttribute("id"), "O", "扇压线", "prid");
    var U = MicroDraw_getXcxlValueByObjId(J.getAttribute("id"), "O", "扇压线拼接方式", "prid");
    var a = "";
    if (!isEmptyOrNull(O)) {
        E = O
    }
    if (!isEmptyOrNull(N)) {
        r = N
    }
    if (!isEmptyOrNull(U)) {
        P = U
    }
    if (!isEmptyOrNull(a)) {
        b = a
    }
    J.removeChild(p);
    var C = MicroDraw_GUID();
    MicroDraw_Zdm_Add(J.getAttribute("id"), V, Z, C, l, m, H, L, f, Y, s, A, u, S, R, Q, V + Z, "f", "0", M, E, r, P, b, "F12", X, K, o, "上", "", "", T, n, e, q);
    var c = MicroDraw_GetObjProperty(R, "mbid");
    c = c.replace(W, C);
    MicroDraw_SetObjProperty(R, "mbid", c);
    var D = MicroDraw_GetObjProperty(Q, "mtid");
    D = D.replace(W, C);
    MicroDraw_SetObjProperty(Q, "mtid", D);
    var B = MicroDraw_GetObjProperty(u, "mrid");
    B = B.replace(W, C);
    MicroDraw_SetObjProperty(u, "mrid", B);
    var G = MicroDraw_GetObjProperty(S, "mlid");
    G = G.replace(W, C);
    MicroDraw_SetObjProperty(S, "mlid", G);
    MicroDraw_GraphXljgDefault($("#" + C).parents("[mwin]"), $("#" + C));
    MicroDraw_Redraw(C);
    MicroDraw_reflashGlassFlag();
    MicroDraw_autoGdPic();
    MicroDraw_StepRecord()
}
function MicroDraw_Zdm_Add(o, P, e, Ak, p, q, Aa, Ad, a, S, G, I, Aj, X, V, T, C, J, Ah, O, H, Ae, Z, f, U, b, M, v, u, F, L, R, Y, t, m, Ac) {
    var N = document.getElementById(o);
    var Af = Number(mDrawSvgViewBox * mDrawThickFan);
    var A = Number(mDrawSvgViewBox * mDrawThickYt);
    var D = Ak;
    var Ab = mDrawFlag_Zdm + "_" + C + "_" + replaceAll(J, ",", "") + "_" + replaceAll(Ah, ",", "");
    var B = document.createElementNS(mDrawSvgNS, "g");
    B.setAttributeNS(null, "id", D);
    B.setAttributeNS(null, "mtype", Ab);
    B.setAttributeNS(null, "mx", a);
    B.setAttributeNS(null, "my", S);
    B.setAttributeNS(null, "mwidth", G);
    B.setAttributeNS(null, "mheight", I);
    B.setAttributeNS(null, "mlid", Aj);
    B.setAttributeNS(null, "mrid", X);
    B.setAttributeNS(null, "mtid", V);
    B.setAttributeNS(null, "mbid", T);
    B.setAttributeNS(null, "mlscnt", P);
    B.setAttributeNS(null, "mrscnt", e);
    B.setAttributeNS(null, "mfancnt", C);
    B.setAttributeNS(null, "mfantype", J);
    B.setAttributeNS(null, "mfanlayer", Ah);
    B.setAttributeNS(null, "mfanoffset", O);
    B.setAttributeNS(null, "mfanpjstyle", H);
    B.setAttributeNS(null, "mfanhasyt", Ae);
    B.setAttributeNS(null, "mfanytpjstyle", Z);
    B.setAttributeNS(null, "mglass", f);
    B.setAttributeNS(null, "mtech", b);
    B.setAttributeNS(null, "mdb", M);
    B.setAttributeNS(null, "mmb", v);
    if ($.Micro.IsEmpty(u)) {
        u = ""
    }
    B.setAttributeNS(null, "mgdopendir", u);
    if ($.Micro.IsEmpty(F)) {
        F = 0
    }
    B.setAttributeNS(null, "mgdshowstyle", F);
    if ($.Micro.IsEmpty(L)) {
        L = ""
    }
    B.setAttributeNS(null, "mgdid", L);
    if ($.Micro.IsEmpty(R)) {
        R = mDrawFlag_DefinedgdScale
    }
    B.setAttributeNS(null, "mgdscale", R);
    if ($.Micro.IsEmpty(Y)) {
        Y = ""
    }
    if ($.Micro.IsEmpty(t)) {
        t = ""
    }
    if ($.Micro.IsEmpty(m)) {
        m = ""
    }
    if ($.Micro.IsEmpty(Ac)) {
        Ac = ""
    }
    B.setAttributeNS(null, "mcx_exp", Y);
    B.setAttributeNS(null, "mcy_exp", t);
    B.setAttributeNS(null, "mcwidth_exp", m);
    B.setAttributeNS(null, "mcheight_exp", Ac);
    N.appendChild(B);
    var c = document.createElementNS(mDrawSvgNS, "rect");
    c.setAttributeNS(null, "id", D + "_bg");
    c.setAttributeNS(null, "x", p);
    c.setAttributeNS(null, "y", q);
    c.setAttributeNS(null, "width", Aa);
    c.setAttributeNS(null, "height", Ad);
    c.setAttributeNS(null, "fill", "#FFFFFF");
    c.setAttributeNS(null, "mselect", "1");
    B.appendChild(c);
    var s = 0;
    var n = O.split(",");
    for (i = 0; i < n.length; i++) {
        if (n[i].toString() == "1") {
            if (Ae == "Y") {
                s = Number(s) + Number(Af) + Number(A)
            } else {
                s = Number(s) + Number(Af)
            }
        }
    }
    var Al = p;
    var K = q;
    var l = (Number(Aa) + Number(s)) / Number(C);
    var Ai = Ad;
    var r = J.split(",");
    for (i = 0; i < Number(C); i++) {
        var Ag = D + "_fan" + (Number(i) + 1).toString();
        var Q = document.createElementNS(mDrawSvgNS, "g");
        Q.setAttributeNS(null, "id", Ag);
        B.appendChild(Q);
        fanTlcFlag = "ZDM_L";
        if (i >= P) {
            fanTlcFlag = "ZDM_R"
        }
        fanHtml = MicroDraw_getFanHtml("lr", Ag, Al, K, l, Ai, J, fanTlcFlag, "0", H, Ae, Z, "N", "无", 400, "N", 0);
        $("#" + Ag).html(fanHtml);
        Al = Number(Al) + Number(l)
    }
    var W = document.createElementNS(mDrawSvgNS, "rect");
    W.setAttributeNS(null, "id", D + "_txtr");
    W.setAttributeNS(null, "x", Number(p) + Number(Af) + Number(A) + Number(4));
    W.setAttributeNS(null, "y", Number(q) + Number(Ad) - Number(Af) - Number(A) - Number(18) - Number(4));
    W.setAttributeNS(null, "width", mDraw_GlassFlagRectW);
    W.setAttributeNS(null, "height", mDraw_GlassFlagRectH);
    W.setAttributeNS(null, "fill", mDrawGlassColor);
    if (mDraw_GlassFlagRectBorder) {
        W.setAttributeNS(null, "stroke", "black")
    } else {
        W.setAttributeNS(null, "stroke", mDrawGlassColor)
    }
    W.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
    W.setAttributeNS(null, "mselect", "1");
    W.setAttributeNS(null, "mselected", "0");
    var E = document.createElementNS(mDrawSvgNS, "text");
    E.setAttributeNS(null, "id", D + "_txt");
    E.setAttributeNS(null, "x", Number(p) + Number(Af) + Number(A) + Number(8));
    E.setAttributeNS(null, "y", Number(q) + Number(Ad) - Number(Af) - Number(A) - Number(8));
    E.setAttributeNS(null, "font-size", mDraw_GlassFlagFontSize);
    E.textContent = U;
    E.setAttributeNS(null, "fill", "#000000");
    E.setAttributeNS(null, "font-weight", mDraw_GlassFlagFontWeight);
    B.appendChild(W);
    B.appendChild(E)
}
function MicroDraw_getFanHtml(a, K, Al, Am, Ap, Ar, X, AJ, P, E, F, f, U, L, B, Aw, Aa, s, c) {
    var V = "";
    var r = Number(mDrawSvgViewBox * mDrawThickFan);
    var g = Number(mDrawSvgViewBox * mDrawThickYt);
    var e;
    var R;
    Aw = Number($.Micro.IsEmpty(Aw) ? 1 : Aw);
    e = Ap;
    R = Ar;
    var t, Ad, Az, p;
    var Aq, Ae, AA, AF;
    var Au, Ay, D, At;
    var Aj, An, AE, As;
    var S, q, Av, Q;
    var I, o, Ak, G;
    t = Al;
    Aq = Am;
    Au = (Number(Al) + Number(r));
    Aj = (Number(Am) + Number(r));
    S = (Number(Al) + Number(r) + Number(g));
    I = (Number(Am) + Number(r) + Number(g));
    Ad = (Number(Al) + Number(e));
    Ae = Am;
    Ay = (Number(Al) + Number(e) - Number(r));
    An = (Number(Am) + Number(r));
    q = (Number(Al) + Number(e) - Number(r) - Number(g));
    o = (Number(Am) + Number(r) + Number(g));
    Az = (Number(Al) + Number(e));
    AA = (Number(Am) + Number(R));
    D = (Number(Al) + Number(e) - Number(r));
    AE = (Number(Am) + Number(R) - Number(r));
    Av = (Number(Al) + Number(e) - Number(r) - Number(g));
    Ak = (Number(Am) + Number(R) - Number(r) - Number(g));
    p = Al;
    AF = (Number(Am) + Number(R));
    At = (Number(Al) + Number(r));
    As = (Number(Am) + Number(R) - Number(r));
    Q = (Number(Al) + Number(r) + Number(g));
    G = (Number(Am) + Number(R) - Number(r) - Number(g));
    if (X == "k") {
        V = V + '<rect id="' + K + '_k1" x="' + Al + '" y="' + Am + '" width="' + e + '" height="' + R + '" fill="#FFFFFF" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" mselect="1" mselected="0"/>'
    } else {
        V = V + '<rect id="' + K + '_r1" x="' + Al + '" y="' + Am + '" width="' + e + '" height="' + R + '" fill="#FFFFFF" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" mselect="1" mselected="0"/>'
    }
    if (X == "f") {
        V = V + '<rect id="' + K + '_r2" x="' + (Number(Al) + r) + '" y="' + (Number(Am) + r) + '" width="' + (Number(e) - 2 * r) + '" height="' + (Number(R) - 2 * r) + '" fill="#FFFFFF" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" mselect="1" mselected="0"/>';
        if (F == "Y") {
            V = V + '<rect id="' + K + '_r3" x="' + ((Number(Al) + r) + g) + '" y="' + (Number(Am) + r + g) + '" width="' + (Number(e) - 2 * r - 2 * g) + '" height="' + (Number(R) - 2 * r - 2 * g) + '" fill="#FFFFFF" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" mselect="1" mselected="0"/>';
            switch (f) {
            case "45":
                V = V + '<line id="' + K + '_y1" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + Au + '" y1="' + Aj + '" x2="' + S + '" y2="' + I + '"/>';
                V = V + '<line id="' + K + '_y2" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + Ay + '" y1="' + An + '" x2="' + q + '" y2="' + o + '"/>';
                V = V + '<line id="' + K + '_y3" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + D + '" y1="' + AE + '" x2="' + Av + '" y2="' + Ak + '"/>';
                V = V + '<line id="' + K + '_y4" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + At + '" y1="' + As + '" x2="' + Q + '" y2="' + G + '"/>';
                break;
            case "H":
                V = V + '<line id="' + K + '_y1" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + Au + '" y1="' + I + '" x2="' + S + '" y2="' + I + '"/>';
                V = V + '<line id="' + K + '_y2" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + Ay + '" y1="' + o + '" x2="' + q + '" y2="' + o + '"/>';
                V = V + '<line id="' + K + '_y3" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + D + '" y1="' + Ak + '" x2="' + Av + '" y2="' + Ak + '"/>';
                V = V + '<line id="' + K + '_y4" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + At + '" y1="' + G + '" x2="' + Q + '" y2="' + G + '"/>';
                break;
            case "V":
                V = V + '<line id="' + K + '_y1" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + S + '" y1="' + Aj + '" x2="' + S + '" y2="' + I + '"/>';
                V = V + '<line id="' + K + '_y2" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + q + '" y1="' + An + '" x2="' + q + '" y2="' + o + '"/>';
                V = V + '<line id="' + K + '_y3" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + Av + '" y1="' + AE + '" x2="' + Av + '" y2="' + Ak + '"/>';
                V = V + '<line id="' + K + '_y4" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + Q + '" y1="' + As + '" x2="' + Q + '" y2="' + G + '"/>';
                break
            }
        }
        switch (E) {
        case "45":
            V = V + '<line id="' + K + '_l1" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + t + '" y1="' + Aq + '" x2="' + Au + '" y2="' + Aj + '"/>';
            V = V + '<line id="' + K + '_l2" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + Ad + '" y1="' + Ae + '" x2="' + Ay + '" y2="' + An + '"/>';
            V = V + '<line id="' + K + '_l3" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + Az + '" y1="' + AA + '" x2="' + D + '" y2="' + AE + '"/>';
            V = V + '<line id="' + K + '_l4" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + p + '" y1="' + AF + '" x2="' + At + '" y2="' + As + '"/>';
            break;
        case "H":
            V = V + '<line id="' + K + '_l1" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + t + '" y1="' + Aj + '" x2="' + Au + '" y2="' + Aj + '"/>';
            V = V + '<line id="' + K + '_l2" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + Ad + '" y1="' + An + '" x2="' + Ay + '" y2="' + An + '"/>';
            V = V + '<line id="' + K + '_l3" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + Az + '" y1="' + AE + '" x2="' + D + '" y2="' + AE + '"/>';
            V = V + '<line id="' + K + '_l4" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + p + '" y1="' + As + '" x2="' + At + '" y2="' + As + '"/>';
            break;
        case "V":
            V = V + '<line id="' + K + '_l1" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + Au + '" y1="' + Aq + '" x2="' + Au + '" y2="' + Aj + '"/>';
            V = V + '<line id="' + K + '_l2" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + Ay + '" y1="' + Ae + '" x2="' + Ay + '" y2="' + An + '"/>';
            V = V + '<line id="' + K + '_l3" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + D + '" y1="' + AA + '" x2="' + D + '" y2="' + AE + '"/>';
            V = V + '<line id="' + K + '_l4" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + At + '" y1="' + AF + '" x2="' + At + '" y2="' + As + '"/>';
            break
        }
        var M = S;
        var A = q;
        var J = Number(I) + Number(Number(Number(G) - Number(I)) / 2);
        var AM = I;
        var AN = G;
        var AL = Number(S) + Number(Number(Number(q) - Number(S)) / 2);
        if (AJ == "l") {
            V = V + '<line id="' + K + '_f1" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + (A - (A - M) / 4) + '" y1="' + J + '" x2="' + (M + (A - M) / 4) + '" y2="' + J + '"/>';
            V = V + '<line id="' + K + '_f2" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + (M + (A - M) / 4) + '" y1="' + J + '" x2="' + (M + (A - M) / 4 + (A - M) / 7) + '" y2="' + (J - (A - M) / 7) + '"/>'
        } else {
            if (AJ == "r") {
                V = V + '<line id="' + K + '_f1" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + (M + (A - M) / 4) + '" y1="' + J + '" x2="' + (A - (A - M) / 4) + '" y2="' + J + '"/>';
                V = V + '<line id="' + K + '_f2" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + (A - (A - M) / 4) + '" y1="' + J + '" x2="' + (A - (A - M) / 4 - (A - M) / 7) + '" y2="' + (J - (A - M) / 7) + '"/>'
            } else {
                if (AJ == "lr") {
                    V = V + '<line id="' + K + '_f1" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + (A - (A - M) / 4) + '" y1="' + J + '" x2="' + (M + (A - M) / 4) + '" y2="' + J + '"/>';
                    V = V + '<line id="' + K + '_f2" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + (M + (A - M) / 4) + '" y1="' + J + '" x2="' + (M + (A - M) / 4 + (A - M) / 7) + '" y2="' + (J - (A - M) / 7) + '"/>';
                    V = V + '<line id="' + K + '_f3" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + (A - (A - M) / 4) + '" y1="' + J + '" x2="' + (A - (A - M) / 4 - (A - M) / 7) + '" y2="' + (J - (A - M) / 7) + '"/>'
                } else {
                    if (AJ == "t") {
                        V = V + '<line id="' + K + '_f1" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + AL + '" y1="' + (AM + (AN - AM) / 4) + '" x2="' + AL + '" y2="' + (AN - (AN - AM) / 4) + '"/>';
                        V = V + '<line id="' + K + '_f2" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + AL + '" y1="' + (AM + (AN - AM) / 4) + '" x2="' + (AL + (AN - AM) / 7) + '" y2="' + ((AM + (AN - AM) / 4) + (AN - AM) / 7) + '"/>';
                        V = V + '<line id="' + K + '_f3" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + AL + '" y1="' + (AM + (AN - AM) / 4) + '" x2="' + (AL - (AN - AM) / 7) + '" y2="' + ((AM + (AN - AM) / 4) + (AN - AM) / 7) + '"/>'
                    } else {
                        if (AJ == "b") {
                            V = V + '<line id="' + K + '_f1" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + AL + '" y1="' + (AM + (AN - AM) / 4) + '" x2="' + AL + '" y2="' + (AN - (AN - AM) / 4) + '"/>';
                            V = V + '<line id="' + K + '_f2" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + AL + '" y1="' + (AN - (AN - AM) / 4) + '" x2="' + (AL - (AN - AM) / 7) + '" y2="' + ((AN - (AN - AM) / 4) - (AN - AM) / 7) + '"/>';
                            V = V + '<line id="' + K + '_f3" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + AL + '" y1="' + (AN - (AN - AM) / 4) + '" x2="' + (AL + (AN - AM) / 7) + '" y2="' + ((AN - (AN - AM) / 4) - (AN - AM) / 7) + '"/>'
                        } else {
                            if (AJ == "tb") {
                                V = V + '<line id="' + K + '_f1" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + AL + '" y1="' + (AM + (AN - AM) / 4) + '" x2="' + AL + '" y2="' + (AN - (AN - AM) / 4) + '"/>';
                                V = V + '<line id="' + K + '_f2" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + AL + '" y1="' + (AM + (AN - AM) / 4) + '" x2="' + (AL + (AN - AM) / 7) + '" y2="' + ((AM + (AN - AM) / 4) + (AN - AM) / 7) + '"/>';
                                V = V + '<line id="' + K + '_f3" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + AL + '" y1="' + (AM + (AN - AM) / 4) + '" x2="' + (AL - (AN - AM) / 7) + '" y2="' + ((AM + (AN - AM) / 4) + (AN - AM) / 7) + '"/>';
                                V = V + '<line id="' + K + '_f4" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + AL + '" y1="' + (AN - (AN - AM) / 4) + '" x2="' + (AL - (AN - AM) / 7) + '" y2="' + ((AN - (AN - AM) / 4) - (AN - AM) / 7) + '"/>';
                                V = V + '<line id="' + K + '_f5" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + AL + '" y1="' + (AN - (AN - AM) / 4) + '" x2="' + (AL + (AN - AM) / 7) + '" y2="' + ((AN - (AN - AM) / 4) - (AN - AM) / 7) + '"/>'
                            }
                        }
                    }
                }
            }
        }
        if (P == "1") {
            var v = 5;
            var C = 8;
            if (F == "Y") {
                var N = (Av - Q) / (Number(v) * mDrawSvgViewBox)
            } else {
                var N = (D - At) / (Number(v) * mDrawSvgViewBox)
            }
            V = V + "<g id='" + K + "_sw' mtype='" + mDrawFlag_Sw + "'>";
            if (F == "Y") {
                for (k = 1; k < C; k++) {
                    V = V + '<line id="' + K + "_swH_" + k + '" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + Number(Q) + '" y1="' + (Number(G) - Number(k) * Number(v * mDrawSvgViewBox)) + '" x2="' + Number(Av) + '" y2="' + (Number(Ak) - Number(k) * Number(v * mDrawSvgViewBox)) + '"/>'
                }
                for (k = 1; k < N; k++) {
                    V = V + '<line id="' + K + "_swV_" + k + '" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + (Number(Q) + Number(k) * Number(v * mDrawSvgViewBox)) + '" y1="' + Number(G) + '" x2="' + (Number(Q) + Number(k) * Number(v * mDrawSvgViewBox)) + '" y2="' + (Number(Ak) - Number(C - 1) * Number(v * mDrawSvgViewBox)) + '"/>'
                }
            } else {
                for (k = 1; k < C; k++) {
                    V = V + '<line id="' + K + "_swH_" + k + '" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + Number(At) + '" y1="' + (Number(As) - Number(k) * Number(v * mDrawSvgViewBox)) + '" x2="' + Number(D) + '" y2="' + (Number(AE) - Number(k) * Number(v * mDrawSvgViewBox)) + '"/>'
                }
                for (k = 1; k < N; k++) {
                    V = V + '<line id="' + K + "_swV_" + k + '" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + (Number(At) + Number(k) * Number(v * mDrawSvgViewBox)) + '" y1="' + Number(As) + '" x2="' + (Number(At) + Number(k) * Number(v * mDrawSvgViewBox)) + '" y2="' + (Number(AE) - Number(C - 1) * Number(v * mDrawSvgViewBox)) + '"/>'
                }
            }
            V = V + "</g>"
        }
        if (U == "Y") {
            var v = 5;
            var C = 8;
            var Ac = mDrawPixelPerM * 22.5 / 1000;
            var Ax = mDrawPixelPerM * 110 / 1000;
            var b = 0;
            var Ah, AD;
            var Ag, AH;
            if (P == "1") {
                Ag = Number(I);
                AH = Number(G) - Number(C) * Number(v * mDrawSvgViewBox)
            } else {
                Ag = Number(I);
                AH = Number(G)
            }
            if (F == "Y") {
                Ah = S;
                AD = q
            } else {
                Ah = Au;
                AD = Ay
            }
            V = V + '<g mtype="' + mDrawFlag_Fdt + '">';
            switch (Aw) {
            case 1:
                var Z = AH;
                var Af = (Number(Number(G)) - Number(Ag));
                var AK = Ax * 2 * mDrawSvgViewBox * 4 / 5;
                var AG = Ax * 2 * mDrawSvgViewBox * 3 / 5;
                var T = 0;
                var H;
                var u;
                b = Ag + Af / 2;
                var n = b;
                H = b - Ax * mDrawSvgViewBox;
                while (Number(b) < Number(Z)) {
                    if (AJ == "PKC_L") {
                        V = V + '<line stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px"';
                        V = V + ' x1="' + Number(Ah) + '"';
                        if (T == 0) {
                            V = V + ' y1="' + (Number(b) + Ac * mDrawSvgViewBox) + '"';
                            V = V + ' x2="' + (Number(AD) - AK) + '"';
                            V = V + ' y2="' + (Number(b) + Ac * mDrawSvgViewBox) + '"'
                        } else {
                            V = V + ' y1="' + Number(b) + '"';
                            V = V + ' x2="' + Number(AD) + '"';
                            V = V + ' y2="' + Number(b) + '"'
                        }
                        V = V + " />";
                        V = V + '<line stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px"';
                        V = V + ' x1="' + Number(Ah) + '"';
                        if (T == 0) {
                            V = V + ' y1="' + (Number(b) + Number(Ac * mDrawSvgViewBox) + Ac * mDrawSvgViewBox) + '"';
                            V = V + ' x2="' + (Number(AD) - AK) + '"';
                            V = V + ' y2="' + (Number(b) + Number(Ac * mDrawSvgViewBox) + Ac * mDrawSvgViewBox) + '"'
                        } else {
                            V = V + ' y1="' + (Number(Number(b) + Number(Ac * mDrawSvgViewBox))) + '"';
                            V = V + ' x2="' + Number(AD) + '"';
                            V = V + ' y2="' + (Number(Number(b) + Number(Ac * mDrawSvgViewBox))) + '"'
                        }
                        V = V + " />"
                    } else {
                        if (AJ == "PKC_R") {
                            V = V + '<line stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px"';
                            V = V + ' x2="' + Number(AD) + '"';
                            if (T == 0) {
                                V = V + ' x1="' + (Number(Ah) + AK) + '"';
                                V = V + ' y1="' + (Number(b) + Ac * mDrawSvgViewBox) + '"';
                                V = V + ' y2="' + (Number(b) + Ac * mDrawSvgViewBox) + '"'
                            } else {
                                V = V + ' x1="' + (Number(Ah)) + '"';
                                V = V + ' y1="' + Number(b) + '"';
                                V = V + ' y2="' + Number(b) + '"'
                            }
                            V = V + " />";
                            V = V + '<line stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px"';
                            V = V + ' x2="' + Number(AD) + '"';
                            if (T == 0) {
                                V = V + ' x1="' + (Number(Ah) + AK) + '"';
                                V = V + ' y1="' + (Number(b) + Number(Ac * mDrawSvgViewBox) + Ac * mDrawSvgViewBox) + '"';
                                V = V + ' y2="' + (Number(b) + Number(Ac * mDrawSvgViewBox) + Ac * mDrawSvgViewBox) + '"'
                            } else {
                                V = V + ' x1="' + Number(Ah) + '"';
                                V = V + ' y1="' + (Number(Number(b) + Number(Ac * mDrawSvgViewBox))) + '"';
                                V = V + ' y2="' + (Number(Number(b) + Number(Ac * mDrawSvgViewBox))) + '"'
                            }
                            V = V + " />"
                        }
                    }
                    T++;
                    b = b + Number(Ac * mDrawSvgViewBox) + Number(Ax * mDrawSvgViewBox)
                }
                b = n - Ax * mDrawSvgViewBox;
                var Y = Ag;
                u = n + (Ac + Ax) * mDrawSvgViewBox;
                while (Number(b) > Number(Y)) {
                    V = V + '<line stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px"';
                    V = V + ' x1="' + Number(Ah) + '"';
                    V = V + ' y1="' + Number(b) + '"';
                    V = V + ' x2="' + Number(AD) + '"';
                    V = V + ' y2="' + Number(b) + '"';
                    V = V + " />";
                    V = V + '<line stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px"';
                    V = V + ' x1="' + Number(Ah) + '"';
                    V = V + ' y1="' + (Number(Number(b) - Number(Ac * mDrawSvgViewBox))) + '"';
                    V = V + ' x2="' + Number(AD) + '"';
                    V = V + ' y2="' + (Number(Number(b) - Number(Ac * mDrawSvgViewBox))) + '"';
                    V = V + " />";
                    b = b - Number(Ac * mDrawSvgViewBox) - Number(Ax * mDrawSvgViewBox)
                }
                if (AJ == "PKC_L") {
                    V = V + '<line stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px"';
                    V = V + ' x1="' + (Number(AD) - AK) + '"';
                    V = V + ' y1="' + H + '"';
                    V = V + ' x2="' + (Number(AD) - AK) + '"';
                    V = V + ' y2="' + u + '"';
                    V = V + " />";
                    V = V + '<line stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px"';
                    V = V + ' x1="' + (Number(AD) - AK + Ac * mDrawSvgViewBox) + '"';
                    V = V + ' y1="' + H + '"';
                    V = V + ' x2="' + (Number(AD) - AK + Ac * mDrawSvgViewBox) + '"';
                    V = V + ' y2="' + u + '"';
                    V = V + " />"
                } else {
                    if (AJ == "PKC_R") {
                        V = V + '<line stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px"';
                        V = V + ' x1="' + (Number(Ah) + AK - Ac * mDrawSvgViewBox) + '"';
                        V = V + ' y1="' + H + '"';
                        V = V + ' x2="' + (Number(Ah) + AK - Ac * mDrawSvgViewBox) + '"';
                        V = V + ' y2="' + u + '"';
                        V = V + " />";
                        V = V + '<line stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px"';
                        V = V + ' x1="' + (Number(Ah) + AK) + '"';
                        V = V + ' y1="' + H + '"';
                        V = V + ' x2="' + (Number(Ah) + AK) + '"';
                        V = V + ' y2="' + u + '"';
                        V = V + " />"
                    }
                }
                break;
            case 2:
                b = Ag + Number(Ax * mDrawSvgViewBox);
                while (Number(b) < Number(AH)) {
                    V = V + '<line stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + Number(Ah) + '" y1="' + Number(b) + '" x2="' + Number(AD) + '" y2="' + Number(b) + '"/>';
                    V = V + '<line stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + Number(Ah) + '" y1="' + Number(Number(b) + Number(Ac * mDrawSvgViewBox)) + '" x2="' + Number(AD) + '" y2="' + Number(Number(b) + Number(Ac * mDrawSvgViewBox)) + '"/>';
                    b = b + Number(Ac * mDrawSvgViewBox) + Number(Ax * mDrawSvgViewBox)
                }
                break
            }
            V = V + "</g>"
        }
        switch (L) {
        case "无":
            break;
        case "1根":
            var Ai = Number(Au);
            var O = Number(Aj) + Number(Number(As) - Number(Aj)) / 2 - Number(mDrawThickTing) / 2;
            var m = Number(Ay) - Number(Au);
            V = V + '<g mtype="' + mDrawFlag_PkcFanH + '" mfill="rgb(178,209,238)" mstroke="#000000" mstrokewidth="1px"><rect x="' + Ai + '" y="' + O + '" width="' + m + '" height="' + mDrawThickTing + '" fill="rgb(178,209,238)" stroke="black" stroke-width="1px" pointer-events="all"></rect></g>';
            break;
        case "2根":
            var Ai = Number(Au);
            var O = Number(Aj) + Number(Number(As) - Number(Aj)) / 2 - Number(mDrawThickTing) / 2 - mDrawPixelPerM * Number(B) / 1000 / 2;
            var m = Number(Ay) - Number(Au);
            V = V + '<g mtype="' + mDrawFlag_PkcFanH + '" mfill="rgb(178,209,238)" mstroke="#000000" mstrokewidth="1px"><rect x="' + Ai + '" y="' + O + '" width="' + m + '" height="' + mDrawThickTing + '" fill="rgb(178,209,238)" stroke="black" stroke-width="1px" pointer-events="all"></rect></g>';
            var Ai = Number(Au);
            var O = Number(Aj) + Number(Number(As) - Number(Aj)) / 2 - Number(mDrawThickTing) / 2 + mDrawPixelPerM * Number(B) / 1000 / 2;
            var m = Number(Ay) - Number(Au);
            V = V + '<g mtype="' + mDrawFlag_PkcFanH + '" mfill="rgb(178,209,238)" mstroke="#000000" mstrokewidth="1px"><rect x="' + Ai + '" y="' + O + '" width="' + m + '" height="' + mDrawThickTing + '" fill="rgb(178,209,238)" stroke="black" stroke-width="1px" pointer-events="all"></rect></g>';
            break;
        case "3根":
            var Ai = Number(Au);
            var O = Number(Aj) + Number(Number(As) - Number(Aj) - 3 * Number(mDrawThickTing)) / 4;
            var m = Number(Ay) - Number(Au);
            V = V + '<g mtype="' + mDrawFlag_PkcFanH + '" mfill="rgb(178,209,238)" mstroke="#000000" mstrokewidth="1px"><rect x="' + Ai + '" y="' + O + '" width="' + m + '" height="' + mDrawThickTing + '" fill="rgb(178,209,238)" stroke="black" stroke-width="1px" pointer-events="all"></rect></g>';
            var Ai = Number(Au);
            var O = Number(Aj) + Number(Number(As) - Number(Aj)) / 2 - Number(mDrawThickTing) / 2;
            var m = Number(Ay) - Number(Au);
            V = V + '<g mtype="' + mDrawFlag_PkcFanH + '" mfill="rgb(178,209,238)" mstroke="#000000" mstrokewidth="1px"><rect x="' + Ai + '" y="' + O + '" width="' + m + '" height="' + mDrawThickTing + '" fill="rgb(178,209,238)" stroke="black" stroke-width="1px" pointer-events="all"></rect></g>';
            var Ai = Number(Au);
            var O = Number(Aj) + Number(Number(As) - Number(Aj)) / 2 - Number(mDrawThickTing) / 2 + Number(mDrawThickTing) / 2 + Number(Number(As) - Number(Aj) - 3 * Number(mDrawThickTing)) / 4;
            var m = Number(Ay) - Number(Au);
            V = V + '<g mtype="' + mDrawFlag_PkcFanH + '" mfill="rgb(178,209,238)" mstroke="#000000" mstrokewidth="1px"><rect x="' + Ai + '" y="' + O + '" width="' + m + '" height="' + mDrawThickTing + '" fill="rgb(178,209,238)" stroke="black" stroke-width="1px" pointer-events="all"></rect></g>';
            break
        }
        if ($.Micro.IsEmpty(Aa)) {
            Aa = mDrawFlag_PK_zsStyle[0].id
        }
        if (AJ == "PKC_L") {
            V = V + '<line id="' + K + '_f1" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + q + '" y1="' + o + '" x2="' + S + '" y2="' + Number(Number(I) + Number(Number(G) - Number(I)) / 2) + '"/>';
            V = V + '<line id="' + K + '_f2" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + S + '" y1="' + Number(Number(I) + Number(Number(G) - Number(I)) / 2) + '" x2="' + Av + '" y2="' + Ak + '"/>';
            switch (Aa) {
            case "1":
                var Ab = 5;
                var AC = Number(R) / 2;
                var l = Ab;
                var AB = (Number(t) + Number(e) * Number(mDrawSvgViewBox) - mDrawThickFan * 2 - mDrawThickTing);
                V += '<g mtag="mzsstyle">';
                V += '<rect id="' + K + '_h2" x="' + AB + '" y="' + (Aq + Number(R) / 4 + AC / 6 - mDrawThickTing / 2) + '"  width="' + (mDrawThickFan + mDrawThickTing + mDrawThickFan / 2) * Number(mDrawSvgViewBox) + '" height="' + Ab * Number(mDrawSvgViewBox) + '" fill="' + mDrawProductColor + '" stroke="#000000"/>';
                V += '<rect id="' + K + '_h3" x="' + AB + '" y="' + (Aq + Number(R) / 4 + AC * 5 / 6 - mDrawThickTing / 2) + '"  width="' + (mDrawThickFan + mDrawThickTing + mDrawThickFan / 2) * Number(mDrawSvgViewBox) + '" height="' + Ab * Number(mDrawSvgViewBox) + '" fill="' + mDrawProductColor + '" stroke="#000000"/>';
                V += '<rect id="' + K + '_h1" x="' + (AB - 2) + '" y="' + (Aq + Number(R) / 4) + '"  width="' + l * Number(mDrawSvgViewBox) + '" height="' + AC * Number(mDrawSvgViewBox) + '" fill="' + mDrawProductColor + '" stroke="#000000"/>';
                V += "</g>";
                break;
            case "2":
                var AC = (Number(r) + 2) * 2;
                var l = (Number(e) - Number(r) * 2);
                var AI = (Number(Aq) + Number(R) / 2 - AC / 2);
                var AB = (Number(t) - 4 + (Number(r) + l - Number(r) * 2) * Number(mDrawSvgViewBox));
                V += '<g mtag="mzsstyle">';
                V += '<rect id="' + K + '_h1" x="' + (Number(t) + Number(r) * Number(mDrawSvgViewBox)) + '" y="' + AI + '"  width="' + l * Number(mDrawSvgViewBox) + '" height="' + AC * Number(mDrawSvgViewBox) + '" fill="' + mDrawProductColor + '" stroke="#000000"/>';
                V += '<line id="' + K + '_l1" stroke="black" stroke-width="1px" x1="' + AB + '" y1="' + AI + '" x2="' + AB + '" y2="' + (AI + AC) + '" pointer-events="all"></line>';
                V += '<text id="' + K + '_t1" x="' + (Number(t) + (Number(r) + l - Number(r) * 2) * Number(mDrawSvgViewBox)) + '" y="' + (Number(Aq) + Number(R) / 2 + AC / 4) + '" font-size="16" fill="#000000" font-weight="700">拉</text>';
                V += "</g>";
                break;
            case "3":
                var AC = (Number(r) + 2) * 2;
                var l = (Number(e) - Number(r) * 2 + Number(r));
                var Ab = 4;
                var W = 12;
                var AI = (Number(Aq) + Number(R) / 2 - W);
                var AB = (Number(t) - 4 + (Number(r) + l - Number(r) * 2) * Number(mDrawSvgViewBox));
                V += '<g mtag="mzsstyle">';
                V += '<rect system="1" id="' + K + '_h1" x="' + (Number(t) + Number(r) / 2 * Number(mDrawSvgViewBox)) + '" y="' + AI + '"  width="' + l * Number(mDrawSvgViewBox) + '" height="' + Ab * Number(mDrawSvgViewBox) + '" fill="#FFFFFF" stroke="#000000" rx="2" ry="2"/>';
                V += '<rect id="' + K + '_h2" x="' + (Number(t) + Number(r) / 2 * Number(mDrawSvgViewBox) + l / 4) + '" y="' + AI + '"  width="' + l / 2 * Number(mDrawSvgViewBox) + '" height="' + Ab * Number(mDrawSvgViewBox) + '" fill="' + mDrawProductColor + '" stroke="#000000"/>';
                V += '<rect system="1" id="' + K + '_h3" x="' + (Number(t) + Number(r) / 2 * Number(mDrawSvgViewBox)) + '" y="' + (AI + W * 2 - Ab) + '"  width="' + l * Number(mDrawSvgViewBox) + '" height="' + Ab * Number(mDrawSvgViewBox) + '" fill="#FFFFFF" stroke="#000000" rx="2" ry="2"/>';
                V += '<rect id="' + K + '_h4" x="' + (Number(t) + Number(r) / 2 * Number(mDrawSvgViewBox) + l / 4) + '" y="' + (AI + W * 2 - Ab) + '"  width="' + l / 2 * Number(mDrawSvgViewBox) + '" height="' + Ab * Number(mDrawSvgViewBox) + '" fill="' + mDrawProductColor + '" stroke="#000000"/>';
                V += "</g>";
                break;
            default:
                V = V + '<rect id="' + K + '_h1" x="' + (Number(Ad) - Number(r) / 2 - (Number(4) * Number(mDrawSvgViewBox)) / 2) + '" y="' + (Number(Ae) + Number(Number(AA) - Number(Ae)) / 2 - (Number(16) * Number(mDrawSvgViewBox)) / 2) + '" width="' + Number(4) * Number(mDrawSvgViewBox) + '" height="' + Number(16) * Number(mDrawSvgViewBox) + '" fill="#000000" stroke="#000000"/>';
                V = V + '<rect id="' + K + '_h2" x="' + (Number(Ad) - Number(r) / 2 - (Number(4) * Number(mDrawSvgViewBox)) / 2 - Number(18) * Number(mDrawSvgViewBox)) + '" y="' + (Number(Ae) + Number(Number(AA) - Number(Ae)) / 2 - (Number(4) * Number(mDrawSvgViewBox)) / 2) + '"  width="' + Number(18) * Number(mDrawSvgViewBox) + '" height="' + Number(4) * Number(mDrawSvgViewBox) + '" fill="#000000" stroke="#000000"/>'
            }
        } else {
            if (AJ == "PKC_R") {
                V = V + '<line id="' + K + '_f1" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + S + '" y1="' + I + '" x2="' + q + '" y2="' + Number(Number(o) + Number(Number(Ak) - Number(o)) / 2) + '"/>';
                V = V + '<line id="' + K + '_f2" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + q + '" y1="' + Number(Number(o) + Number(Number(Ak) - Number(o)) / 2) + '" x2="' + Q + '" y2="' + G + '"/>';
                switch (Aa) {
                case "1":
                    var Ab = 5;
                    var AC = Number(R) / 2;
                    var l = Ab;
                    var AB = (Number(t) + mDrawThickFan);
                    V += '<g mtag="mzsstyle">';
                    V += '<rect id="' + K + '_h5" x="' + (AB - mDrawThickFan / 2) + '" y="' + (Aq + Number(R) / 4 + AC / 6 - mDrawThickTing / 2) + '"  width="' + (mDrawThickFan + mDrawThickTing + mDrawThickFan / 2) * Number(mDrawSvgViewBox) + '" height="' + Ab * Number(mDrawSvgViewBox) + '" fill="' + mDrawProductColor + '" stroke="#000000"/>';
                    V += '<rect id="' + K + '_h6" x="' + (AB - mDrawThickFan / 2) + '" y="' + (Aq + Number(R) / 4 + AC * 5 / 6 - mDrawThickTing / 2) + '"  width="' + (mDrawThickFan + mDrawThickTing + mDrawThickFan / 2) * Number(mDrawSvgViewBox) + '" height="' + Ab * Number(mDrawSvgViewBox) + '" fill="' + mDrawProductColor + '" stroke="#000000"/>';
                    V += '<rect id="' + K + '_h4" x="' + (AB + mDrawThickFan * 2 - l) + '" y="' + (Aq + Number(R) / 4) + '"  width="' + l * Number(mDrawSvgViewBox) + '" height="' + AC * Number(mDrawSvgViewBox) + '" fill="' + mDrawProductColor + '" stroke="#000000"/>';
                    V += "</g>";
                    break;
                case "2":
                    var AC = (Number(r) + 2) * 2;
                    var l = (Number(e) - Number(r) * 2);
                    var AI = (Number(Aq) + Number(R) / 2 - AC / 2);
                    var AB = (Number(t) + 4 + (Number(r) * 3) * Number(mDrawSvgViewBox));
                    V += '<g mtag="mzsstyle">';
                    V += '<rect id="' + K + '_h2" x="' + (Number(t) + Number(r) * Number(mDrawSvgViewBox)) + '" y="' + AI + '"  width="' + l * Number(mDrawSvgViewBox) + '" height="' + AC * Number(mDrawSvgViewBox) + '" fill="' + mDrawProductColor + '" stroke="#000000"/>';
                    V += '<line id="' + K + '_l2" stroke="black" stroke-width="1px" x1="' + AB + '" y1="' + AI + '" x2="' + AB + '" y2="' + (AI + AC) + '" pointer-events="all"></line>';
                    V += '<text id="' + K + '_t2" x="' + (Number(t) + 4 + Number(r) * Number(mDrawSvgViewBox)) + '" y="' + (Number(Aq) + Number(R) / 2 + AC / 4) + '" font-size="16" fill="#000000" font-weight="700">拉</text>';
                    V += "</g>";
                    break;
                case "3":
                    var AC = (Number(r) + 2) * 2;
                    var l = (Number(e) - Number(r) * 2 + Number(r));
                    var Ab = 4;
                    var W = 12;
                    var AI = (Number(Aq) + Number(R) / 2 - W);
                    var AB = (Number(t) - 4 + (Number(r) + l - Number(r) * 2) * Number(mDrawSvgViewBox));
                    V += '<g mtag="mzsstyle">';
                    V += '<rect system="1" id="' + K + '_h5" x="' + (Number(t) + Number(r) / 2 * Number(mDrawSvgViewBox)) + '" y="' + AI + '"  width="' + l * Number(mDrawSvgViewBox) + '" height="' + Ab * Number(mDrawSvgViewBox) + '" fill="#FFFFFF" stroke="#000000" rx="2" ry="2"/>';
                    V += '<rect id="' + K + '_h6" x="' + (Number(t) + Number(r) / 2 * Number(mDrawSvgViewBox) + l / 4) + '" y="' + AI + '"  width="' + l / 2 * Number(mDrawSvgViewBox) + '" height="' + Ab * Number(mDrawSvgViewBox) + '" fill="' + mDrawProductColor + '" stroke="#000000"/>';
                    V += '<rect system="1" id="' + K + '_h7" x="' + (Number(t) + Number(r) / 2 * Number(mDrawSvgViewBox)) + '" y="' + (AI + W * 2 - Ab) + '"  width="' + l * Number(mDrawSvgViewBox) + '" height="' + Ab * Number(mDrawSvgViewBox) + '" fill="#FFFFFF" stroke="#000000" rx="2" ry="2"/>';
                    V += '<rect id="' + K + '_h8" x="' + (Number(t) + Number(r) / 2 * Number(mDrawSvgViewBox) + l / 4) + '" y="' + (AI + W * 2 - Ab) + '"  width="' + l / 2 * Number(mDrawSvgViewBox) + '" height="' + Ab * Number(mDrawSvgViewBox) + '" fill="' + mDrawProductColor + '" stroke="#000000"/>';
                    V += "</g>";
                    break;
                default:
                    V = V + '<rect id="' + K + '_h1" x="' + (Number(t) + Number(r) / 2 - (Number(4) * Number(mDrawSvgViewBox)) / 2) + '" y="' + (Number(Ae) + Number(Number(AA) - Number(Ae)) / 2 - (Number(16) * Number(mDrawSvgViewBox)) / 2) + '" width="' + Number(4) * Number(mDrawSvgViewBox) + '" height="' + Number(16) * Number(mDrawSvgViewBox) + '" fill="#000000" stroke="#000000"/>';
                    V = V + '<rect id="' + K + '_h2" x="' + (Number(t) + Number(r) / 2 + (Number(4) * Number(mDrawSvgViewBox)) / 2) + '" y="' + (Number(Ae) + Number(Number(AA) - Number(Ae)) / 2 - (Number(4) * Number(mDrawSvgViewBox)) / 2) + '"  width="' + Number(18) * Number(mDrawSvgViewBox) + '" height="' + Number(4) * Number(mDrawSvgViewBox) + '" fill="#000000" stroke="#000000"/>'
                }
            }
        }
        if (AJ == "ZDM_L") {
            V = V + '<line id="' + K + '_f1" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + q + '" y1="' + o + '" x2="' + S + '" y2="' + Number(Number(I) + Number(Number(G) - Number(I)) / 2) + '"/>';
            V = V + '<line id="' + K + '_f2" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + S + '" y1="' + Number(Number(I) + Number(Number(G) - Number(I)) / 2) + '" x2="' + Av + '" y2="' + Ak + '"/>'
        } else {
            if (AJ == "ZDM_R") {
                V = V + '<line id="' + K + '_f1" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + S + '" y1="' + I + '" x2="' + q + '" y2="' + Number(Number(o) + Number(Number(Ak) - Number(o)) / 2) + '"/>';
                V = V + '<line id="' + K + '_f2" stroke="#0000FF" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + q + '" y1="' + Number(Number(o) + Number(Number(Ak) - Number(o)) / 2) + '" x2="' + Q + '" y2="' + G + '"/>'
            }
        }
    } else {
        if (X == "g") {
            V = V + '<rect id="' + K + '_r2" x="' + (Number(Al) + r) + '" y="' + (Number(Am) + r) + '" width="' + (Number(e) - 2 * r) + '" height="' + (Number(R) - 2 * r) + '" fill="#FFFFFF" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" mselect="1" mselected="0"/>';
            switch (E) {
            case "45":
                V = V + '<line id="' + K + '_l1" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + t + '" y1="' + Aq + '" x2="' + Au + '" y2="' + Aj + '"/>';
                V = V + '<line id="' + K + '_l2" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + Ad + '" y1="' + Ae + '" x2="' + Ay + '" y2="' + An + '"/>';
                V = V + '<line id="' + K + '_l3" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + Az + '" y1="' + AA + '" x2="' + D + '" y2="' + AE + '"/>';
                V = V + '<line id="' + K + '_l4" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + p + '" y1="' + AF + '" x2="' + At + '" y2="' + As + '"/>';
                break;
            case "H":
                V = V + '<line id="' + K + '_l1" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + t + '" y1="' + Aj + '" x2="' + Au + '" y2="' + Aj + '"/>';
                V = V + '<line id="' + K + '_l2" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + Ad + '" y1="' + An + '" x2="' + Ay + '" y2="' + An + '"/>';
                V = V + '<line id="' + K + '_l3" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + Az + '" y1="' + AE + '" x2="' + D + '" y2="' + AE + '"/>';
                V = V + '<line id="' + K + '_l4" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + p + '" y1="' + As + '" x2="' + At + '" y2="' + As + '"/>';
                break;
            case "V":
                V = V + '<line id="' + K + '_l1" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + Au + '" y1="' + Aq + '" x2="' + Au + '" y2="' + Aj + '"/>';
                V = V + '<line id="' + K + '_l2" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + Ay + '" y1="' + Ae + '" x2="' + Ay + '" y2="' + An + '"/>';
                V = V + '<line id="' + K + '_l3" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + D + '" y1="' + AA + '" x2="' + D + '" y2="' + AE + '"/>';
                V = V + '<line id="' + K + '_l4" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + At + '" y1="' + AF + '" x2="' + At + '" y2="' + As + '"/>';
                break
            }
            var Ao = mDrawGlassDiff * mDrawSvgViewBox;
            V = V + '<line id="' + K + '_g1" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + (Number(Au) + Number(Ay - Au) / 2 - Ao) + '" y1="' + (Number(Aj) + Number(As - Aj) / 2) + '" x2="' + (Number(Au) + Number(Ay - Au) / 2) + '" y2="' + (Number(Aj) + Number(As - Aj) / 2 - Ao) + '"/>';
            V = V + '<line id="' + K + '_g2" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + (Number(Au) + Number(Ay - Au) / 2 - Ao) + '" y1="' + (Number(Aj) + Number(As - Aj) / 2 + Ao) + '" x2="' + (Number(Au) + Number(Ay - Au) / 2 + Ao) + '" y2="' + (Number(Aj) + Number(As - Aj) / 2 - Ao) + '"/>';
            V = V + '<line id="' + K + '_g3" stroke="#000000" stroke-width="' + mDrawSvgViewBox + 'px" x1="' + (Number(Au) + Number(Ay - Au) / 2) + '" y1="' + (Number(Aj) + Number(As - Aj) / 2 + Ao) + '" x2="' + (Number(Au) + Number(Ay - Au) / 2 + Ao) + '" y2="' + (Number(Aj) + Number(As - Aj) / 2) + '"/>'
        } else {}
    }
    return V
}
function MicroDraw_ClickToBig(B, A) {
    mDrawPixelPerM = Number(mDrawPixelPerM) + Number(A);
    $("#" + mDrawFlag_SvgId).attr("msvgpixelperm", mDrawPixelPerM);
    MicroDraw_RedrawAll(B);
    MicroDraw_ShowSizeProperty();
    MicroDraw_ShowCoordinate();
    MicroDraw_CombWinSetPos();
    MicroDraw_autoGdPic()
}
function MicroDraw_ClickToSmall(B, A) {
    mDrawPixelPerM = Number(mDrawPixelPerM) - Number(A);
    $("#" + mDrawFlag_SvgId).attr("msvgpixelperm", mDrawPixelPerM);
    MicroDraw_RedrawAll(B);
    MicroDraw_ShowSizeProperty();
    MicroDraw_ShowCoordinate();
    MicroDraw_CombWinSetPos();
    MicroDraw_autoGdPic()
}
function MicroDraw_Area_Add(D, L, O, P, C, E, M, F, G, B, R, K, I, N) {
    var A = document.getElementById(D);
    var H = L;
    var J = document.createElementNS(mDrawSvgNS, "g");
    J.setAttributeNS(null, "id", H);
    J.setAttributeNS(null, "mtype", mDrawFlag_Area);
    J.setAttributeNS(null, "mx", M);
    J.setAttributeNS(null, "my", F);
    J.setAttributeNS(null, "mwidth", G);
    J.setAttributeNS(null, "mheight", B);
    J.setAttributeNS(null, "mlid", R);
    J.setAttributeNS(null, "mrid", K);
    J.setAttributeNS(null, "mtid", I);
    J.setAttributeNS(null, "mbid", N);
    var Q = document.createElementNS(mDrawSvgNS, "rect");
    Q.setAttributeNS(null, "id", H + "_r1");
    Q.setAttributeNS(null, "x", O);
    Q.setAttributeNS(null, "y", P);
    Q.setAttributeNS(null, "width", C);
    Q.setAttributeNS(null, "height", E);
    Q.setAttributeNS(null, "fill", "white");
    Q.setAttributeNS(null, "stroke", "black");
    Q.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
    Q.setAttributeNS(null, "mselect", "1");
    Q.setAttributeNS(null, "mselected", "0");
    J.appendChild(Q);
    A.appendChild(J)
}
function MicroDraw_Glass_Add(u, s, Aa, Ab, Ah, Aj, n, Y, I, K, Ak, e, b, Z, Ag, Af, t, Ai) {
    if ($.Micro.IsEmpty(Ag)) {
        Ag = ""
    }
    if ($.Micro.IsEmpty(Af)) {
        Af = ""
    }
    if ($.Micro.IsEmpty(t)) {
        t = ""
    }
    if ($.Micro.IsEmpty(Ai)) {
        Ai = ""
    }
    var R = document.getElementById(u);
    var E = s;
    var Am = document.createElementNS(mDrawSvgNS, "g");
    Am.setAttributeNS(null, "id", E);
    Am.setAttributeNS(null, "mtype", mDrawFlag_Glass);
    Am.setAttributeNS(null, "mx", n);
    Am.setAttributeNS(null, "my", Y);
    Am.setAttributeNS(null, "mwidth", I);
    Am.setAttributeNS(null, "mheight", K);
    Am.setAttributeNS(null, "mlid", Ak);
    Am.setAttributeNS(null, "mrid", e);
    Am.setAttributeNS(null, "mtid", b);
    Am.setAttributeNS(null, "mbid", Z);
    Am.setAttributeNS(null, "mchange", "N");
    Am.setAttributeNS(null, "mcx_exp", Ag);
    Am.setAttributeNS(null, "mcy_exp", Af);
    Am.setAttributeNS(null, "mcwidth_exp", t);
    Am.setAttributeNS(null, "mcheight_exp", Ai);
    Am.setAttributeNS(null, "mfhl", "N");
    var P = MicroDraw_getXcxlValueByObjId(u, "O", "固玻压线", "prid");
    if (isEmptyOrNull(P)) {
        P = "Y"
    }
    Am.setAttributeNS(null, "myt", P);
    var Ac = MicroDraw_getXcxlValueByObjId(u, "O", "固玻压线拼接方式", "prid");
    if (isEmptyOrNull(Ac)) {
        Ac = "45"
    }
    Am.setAttributeNS(null, "mytpjstyle", Ac);
    Am.setAttributeNS(null, "mglass", "");
    Am.setAttributeNS(null, "mutext", "");
    Am.setAttributeNS(null, "mdtext", "");
    Am.setAttributeNS(null, "mltext", "");
    Am.setAttributeNS(null, "mrtext", "");
    var V = document.createElementNS(mDrawSvgNS, "rect");
    V.setAttributeNS(null, "id", E + "_r1");
    V.setAttributeNS(null, "x", Aa);
    V.setAttributeNS(null, "y", Ab);
    V.setAttributeNS(null, "width", Ah);
    V.setAttributeNS(null, "height", Aj);
    V.setAttributeNS(null, "fill", "white");
    V.setAttributeNS(null, "stroke", "black");
    V.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
    V.setAttributeNS(null, "mselect", "1");
    V.setAttributeNS(null, "mselected", "0");
    var m = document.createElementNS(mDrawSvgNS, "rect");
    m.setAttributeNS(null, "id", E + "_r2");
    m.setAttributeNS(null, "x", Number(Aa) + Number(mDrawSvgViewBox * mDrawThickYt));
    m.setAttributeNS(null, "y", Number(Ab) + Number(mDrawSvgViewBox * mDrawThickYt));
    var N = Ah - 2 * Number(mDrawSvgViewBox * mDrawThickYt);
    var Q = Aj - 2 * Number(mDrawSvgViewBox * mDrawThickYt);
    if (N < 1) {
        N = 1
    }
    if (Q < 1) {
        Q = 1
    }
    m.setAttributeNS(null, "width", N);
    m.setAttributeNS(null, "height", Q);
    m.setAttributeNS(null, "fill", "white");
    m.setAttributeNS(null, "stroke", "black");
    m.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
    m.setAttributeNS(null, "mselect", "1");
    m.setAttributeNS(null, "mselected", "0");
    var A = Number(mDrawSvgViewBox * mDrawThickYt);
    var N;
    var Q;
    N = Ah;
    Q = Aj;
    var S, D, F, q;
    var T, Ad, Al, r;
    var G, X, f, W;
    var Ae, L, U, H;
    S = Aa;
    T = Ab;
    G = (Number(Aa) + Number(A));
    Ae = (Number(Ab) + Number(A));
    D = (Number(Aa) + Number(N));
    Ad = Ab;
    X = (Number(Aa) + Number(N) - Number(A));
    L = (Number(Ab) + Number(A));
    F = (Number(Aa) + Number(N));
    Al = (Number(Ab) + Number(Q));
    f = (Number(Aa) + Number(N) - Number(A));
    U = (Number(Ab) + Number(Q) - Number(A));
    q = Aa;
    r = (Number(Ab) + Number(Q));
    W = (Number(Aa) + Number(A));
    H = (Number(Ab) + Number(Q) - Number(A));
    var a = document.createElementNS(mDrawSvgNS, "line");
    var M = document.createElementNS(mDrawSvgNS, "line");
    var C = document.createElementNS(mDrawSvgNS, "line");
    var v = document.createElementNS(mDrawSvgNS, "line");
    a.setAttributeNS(null, "id", E + "_t1");
    a.setAttributeNS(null, "x1", S);
    a.setAttributeNS(null, "y1", T);
    a.setAttributeNS(null, "x2", G);
    a.setAttributeNS(null, "y2", Ae);
    a.setAttributeNS(null, "stroke", "black");
    a.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
    M.setAttributeNS(null, "id", E + "_t2");
    M.setAttributeNS(null, "x1", D);
    M.setAttributeNS(null, "y1", Ad);
    M.setAttributeNS(null, "x2", X);
    M.setAttributeNS(null, "y2", L);
    M.setAttributeNS(null, "stroke", "black");
    M.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
    C.setAttributeNS(null, "id", E + "_t3");
    C.setAttributeNS(null, "x1", F);
    C.setAttributeNS(null, "y1", Al);
    C.setAttributeNS(null, "x2", f);
    C.setAttributeNS(null, "y2", U);
    C.setAttributeNS(null, "stroke", "black");
    C.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
    v.setAttributeNS(null, "id", E + "_t4");
    v.setAttributeNS(null, "x1", q);
    v.setAttributeNS(null, "y1", r);
    v.setAttributeNS(null, "x2", W);
    v.setAttributeNS(null, "y2", H);
    v.setAttributeNS(null, "stroke", "black");
    v.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
    var o = mDrawGlassDiff * mDrawSvgViewBox;
    var l = document.createElementNS(mDrawSvgNS, "line");
    l.setAttributeNS(null, "id", E + "_l1");
    l.setAttributeNS(null, "x1", Number(m.getAttributeNS(null, "x")) + Number(m.getAttributeNS(null, "width")) / 2 - o);
    l.setAttributeNS(null, "y1", Number(m.getAttributeNS(null, "y")) + Number(m.getAttributeNS(null, "height")) / 2);
    l.setAttributeNS(null, "x2", Number(m.getAttributeNS(null, "x")) + Number(m.getAttributeNS(null, "width")) / 2);
    l.setAttributeNS(null, "y2", Number(m.getAttributeNS(null, "y")) + Number(m.getAttributeNS(null, "height")) / 2 - o);
    l.setAttributeNS(null, "stroke", "black");
    l.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
    var O = document.createElementNS(mDrawSvgNS, "line");
    O.setAttributeNS(null, "id", E + "_l2");
    O.setAttributeNS(null, "x1", Number(m.getAttributeNS(null, "x")) + Number(m.getAttributeNS(null, "width")) / 2 - o);
    O.setAttributeNS(null, "y1", Number(m.getAttributeNS(null, "y")) + Number(m.getAttributeNS(null, "height")) / 2 + o);
    O.setAttributeNS(null, "x2", Number(m.getAttributeNS(null, "x")) + Number(m.getAttributeNS(null, "width")) / 2 + o);
    O.setAttributeNS(null, "y2", Number(m.getAttributeNS(null, "y")) + Number(m.getAttributeNS(null, "height")) / 2 - o);
    O.setAttributeNS(null, "stroke", "black");
    O.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
    var J = document.createElementNS(mDrawSvgNS, "line");
    J.setAttributeNS(null, "id", E + "_l3");
    J.setAttributeNS(null, "x1", Number(m.getAttributeNS(null, "x")) + Number(m.getAttributeNS(null, "width")) / 2);
    J.setAttributeNS(null, "y1", Number(m.getAttributeNS(null, "y")) + Number(m.getAttributeNS(null, "height")) / 2 + o);
    J.setAttributeNS(null, "x2", Number(m.getAttributeNS(null, "x")) + Number(m.getAttributeNS(null, "width")) / 2 + o);
    J.setAttributeNS(null, "y2", Number(m.getAttributeNS(null, "y")) + Number(m.getAttributeNS(null, "height")) / 2);
    J.setAttributeNS(null, "stroke", "black");
    J.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
    var c = document.createElementNS(mDrawSvgNS, "rect");
    c.setAttributeNS(null, "id", E + "_txtr");
    c.setAttributeNS(null, "x", Number(Aa) + Number(A) + Number(4));
    c.setAttributeNS(null, "y", Number(Ab) + Number(Aj) - Number(A) - Number(18) - Number(4));
    c.setAttributeNS(null, "width", mDraw_GlassFlagRectW);
    c.setAttributeNS(null, "height", mDraw_GlassFlagRectH);
    c.setAttributeNS(null, "fill", mDrawGlassColor);
    if (mDraw_GlassFlagRectBorder) {
        c.setAttributeNS(null, "stroke", "black")
    } else {
        c.setAttributeNS(null, "stroke", mDrawGlassColor)
    }
    c.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
    c.setAttributeNS(null, "mselect", "1");
    c.setAttributeNS(null, "mselected", "0");
    var B = document.createElementNS(mDrawSvgNS, "text");
    B.setAttributeNS(null, "id", E + "_txt");
    B.setAttributeNS(null, "x", Number(Aa) + Number(A) + Number(8));
    B.setAttributeNS(null, "y", Number(Ab) + Number(Aj) - Number(A) - Number(8));
    B.setAttributeNS(null, "font-size", mDraw_GlassFlagFontSize);
    B.textContent = "F12";
    B.setAttributeNS(null, "fill", "#000000");
    B.setAttributeNS(null, "font-weight", mDraw_GlassFlagFontWeight);
    Am.appendChild(V);
    Am.appendChild(m);
    Am.appendChild(a);
    Am.appendChild(M);
    Am.appendChild(C);
    Am.appendChild(v);
    Am.appendChild(l);
    Am.appendChild(O);
    Am.appendChild(J);
    Am.appendChild(c);
    Am.appendChild(B);
    R.appendChild(Am)
}
function MicroDraw_DelSelected(A) {
    var B = false;
    var C = false;
    $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_controlPoint + "'] rect").each(function(D, E) {
        C = true
    });
    if (C) {
        MicroDraw_DelSelectedCustom(A);
        B = true
    }
    if (!isEmptyOrNull(mDrawSelectObjId)) {
        MicroDraw_DelSelectedWinObj(A);
        B = true
    }
    if (B) {
        MicroDraw_StepRecord()
    }
    MicroDraw_SetSVGObjToTop($("#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_FrameArc + "]"))
}
function MicroDraw_DelSelectedWinObj(BQ) {
    if ($.Micro.IsEmpty(BQ)) {
        BQ = 0
    }
    if (BQ == 0) {
        if (MicroDraw_SysSelectObj) {
            if (MicroDraw_SysSelectObj.length > 0) {
                if (MicroDraw_SysSelectObj.parents("svg").length == 0) {
                    return true
                }
            }
        }
    }
    var l = $("#" + mDrawFlag_SvgId + " #" + mDrawSelectObjId);
    var Bc = l.attr("mtype");
    switch (Bc) {
    case mDrawFlag_FrameRect:
        var c = $("#" + mDrawSelectObjId)[0].parentNode.getAttribute("id");
        var BE = $("#" + mDrawSelectObjId)[0].parentNode.parentNode.getAttribute("id");
        $("#" + mDrawFlag_SvgId + " [mwallbelongto=" + mDrawSelectObjId + "]").remove();
        $("#" + mDrawFlag_SvgId + " [mgdbelongto=" + mDrawSelectObjId + "]").remove();
        $.each($("#" + mDrawSelectObjId).parents("[mtype=win]").find("[mtype=" + mDrawFlag_Pkc + "],[mtype=" + mDrawFlag_Dkc + "]"),
        function() {
            $("#" + mDrawFlag_SvgId + " [mbelongtofanid=" + $(this).attr("id") + "]").remove()
        });
        var V = MicroDraw_getCombWinIDs();
        for (var Bi = 0; Bi < V.length; Bi++) {
            if ($("#" + mDrawSelectObjId).parents("[mtype=win]").attr("id") == V[Bi]) {
                var o;
                if (Bi == 0) {
                    o = $("#" + mDrawFlag_SvgId + " #" + V[Bi + 1] + "[mtype=" + mDrawFlag_Custom_CornerMaterial + "]")
                } else {
                    o = $("#" + mDrawFlag_SvgId + " #" + V[Bi - 1] + "[mtype=" + mDrawFlag_Custom_CornerMaterial + "]")
                }
                if (o.length > 0) {
                    o.remove();
                    MicroDraw_CombWinSetPos();
                    MicroDraw_ShowCornergdpic()
                }
            }
        }
        $("#" + mDrawFlag_SvgId + " [mqjbelongtoframeid='" + mDrawSelectObjId + "']").each(function(R, r) {
            $("#" + mDrawFlag_SvgId + " [moptidbelongtoobj='" + r.id + "']").each(function(B0, w) {
                $(w)[0].parentNode.removeChild(w)
            })
        });
        $.each($("#" + mDrawSelectObjId).parents("[mtype=win]").find("[mtype=" + mDrawFlag_FrameArc + "]"),
        function() {
            $("#" + mDrawFlag_SvgId + " [mrulermaster=" + $(this).attr("id") + "]").remove()
        });
        $("#" + mDrawSelectObjId)[0].parentNode.parentNode.removeChild($("#" + mDrawSelectObjId)[0].parentNode);
        MicroDraw_ShowCoordinate();
        break;
    case mDrawFlag_TingV:
        var c = $("#" + mDrawSelectObjId)[0].parentNode.getAttribute("id");
        var Q = $("#" + mDrawSelectObjId)[0].getAttribute("mlid");
        var AR = $("#" + mDrawSelectObjId)[0].getAttribute("mrid");
        var AJ = $("#" + mDrawSelectObjId)[0].getAttribute("mtid");
        var AY = $("#" + mDrawSelectObjId)[0].getAttribute("mbid");
        var BM = Q.split(",");
        var A2 = AR.split(",");
        if (BM.length > 1) {
            jQuery.messager.alert("提示:", "当前竖挺的左对象多于一个，不能删除！", "info");
            return
        }
        if (A2.length > 1) {
            jQuery.messager.alert("提示:", "当前竖挺的右对象多于一个，不能删除！", "info");
            return
        }
        var Ai, M, AC, BV;
        var AG, BC, AE, u;
        var Bc = $("#" + BM[0])[0].getAttribute("mtype");
        if (Bc.substr(0, 3) == mDrawFlag_Tlc) {
            var D = $("#" + BM[0])[0];
            var AW = $("#" + BM[0] + "_bg")[0];
            var AM = D.getAttribute("mlid");
            Ai = D.getAttribute("mx");
            M = D.getAttribute("my");
            AC = D.getAttribute("mwidth");
            BV = D.getAttribute("mheight");
            AG = AW.getAttribute("x");
            BC = AW.getAttribute("y");
            AE = AW.getAttribute("width");
            u = AW.getAttribute("height")
        } else {
            var D = $("#" + BM[0])[0];
            var Bb = $("#" + BM[0] + "_r1")[0];
            var AM = D.getAttribute("mlid");
            Ai = D.getAttribute("mx");
            M = D.getAttribute("my");
            AC = D.getAttribute("mwidth");
            BV = D.getAttribute("mheight");
            AG = Bb.getAttribute("x");
            BC = Bb.getAttribute("y");
            AE = Bb.getAttribute("width");
            u = Bb.getAttribute("height")
        }
        var BB, A0, AP, t;
        var K, L, Z, AS;
        var Bc = $("#" + A2[0])[0].getAttribute("mtype");
        if (Bc.substr(0, 3) == mDrawFlag_Tlc) {
            var BL = $("#" + A2[0])[0];
            var Aw = $("#" + A2[0] + "_bg")[0];
            var Bg = BL.getAttribute("mrid");
            BB = BL.getAttribute("mx");
            A0 = BL.getAttribute("my");
            AP = BL.getAttribute("mwidth");
            t = BL.getAttribute("mheight");
            K = Aw.getAttribute("x");
            L = Aw.getAttribute("y");
            Z = Aw.getAttribute("width");
            AS = Aw.getAttribute("height")
        } else {
            var BL = $("#" + A2[0])[0];
            var A9 = $("#" + A2[0] + "_r1")[0];
            var Bg = BL.getAttribute("mrid");
            BB = BL.getAttribute("mx");
            A0 = BL.getAttribute("my");
            AP = BL.getAttribute("mwidth");
            t = BL.getAttribute("mheight");
            K = A9.getAttribute("x");
            L = A9.getAttribute("y");
            Z = A9.getAttribute("width");
            AS = A9.getAttribute("height")
        }
        var s = D.getAttribute("mlid");
        var P = BL.getAttribute("mrid");
        var Aq = $("#" + mDrawSelectObjId)[0].getAttribute("mtid");
        var BI = $("#" + mDrawSelectObjId)[0].getAttribute("mbid");
        $("#" + mDrawSelectObjId)[0].parentNode.removeChild($("#" + mDrawSelectObjId)[0]);
        $("#" + BM[0])[0].parentNode.removeChild($("#" + BM[0])[0]);
        $("#" + A2[0])[0].parentNode.removeChild($("#" + A2[0])[0]);
        var Bn = c;
        var Bs = MicroDraw_GUID();
        var A6 = AG;
        var A7 = BC;
        var Bf = Number(K) + Number(Z) - Number(AG);
        var Bh = u;
        var O = Ai;
        var AD = M;
        var AZ = Number(AC) + Number(AP);
        var C = BV;
        var Ba = AM;
        var g = Bg;
        var AU = AJ;
        var Ax = AY;
        MicroDraw_Glass_Add(Bn, Bs, A6, A7, Bf, Bh, O, AD, AZ, C, Ba, g, AU, Ax);
        $("#" + Bs)[0].setAttribute("mlid", s);
        $("#" + Bs)[0].setAttribute("mrid", P);
        $("#" + Bs)[0].setAttribute("mtid", Aq);
        $("#" + Bs)[0].setAttribute("mbid", BI);
        if (!isEmptyOrNull(s)) {
            $("#" + s)[0].setAttribute("mrid", Bs)
        }
        if (!isEmptyOrNull(P)) {
            $("#" + P)[0].setAttribute("mlid", Bs)
        }
        if (!isEmptyOrNull(Aq)) {
            $("#" + Aq)[0].setAttribute("mbid", Bs)
        }
        if (!isEmptyOrNull(BI)) {
            $("#" + BI)[0].setAttribute("mtid", Bs)
        }
        break;
    case mDrawFlag_TingH:
        var c = $("#" + mDrawSelectObjId)[0].parentNode.getAttribute("id");
        var Q = $("#" + mDrawSelectObjId)[0].getAttribute("mlid");
        var AR = $("#" + mDrawSelectObjId)[0].getAttribute("mrid");
        var AJ = $("#" + mDrawSelectObjId)[0].getAttribute("mtid");
        var AY = $("#" + mDrawSelectObjId)[0].getAttribute("mbid");
        var BR = AJ.split(",");
        var Be = AY.split(",");
        if (BR.length > 1) {
            jQuery.messager.alert("提示:", "当前横挺的上对象多于一个，不能删除！", "info");
            return
        }
        if (Be.length > 1) {
            jQuery.messager.alert("提示:", "当前横挺的下对象多于一个，不能删除！", "info");
            return
        }
        var Y, G, BW, a;
        var Az, AA, Ab, AH;
        var Bc = $("#" + BR[0])[0].getAttribute("mtype");
        if (Bc.substr(0, 3) == mDrawFlag_Tlc) {
            var BN = $("#" + BR[0])[0];
            var n = $("#" + BR[0] + "_bg")[0];
            var T = BN.getAttribute("mtid");
            Y = BN.getAttribute("mx");
            G = BN.getAttribute("my");
            BW = BN.getAttribute("mwidth");
            a = BN.getAttribute("mheight");
            Az = n.getAttribute("x");
            AA = n.getAttribute("y");
            Ab = n.getAttribute("width");
            AH = n.getAttribute("height")
        } else {
            var BN = $("#" + BR[0])[0];
            var AF = $("#" + BR[0] + "_r1")[0];
            var T = BN.getAttribute("mtid");
            Y = BN.getAttribute("mx");
            G = BN.getAttribute("my");
            BW = BN.getAttribute("mwidth");
            a = BN.getAttribute("mheight");
            Az = AF.getAttribute("x");
            AA = AF.getAttribute("y");
            Ab = AF.getAttribute("width");
            AH = AF.getAttribute("height")
        }
        var F, Bw, f, Aj;
        var W, X, BO, Ao;
        var Bc = $("#" + Be[0])[0].getAttribute("mtype");
        if (Bc.substr(0, 3) == mDrawFlag_Tlc) {
            var U = $("#" + Be[0])[0];
            var A5 = $("#" + Be[0] + "_bg")[0];
            var AV = U.getAttribute("mbid");
            F = U.getAttribute("mx");
            Bw = U.getAttribute("my");
            f = U.getAttribute("mwidth");
            Aj = U.getAttribute("mheight");
            W = A5.getAttribute("x");
            X = A5.getAttribute("y");
            BO = A5.getAttribute("width");
            Ao = A5.getAttribute("height")
        } else {
            var U = $("#" + Be[0])[0];
            var Bl = $("#" + Be[0] + "_r1")[0];
            var AV = U.getAttribute("mbid");
            F = U.getAttribute("mx");
            Bw = U.getAttribute("my");
            f = U.getAttribute("mwidth");
            Aj = U.getAttribute("mheight");
            W = Bl.getAttribute("x");
            X = Bl.getAttribute("y");
            BO = Bl.getAttribute("width");
            Ao = Bl.getAttribute("height")
        }
        var s = $("#" + mDrawSelectObjId)[0].getAttribute("mlid");
        var P = $("#" + mDrawSelectObjId)[0].getAttribute("mrid");
        var Aq = BN.getAttribute("mtid");
        var BI = U.getAttribute("mbid");
        $("#" + mDrawSelectObjId)[0].parentNode.removeChild($("#" + mDrawSelectObjId)[0]);
        $("#" + BR[0])[0].parentNode.removeChild($("#" + BR[0])[0]);
        $("#" + Be[0])[0].parentNode.removeChild($("#" + Be[0])[0]);
        var Bn = c;
        var Bs = MicroDraw_GUID();
        var A6 = Az;
        var A7 = AA;
        var Bf = Ab;
        var Bh = Number(X) + Number(Ao) - Number(AA);
        var O = Y;
        var AD = G;
        var AZ = BW;
        var C = Number(a) + Number(Aj);
        var Ba = Q;
        var g = AR;
        var AU = T;
        var Ax = AV;
        MicroDraw_Glass_Add(Bn, Bs, A6, A7, Bf, Bh, O, AD, AZ, C, Ba, g, AU, Ax);
        $("#" + Bs)[0].setAttribute("mlid", s);
        $("#" + Bs)[0].setAttribute("mrid", P);
        $("#" + Bs)[0].setAttribute("mtid", Aq);
        $("#" + Bs)[0].setAttribute("mbid", BI);
        if (!isEmptyOrNull(s)) {
            $("#" + s)[0].setAttribute("mrid", Bs)
        }
        if (!isEmptyOrNull(P)) {
            $("#" + P)[0].setAttribute("mlid", Bs)
        }
        if (!isEmptyOrNull(Aq)) {
            $("#" + Aq)[0].setAttribute("mbid", Bs)
        }
        if (!isEmptyOrNull(BI)) {
            $("#" + BI)[0].setAttribute("mtid", Bs)
        }
        break;
    case mDrawFlag_FrameArcs:
        l.parents("[mtype=" + mDrawFlag_WinArcs + "]").remove();
        break;
    case mDrawFlag_FrameArcsTingV:
        var Q = l.attr("mlid");
        var AR = l.attr("mrid");
        var AJ = l.attr("mtid");
        var AY = l.attr("mbid");
        var BM = Q.split(",");
        var A2 = AR.split(",");
        if (BM.length > 1) {
            jQuery.messager.alert("提示:", "当前竖挺的左对象多于一个，不能删除！", "info");
            return
        }
        if (A2.length > 1) {
            jQuery.messager.alert("提示:", "当前竖挺的右对象多于一个，不能删除！", "info");
            return
        }
        var Bj = $("#" + mDrawFlag_SvgId + " #" + BM[0]);
        var BJ = $.Micro.ConvToNum(Bj.attr("mwidth"));
        var Af = $.Micro.ConvToNum(Bj.attr("mheight"));
        var BG = $.Micro.ConvToNum(Bj.attr("mx"));
        var BF = $.Micro.ConvToNum(Bj.attr("my"));
        var AN = Bj.find("path").attr("d");
        var Bm = AN.split(" ");
        var Bx = $.Micro.ConvToNum(Bm[0]);
        var Ah = $.Micro.ConvToNum(Bm[1]);
        var A4 = $.Micro.ConvToNum(Bm[7]);
        var Ag = $.Micro.ConvToNum(Bm[8]);
        var Bv = $.Micro.ConvToNum(Bm[9]);
        var A1 = $.Micro.ConvToNum(Bm[10]);
        var BA = $.Micro.ConvToNum(Bm[16]);
        var Am = $.Micro.ConvToNum(Bm[17]);
        var I = $("#" + mDrawFlag_SvgId + " #" + A2[0]);
        var Bk = $.Micro.ConvToNum(I.attr("mwidth"));
        var Ar = $.Micro.ConvToNum(I.attr("mheight"));
        var Bp = $.Micro.ConvToNum(I.attr("mx"));
        var AB = $.Micro.ConvToNum(I.attr("my"));
        var E = I.find("path").attr("d");
        var Aa = E.split(" ");
        var Bu = $.Micro.ConvToNum(Aa[0]);
        var Ae = $.Micro.ConvToNum(Aa[1]);
        var A3 = $.Micro.ConvToNum(Aa[7]);
        var At = $.Micro.ConvToNum(Aa[8]);
        var e = $.Micro.ConvToNum(Aa[9]);
        var Ap = $.Micro.ConvToNum(Aa[10]);
        var Br = $.Micro.ConvToNum(Aa[16]);
        var Ad = $.Micro.ConvToNum(Aa[17]);
        var q = $.Micro.ConvToNum(Bm[2]);
        var AQ = $.Micro.ConvToNum(Bm[11]);
        var BD = Bj.parents("[mtype=" + mDrawFlag_WinArcs + "]");
        var s = Bj.attr("mlid");
        var P = I.attr("mrid");
        var Aq = l.attr("mtid");
        var BI = l.attr("mbid");
        var Al = BG;
        var BT = BF;
        var BS = BJ + Bk;
        var J = Af;
        l.remove();
        Bj.remove();
        I.remove();
        var Bs = MicroDraw_NewUniqueID($("#" + mDrawFlag_SvgId), mDrawFlag_ArcsGlass);
        var Bt = {
            "id": Bs,
            "mtype": mDrawFlag_ArcsGlass,
            "mwidth": BS,
            "mheight": J,
            "mlid": s,
            "mrid": P,
            "mtid": Aq,
            "mbid": BI,
            "mx": Al,
            "my": BT,
            "myt": "Y"
        };
        var BK = ["M" + Bx, Ah, "A" + q, q, 0, 0, 1, A3, At, "L" + e, Ap, "A" + AQ, AQ, 0, 0, 0, BA, Am + "Z"];
        var Bo = MicroDraw_RedrawArcsGlass(Bs, {
            twin: BD,
            g_attrs: Bt,
            path_d: BK.join(" ")
        });
        if (!$.Micro.IsEmpty(s)) {
            $("#" + mDrawFlag_SvgId + " #" + s).attr("mrid", Bs)
        }
        if (!$.Micro.IsEmpty(P)) {
            $("#" + mDrawFlag_SvgId + " #" + P).attr("mlid", Bs)
        }
        if (!$.Micro.IsEmpty(Aq)) {
            $("#" + mDrawFlag_SvgId + " #" + Aq).attr("mbid", Bs)
        }
        if (!$.Micro.IsEmpty(BI)) {
            $("#" + mDrawFlag_SvgId + " #" + BI).attr("mtid", Bs)
        }
        MicroDraw_ShowCoordinateWinArcs(BD);
        break;
    case mDrawFlag_FrameArcsTingH:
        var Q = l.attr("mlid");
        var AR = l.attr("mrid");
        var AJ = l.attr("mtid");
        var AY = l.attr("mbid");
        var BR = AJ.split(",");
        var Be = AY.split(",");
        if (BR.length > 1) {
            jQuery.messager.alert("提示:", "当前横挺的上对象多于一个，不能删除！", "info");
            return
        }
        if (Be.length > 1) {
            jQuery.messager.alert("提示:", "当前横挺的下对象多于一个，不能删除！", "info");
            return
        }
        var Ak = $("#" + mDrawFlag_SvgId + " #" + BR[0]);
        var Bd = $.Micro.ConvToNum(Ak.attr("mwidth"));
        var Ay = $.Micro.ConvToNum(Ak.attr("mheight"));
        var N = $.Micro.ConvToNum(Ak.attr("mx"));
        var b = $.Micro.ConvToNum(Ak.attr("my"));
        var S = Ak.find("path").attr("d");
        var As = S.split(" ");
        var BU = $.Micro.ConvToNum(As[0]);
        var Bq = $.Micro.ConvToNum(As[1]);
        var Av = $.Micro.ConvToNum(As[7]);
        var AI = $.Micro.ConvToNum(As[8]);
        var Au = $.Micro.ConvToNum(As[9]);
        var BP = $.Micro.ConvToNum(As[10]);
        var BX = $.Micro.ConvToNum(As[16]);
        var AO = $.Micro.ConvToNum(As[17]);
        var AX = $("#" + mDrawFlag_SvgId + " #" + Be[0]);
        var AL = $.Micro.ConvToNum(AX.attr("mwidth"));
        var An = $.Micro.ConvToNum(AX.attr("mheight"));
        var BZ = $.Micro.ConvToNum(AX.attr("mx"));
        var BY = $.Micro.ConvToNum(AX.attr("my"));
        var AT = AX.find("path").attr("d");
        var By = AT.split(" ");
        var AK = $.Micro.ConvToNum(By[0]);
        var p = $.Micro.ConvToNum(By[1]);
        var B = $.Micro.ConvToNum(By[7]);
        var BH = $.Micro.ConvToNum(By[8]);
        var A = $.Micro.ConvToNum(By[9]);
        var H = $.Micro.ConvToNum(By[10]);
        var Bz = $.Micro.ConvToNum(By[16]);
        var m = $.Micro.ConvToNum(By[17]);
        var q = $.Micro.ConvToNum(As[2]);
        var AQ = $.Micro.ConvToNum(As[11]);
        var BD = Ak.parents("[mtype=" + mDrawFlag_WinArcs + "]");
        var s = l.attr("mlid");
        var P = l.attr("mrid");
        var Aq = Ak.attr("mtid");
        var BI = AX.attr("mbid");
        var Al = N;
        var BT = b;
        var BS = Bd;
        var J = Ay + An;
        l.remove();
        Ak.remove();
        AX.remove();
        var Bs = MicroDraw_NewUniqueID($("#" + mDrawFlag_SvgId), mDrawFlag_ArcsGlass);
        var Bt = {
            "id": Bs,
            "mtype": mDrawFlag_ArcsGlass,
            "mwidth": BS,
            "mheight": J,
            "mlid": s,
            "mrid": P,
            "mtid": Aq,
            "mbid": BI,
            "mx": Al,
            "my": BT,
            "myt": "Y"
        };
        var BK = ["M" + BU, Bq, "A" + q, q, 0, 0, 1, Av, AI, "L" + A, H, "A" + AQ, AQ, 0, 0, 0, Bz, m + "Z"];
        var Bo = MicroDraw_RedrawArcsGlass(Bs, {
            twin: BD,
            g_attrs: Bt,
            path_d: BK.join(" ")
        });
        if (!$.Micro.IsEmpty(s)) {
            $("#" + mDrawFlag_SvgId + " #" + s).attr("mrid", Bs)
        }
        if (!$.Micro.IsEmpty(P)) {
            $("#" + mDrawFlag_SvgId + " #" + P).attr("mlid", Bs)
        }
        if (!$.Micro.IsEmpty(Aq)) {
            $("#" + mDrawFlag_SvgId + " #" + Aq).attr("mbid", Bs)
        }
        if (!$.Micro.IsEmpty(BI)) {
            $("#" + mDrawFlag_SvgId + " #" + BI).attr("mtid", Bs)
        }
        MicroDraw_ShowCoordinateWinArcs(BD);
        break;
    default:
        if ($("#" + mDrawSelectObjId)[0].parentNode.getAttribute("id") == mDrawFlag_SvgId || $("#" + mDrawSelectObjId)[0].parentNode.getAttribute("mtype") == mDrawFlag_ScaleG) {
            var c = $("#" + mDrawSelectObjId)[0].parentNode.getAttribute("id");
            var BE = $("#" + mDrawSelectObjId)[0].parentNode.parentNode.getAttribute("id");
            $("#" + c)[0].removeChild($("#" + mDrawSelectObjId)[0])
        } else {
            if ($("#" + mDrawSelectObjId).parents('[mtype="' + mDrawFlag_Win + '"]').length > 0) {
                var A8 = $("#" + mDrawSelectObjId).parents('[mtype="' + mDrawFlag_Win + '"]')[0].getAttribute("id");
                var v = $("#" + A8 + " [mtype='" + mDrawFlag_FrameRect + "']")[0].getAttribute("id");
                if (!isEmptyOrNull(v)) {
                    var Ac = $("#" + v)[0].getAttribute("mhideallframe");
                    if (Ac == "Y") {
                        if ($("#" + A8).children().length == 2) {
                            mDrawSelectObjId = v;
                            MicroDraw_DelSelectedWinObj()
                        } else {
                            jQuery.messager.alert("提示:", "只能删除 横挺，竖挺，框对象!", "info")
                        }
                    } else {
                        jQuery.messager.alert("提示:", "只能删除 横挺，竖挺，框对象!", "info")
                    }
                }
            } else {
                jQuery.messager.alert("提示:", "只能删除 横挺，竖挺，框对象!", "info")
            }
        }
    }
    MicroDraw_reflashGlassFlag();
    $("#" + mDrawFlag_SvgId + " [mqjbelongtoframeid]").each(function(R, r) {
        MicroDraw_Redraw(r.id)
    })
}
function MicroDraw_SelectObj(objId) {
    $("[mselect='1']").each(function(i, o) {
        o.setAttribute("mselected", "0")
    });
    $("[mselected='1']").each(function(i, o) {
        o.setAttribute("mselected", "0")
    });
    MicroDraw_setWinColor(mDrawFlag_SvgId, MicroDraw_ReturnColor($("#" + mDrawFlag_SvgId + " [prcolor]:first").attr("prcolor")), mDrawGlassColor, mDrawWallColor);
    $("#" + objId + " rect").each(function(i, o) {
        if (o.getAttribute("mselect") == "1") {
            o.setAttribute("fill", mDrawSvgFocusColor);
            o.setAttribute("mselected", "1")
        }
    });
    var objId_mtype = $("#" + objId).attr("mtype");
    if ($.Micro.isInArray(objId_mtype, [mDrawFlag_FrameRect, mDrawFlag_FrameArc])) {
        var frameArc = $("#" + objId).parents("[mtype=" + mDrawFlag_Win + "]").find("[mtype=" + mDrawFlag_FrameArc + "]");
        $.each(frameArc,
        function(i, o) {
            var frameArcID = $(o).attr("id");
            with($("#" + frameArcID + "_g1 path")) {
                attr("mselect", "1");
                attr("mselected", "1");
                attr("fill", mDrawSvgFocusColor)
            }
        })
    }
    switch (objId_mtype) {
    case mDrawFlag_FrameArcs:
        $("#" + objId).find("[tag=tF],[tag=bF],[tag=lF],[tag=rF]").attr("fill", mDrawSvgFocusColor).attr("mselected", "1");
        break;
    case mDrawFlag_FrameArcsTingH:
    case mDrawFlag_FrameArcsTingV:
        $("#" + objId).find("[tag=ting]").attr("fill", mDrawSvgFocusColor).attr("mselected", "1");
        break
    }
    mDrawSelectObjId = objId
}
function MicroDraw_UnselectObj() {
    $.each($("#" + mDrawFlag_SvgId + " [mselected]"),
    function() {
        $(this).removeAttr("mselected")
    });
    mDrawSelectObjId = "";
    MicroDraw_setWinColor(mDrawFlag_SvgId, MicroDraw_ReturnColor($("#" + mDrawFlag_SvgId + " [prcolor]:first").attr("prcolor")), mDrawGlassColor, mDrawWallColor);
    var A = $("#" + mDrawObjProperty).propertygrid("getRows");
    for (i = A.length - 1; i >= 0; i--) {
        var B = $("#" + mDrawObjProperty).propertygrid("getRowIndex", A[i]);
        $("#" + mDrawObjProperty).propertygrid("deleteRow", B)
    }
}
function MicroDraw_GUID() {
    function A() {
        return (((1 + Math.random()) * 65536) | 0).toString(16).substring(1)
    }
    return (A() + A() + A())
}
function MicroDraw_SetObjProperty(D, B, C) {
    if (D.length > 0 && B.length > 0) {
        var A = document.getElementById(D);
        A.setAttributeNS(null, B, C)
    }
}
function MicroDraw_GetObjProperty(D, B) {
    var C = "";
    if ($.Micro.IsEmpty(D)) {
        D = ""
    }
    if ($.Micro.IsEmpty(B)) {
        B = ""
    }
    if (D.length > 0 && B.length > 0) {
        var A = document.getElementById(D);
        C = A.getAttribute(B)
    }
    if ($.Micro.IsEmpty(C)) {
        C = ""
    }
    return C
}
function MicroDraw_ShowPKC() {
    $.each($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Pkc + "']"),
    function() {
        var _this = $(this);
        with(_this) {
            var _id = attr("id");
            var node_f3 = find("#" + _id + "_f3")[0];
            var node_f4 = find("#" + _id + "_f4")[0];
            node_f3.setAttribute("stroke-dasharray", "3,3");
            node_f4.setAttribute("stroke-dasharray", "3,3")
        }
    })
}
function MicroDraw_ShowSizeProperty() {
    var G;
    var C;
    var A = $("#" + mDrawSizeProperty).propertygrid("getRows");
    for (i = A.length - 1; i >= 0; i--) {
        var E = $("#" + mDrawSizeProperty).propertygrid("getRowIndex", A[i]);
        $("#" + mDrawSizeProperty).propertygrid("deleteRow", E)
    }
    var F = 0;
    var D = 0;
    var H = 0;
    var B = 0;
    var K = function(R, N, S) {
        var M = R.parentNode;
        var O = "";
        var Q = "";
        if (N == mDrawFlag_TingH) {
            if ($.Micro.IsEmpty(S)) {
                O = "mheight"
            } else {
                O = "my"
            }
            Q = "my"
        } else {
            if ($.Micro.IsEmpty(S)) {
                O = "mwidth"
            } else {
                O = "mx"
            }
            Q = "mx"
        }
        var P = 0;
        if ($.Micro.IsEmpty(S)) {
            P = Number(R.getAttribute(O))
        } else {
            P = Number(S.getAttribute(O))
        }
        var L = 0;
        $("#" + M.getAttribute("id") + " [mtype='" + N + "']").each(function(T, U) {
            var V = Number(U.getAttribute(Q));
            if (V > L && V < P) {
                L = V
            }
        });
        return P - L
    };
    $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_FrameRect + "']").each(function(L, M) {
        C = M.parentNode;
        frameNode = M;
        F = MicroDraw_GetObjProperty(M.id + "_r1", "x");
        D = MicroDraw_GetObjProperty(M.id + "_r1", "y");
        H = MicroDraw_GetObjProperty(M.id + "_r1", "width");
        B = MicroDraw_GetObjProperty(M.id + "_r1", "height");
        G = {
            win: C.getAttribute("mwin"),
            name: "W",
            value: M.getAttribute("mwidth"),
            group: "",
            editor: "text",
            mObjId: M.getAttribute("id"),
            mx: F,
            my: D,
            mw: H,
            mh: B,
            seperateSize: K(frameNode, mDrawFlag_TingV, null)
        };
        $("#" + mDrawSizeProperty).propertygrid("appendRow", G);
        G = {
            win: C.getAttribute("mwin"),
            name: "H",
            value: M.getAttribute("mheight"),
            group: "",
            editor: "text",
            mObjId: M.getAttribute("id"),
            mx: F,
            my: D,
            mw: H,
            mh: B,
            seperateSize: K(frameNode, mDrawFlag_TingH, null)
        };
        $("#" + mDrawSizeProperty).propertygrid("appendRow", G);
        $("#" + C.getAttribute("id") + " [mtype='" + mDrawFlag_TingH + "']").each(function(N, O) {
            G = {
                win: C.getAttribute("mwin"),
                name: O.getAttribute("mflag"),
                value: O.getAttribute("my"),
                group: "",
                editor: "text",
                mObjId: O.getAttribute("id"),
                mx: F,
                my: D,
                mw: H,
                mh: B,
                seperateSize: K(frameNode, mDrawFlag_TingH, O)
            };
            $("#" + mDrawSizeProperty).propertygrid("appendRow", G)
        });
        $("#" + C.getAttribute("id") + " [mtype='" + mDrawFlag_TingV + "']").each(function(N, O) {
            G = {
                win: C.getAttribute("mwin"),
                name: O.getAttribute("mflag"),
                value: O.getAttribute("mx"),
                group: "",
                editor: "text",
                mObjId: O.getAttribute("id"),
                mx: F,
                my: D,
                mw: H,
                mh: B,
                seperateSize: K(frameNode, mDrawFlag_TingV, O)
            };
            $("#" + mDrawSizeProperty).propertygrid("appendRow", G)
        })
    });
    $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_WinArcs + "']").each(function(T, U) {
        var W = $(U);
        var X = W.find("[mtype=" + mDrawFlag_FrameArcs + "]");
        var N = X.attr("mwidth");
        var L = X.attr("mheight");
        var P = X.find("[tag=tF]");
        var O = $.MicroSVG.UnifiedSVGPath(P.attr("d"));
        var S = $.Micro.ConvToNum(O[0]);
        var Q = $.Micro.ConvToNum(O[1]);
        var M = N / 1000 * mDrawPixelPerM;
        var R = L / 1000 * mDrawPixelPerM;
        var V = W.attr("mwin");
        G = {
            win: V,
            name: "W",
            value: N,
            group: "",
            editor: "text",
            mObjId: X.attr("id"),
            mx: S,
            my: Q,
            mw: M,
            mh: R,
            seperateSize: 0
        };
        $("#" + mDrawSizeProperty).propertygrid("appendRow", G);
        G = {
            win: V,
            name: "H",
            value: L,
            group: "",
            editor: "text",
            mObjId: X.attr("id"),
            mx: S,
            my: Q,
            mw: M,
            mh: R,
            seperateSize: 0
        };
        $("#" + mDrawSizeProperty).propertygrid("appendRow", G);
        W.find("[mtype='" + mDrawFlag_FrameArcsTingH + "']").each(function(Y, Z) {
            G = {
                win: V,
                name: $(Z).attr("mflag"),
                value: $(Z).attr("my"),
                group: "",
                editor: "text",
                mObjId: $(Z).attr("id"),
                mx: S,
                my: Q,
                mw: M,
                mh: R,
                seperateSize: 0
            };
            $("#" + mDrawSizeProperty).propertygrid("appendRow", G)
        });
        W.find("[mtype='" + mDrawFlag_FrameArcsTingV + "']").each(function(Y, Z) {
            G = {
                win: V,
                name: $(Z).attr("mflag"),
                value: $(Z).attr("mx"),
                group: "",
                editor: "text",
                mObjId: $(Z).attr("id"),
                mx: S,
                my: Q,
                mw: M,
                mh: R,
                seperateSize: 0
            };
            $("#" + mDrawSizeProperty).propertygrid("appendRow", G)
        })
    });
    if ($("#" + mWEB_ORDER_DrawSizeProperty).length > 0) {
        Micro_DelDatagridData($("#" + mWEB_ORDER_DrawSizeProperty), "propertygrid");
        var I = $("#" + mDrawSizeProperty).propertygrid("getRows");
        for (var J = 0; J < I.length; J++) {
            $("#" + mWEB_ORDER_DrawSizeProperty).propertygrid("appendRow", I[J])
        }
    }
    MicroDraw_ShowPKC()
}
function MicroDraw_ShowCoordinate() {
    $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_CoorX + "']").each(function(A, B) {
        var C = B.parentNode;
        C.removeChild(B)
    });
    $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_CoorY + "']").each(function(A, B) {
        var C = B.parentNode;
        C.removeChild(B)
    });
    $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Win + "']").each(function(A, B) {
        MicroDraw_ShowCoordinateWin(B.id)
    });
    $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_WinArcs + "']").each(function(A, B) {
        MicroDraw_ShowCoordinateWinArcs($(B))
    });
    MicroDraw_setWinColor(mDrawFlag_SvgId, MicroDraw_ReturnColor($("#" + mDrawFlag_SvgId + " [prcolor]:first").attr("prcolor")), mDrawGlassColor, mDrawWallColor);
    MicroDraw_3DShowcombwins(true)
}
function MicroDraw_ShowCoordinateWin(N) {
    var a = $("#" + N)[0].getAttribute("mwin");
    var n = document.getElementById(mDrawFlag_SvgId);
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
        n = $("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]')[0]
    }
    var v = 0;
    var L = MicroDraw_GUID();
    var f = document.createElementNS(mDrawSvgNS, "g");
    f.setAttributeNS(null, "id", L);
    f.setAttributeNS(null, "mtype", mDrawFlag_CoorX);
    f.setAttributeNS(null, "mwinid", N);
    var M = MicroDraw_GUID();
    var g = document.createElementNS(mDrawSvgNS, "g");
    g.setAttributeNS(null, "id", M);
    g.setAttributeNS(null, "mtype", mDrawFlag_CoorY);
    g.setAttributeNS(null, "mwinid", N);
    var t = 0;
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_Custom_CornerMaterial + '"]').length > 0) {
        t = 20
    }
    var W = $("#" + mDrawSizeProperty).propertygrid("getRows");
    for (i = 0; i < W.length; i++) {
        if (W[i].win == a) {
            var H = $("#" + N)[0].getAttribute("mcoorxoffset");
            var G = $("#" + N)[0].getAttribute("mcoorxoffsetval");
            var T = $("#" + N)[0].getAttribute("mcooryoffset");
            var C = $("#" + N)[0].getAttribute("mcooryoffsetval");
            var Q;
            var Y;
            if (isEmptyOrNull(H)) {
                Y = 0
            } else {
                if (H.indexOf("H") >= 0) {
                    Y = Number(W[i].my) + Number(W[i].mh) + Number(G)
                } else {
                    Y = Number(W[i].my) + Number(G)
                }
            }
            if (isEmptyOrNull(T)) {
                Q = 0
            } else {
                if (T.indexOf("W") >= 0) {
                    Q = Number(W[i].mx) + Number(W[i].mw) + Number(C)
                } else {
                    Q = Number(W[i].mx) + Number(C)
                }
            }
            var P;
            var K;
            var r = 0;
            if ($("#" + N + ' [mtype="' + mDrawFlag_Dkc + '"]').length > 0 && $("#" + N).children(" [mtype='" + mDrawFlag_TingV + "']").length > 0) {
                if ($("#" + N + ' [mtype="' + mDrawFlag_Dkc + '"]').get(0).getAttribute("mleftcoor") == "Y") {
                    r = 30 * Number(mDrawSvgViewBox)
                }
            }
            if (Number(Y) > 0) {
                P = Y
            } else {
                if ($("#" + N + " [mtype='" + mDrawFlag_Custom_qj_rb + "']").length > 0 || $("#" + N + " [mtype='" + mDrawFlag_Custom_qj_lb + "']").length > 0 || $("#" + N + " [mtype='" + mDrawFlag_Custom_qj_bm + "']").length > 0) {
                    P = Number(W[i].my) + Number(W[i].mh) + 70 * Number(mDrawSvgViewBox) + r
                } else {
                    P = Number(W[i].my) + Number(W[i].mh) + 50 * Number(mDrawSvgViewBox) + r
                }
                P += t
            }
            if (Number(Q) > 0) {
                K = Q
            } else {
                if ($("#" + N + " [mtype='" + mDrawFlag_Custom_qj_lt + "']").length > 0 || $("#" + N + " [mtype='" + mDrawFlag_Custom_qj_lb + "']").length > 0 || $("#" + N + " [mtype='" + mDrawFlag_Custom_qj_lm + "']").length > 0 || $("#" + N + " [mtype='" + mDrawFlag_Custom_qj_lx + "']").length > 0) {
                    K = Number(W[i].mx) - 70 * Number(mDrawSvgViewBox)
                } else {
                    K = Number(W[i].mx) - 50 * Number(mDrawSvgViewBox)
                }
            }
            var B = function(Ao) {
                var Af = function(Aq) {
                    var Ap = document.createElementNS(mDrawSvgNS, "line");
                    Ap.setAttributeNS(null, "x1", Aq.x1);
                    Ap.setAttributeNS(null, "y1", Aq.y1);
                    Ap.setAttributeNS(null, "x2", Aq.x2);
                    Ap.setAttributeNS(null, "y2", Aq.y2);
                    Ap.setAttributeNS(null, "stroke", "black");
                    Ap.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    Aq.g.appendChild(Ap)
                };
                var Ai = function(As) {
                    var At = document.createElementNS(mDrawSvgNS, "text");
                    var Ar = N + "-" + As.ObjId + "-" + Number(As.begin).toFixed(0).toString() + "-" + Number(As.end).toFixed(0).toString();
                    At.setAttributeNS(null, "id", Ar);
                    var Ap = As.value;
                    var Aq = 0;
                    if (parseInt(Number(Ap)) == Number(Ap)) {
                        textNode = document.createTextNode(parseInt(Number(Ap)));
                        Aq = Number(parseInt(Number(Ap)).toString().length) * Number(mDrawCoordinateCharPx) * Number(mDrawSvgViewBox)
                    } else {
                        textNode = document.createTextNode(Number(Number(Ap)).toFixed(2));
                        Aq = Number(Number(Ap).toFixed(2).toString().length) * Number(mDrawCoordinateCharPx) * Number(mDrawSvgViewBox)
                    }
                    At.setAttributeNS(null, "font-size", (Number(mDrawCoordinateFontSize) * Number(mDrawSvgViewBox)).toString() + "px");
                    At.setAttributeNS(null, "x", Number(As.begin) + Number((Number(As.end) - Number(As.begin)) / 2) - Number(Aq) / 2);
                    At.setAttributeNS(null, "y", Number(As.y) + (As.rulerWidth / 2) + Number(mDrawCoordinateFontSize * mDrawSvgViewBox));
                    At.setAttributeNS(null, "mtextkind", "WTLCS-" + As.fanIndex);
                    At.setAttributeNS(null, "mtingorframeid", As.ObjId);
                    if (isPcUserAgent()) {
                        At.setAttributeNS(null, "ondblclick", 'MicroDraw_ShowCoordinate_doubleClickText("' + Ar + '","' + As.winId + '");')
                    } else {
                        At.setAttributeNS(null, "onclick", 'MicroDraw_ShowCoordinate_doubleClickText("' + Ar + '","' + As.winId + '");')
                    }
                    At.appendChild(textNode);
                    As.g.appendChild(At)
                };
                var Al = function(As) {
                    var Aq = 20 * Number(mDrawSvgViewBox);
                    var Ap = Number($("#" + As.FanId + "_r1").attr("x"));
                    var Ar = Number($("#" + As.FanId + "_r1").attr("width"));
                    var At = Ap + Ar;
                    Af({
                        g: As.g,
                        x1: Ap,
                        y1: As.y,
                        x2: Ap,
                        y2: As.y + Aq
                    });
                    Af({
                        g: As.g,
                        x1: Ap,
                        y1: As.y + Aq / 2,
                        x2: At,
                        y2: As.y + Aq / 2
                    });
                    Af({
                        g: As.g,
                        x1: At,
                        y1: As.y,
                        x2: At,
                        y2: As.y + Aq
                    });
                    Ai({
                        g: As.g,
                        x: Ap,
                        y: As.y,
                        value: As.value,
                        ObjId: As.ObjId,
                        begin: Ap,
                        end: At,
                        rulerWidth: Aq,
                        fanIndex: As.fanIndex
                    })
                };
                var Ae = $("#" + Ao.ObjId).attr("mfancoorshow");
                if (Ae != "Y") {
                    return
                }
                var An = document.createElementNS(mDrawSvgNS, "g");
                An.setAttributeNS(null, "mrulertype", "tlcs");
                var Am = $("#" + Ao.ObjId).attr("mfantype");
                var Ag = [];
                $("#" + Ao.ObjId + " > g[id^='" + Ao.ObjId + "_fan']").each(function(Ap, Aq) {
                    Ag.push($(Aq).attr("id"))
                });
                Ag.sort(function Ab(Ap, Aq) {
                    if (Ap < Aq) {
                        return - 1
                    } else {
                        if (Ap > Aq) {
                            return 1
                        } else {
                            return 0
                        }
                    }
                });
                var Aj = Am.split(",");
                var Ac = $("#" + Ao.ObjId).attr("mfanwidth");
                if ($.Micro.IsEmpty(Ac)) {
                    Ac = "0"
                }
                var Ad = Ac.split(",");
                var Ah = 0;
                for (var Ak = 0; Ak < Aj.length; Ak++) {
                    if (Aj[Ak] == "f") {
                        Al({
                            g: An,
                            ObjId: Ao.ObjId,
                            FanId: Ag[Ak],
                            y: Ao.y,
                            value: Ah < Ad.length ? Ad[Ah] : 0,
                            fanIndex: Ah
                        });
                        Ah++
                    }
                }
                Ao.xg.appendChild(An)
            };
            var Aa = 0;
            $("[mrulertype='tlcs']").each(function(Ab, Ac) {
                $(Ac).remove()
            });
            $("#" + N + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(Ac, Ae) {
                var Ad = $(Ae).attr("mfancoorshow");
                var Ab = $(Ae).attr("id");
                if (Ad == "Y") {
                    Aa = 25;
                    B({
                        ObjId: Ab,
                        xg: f,
                        y: P - 45
                    })
                }
            });
            P = P + Aa;
            if (W[i].name == "W") {
                v++;
                var R = document.createElementNS(mDrawSvgNS, "line");
                R.setAttributeNS(null, "id", L + "_l" + v.toString());
                R.setAttributeNS(null, "x1", Number(W[i].mx));
                R.setAttributeNS(null, "y1", Number(P) - 20 * Number(mDrawSvgViewBox));
                R.setAttributeNS(null, "x2", Number(W[i].mx));
                R.setAttributeNS(null, "y2", Number(P) - 0 * Number(mDrawSvgViewBox));
                R.setAttributeNS(null, "stroke", "black");
                R.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                var u = document.createElementNS(mDrawSvgNS, "line");
                u.setAttributeNS(null, "id", L + "_l" + v.toString());
                u.setAttributeNS(null, "x1", Number(W[i].mx));
                u.setAttributeNS(null, "y1", Number(P) - 10 * Number(mDrawSvgViewBox));
                u.setAttributeNS(null, "x2", Number(W[i].mx) + (Number(W[i].value) / 1000) * mDrawPixelPerM);
                u.setAttributeNS(null, "y2", Number(P) - 10 * Number(mDrawSvgViewBox));
                u.setAttributeNS(null, "stroke", "black");
                u.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                var I = document.createElementNS(mDrawSvgNS, "line");
                I.setAttributeNS(null, "id", L + "_l" + v.toString());
                I.setAttributeNS(null, "x1", Number(W[i].mx) + (Number(W[i].value) / 1000) * mDrawPixelPerM);
                I.setAttributeNS(null, "y1", Number(P) - 20 * Number(mDrawSvgViewBox));
                I.setAttributeNS(null, "x2", Number(W[i].mx) + (Number(W[i].value) / 1000) * mDrawPixelPerM);
                I.setAttributeNS(null, "y2", Number(P) - 0 * Number(mDrawSvgViewBox));
                I.setAttributeNS(null, "stroke", "black");
                I.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                var X = document.createElementNS(mDrawSvgNS, "text");
                var l = N + "-" + Number(W[i].mx).toFixed(0).toString() + "-" + (Number(W[i].mx) + (Number(W[i].value) / 1000) * mDrawPixelPerM).toFixed(0).toString();
                X.setAttributeNS(null, "id", l);
                if (parseInt(Number(W[i].value)) == Number(W[i].value)) {
                    textNode = document.createTextNode(parseInt(Number(W[i].value)));
                    txtPx = parseInt(Number(W[i].value)).toString().length * mDrawCoordinateCharPx * mDrawSvgViewBox
                } else {
                    textNode = document.createTextNode(Number(Number(W[i].value)).toFixed(2));
                    txtPx = Number(Number(W[i].value).toFixed(2).toString().length) * mDrawCoordinateCharPx * mDrawSvgViewBox
                }
                X.setAttributeNS(null, "x", Number(W[i].mx) + ((Number(W[i].value) / 1000) * mDrawPixelPerM) / 2 - txtPx / 2);
                X.setAttributeNS(null, "y", Number(P) - 10 * Number(mDrawSvgViewBox) + Number(mDrawCoordinateFontSize * mDrawSvgViewBox));
                X.setAttributeNS(null, "font-size", (Number(mDrawCoordinateFontSize) * Number(mDrawSvgViewBox)).toString() + "px");
                X.setAttributeNS(null, "mtingorframeid", W[i].mObjId);
                X.setAttributeNS(null, "mtextkind", "W");
                if (isPcUserAgent()) {
                    X.setAttributeNS(null, "ondblclick", 'MicroDraw_ShowCoordinate_doubleClickText("' + l + '","' + N + '");')
                } else {
                    X.setAttributeNS(null, "onclick", 'MicroDraw_ShowCoordinate_doubleClickText("' + l + '","' + N + '");')
                }
                f.appendChild(R);
                f.appendChild(u);
                f.appendChild(I);
                X.appendChild(textNode);
                f.appendChild(X);
                var m = $("#" + W[i].mObjId)[0].parentNode;
                if ($("#" + m.getAttribute("id") + " [mtype='" + mDrawFlag_TingV + "']").length > 0) {
                    v++;
                    var q = "";
                    var o = 0;
                    $("#" + m.getAttribute("id") + " [mtype='" + mDrawFlag_TingV + "']").each(function(Ab, Ac) {
                        if (Number(Ac.getAttribute("mx")) > o) {
                            o = Number(Ac.getAttribute("mx"));
                            q = Ac.getAttribute("id")
                        }
                    });
                    var e = Number($("#" + q + "_r1")[0].getAttribute("x")) + Number(mDrawThickTing * mDrawSvgViewBox / 2);
                    var V = Number(W[i].mx) + Number(W[i].mw);
                    var R = document.createElementNS(mDrawSvgNS, "line");
                    R.setAttributeNS(null, "id", L + "_l" + v.toString());
                    R.setAttributeNS(null, "x1", e);
                    R.setAttributeNS(null, "y1", Number(P) - 45 * Number(mDrawSvgViewBox));
                    R.setAttributeNS(null, "x2", e);
                    R.setAttributeNS(null, "y2", Number(P) - 25 * Number(mDrawSvgViewBox));
                    R.setAttributeNS(null, "stroke", "black");
                    R.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    var u = document.createElementNS(mDrawSvgNS, "line");
                    u.setAttributeNS(null, "id", L + "_l" + v.toString());
                    u.setAttributeNS(null, "x1", e);
                    u.setAttributeNS(null, "y1", Number(P) - 35 * Number(mDrawSvgViewBox));
                    u.setAttributeNS(null, "x2", V);
                    u.setAttributeNS(null, "y2", Number(P) - 35 * Number(mDrawSvgViewBox));
                    u.setAttributeNS(null, "stroke", "black");
                    u.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    var I = document.createElementNS(mDrawSvgNS, "line");
                    I.setAttributeNS(null, "id", L + "_l" + v.toString());
                    I.setAttributeNS(null, "x1", V);
                    I.setAttributeNS(null, "y1", Number(P) - 45 * Number(mDrawSvgViewBox));
                    I.setAttributeNS(null, "x2", V);
                    I.setAttributeNS(null, "y2", Number(P) - 25 * Number(mDrawSvgViewBox));
                    I.setAttributeNS(null, "stroke", "black");
                    I.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    var U = Number(W[i].value) - Number(o);
                    var X = document.createElementNS(mDrawSvgNS, "text");
                    var l = N + "-" + Number(e).toFixed(0).toString() + "-" + Number(V).toFixed(0).toString();
                    X.setAttributeNS(null, "id", l);
                    if (parseInt(Number(U)) == Number(U)) {
                        textNode = document.createTextNode(parseInt(Number(U)));
                        txtPx = Number(parseInt(Number(U)).toString().length) * mDrawCoordinateCharPx * mDrawSvgViewBox
                    } else {
                        textNode = document.createTextNode(Number(Number(U)).toFixed(2));
                        txtPx = Number(Number(U).toFixed(2).toString().length) * mDrawCoordinateCharPx * mDrawSvgViewBox
                    }
                    X.setAttributeNS(null, "x", Number(e) + (Number(V) - Number(e)) / 2 - Number(txtPx) / 2);
                    X.setAttributeNS(null, "y", Number(P) - 35 * Number(mDrawSvgViewBox) + Number(mDrawCoordinateFontSize * mDrawSvgViewBox));
                    X.setAttributeNS(null, "font-size", (Number(mDrawCoordinateFontSize) * Number(mDrawSvgViewBox)).toString() + "px");
                    X.setAttributeNS(null, "mtingorframeid", MicroDraw_ShowCoordinate_GetSpecValTingsId(N, "V", "0"));
                    X.setAttributeNS(null, "mtextkind", "WLAST");
                    X.setAttributeNS(null, "mtotalwidth", W[i].value);
                    if (isPcUserAgent()) {
                        X.setAttributeNS(null, "ondblclick", 'MicroDraw_ShowCoordinate_doubleClickText("' + l + '","' + N + '");')
                    } else {
                        X.setAttributeNS(null, "onclick", 'MicroDraw_ShowCoordinate_doubleClickText("' + l + '","' + N + '");')
                    }
                    f.appendChild(R);
                    f.appendChild(u);
                    f.appendChild(I);
                    X.appendChild(textNode);
                    f.appendChild(X)
                }
                if ($("#" + N + ' [mtype="' + mDrawFlag_Dkc + '"]').length > 0) {
                    var D = $("#" + N + ' [mtype="' + mDrawFlag_Dkc + '"]');
                    $.each(D,
                    function(Aj, Am) {
                        var Ah = Am.getAttribute("mleftcoor");
                        if (Ah == "Y") {
                            var Ag = Number(Am.getAttribute("mleftwidth"));
                            if (Ag <= 0) {
                                Ag = Number(Am.getAttribute("mwidth")) / 2
                            }
                            var Af = $(Am).children("rect").get(0).getAttribute("x") - mDrawThickFrame;
                            var Ai = Number($(Am).children("rect").get(0).getAttribute("x")) + Number($("#" + Am.getAttribute("id") + "_fan1_r1").get(0).getAttribute("width"));
                            var Ad = P - r + 5;
                            v++;
                            var Ab = document.createElementNS(mDrawSvgNS, "line");
                            Ab.setAttributeNS(null, "id", L + "_l" + v.toString());
                            Ab.setAttributeNS(null, "x1", Af);
                            Ab.setAttributeNS(null, "y1", Number(Ad) - 45 * Number(mDrawSvgViewBox));
                            Ab.setAttributeNS(null, "x2", Af);
                            Ab.setAttributeNS(null, "y2", Number(Ad) - 25 * Number(mDrawSvgViewBox));
                            Ab.setAttributeNS(null, "stroke", "black");
                            Ab.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                            var Ae = document.createElementNS(mDrawSvgNS, "line");
                            Ae.setAttributeNS(null, "id", L + "_l" + v.toString());
                            Ae.setAttributeNS(null, "x1", Af);
                            Ae.setAttributeNS(null, "y1", Number(Ad) - 35 * Number(mDrawSvgViewBox));
                            Ae.setAttributeNS(null, "x2", Ai);
                            Ae.setAttributeNS(null, "y2", Number(Ad) - 35 * Number(mDrawSvgViewBox));
                            Ae.setAttributeNS(null, "stroke", "black");
                            Ae.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                            var Ac = document.createElementNS(mDrawSvgNS, "line");
                            Ac.setAttributeNS(null, "id", L + "_l" + v.toString());
                            Ac.setAttributeNS(null, "x1", Ai);
                            Ac.setAttributeNS(null, "y1", Number(Ad) - 45 * Number(mDrawSvgViewBox));
                            Ac.setAttributeNS(null, "x2", Ai);
                            Ac.setAttributeNS(null, "y2", Number(Ad) - 25 * Number(mDrawSvgViewBox));
                            Ac.setAttributeNS(null, "stroke", "black");
                            Ac.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                            var Al = Ag;
                            var An = document.createElementNS(mDrawSvgNS, "text");
                            var Ak = N + "-" + Number(Af).toFixed(0).toString() + "-" + Number(Ai).toFixed(0).toString();
                            An.setAttributeNS(null, "id", Ak);
                            if (parseInt(Number(Al)) == Number(Al)) {
                                textNode = document.createTextNode(parseInt(Number(Al)));
                                txtPx = Number(parseInt(Number(Al)).toString().length) * mDrawCoordinateCharPx * mDrawSvgViewBox
                            } else {
                                textNode = document.createTextNode(Number(Number(Al)).toFixed(2));
                                txtPx = Number(Number(Al).toFixed(2).toString().length) * mDrawCoordinateCharPx * mDrawSvgViewBox
                            }
                            An.setAttributeNS(null, "x", Number(Af) + (Number(Ai) - Number(Af)) / 2 - Number(txtPx) / 2);
                            An.setAttributeNS(null, "y", Number(Ad) - 35 * Number(mDrawSvgViewBox) + Number(mDrawCoordinateFontSize * mDrawSvgViewBox));
                            An.setAttributeNS(null, "font-size", (Number(mDrawCoordinateFontSize) * Number(mDrawSvgViewBox)).toString() + "px");
                            An.setAttributeNS(null, "mtingorframeid", $(Am).attr("id"));
                            An.setAttributeNS(null, "mtextkind", "WDKC");
                            if (isPcUserAgent()) {
                                An.setAttributeNS(null, "ondblclick", 'MicroDraw_ShowCoordinate_doubleClickText("' + Ak + '","' + N + '");')
                            } else {
                                An.setAttributeNS(null, "onclick", 'MicroDraw_ShowCoordinate_doubleClickText("' + Ak + '","' + N + '");')
                            }
                            f.appendChild(Ab);
                            f.appendChild(Ae);
                            f.appendChild(Ac);
                            An.appendChild(textNode);
                            f.appendChild(An)
                        }
                    })
                }
            } else {
                if (W[i].name.indexOf("W") > -1) {
                    v++;
                    var p;
                    var w;
                    var e;
                    var V;
                    var A;
                    var c;
                    p = MicroDraw_ShowCoordinate_GetTingCoorInfo(Number(W[i].mx), Number(W[i].my), W[i].mObjId);
                    w = p.split(",");
                    e = w[0];
                    V = w[1];
                    A = w[2];
                    c = w[3];
                    var R = document.createElementNS(mDrawSvgNS, "line");
                    R.setAttributeNS(null, "id", L + "_l" + v.toString());
                    R.setAttributeNS(null, "x1", e);
                    R.setAttributeNS(null, "y1", Number(P) - 45 * Number(mDrawSvgViewBox));
                    R.setAttributeNS(null, "x2", e);
                    R.setAttributeNS(null, "y2", Number(P) - 25 * Number(mDrawSvgViewBox));
                    R.setAttributeNS(null, "stroke", "black");
                    R.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    var u = document.createElementNS(mDrawSvgNS, "line");
                    u.setAttributeNS(null, "id", L + "_l" + v.toString());
                    u.setAttributeNS(null, "x1", e);
                    u.setAttributeNS(null, "y1", Number(P) - 35 * Number(mDrawSvgViewBox));
                    u.setAttributeNS(null, "x2", V);
                    u.setAttributeNS(null, "y2", Number(P) - 35 * Number(mDrawSvgViewBox));
                    u.setAttributeNS(null, "stroke", "black");
                    u.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    var I = document.createElementNS(mDrawSvgNS, "line");
                    I.setAttributeNS(null, "id", L + "_l" + v.toString());
                    I.setAttributeNS(null, "x1", V);
                    I.setAttributeNS(null, "y1", Number(P) - 45 * Number(mDrawSvgViewBox));
                    I.setAttributeNS(null, "x2", V);
                    I.setAttributeNS(null, "y2", Number(P) - 25 * Number(mDrawSvgViewBox));
                    I.setAttributeNS(null, "stroke", "black");
                    I.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    var X = document.createElementNS(mDrawSvgNS, "text");
                    var l = N + "-" + Number(e).toFixed(0).toString() + "-" + Number(V).toFixed(0).toString();
                    X.setAttributeNS(null, "id", l);
                    if (parseInt(Number(A)) == Number(A)) {
                        textNode = document.createTextNode(parseInt(Number(A)));
                        txtPx = Number(parseInt(Number(A)).toString().length) * Number(mDrawCoordinateCharPx) * Number(mDrawSvgViewBox)
                    } else {
                        textNode = document.createTextNode(Number(Number(A)).toFixed(2));
                        txtPx = Number(Number(A).toFixed(2).toString().length) * Number(mDrawCoordinateCharPx) * Number(mDrawSvgViewBox)
                    }
                    X.setAttributeNS(null, "x", Number(e) + Number((Number(V) - Number(e)) / 2) - Number(txtPx) / 2);
                    X.setAttributeNS(null, "y", Number(P) - 35 * Number(mDrawSvgViewBox) + Number(mDrawCoordinateFontSize * mDrawSvgViewBox));
                    X.setAttributeNS(null, "font-size", (Number(mDrawCoordinateFontSize) * Number(mDrawSvgViewBox)).toString() + "px");
                    X.setAttributeNS(null, "mpretingval", c);
                    X.setAttributeNS(null, "mtingorframeid", MicroDraw_ShowCoordinate_GetSpecValTingsId(N, "V", (Number(c) + Number(A))).toString());
                    X.setAttributeNS(null, "mtextkind", "Wn");
                    if (isPcUserAgent()) {
                        X.setAttributeNS(null, "ondblclick", 'MicroDraw_ShowCoordinate_doubleClickText("' + l + '","' + N + '");')
                    } else {
                        X.setAttributeNS(null, "onclick", 'MicroDraw_ShowCoordinate_doubleClickText("' + l + '","' + N + '");')
                    }
                    if (isEmptyOrNull($("#" + l)[0])) {
                        f.appendChild(R);
                        f.appendChild(u);
                        f.appendChild(I);
                        X.appendChild(textNode);
                        f.appendChild(X)
                    } else {
                        var s = $("#" + l)[0];
                        s.setAttribute("mtingorframeId", s.getAttribute("mtingorframeId") + "," + W[i].mObjId)
                    }
                }
            }
            if (W[i].name == "H") {
                v++;
                var R = document.createElementNS(mDrawSvgNS, "line");
                R.setAttributeNS(null, "id", M + "_l" + v.toString());
                R.setAttributeNS(null, "x1", Number(K) + 0 * Number(mDrawSvgViewBox));
                R.setAttributeNS(null, "y1", Number(W[i].my));
                R.setAttributeNS(null, "x2", Number(K) + 20 * Number(mDrawSvgViewBox));
                R.setAttributeNS(null, "y2", Number(W[i].my));
                R.setAttributeNS(null, "stroke", "black");
                R.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                var u = document.createElementNS(mDrawSvgNS, "line");
                u.setAttributeNS(null, "id", M + "_l" + v.toString());
                u.setAttributeNS(null, "x1", Number(K) + 10 * Number(mDrawSvgViewBox));
                u.setAttributeNS(null, "y1", Number(W[i].my));
                u.setAttributeNS(null, "x2", Number(K) + 10 * Number(mDrawSvgViewBox));
                u.setAttributeNS(null, "y2", Number(W[i].my) + Number(W[i].mh));
                u.setAttributeNS(null, "stroke", "black");
                u.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                var I = document.createElementNS(mDrawSvgNS, "line");
                I.setAttributeNS(null, "id", M + "_l" + v.toString());
                I.setAttributeNS(null, "x1", Number(K) + 0 * Number(mDrawSvgViewBox));
                I.setAttributeNS(null, "y1", Number(W[i].my) + Number(W[i].mh));
                I.setAttributeNS(null, "x2", Number(K) + 20 * Number(mDrawSvgViewBox));
                I.setAttributeNS(null, "y2", Number(W[i].my) + Number(W[i].mh));
                I.setAttributeNS(null, "stroke", "black");
                I.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                var X = document.createElementNS(mDrawSvgNS, "text");
                var l = N + "-" + Number(W[i].my).toFixed(0).toString() + "-" + (Number(W[i].my) + Number(W[i].mh)).toFixed(0).toString();
                X.setAttributeNS(null, "id", l);
                if (parseInt(Number(W[i].value)) == Number(W[i].value)) {
                    textNode = document.createTextNode(parseInt(Number(W[i].value)));
                    txtPx = parseInt(Number(W[i].value)).toString().length * mDrawCoordinateCharPx * mDrawSvgViewBox
                } else {
                    textNode = document.createTextNode(Number(Number(W[i].value)).toFixed(2));
                    txtPx = Number(Number(W[i].value).toFixed(2).toString().length) * mDrawCoordinateCharPx * mDrawSvgViewBox
                }
                X.setAttributeNS(null, "x", Number(K) + 10 * Number(mDrawSvgViewBox) - mDrawCoordinateCharPx * Number(mDrawSvgViewBox));
                X.setAttributeNS(null, "y", Number(W[i].my) + (Number(W[i].mh) / 2) + txtPx / 2);
                X.setAttributeNS(null, "font-size", (Number(mDrawCoordinateFontSize) * Number(mDrawSvgViewBox)).toString() + "px");
                X.setAttributeNS(null, "transform", "rotate(-90 " + X.getAttributeNS(null, "x") + " " + X.getAttributeNS(null, "y") + ")");
                X.setAttributeNS(null, "mtingorframeid", W[i].mObjId);
                X.setAttributeNS(null, "mtextkind", "H");
                if (isPcUserAgent()) {
                    X.setAttributeNS(null, "ondblclick", 'MicroDraw_ShowCoordinate_doubleClickText("' + l + '","' + N + '");')
                } else {
                    X.setAttributeNS(null, "onclick", 'MicroDraw_ShowCoordinate_doubleClickText("' + l + '","' + N + '");')
                }
                g.appendChild(R);
                g.appendChild(u);
                g.appendChild(I);
                X.appendChild(textNode);
                g.appendChild(X);
                var m = $("#" + W[i].mObjId)[0].parentNode;
                if ($("#" + m.getAttribute("id") + " [mtype='" + mDrawFlag_TingH + "']").length > 0) {
                    v++;
                    var q = "";
                    var o = 0;
                    $("#" + m.getAttribute("id") + " [mtype='" + mDrawFlag_TingH + "']").each(function(Ab, Ac) {
                        if (Number(Ac.getAttribute("my")) > o) {
                            o = Number(Ac.getAttribute("my"));
                            q = Ac.getAttribute("id")
                        }
                    });
                    var Z = Number($("#" + q + "_r1")[0].getAttribute("y")) + Number(mDrawThickTing * mDrawSvgViewBox / 2);
                    var O = Number(W[i].my) + Number(W[i].mh);
                    var R = document.createElementNS(mDrawSvgNS, "line");
                    R.setAttributeNS(null, "id", M + "_l" + v.toString());
                    R.setAttributeNS(null, "x1", Number(K) + 25 * Number(mDrawSvgViewBox));
                    R.setAttributeNS(null, "y1", Z);
                    R.setAttributeNS(null, "x2", Number(K) + 45 * Number(mDrawSvgViewBox));
                    R.setAttributeNS(null, "y2", Z);
                    R.setAttributeNS(null, "stroke", "black");
                    R.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    var u = document.createElementNS(mDrawSvgNS, "line");
                    u.setAttributeNS(null, "id", M + "_l" + v.toString());
                    u.setAttributeNS(null, "x1", Number(K) + 35 * Number(mDrawSvgViewBox));
                    u.setAttributeNS(null, "y1", Z);
                    u.setAttributeNS(null, "x2", Number(K) + 35 * Number(mDrawSvgViewBox));
                    u.setAttributeNS(null, "y2", O);
                    u.setAttributeNS(null, "stroke", "black");
                    u.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    var I = document.createElementNS(mDrawSvgNS, "line");
                    I.setAttributeNS(null, "id", M + "_l" + v.toString());
                    I.setAttributeNS(null, "x1", Number(K) + 25 * Number(mDrawSvgViewBox));
                    I.setAttributeNS(null, "y1", O);
                    I.setAttributeNS(null, "x2", Number(K) + 45 * Number(mDrawSvgViewBox));
                    I.setAttributeNS(null, "y2", O);
                    I.setAttributeNS(null, "stroke", "black");
                    I.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    var U = Number(W[i].value) - Number(o);
                    var X = document.createElementNS(mDrawSvgNS, "text");
                    var l = N + "-" + Number(Z).toFixed(0).toString() + "-" + Number(O).toFixed(0).toString();
                    X.setAttributeNS(null, "id", l);
                    if (parseInt(Number(U)) == Number(U)) {
                        textNode = document.createTextNode(parseInt(Number(U)));
                        txtPx = parseInt(Number(U)).toString().length * mDrawCoordinateCharPx * mDrawSvgViewBox
                    } else {
                        textNode = document.createTextNode(Number(Number(U)).toFixed(2));
                        txtPx = Number(Number(U).toFixed(2).toString().length) * mDrawCoordinateCharPx * mDrawSvgViewBox
                    }
                    X.setAttributeNS(null, "x", Number(K) + 35 * Number(mDrawSvgViewBox) - Number(mDrawCoordinateCharPx) * Number(mDrawSvgViewBox));
                    X.setAttributeNS(null, "y", Number(Z) + (Number(O) - Number(Z)) / 2 + Number(txtPx / 2) / 2 + Number(mDrawCoordinateFontSize / 2) * Number(mDrawSvgViewBox));
                    X.setAttributeNS(null, "font-size", (Number(mDrawCoordinateFontSize) * Number(mDrawSvgViewBox)).toString() + "px");
                    X.setAttributeNS(null, "transform", "rotate(-90 " + X.getAttributeNS(null, "x") + " " + X.getAttributeNS(null, "y") + ")");
                    X.setAttributeNS(null, "mtingorframeid", MicroDraw_ShowCoordinate_GetSpecValTingsId(N, "H", "0"));
                    X.setAttributeNS(null, "mtextkind", "HLAST");
                    X.setAttributeNS(null, "mtotalheight", W[i].value);
                    if (isPcUserAgent()) {
                        X.setAttributeNS(null, "ondblclick", 'MicroDraw_ShowCoordinate_doubleClickText("' + l + '","' + N + '");')
                    } else {
                        X.setAttributeNS(null, "onclick", 'MicroDraw_ShowCoordinate_doubleClickText("' + l + '","' + N + '");')
                    }
                    g.appendChild(R);
                    g.appendChild(u);
                    g.appendChild(I);
                    X.appendChild(textNode);
                    g.appendChild(X)
                }
            } else {
                if (W[i].name.indexOf("H") > -1) {
                    v++;
                    var p;
                    var w;
                    var Z;
                    var O;
                    var A;
                    var c;
                    p = MicroDraw_ShowCoordinate_GetTingCoorInfo(Number(W[i].mx), Number(W[i].my), W[i].mObjId);
                    w = p.split(",");
                    Z = w[0];
                    O = w[1];
                    A = w[2];
                    c = w[3];
                    var R = document.createElementNS(mDrawSvgNS, "line");
                    R.setAttributeNS(null, "id", M + "_l" + v.toString());
                    R.setAttributeNS(null, "x1", Number(K) + 25 * Number(mDrawSvgViewBox));
                    R.setAttributeNS(null, "y1", Z);
                    R.setAttributeNS(null, "x2", Number(K) + 45 * Number(mDrawSvgViewBox));
                    R.setAttributeNS(null, "y2", Z);
                    R.setAttributeNS(null, "stroke", "black");
                    R.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    var u = document.createElementNS(mDrawSvgNS, "line");
                    u.setAttributeNS(null, "id", M + "_l" + v.toString());
                    u.setAttributeNS(null, "x1", Number(K) + 35 * Number(mDrawSvgViewBox));
                    u.setAttributeNS(null, "y1", Z);
                    u.setAttributeNS(null, "x2", Number(K) + 35 * Number(mDrawSvgViewBox));
                    u.setAttributeNS(null, "y2", O);
                    u.setAttributeNS(null, "stroke", "black");
                    u.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    var I = document.createElementNS(mDrawSvgNS, "line");
                    I.setAttributeNS(null, "id", M + "_l" + v.toString());
                    I.setAttributeNS(null, "x1", Number(K) + 25 * Number(mDrawSvgViewBox));
                    I.setAttributeNS(null, "y1", O);
                    I.setAttributeNS(null, "x2", Number(K) + 45 * Number(mDrawSvgViewBox));
                    I.setAttributeNS(null, "y2", O);
                    I.setAttributeNS(null, "stroke", "black");
                    I.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    var X = document.createElementNS(mDrawSvgNS, "text");
                    var l = N + "-" + Number(Z).toFixed(0).toString() + "-" + Number(O).toFixed(0).toString();
                    X.setAttributeNS(null, "id", l);
                    if (parseInt(Number(A)) == Number(A)) {
                        textNode = document.createTextNode(parseInt(Number(A)));
                        txtPx = parseInt(Number(A)).toString().length * mDrawCoordinateCharPx * mDrawSvgViewBox
                    } else {
                        textNode = document.createTextNode(Number(Number(A)).toFixed(2));
                        txtPx = Number(Number(A).toFixed(2).toString().length) * mDrawCoordinateCharPx * mDrawSvgViewBox
                    }
                    X.setAttributeNS(null, "x", Number(K) + 35 * Number(mDrawSvgViewBox) - Number(mDrawCoordinateCharPx) * Number(mDrawSvgViewBox));
                    X.setAttributeNS(null, "y", Number(Z) + (Number(O) - Number(Z)) / 2 + Number(txtPx / 2) / 2 + Number(mDrawCoordinateFontSize / 2) * Number(mDrawSvgViewBox));
                    X.setAttributeNS(null, "font-size", (Number(mDrawCoordinateFontSize) * Number(mDrawSvgViewBox)).toString() + "px");
                    X.setAttributeNS(null, "transform", "rotate(-90 " + X.getAttributeNS(null, "x") + " " + X.getAttributeNS(null, "y") + ")");
                    X.setAttributeNS(null, "mpretingval", c);
                    X.setAttributeNS(null, "mtingorframeid", MicroDraw_ShowCoordinate_GetSpecValTingsId(N, "H", (Number(c) + Number(A))).toString());
                    X.setAttributeNS(null, "mtextkind", "Hn");
                    if (isPcUserAgent()) {
                        X.setAttributeNS(null, "ondblclick", 'MicroDraw_ShowCoordinate_doubleClickText("' + l + '","' + N + '");')
                    } else {
                        X.setAttributeNS(null, "onclick", 'MicroDraw_ShowCoordinate_doubleClickText("' + l + '","' + N + '");')
                    }
                    if (isEmptyOrNull($("#" + l)[0])) {
                        g.appendChild(R);
                        g.appendChild(u);
                        g.appendChild(I);
                        X.appendChild(textNode);
                        g.appendChild(X)
                    } else {
                        var s = $("#" + l)[0];
                        s.setAttribute("mtingorframeId", s.getAttribute("mtingorframeId") + "," + W[i].mObjId)
                    }
                }
            }
            b = $("#" + mDrawFlag_SvgId + " #" + N + " [mtype=" + mDrawFlag_FrameRect + "]");
            var J = b[0].getAttribute("coorinshow");
            J = $.Micro.IsEmpty(J) ? "N": J;
            if (J == "Y") {
                var F = function(AF, Av, As, Ar) {
                    var AC = 0;
                    var AB = 0;
                    var Ac = Number(Av.mx);
                    var AE = Number(Av.mx) + (Number(Av.value) / 1000) * mDrawPixelPerM;
                    var Ad = Number(Ar) + 10 * Number(mDrawSvgViewBox);
                    var Ap = Ad + 20;
                    function Ab(AH) {
                        var AI = document.createElementNS(mDrawSvgNS, "line");
                        AI.setAttributeNS(null, "id", AH.id);
                        AI.setAttributeNS(null, "x1", AH.x1);
                        AI.setAttributeNS(null, "y1", AH.y1);
                        AI.setAttributeNS(null, "x2", AH.x2);
                        AI.setAttributeNS(null, "y2", AH.y2);
                        AI.setAttributeNS(null, "stroke", "black");
                        AI.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                        return AI
                    }
                    function Ah(AL) {
                        var AM = document.createElementNS(mDrawSvgNS, "text");
                        var AK = "";
                        var AH = "";
                        if (!$.Micro.IsEmpty(AL.preObjId)) {
                            AH = AH + "-"
                        }
                        if (AL.RulerType.indexOf("X") >= 0) {
                            AK = N + "-" + AH + AL.beginX + "-" + AL.endX
                        } else {
                            AK = N + "-" + AH + AL.beginY + "-" + AL.endY
                        }
                        AM.setAttributeNS(null, "id", AK);
                        if (parseInt(Number(AL.value)) == Number(AL.value)) {
                            textNode = document.createTextNode(parseInt(Number(AL.value)));
                            txtPx = parseInt(Number(AL.value)).toString().length * mDrawCoordinateCharPx * mDrawSvgViewBox
                        } else {
                            textNode = document.createTextNode(Number(Number(AL.value)).toFixed(2));
                            txtPx = Number(Number(AL.value).toFixed(2).toString().length) * mDrawCoordinateCharPx * mDrawSvgViewBox
                        }
                        var AJ = 0;
                        if (AL.RulerType.indexOf("X") >= 0) {
                            if (AL.TextPosition == "M") {
                                AJ = Number(AL.beginX) + Number((AL.endX - AL.beginX) / 2) - txtPx / 2
                            } else {
                                if (AL.TextPosition == "L") {
                                    AJ = AL.beginX - txtPx / 2
                                } else {
                                    AJ = AL.endX - (AL.RulerType.indexOf("TING") >= 0 ? mDrawThickTing * Number(mDrawSvgViewBox) : mDrawThickFrame * Number(mDrawSvgViewBox)) - txtPx / 2
                                }
                            }
                        } else {
                            if (AL.TextPosition == "M") {
                                AJ = Number(AL.beginX) + 20 * Number(mDrawSvgViewBox) - Number(mDrawCoordinateFontSize * mDrawSvgViewBox)
                            } else {
                                AJ = Number(AL.beginX) + 10 * Number(mDrawSvgViewBox) - Number(mDrawCoordinateFontSize * mDrawSvgViewBox)
                            }
                        }
                        var AI = 0;
                        if (AL.RulerType.indexOf("X") >= 0) {
                            if (AL.TextPosition == "M") {
                                AI = Number(AL.beginY) + 10 * Number(mDrawSvgViewBox) + Number(mDrawCoordinateFontSize * mDrawSvgViewBox)
                            } else {
                                AI = Number(AL.beginY) + 20 * Number(mDrawSvgViewBox) + Number(mDrawCoordinateFontSize * mDrawSvgViewBox)
                            }
                        } else {
                            if (AL.TextPosition == "M") {
                                AI = Number(AL.beginY) + (Number(AL.endY) - Number(AL.beginY)) / 2 + Number(txtPx / 2) / 2 + Number(mDrawCoordinateFontSize / 2) * Number(mDrawSvgViewBox)
                            } else {
                                if (AL.TextPosition == "L") {
                                    AI = Number(AL.beginY) + Number(txtPx / 2) + Number(mDrawCoordinateFontSize / 2) * Number(mDrawSvgViewBox)
                                } else {
                                    AI = Number(AL.endY) - (AL.RulerType.indexOf("TING") >= 0 ? mDrawThickTing * Number(mDrawSvgViewBox) : mDrawThickFrame * Number(mDrawSvgViewBox)) + Number(txtPx / 2) + Number(mDrawCoordinateFontSize / 2) * Number(mDrawSvgViewBox)
                                }
                            }
                        }
                        AM.setAttributeNS(null, "x", AJ);
                        AM.setAttributeNS(null, "y", AI);
                        AM.setAttributeNS(null, "font-size", (Number(mDrawCoordinateFontSize) * Number(mDrawSvgViewBox)).toString() + "px");
                        AM.setAttributeNS(null, "mtingorframeid", AL.mObjId);
                        if (AL.RulerType.indexOf("X") >= 0) {
                            AM.setAttributeNS(null, "mtextkind", "W")
                        } else {
                            AM.setAttributeNS(null, "transform", "rotate(-90 " + AM.getAttributeNS(null, "x") + " " + AM.getAttributeNS(null, "y") + ")");
                            AM.setAttributeNS(null, "mtextkind", "H")
                        }
                        AM.appendChild(textNode);
                        return AM
                    }
                    function Af(AO) {
                        var AN = {
                            lInWidth: 0,
                            rInWidth: 0
                        };
                        if ($("#" + AO.mObjId).length <= 0) {
                            return AN
                        }
                        var AJ = $("#" + AO.mObjId).get(0);
                        var AH = $("#" + AO.mObjId).closest("[mtype='" + mDrawFlag_Win + "']").find("[mtype='frameRect']").attr("id");
                        var AL = $.Micro.IsEmpty(AO.preTingId) ? ($.Micro.IsEmpty(AH) ? AO.mObjId: AH) : AO.preTingId;
                        var AI = $("#" + mDrawPrProperty).datagrid("getRows");
                        var AK = [];
                        var AM = [];
                        if (AO.RulerType == "X") {
                            $.each(AI,
                            function(AP, AQ) {
                                if (AQ.ObjId == AL && AQ.Cnt > 0) {
                                    if ((AQ.Memo.indexOf("左") >= 0 || AQ.Memo.indexOf("竖") >= 0)) {
                                        AK.push(AQ.ProductId)
                                    }
                                }
                                if (AQ.ObjId == AO.mObjId && AQ.Cnt > 0) {
                                    if ((AQ.Memo.indexOf("右") >= 0 || AQ.Memo.indexOf("竖") >= 0)) {
                                        AM.push(AQ.ProductId)
                                    }
                                }
                            })
                        } else {
                            $.each(AI,
                            function(AP, AQ) {
                                if (AQ.ObjId == AL && AQ.Cnt > 0) {
                                    if ((AQ.Memo.indexOf("上") >= 0 || AQ.Memo.indexOf("横") >= 0)) {
                                        AK.push(AQ.ProductId)
                                    }
                                }
                                if (AQ.ObjId == AO.mObjId && AQ.Cnt > 0) {
                                    if ((AQ.Memo.indexOf("下") >= 0 || AQ.Memo.indexOf("横") >= 0)) {
                                        AM.push(AQ.ProductId)
                                    }
                                }
                            })
                        }
                        if (AK.length > 0) {
                            $.each(AK,
                            function(AP, AQ) {
                                $.each(mPublicPrList,
                                function(AS, AR) {
                                    if (AQ == AR.productid && AR.InWidth > 0) {
                                        AN.lInWidth = AR.InWidth
                                    }
                                })
                            })
                        }
                        if (AM.length > 0) {
                            $.each(AM,
                            function(AP, AQ) {
                                $.each(mPublicPrList,
                                function(AS, AR) {
                                    if (AQ == AR.productid && AR.InWidth > 0) {
                                        AN.rInWidth = AR.InWidth
                                    }
                                })
                            })
                        }
                        return AN
                    }
                    v++;
                    if (Av.name == "W") {
                        var Az = $("#" + Av.mObjId)[0].parentNode;
                        if ($("#" + Az.getAttribute("id") + " [mtype='" + mDrawFlag_TingV + "']").length > 0) {
                            var Aw = "";
                            var At = 0;
                            var Ak = 0;
                            $("#" + Az.getAttribute("id") + " [mtype='" + mDrawFlag_TingV + "']").each(function(AH, AI) {
                                if (Number(AI.getAttribute("mx")) > At) {
                                    At = Number(AI.getAttribute("mx"));
                                    Aw = AI.getAttribute("id")
                                }
                                Ak++
                            });
                            Ac = Number($("#" + Aw + "_r1")[0].getAttribute("x"));
                            AE = Number(Av.mx) + Number(Av.mw);
                            var Al = Af({
                                mObjId: Av.mObjId,
                                RulerType: "X",
                                preTingId: Aw
                            });
                            AC = Al.lInWidth;
                            AB = Al.rInWidth;
                            var Ai = Ab({
                                id: L + "_l" + v.toString(),
                                x1: Ac + mDrawThickFrame * Number(mDrawSvgViewBox),
                                x2: Ac + mDrawThickFrame * Number(mDrawSvgViewBox),
                                y1: Ad,
                                y2: Ap
                            });
                            var Ay = Ab({
                                id: L + "_l" + v.toString(),
                                x1: Ac + Number(mDrawThickTing) * Number(mDrawSvgViewBox),
                                x2: AE,
                                y1: Ad + 10,
                                y2: Ad + 10
                            });
                            var AD = Ab({
                                id: L + "_l" + v.toString(),
                                x1: AE,
                                x2: AE,
                                y1: Ad,
                                y2: Ap
                            });
                            var Aj = Ab({
                                id: L + "_l" + v.toString(),
                                x1: AE - mDrawThickFrame * Number(mDrawSvgViewBox),
                                x2: AE - mDrawThickFrame * Number(mDrawSvgViewBox),
                                y1: Ad,
                                y2: Ap
                            });
                            var Au = Ah({
                                winId: N,
                                preObjId: "",
                                beginX: Ac,
                                endX: AE,
                                beginY: Ad,
                                endY: Ap,
                                RulerType: "FRAME-X",
                                TextPosition: "M",
                                value: Av.value - At - (Ak > 0 ? AC / 2 : AC) - AB,
                                mObjId: Av.mObjId
                            });
                            var An = Ah({
                                winId: N,
                                preObjId: "NCR",
                                beginX: Ac,
                                endX: AE,
                                beginY: Ad,
                                endY: Ap,
                                RulerType: "TING-X",
                                TextPosition: "R",
                                value: AB,
                                mObjId: Av.mObjId
                            });
                            AF.appendChild(Ay);
                            AF.appendChild(AD);
                            AF.appendChild(Au);
                            AF.appendChild(Ai);
                            AF.appendChild(Aj);
                            AF.appendChild(An)
                        } else {
                            var Al = Af({
                                mObjId: Av.mObjId,
                                RulerType: "X"
                            });
                            AC = Al.lInWidth;
                            AB = Al.rInWidth;
                            var Ag = Ab({
                                id: L + "_l" + v.toString(),
                                x1: Ac,
                                x2: Ac,
                                y1: Ad,
                                y2: Ap
                            });
                            var Ai = Ab({
                                id: L + "_l" + v.toString(),
                                x1: Ac + mDrawThickFrame * Number(mDrawSvgViewBox),
                                x2: Ac + mDrawThickFrame * Number(mDrawSvgViewBox),
                                y1: Ad,
                                y2: Ap
                            });
                            var Ay = Ab({
                                id: L + "_l" + v.toString(),
                                x1: Ac,
                                x2: AE,
                                y1: Ad + 10,
                                y2: Ad + 10
                            });
                            var AD = Ab({
                                id: L + "_l" + v.toString(),
                                x1: AE,
                                x2: AE,
                                y1: Ad,
                                y2: Ap
                            });
                            var Aj = Ab({
                                id: L + "_l" + v.toString(),
                                x1: AE - mDrawThickFrame * Number(mDrawSvgViewBox),
                                x2: AE - mDrawThickFrame * Number(mDrawSvgViewBox),
                                y1: Ad,
                                y2: Ap
                            });
                            var Au = Ah({
                                winId: N,
                                preObjId: "",
                                beginX: Ac,
                                endX: AE,
                                beginY: Ad,
                                endY: Ap,
                                RulerType: "FRAME-X",
                                TextPosition: "M",
                                value: Av.value - AC - AB,
                                mObjId: Av.mObjId
                            });
                            var Am = Ah({
                                winId: N,
                                preObjId: "NCL",
                                beginX: Ac,
                                endX: AE,
                                beginY: Ad,
                                endY: Ap,
                                RulerType: "FRAME-X",
                                TextPosition: "L",
                                value: AC,
                                mObjId: Av.mObjId
                            });
                            var An = Ah({
                                winId: N,
                                preObjId: "NCR",
                                beginX: Ac,
                                endX: AE,
                                beginY: Ad,
                                endY: Ap,
                                RulerType: "FRAME-X",
                                TextPosition: "R",
                                value: AB,
                                mObjId: Av.mObjId
                            });
                            AF.appendChild(Ag);
                            AF.appendChild(Ay);
                            AF.appendChild(AD);
                            AF.appendChild(Au);
                            AF.appendChild(Ai);
                            AF.appendChild(Aj);
                            AF.appendChild(Am);
                            AF.appendChild(An)
                        }
                    } else {
                        if (Av.name.indexOf("W") > -1) {
                            var Aq;
                            var Ao;
                            var Ax;
                            var AA;
                            var Ae;
                            var AG;
                            Aq = MicroDraw_ShowCoordinate_GetTingCoorInfo(Number(Av.mx), Number(Av.my), Av.mObjId);
                            Ao = Aq.split(",");
                            Ax = Ao[0];
                            AA = Ao[1];
                            Ae = Ao[2];
                            AG = Ao[3];
                            preTingId = Ao[4];
                            if (AG > 0) {
                                Ac = Number(Ax) - Number(mDrawThickTing * mDrawSvgViewBox / 2)
                            } else {
                                Ac = Ax
                            }
                            AE = Number(AA) + Number(mDrawThickTing * mDrawSvgViewBox / 2);
                            var Al = Af({
                                mObjId: Av.mObjId,
                                RulerType: "X",
                                preTingId: preTingId
                            });
                            AC = Al.lInWidth;
                            AB = Al.rInWidth;
                            var Ag = Ab({
                                id: L + "_l" + v.toString(),
                                x1: Ac,
                                x2: Ac,
                                y1: Ad,
                                y2: Ap
                            });
                            var Ai = Ab({
                                id: L + "_l" + v.toString(),
                                x1: Number(Ac) + Number(mDrawThickFrame) * Number(mDrawSvgViewBox),
                                x2: Number(Ac) + Number(mDrawThickFrame) * Number(mDrawSvgViewBox),
                                y1: Ad,
                                y2: Ap
                            });
                            var Ay = Ab({
                                id: L + "_l" + v.toString(),
                                x1: AG > 0 ? Ac + Number(mDrawThickTing) * Number(mDrawSvgViewBox) : Ac,
                                x2: AE,
                                y1: Ad + 10,
                                y2: Ad + 10
                            });
                            var Aj = Ab({
                                id: L + "_l" + v.toString(),
                                x1: AE - mDrawThickFrame * Number(mDrawSvgViewBox),
                                x2: AE - mDrawThickFrame * Number(mDrawSvgViewBox),
                                y1: Ad,
                                y2: Ap
                            });
                            var Au = Ah({
                                winId: N,
                                preObjId: "",
                                beginX: Ac,
                                endX: AE,
                                beginY: Ad,
                                endY: Ap,
                                RulerType: "FRAME-X",
                                TextPosition: "M",
                                value: Av.value - AG - (AG > 0 ? AC / 2 : AC) - AB / 2,
                                mObjId: Av.mObjId
                            });
                            var Am = Ah({
                                winId: N,
                                preObjId: "NCL",
                                beginX: Ac,
                                endX: AE,
                                beginY: Ad,
                                endY: Ap,
                                RulerType: (AG > 0 ? "TING": "FRAME") + "-X",
                                TextPosition: "L",
                                value: AC,
                                mObjId: Av.mObjId
                            });
                            var An = Ah({
                                winId: N,
                                preObjId: "NCR",
                                beginX: Ac,
                                endX: AE,
                                beginY: Ad,
                                endY: Ap,
                                RulerType: "TING-X",
                                TextPosition: "R",
                                value: AB,
                                mObjId: Av.mObjId
                            });
                            if (AG <= 0) {
                                AF.appendChild(Ag)
                            }
                            AF.appendChild(Ay);
                            AF.appendChild(Au);
                            AF.appendChild(Ai);
                            AF.appendChild(Aj);
                            if (AG <= 0) {
                                AF.appendChild(Am)
                            }
                            AF.appendChild(An)
                        } else {
                            if (Av.name == "H") {
                                var Az = $("#" + Av.mObjId)[0].parentNode;
                                if ($("#" + Az.getAttribute("id") + " [mtype='" + mDrawFlag_TingH + "']").length > 0) {
                                    v++;
                                    var Aw = "";
                                    var At = 0;
                                    var Ak = 0;
                                    $("#" + Az.getAttribute("id") + " [mtype='" + mDrawFlag_TingH + "']").each(function(AH, AI) {
                                        if (Number(AI.getAttribute("my")) > At) {
                                            At = Number(AI.getAttribute("my"));
                                            Aw = AI.getAttribute("id")
                                        }
                                        Ak++
                                    });
                                    Ac = Number(As) - 30 * Number(mDrawSvgViewBox);
                                    AE = Ac + 20;
                                    Ad = Number($("#" + Aw + "_r1")[0].getAttribute("y"));
                                    Ap = Number(Av.my) + Number(Av.mh);
                                    var Al = Af({
                                        mObjId: Av.mObjId,
                                        RulerType: "Y",
                                        preTingId: Aw
                                    });
                                    AC = Al.lInWidth;
                                    AB = Al.rInWidth;
                                    var Ai = Ab({
                                        id: L + "_l" + v.toString(),
                                        x1: Ac,
                                        x2: AE,
                                        y1: Ad + mDrawThickFrame * Number(mDrawSvgViewBox),
                                        y2: Ad + mDrawThickFrame * Number(mDrawSvgViewBox)
                                    });
                                    var Ay = Ab({
                                        id: L + "_l" + v.toString(),
                                        x1: Ac + 10,
                                        x2: Ac + 10,
                                        y1: Ad + Number(mDrawThickTing) * Number(mDrawSvgViewBox),
                                        y2: Ap
                                    });
                                    var AD = Ab({
                                        id: L + "_l" + v.toString(),
                                        x1: Ac,
                                        x2: AE,
                                        y1: Ap,
                                        y2: Ap
                                    });
                                    var Aj = Ab({
                                        id: L + "_l" + v.toString(),
                                        x1: Ac,
                                        x2: AE,
                                        y1: Ap - mDrawThickFrame * Number(mDrawSvgViewBox),
                                        y2: Ap - mDrawThickFrame * Number(mDrawSvgViewBox)
                                    });
                                    var Au = Ah({
                                        winId: N,
                                        preObjId: "",
                                        beginX: Ac,
                                        endX: AE,
                                        beginY: Ad,
                                        endY: Ap,
                                        RulerType: "FRAME-Y",
                                        TextPosition: "M",
                                        value: Av.value - At - (Ak > 0 ? AC / 2 : AC) - AB,
                                        mObjId: Av.mObjId
                                    });
                                    var An = Ah({
                                        winId: N,
                                        preObjId: "NCR",
                                        beginX: Ac,
                                        endX: AE,
                                        beginY: Ad,
                                        endY: Ap,
                                        RulerType: "TING-Y",
                                        TextPosition: "R",
                                        value: AB,
                                        mObjId: Av.mObjId
                                    });
                                    AF.appendChild(Ay);
                                    AF.appendChild(AD);
                                    AF.appendChild(Au);
                                    AF.appendChild(Ai);
                                    AF.appendChild(Aj);
                                    AF.appendChild(An)
                                } else {
                                    Ac = Number(As) - 30 * Number(mDrawSvgViewBox);
                                    AE = Ac + 20;
                                    Ad = Number(Av.my);
                                    Ap = Number(Av.my) + Number(Av.mh);
                                    var Al = Af({
                                        mObjId: Av.mObjId,
                                        RulerType: "Y"
                                    });
                                    AC = Al.lInWidth;
                                    AB = Al.rInWidth;
                                    var Ag = Ab({
                                        id: L + "_l" + v.toString(),
                                        x1: Ac,
                                        x2: AE,
                                        y1: Ad,
                                        y2: Ad
                                    });
                                    var Ai = Ab({
                                        id: L + "_l" + v.toString(),
                                        x1: Ac,
                                        x2: AE,
                                        y1: Ad + mDrawThickFrame * Number(mDrawSvgViewBox),
                                        y2: Ad + mDrawThickFrame * Number(mDrawSvgViewBox)
                                    });
                                    var Ay = Ab({
                                        id: L + "_l" + v.toString(),
                                        x1: Ac + 10,
                                        x2: Ac + 10,
                                        y1: Ad,
                                        y2: Ap
                                    });
                                    var AD = Ab({
                                        id: L + "_l" + v.toString(),
                                        x1: Ac,
                                        x2: AE,
                                        y1: Ap,
                                        y2: Ap
                                    });
                                    var Aj = Ab({
                                        id: L + "_l" + v.toString(),
                                        x1: Ac,
                                        x2: AE,
                                        y1: Ap - mDrawThickFrame * Number(mDrawSvgViewBox),
                                        y2: Ap - mDrawThickFrame * Number(mDrawSvgViewBox)
                                    });
                                    var Au = Ah({
                                        winId: N,
                                        preObjId: "",
                                        beginX: Ac,
                                        endX: AE,
                                        beginY: Ad,
                                        endY: Ap,
                                        RulerType: "FRAME-Y",
                                        TextPosition: "M",
                                        value: Av.value - AC - AB,
                                        mObjId: Av.mObjId
                                    });
                                    var Am = Ah({
                                        winId: N,
                                        preObjId: "NCL",
                                        beginX: Ac,
                                        endX: AE,
                                        beginY: Ad,
                                        endY: Ap,
                                        RulerType: "FRAME-Y",
                                        TextPosition: "L",
                                        value: AC,
                                        mObjId: Av.mObjId
                                    });
                                    var An = Ah({
                                        winId: N,
                                        preObjId: "NCR",
                                        beginX: Ac,
                                        endX: AE,
                                        beginY: Ad,
                                        endY: Ap,
                                        RulerType: "FRAME-Y",
                                        TextPosition: "R",
                                        value: AB,
                                        mObjId: Av.mObjId
                                    });
                                    AF.appendChild(Ag);
                                    AF.appendChild(Ay);
                                    AF.appendChild(AD);
                                    AF.appendChild(Au);
                                    AF.appendChild(Ai);
                                    AF.appendChild(Aj);
                                    AF.appendChild(Am);
                                    AF.appendChild(An)
                                }
                            } else {
                                if (Av.name.indexOf("H") > -1) {
                                    var Aq;
                                    var Ao;
                                    var Ax;
                                    var AA;
                                    var Ae;
                                    var AG;
                                    Aq = MicroDraw_ShowCoordinate_GetTingCoorInfo(Number(Av.mx), Number(Av.my), Av.mObjId);
                                    Ao = Aq.split(",");
                                    Ax = Ao[0];
                                    AA = Ao[1];
                                    Ae = Ao[2];
                                    AG = Ao[3];
                                    preTingId = Ao[4];
                                    Ac = Number(As) - 30 * Number(mDrawSvgViewBox);
                                    AE = Ac + 20;
                                    if (AG > 0) {
                                        Ad = Number(Z) - Number(mDrawThickTing * mDrawSvgViewBox / 2)
                                    } else {
                                        Ad = Z
                                    }
                                    Ap = Number(O) + Number(mDrawThickTing * mDrawSvgViewBox / 2);
                                    var Al = Af({
                                        mObjId: Av.mObjId,
                                        RulerType: "Y",
                                        preTingId: preTingId
                                    });
                                    AC = Al.lInWidth;
                                    AB = Al.rInWidth;
                                    var Ag = Ab({
                                        id: L + "_l" + v.toString(),
                                        x1: Ac,
                                        x2: AE,
                                        y1: Ad,
                                        y2: Ad
                                    });
                                    var Ai = Ab({
                                        id: L + "_l" + v.toString(),
                                        x1: Ac,
                                        x2: AE,
                                        y1: Number(Ad) + Number(mDrawThickFrame) * Number(mDrawSvgViewBox),
                                        y2: Number(Ad) + Number(mDrawThickFrame) * Number(mDrawSvgViewBox)
                                    });
                                    var Ay = Ab({
                                        id: L + "_l" + v.toString(),
                                        x1: Ac + 10,
                                        x2: Ac + 10,
                                        y1: AG > 0 ? Ad + Number(mDrawThickTing) * Number(mDrawSvgViewBox) : Ad,
                                        y2: Ap
                                    });
                                    var Aj = Ab({
                                        id: L + "_l" + v.toString(),
                                        x1: Ac,
                                        x2: AE,
                                        y1: Ap - mDrawThickFrame * Number(mDrawSvgViewBox),
                                        y2: Ap - mDrawThickFrame * Number(mDrawSvgViewBox)
                                    });
                                    var Au = Ah({
                                        winId: N,
                                        preObjId: "",
                                        beginX: Ac,
                                        endX: AE,
                                        beginY: Ad,
                                        endY: Ap,
                                        RulerType: "FRAME-Y",
                                        TextPosition: "M",
                                        value: Av.value - AG - (AG > 0 ? AC / 2 : AC) - AB / 2,
                                        mObjId: Av.mObjId
                                    });
                                    var Am = Ah({
                                        winId: N,
                                        preObjId: "NCL",
                                        beginX: Ac,
                                        endX: AE,
                                        beginY: Ad,
                                        endY: Ap,
                                        RulerType: (AG > 0 ? "TING": "FRAME") + "-Y",
                                        TextPosition: "L",
                                        value: AC,
                                        mObjId: Av.mObjId
                                    });
                                    var An = Ah({
                                        winId: N,
                                        preObjId: "NCR",
                                        beginX: Ac,
                                        endX: AE,
                                        beginY: Ad,
                                        endY: Ap,
                                        RulerType: "TING-Y",
                                        TextPosition: "R",
                                        value: AB,
                                        mObjId: Av.mObjId
                                    });
                                    if (AG <= 0) {
                                        AF.appendChild(Ag)
                                    }
                                    AF.appendChild(Ay);
                                    AF.appendChild(Au);
                                    AF.appendChild(Ai);
                                    AF.appendChild(Aj);
                                    if (AG <= 0) {
                                        AF.appendChild(Am)
                                    }
                                    AF.appendChild(An)
                                }
                            }
                        }
                    }
                };
                if (W[i].name.indexOf("W") > -1) {
                    F(f, W[i], K, P)
                } else {
                    F(g, W[i], K, P)
                }
            }
            var b = $("#" + mDrawFlag_SvgId + " #" + N + " [mtype=" + mDrawFlag_FrameRect + "]");
            var E = b[0].getAttribute("coorxshow");
            var S = b[0].getAttribute("cooryshow");
            E = $.Micro.IsEmpty(E) ? "Y": E;
            S = $.Micro.IsEmpty(S) ? "Y": S;
            if (E == "Y") {
                n.appendChild(f)
            }
            if (S == "Y") {
                n.appendChild(g)
            }
        }
    }
    MicroDraw_ShowFrameArcCoor(N)
}
function MicroDraw_ShowCoordinate_doubleClickText(G, Q) {
    var E = false;
    var F = "尺寸录入：";
    var O = "请输入尺寸：";
    $.each($(".messager-window .panel-title"),
    function() {
        if ($(this).text() == F) {
            E = true;
            return false
        }
    });
    if (E) {
        return
    }
    var R = function(S) {
        var T = true;
        S = $.trim(S);
        if ($.Micro.Left(S, 1) == "0" && S != "0") {
            T = false;
            $.messager.alert("提示", "录入的尺寸有误!", "info")
        }
        return T
    };
    var J = $.messager.defaults;
    $.messager.defaults = {
        ok: "确定",
        cancel: "退出",
        width: 200
    };
    if (!$.Micro.IsEmpty(Q)) {
        mTextKind = $("#" + G)[0].getAttribute("mtextkind");
        if (mTextKind == "WLAST") {
            var D = $("#" + G)[0].getAttribute("mtingorframeid");
            var P = $("#" + G)[0].getAttribute("mtotalwidth");
            $.messager.prompt(F, O,
            function(S) {
                if (!R(S)) {
                    return
                }
                if (S) {
                    var W = Number(P) - Number(S);
                    var X = D.split(",");
                    for (var T = 0; T < X.length; T++) {
                        var V = $("#" + X[T])[0].getAttribute("mx");
                        $("#" + X[T])[0].setAttribute("mx", W);
                        MicroDraw_Redraw(X[T]);
                        var U = Number(W) - Number(V);
                        $("#" + mDrawFlag_SvgId + " [mrid*='" + X[T] + "']").each(function(Y, Z) {
                            Z.setAttribute("mwidth", Number(Z.getAttribute("mwidth")) + Number(U));
                            MicroDraw_Redraw(Z.id)
                        });
                        $("#" + mDrawFlag_SvgId + " [mlid*='" + X[T] + "']").each(function(Y, Z) {
                            Z.setAttribute("mwidth", Number(Z.getAttribute("mwidth")) - Number(U));
                            Z.setAttribute("mx", Number(Z.getAttribute("mx")) + Number(U));
                            MicroDraw_Redraw(Z.id)
                        })
                    }
                    MicroDraw_ChangeAllTingsPos($("#" + mDrawFlag_SvgId + " #" + Q));
                    $("#" + mDrawFlag_SvgId + " [mqjbelongtoframeid]").each(function(Y, Z) {
                        MicroDraw_Redraw(Z.id)
                    });
                    $("#" + mDrawFlag_SvgId + " #" + Q + " [mtype=" + mDrawFlag_FrameArc + "]").each(function(Y, Z) {
                        MicroDraw_Redraw(Z.id)
                    });
                    MicroDraw_ShowSizeProperty();
                    MicroDraw_ShowCoordinate();
                    MicroDraw_autoGdPic();
                    MicroDraw_optChangeEvent()
                }
            });
            MicroDraw_ShowCoordinate_SetTingColor(D, mDrawSvgFocusColor)
        } else {
            if (mTextKind == "W") {
                var D = $("#" + G)[0].getAttribute("mtingorframeid");
                MicroDraw_WinObjClick(D + "_r1");
                $.messager.prompt(F, O,
                function(T) {
                    if (!R(T)) {
                        return
                    }
                    if (T && !isNaN(T)) {
                        var X = $("#" + D)[0].getAttribute("mwidth");
                        $("#" + D)[0].setAttribute("mwidth", T);
                        MicroDraw_RedrawAll(mDrawFlag_SvgId);
                        var V = Number(T) - Number(X);
                        var U = $("#" + Q)[0];
                        $("#" + U.getAttribute("id") + " g[mrid='']").each(function(Y, Z) {
                            if (Z.getAttribute("mtype").indexOf("frame") != 0) {
                                Z.setAttribute("mwidth", Number(Z.getAttribute("mwidth")) + Number(V));
                                MicroDraw_Redraw(Z.id)
                            }
                        });
                        MicroDraw_ChangeAllTingsPos($("#" + mDrawFlag_SvgId + " #" + Q));
                        $("#" + mDrawFlag_SvgId + " [mqjbelongtoframeid]").each(function(Y, Z) {
                            MicroDraw_Redraw(Z.id)
                        });
                        $("#" + mDrawFlag_SvgId + " #" + Q + " [mtype=" + mDrawFlag_FrameArc + "]").each(function(Y, Z) {
                            $(Z).attr("mwidth", T);
                            MicroDraw_Redraw(Z.id)
                        });
                        MicroDraw_ShowSizeProperty();
                        MicroDraw_ShowCoordinate();
                        if (Number(V) != 0) {
                            var S = $("#" + mDrawFlag_SvgId + " [mwallbelongto=" + D + "]")[0];
                            if (!isEmptyOrNull(S)) {
                                S.setAttribute("mwallrealwidth", T);
                                MicroDraw_Redraw_Custom_wall(S.getAttribute("id"))
                            }
                        }
                        if (Number(V) != 0) {
                            MicroDraw_reflashHandleCoorY()
                        }
                        if (Number(V) != 0) {
                            MicroDraw_autoGdPic()
                        }
                        if (typeof(MobileFrame_addScaleG) == "function") {
                            var W = MobileFrame_getMobileViewScale(mDrawFlag_SvgId);
                            MobileFrame_addScaleG(mDrawFlag_SvgId, W)
                        }
                        MicroDraw_optChangeEvent()
                    }
                })
            } else {
                if (mTextKind == "Wn") {
                    var H = $("#" + G)[0].getAttribute("mpretingval");
                    var D = $("#" + G)[0].getAttribute("mtingorframeid");
                    $.messager.prompt(F, O,
                    function(S) {
                        if (!R(S)) {
                            return
                        }
                        if (S) {
                            var W = Number(H) + Number(S);
                            var X = D.split(",");
                            for (var T = 0; T < X.length; T++) {
                                var V = $("#" + X[T])[0].getAttribute("mx");
                                $("#" + X[T])[0].setAttribute("mx", W);
                                MicroDraw_Redraw(X[T]);
                                var U = Number(W) - Number(V);
                                $("#" + mDrawFlag_SvgId + " [mrid*='" + X[T] + "']").each(function(Y, Z) {
                                    Z.setAttribute("mwidth", Number(Z.getAttribute("mwidth")) + Number(U));
                                    MicroDraw_Redraw(Z.id)
                                });
                                $("#" + mDrawFlag_SvgId + " [mlid*='" + X[T] + "']").each(function(Y, Z) {
                                    Z.setAttribute("mwidth", Number(Z.getAttribute("mwidth")) - Number(U));
                                    Z.setAttribute("mx", Number(Z.getAttribute("mx")) + Number(U));
                                    MicroDraw_Redraw(Z.id)
                                })
                            }
                            MicroDraw_ChangeAllTingsPos($("#" + mDrawFlag_SvgId + " #" + Q));
                            $("#" + mDrawFlag_SvgId + " [mqjbelongtoframeid]").each(function(Y, Z) {
                                MicroDraw_Redraw(Z.id)
                            });
                            $("#" + mDrawFlag_SvgId + " #" + Q + " [mtype=" + mDrawFlag_FrameArc + "]").each(function(Y, Z) {
                                MicroDraw_Redraw(Z.id)
                            });
                            MicroDraw_ShowSizeProperty();
                            MicroDraw_ShowCoordinate();
                            MicroDraw_autoGdPic();
                            MicroDraw_optChangeEvent()
                        }
                    });
                    MicroDraw_ShowCoordinate_SetTingColor(D, mDrawSvgFocusColor)
                } else {
                    if (mTextKind == "HLAST") {
                        var D = $("#" + G)[0].getAttribute("mtingorframeid");
                        var I = $("#" + G)[0].getAttribute("mtotalheight");
                        $.messager.prompt(F, O,
                        function(S) {
                            if (!R(S)) {
                                return
                            }
                            if (S) {
                                var W = Number(I) - Number(S);
                                var X = D.split(",");
                                for (var T = 0; T < X.length; T++) {
                                    var V = $("#" + X[T])[0].getAttribute("my");
                                    $("#" + X[T])[0].setAttribute("my", W);
                                    MicroDraw_Redraw(X[T]);
                                    var U = Number(W) - Number(V);
                                    $("#" + mDrawFlag_SvgId + " [mbid*='" + X[T] + "']").each(function(Y, Z) {
                                        Z.setAttribute("mheight", Number(Z.getAttribute("mheight")) + Number(U));
                                        MicroDraw_Redraw(Z.id)
                                    });
                                    $("#" + mDrawFlag_SvgId + " [mtid*='" + X[T] + "']").each(function(Y, Z) {
                                        Z.setAttribute("mheight", Number(Z.getAttribute("mheight")) - Number(U));
                                        Z.setAttribute("my", Number(Z.getAttribute("my")) + Number(U));
                                        MicroDraw_Redraw(Z.id)
                                    })
                                }
                                MicroDraw_ChangeAllTingsPos($("#" + mDrawFlag_SvgId + " #" + Q));
                                $("#" + mDrawFlag_SvgId + " [mqjbelongtoframeid]").each(function(Y, Z) {
                                    MicroDraw_Redraw(Z.id)
                                });
                                $("#" + mDrawFlag_SvgId + " #" + Q + " [mtype=" + mDrawFlag_FrameArc + "]").each(function(Y, Z) {
                                    MicroDraw_Redraw(Z.id)
                                });
                                MicroDraw_reflashHandleCoorY();
                                MicroDraw_autoGdPic();
                                MicroDraw_ShowSizeProperty();
                                MicroDraw_ShowCoordinate();
                                MicroDraw_optChangeEvent()
                            }
                        });
                        MicroDraw_ShowCoordinate_SetTingColor(D, mDrawSvgFocusColor)
                    } else {
                        if (mTextKind == "H") {
                            var D = $("#" + G)[0].getAttribute("mtingorframeid");
                            MicroDraw_WinObjClick(D + "_r1");
                            $.messager.prompt(F, O,
                            function(T) {
                                if (!R(T)) {
                                    return
                                }
                                if (T) {
                                    var X = $("#" + D)[0].getAttribute("mheight");
                                    $("#" + D)[0].setAttribute("mheight", T);
                                    MicroDraw_RedrawAll(mDrawFlag_SvgId);
                                    var V = Number(T) - Number(X);
                                    var U = $("#" + Q)[0];
                                    $("#" + U.getAttribute("id") + " g[mbid='']").each(function(Y, Z) {
                                        if (Z.getAttribute("mtype").indexOf("frame") != 0) {
                                            Z.setAttribute("mheight", Number(Z.getAttribute("mheight")) + Number(V));
                                            MicroDraw_Redraw(Z.id)
                                        }
                                    });
                                    MicroDraw_ChangeAllTingsPos($("#" + mDrawFlag_SvgId + " #" + Q));
                                    var S = $("#" + mDrawFlag_SvgId + " [mwallbelongto=" + D + "]")[0];
                                    if (!isEmptyOrNull(S)) {
                                        MicroDraw_Redraw_Custom_wall(S.getAttribute("id"))
                                    }
                                    $("#" + mDrawFlag_SvgId + " [mqjbelongtoframeid]").each(function(Y, Z) {
                                        MicroDraw_Redraw(Z.id)
                                    });
                                    $("#" + mDrawFlag_SvgId + " #" + Q + " [mtype=" + mDrawFlag_FrameArc + "]").each(function(Y, Z) {
                                        MicroDraw_Redraw(Z.id)
                                    });
                                    MicroDraw_autoGdPic();
                                    MicroDraw_ShowSizeProperty();
                                    MicroDraw_ShowCoordinate();
                                    MicroDraw_reflashHandleCoorY();
                                    if (typeof(MobileFrame_addScaleG) == "function") {
                                        var W = MobileFrame_getMobileViewScale(mDrawFlag_SvgId);
                                        MobileFrame_addScaleG(mDrawFlag_SvgId, W)
                                    }
                                    MicroDraw_optChangeEvent()
                                }
                            })
                        } else {
                            if (mTextKind == "Hn") {
                                var H = $("#" + G)[0].getAttribute("mpretingval");
                                var D = $("#" + G)[0].getAttribute("mtingorframeid");
                                $.messager.prompt(F, O,
                                function(S) {
                                    if (!R(S)) {
                                        return
                                    }
                                    if (S) {
                                        var W = Number(H) + Number(S);
                                        var X = D.split(",");
                                        for (var T = 0; T < X.length; T++) {
                                            var V = $("#" + X[T])[0].getAttribute("my");
                                            $("#" + X[T])[0].setAttribute("my", W);
                                            MicroDraw_Redraw(X[T]);
                                            var U = Number(W) - Number(V);
                                            $("#" + mDrawFlag_SvgId + " [mbid*='" + X[T] + "']").each(function(Y, Z) {
                                                Z.setAttribute("mheight", Number(Z.getAttribute("mheight")) + Number(U));
                                                MicroDraw_Redraw(Z.id)
                                            });
                                            $("#" + mDrawFlag_SvgId + " [mtid*='" + X[T] + "']").each(function(Y, Z) {
                                                Z.setAttribute("mheight", Number(Z.getAttribute("mheight")) - Number(U));
                                                Z.setAttribute("my", Number(Z.getAttribute("my")) + Number(U));
                                                MicroDraw_Redraw(Z.id)
                                            })
                                        }
                                        MicroDraw_ChangeAllTingsPos($("#" + mDrawFlag_SvgId + " #" + Q));
                                        $("#" + mDrawFlag_SvgId + " [mqjbelongtoframeid]").each(function(Y, Z) {
                                            MicroDraw_Redraw(Z.id)
                                        });
                                        $("#" + mDrawFlag_SvgId + " #" + Q + " [mtype=" + mDrawFlag_FrameArc + "]").each(function(Y, Z) {
                                            MicroDraw_Redraw(Z.id)
                                        });
                                        MicroDraw_reflashHandleCoorY();
                                        MicroDraw_autoGdPic();
                                        MicroDraw_ShowSizeProperty();
                                        MicroDraw_ShowCoordinate();
                                        MicroDraw_optChangeEvent()
                                    }
                                });
                                MicroDraw_ShowCoordinate_SetTingColor(D, mDrawSvgFocusColor)
                            } else {
                                if (mTextKind == "WDKC") {
                                    var L = $("#" + G)[0].getAttribute("mleftwidth");
                                    var D = $("#" + G)[0].getAttribute("mtingorframeid");
                                    $.messager.prompt(F, O,
                                    function(S) {
                                        if (!R(S)) {
                                            return
                                        }
                                        if (S) {
                                            $("#" + D)[0].setAttribute("mleftwidth", S);
                                            MicroDraw_ChangeAllTingsPos($("#" + mDrawFlag_SvgId + " #" + Q));
                                            $("#" + mDrawFlag_SvgId + " [mqjbelongtoframeid]").each(function(T, U) {
                                                MicroDraw_Redraw(U.id)
                                            });
                                            $("#" + mDrawFlag_SvgId + " #" + Q + " [mtype=" + mDrawFlag_FrameArc + "]").each(function(T, U) {
                                                MicroDraw_Redraw(U.id)
                                            });
                                            MicroDraw_Redraw(D);
                                            MicroDraw_ShowCoordinate();
                                            MicroDraw_optChangeEvent()
                                        }
                                    })
                                } else {
                                    if (mTextKind.indexOf("WTLCS") >= 0) {
                                        var K = $("#" + G)[0].getAttribute("mfanwidth");
                                        var D = $("#" + G)[0].getAttribute("mtingorframeid");
                                        $.messager.prompt(F, O,
                                        function(S) {
                                            if (!R(S)) {
                                                return
                                            }
                                            if (S) {
                                                var V = mTextKind.split("-");
                                                var U = $("#" + D).attr("mfanwidth");
                                                if ($.Micro.IsEmpty(U)) {
                                                    $("#" + D)[0].setAttribute("mfanwidth", S)
                                                } else {
                                                    var T = U.split(",");
                                                    T[Number(V[1])] = S;
                                                    $("#" + D)[0].setAttribute("mfanwidth", T.join(","))
                                                }
                                                MicroDraw_ChangeAllTingsPos($("#" + mDrawFlag_SvgId + " #" + Q));
                                                $("#" + mDrawFlag_SvgId + " [mqjbelongtoframeid]").each(function(W, X) {
                                                    MicroDraw_Redraw(X.id)
                                                });
                                                $("#" + mDrawFlag_SvgId + " #" + Q + " [mtype=" + mDrawFlag_FrameArc + "]").each(function(W, X) {
                                                    MicroDraw_Redraw(X.id)
                                                });
                                                MicroDraw_Redraw(D);
                                                MicroDraw_ShowCoordinate();
                                                MicroDraw_optChangeEvent()
                                            }
                                        })
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    } else {
        if (G) {
            var C = $(G);
            var A = C.parents("[mtype=" + mDrawFlag_Custom_ruler + "]");
            if (A.length == 0) {
                $.messager.defaults = J;
                return true
            }
            var N = A.attr("mrulermaster");
            if ($.Micro.IsEmpty(N)) {
                $.messager.defaults = J;
                return true
            }
            var M = $("#" + mDrawFlag_SvgId + " #" + N);
            var B = M.attr("mtype");
            $.messager.prompt(F, O,
            function(S) {
                if (!isNaN(S) && !$.Micro.IsEmpty(S)) {
                    switch (B) {
                    case mDrawFlag_Custom_arc:
                        var T = A.attr("moptid");
                        M.attr(T, S);
                        MicroDraw_Redraw(N);
                        MicroDraw_AutoRuler(N);
                        break
                    }
                }
            })
        }
    }
    if (!isPcUserAgent()) {
        Micro_ioskeyboard($(".messager-window .messager-input"), 1)
    }
    $.messager.defaults = J;
    MicroDraw_StepRecord()
}
function MicroDraw_ShowCoordinate_GetTingCoorInfo(A, J, I) {
    var B = document.getElementById(I);
    var C = B.parentNode;
    var K = B.getAttribute("mtype");
    var D = "";
    var L = 0;
    var F;
    var E;
    var G;
    var H;
    if (K == mDrawFlag_TingV) {
        F = B.getAttribute("mx");
        E = F;
        G = A;
        H = Number($("#" + I + "_r1")[0].getAttribute("x")) + (mDrawThickTing * Number(mDrawSvgViewBox)) / 2;
        $("#" + C.getAttribute("id") + " [mtype='" + mDrawFlag_TingV + "']").each(function(M, N) {
            if (Number(N.getAttribute("mx")) >= L && Number(N.getAttribute("mx")) < F) {
                L = Number(N.getAttribute("mx"));
                D = N.getAttribute("id")
            }
        });
        if (D.length > 0) {
            E = F - L;
            G = Number($("#" + D + "_r1")[0].getAttribute("x")) + Number((mDrawThickTing * Number(mDrawSvgViewBox)) / 2)
        }
    } else {
        F = B.getAttribute("my");
        E = F;
        G = J;
        H = Number($("#" + I + "_r1")[0].getAttribute("y")) + (mDrawThickTing * Number(mDrawSvgViewBox)) / 2;
        $("#" + C.getAttribute("id") + " [mtype='" + mDrawFlag_TingH + "']").each(function(M, N) {
            if (Number(N.getAttribute("my")) >= L && Number(N.getAttribute("my")) < F) {
                L = Number(N.getAttribute("my"));
                D = N.getAttribute("id")
            }
        });
        if (D.length > 0) {
            E = F - L;
            G = Number($("#" + D + "_r1")[0].getAttribute("y")) + Number((mDrawThickTing * Number(mDrawSvgViewBox)) / 2)
        }
    }
    return G.toString() + "," + H.toString() + "," + E.toString() + "," + L + "," + D
}
function MicroDraw_ShowCoordinate_GetSpecValTingsId(A, D, E) {
    var B = "";
    var C = 0;
    if (E.toString() == "0") {
        if (D == "V") {
            $("#" + A + " [mtype='" + mDrawFlag_TingV + "']").each(function(F, G) {
                if (Number(G.getAttribute("mx")) > Number(C)) {
                    C = Number(G.getAttribute("mx"));
                    B = G.getAttribute("id")
                } else {
                    if (Number(G.getAttribute("mx")) == Number(C)) {
                        B = B + "," + G.getAttribute("id")
                    }
                }
            })
        } else {
            if (D == "H") {
                $("#" + A + " [mtype='" + mDrawFlag_TingH + "']").each(function(F, G) {
                    if (Number(G.getAttribute("my")) > Number(C)) {
                        C = Number(G.getAttribute("my"));
                        B = G.getAttribute("id")
                    } else {
                        if (Number(G.getAttribute("my")) == Number(C)) {
                            B = B + "," + G.getAttribute("id")
                        }
                    }
                })
            }
        }
    } else {
        if (D == "V") {
            $("#" + A + " [mtype='" + mDrawFlag_TingV + "']").each(function(F, G) {
                if (Number(G.getAttribute("mx")) == Number(E)) {
                    B = B + "," + G.getAttribute("id")
                }
            })
        } else {
            if (D == "H") {
                $("#" + A + " [mtype='" + mDrawFlag_TingH + "']").each(function(F, G) {
                    if (Number(G.getAttribute("my")) == Number(E)) {
                        B = B + "," + G.getAttribute("id")
                    }
                })
            }
        }
    }
    if (B.substr(0, 1) == ",") {
        B = B.substr(1)
    }
    return B
}
function MicroDraw_ShowCoordinate_SetTingColor(A, B) {
    var C = MicroDraw_ReturnColor($("#" + mDrawFlag_SvgId + " [prcolor]:first").attr("prcolor"));
    $.each($("#" + mDrawFlag_SvgId).find("[mtype='" + mDrawFlag_TingV + "'],[mtype='" + mDrawFlag_TingH + "']"),
    function(D, E) {
        var F = $("#" + mDrawFlag_SvgId + " #" + E.id + "_r1");
        if (A.indexOf(E.id) >= 0) {
            F.attr("fill", B)
        } else {
            F.attr("fill", C)
        }
    });
    $.each($("#" + mDrawFlag_SvgId).find("[mtype='" + mDrawFlag_FrameArcsTingV + "'],[mtype='" + mDrawFlag_FrameArcsTingH + "']"),
    function(D, E) {
        var F = $(E).find("[tag=ting]");
        if (A.indexOf(E.id) >= 0) {
            F.attr("fill", B)
        } else {
            F.attr("fill", C)
        }
    })
}
function MicroDraw_RedrawAll(A) {
    $("#" + A + " [mtype='" + mDrawFlag_FrameRect + "']").each(function(B, C) {
        var D = C.id;
        MicroDraw_Redraw_frameRect(D)
    });
    $("#" + A + " [mtype='" + mDrawFlag_FrameArc + "']").each(function(B, C) {
        var D = C.id;
        MicroDraw_Redraw(D)
    });
    $("#" + A + " [mtype='" + mDrawFlag_TingV + "']").each(function(B, C) {
        var D = C.id;
        MicroDraw_Redraw_tingV(D)
    });
    $("#" + A + " [mtype='" + mDrawFlag_TingH + "']").each(function(B, C) {
        var D = C.id;
        MicroDraw_Redraw_tingH(D)
    });
    $("#" + A + " [mtype='" + mDrawFlag_Area + "']").each(function(B, C) {
        var D = C.id;
        MicroDraw_Redraw_area(D)
    });
    $("#" + A + " [mtype='" + mDrawFlag_Glass + "']").each(function(B, C) {
        var D = C.id;
        MicroDraw_Redraw_glass(D)
    });
    $("#" + A + " [mtype='" + mDrawFlag_Pkc + "']").each(function(B, C) {
        var D = C.id;
        MicroDraw_Redraw_pkc(D)
    });
    $("#" + A + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(B, C) {
        var D = C.id;
        MicroDraw_Redraw_tlc(D)
    });
    $("#" + A + " [mtype='" + mDrawFlag_Dkc + "']").each(function(B, C) {
        var D = C.id;
        MicroDraw_Redraw_dkc(D)
    });
    $("#" + A + " [mtype='" + mDrawFlag_Louver + "']").each(function(B, C) {
        var D = C.id;
        MicroDraw_Redraw_Louver(D)
    });
    $("#" + A + " [mtype=" + mDrawFlag_WinArcs + "]").each(function(B, C) {
        MicroDraw_RedrawWinArcs($(C))
    });
    $.each($("#" + A).find("[mtype=" + mDrawFlag_Custom_CornerMaterial + "],[mtype=" + mDrawFlag_Custom_CornerMaterial_h + "]"),
    function() {
        MicroDraw_Redraw($(this).attr("id"))
    })
}
function MicroDraw_Redraw(C) {
    var B = $("#" + C)[0];
    var A = B.getAttribute("mtype");
    switch (A) {
    case mDrawFlag_FrameRect:
        MicroDraw_Redraw_frameRect(C);
        break;
    case mDrawFlag_FrameArc:
        if ($("#" + C).parents().is(":hidden")) {
            return true
        }
        MicroDraw_ReDraw_ArcFrame(C);
        break;
    case mDrawFlag_FrameArcs:
        MicroDraw_ReDraw_ArcsFrame(C);
        break;
    case mDrawFlag_ArcsGlass:
        MicroDraw_RedrawArcsGlass(C);
        break;
    case mDrawFlag_FrameArcsTingH:
    case mDrawFlag_FrameArcsTingV:
        MicroDraw_RedrawArcsTing(C);
        break;
    case mDrawFlag_ArcsPkc:
    case mDrawFlag_ArcsDkc:
        MicroDraw_RedrawArcsPkc(C);
        break;
    case mDrawFlag_TingV:
        MicroDraw_Redraw_tingV(C);
        break;
    case mDrawFlag_TingH:
        MicroDraw_Redraw_tingH(C);
        break;
    case mDrawFlag_Area:
        MicroDraw_Redraw_area(C);
        break;
    case mDrawFlag_Glass:
        MicroDraw_Redraw_glass(C);
        break;
    case mDrawFlag_Pkc:
        MicroDraw_Redraw_pkc(C);
        break;
    case mDrawFlag_Custom_text:
        MicroDraw_Redraw_Custom_text(C);
        break;
    case mDrawFlag_Custom_line:
        MicroDraw_Redraw_Custom_line(C);
        break;
    case mDrawFlag_Custom_rect:
        MicroDraw_Redraw_Custom_rect(C);
        break;
    case mDrawFlag_Custom_polygon:
        MicroDraw_Redraw_Custom_polygon(C);
        MicroDraw_AddCustomControlPoint(mDrawCustomObjList);
        break;
    case mDrawFlag_Custom_arc:
        if ($("#" + C).parents().is(":hidden")) {
            return true
        }
        MicroDraw_Redraw_Custom_arc(C);
        MicroDraw_AddCustomControlPoint(mDrawCustomObjList);
        break;
    case mDrawFlag_Custom_ruler:
        MicroDraw_Redraw_Custom_ruler(C);
        break;
    case mDrawFlag_Custom_circle:
        MicroDraw_Redraw_Custom_circle(C);
        break;
    case mDrawFlag_Custom_wall:
        MicroDraw_Redraw_Custom_wall(C);
        MicroDraw_AddCustomControlPoint(mDrawCustomObjList);
        break;
    case mDrawFlag_Custom_impSvg:
        MicroDraw_Redraw_Custom_impSvg(C);
        break;
    case mDrawFlag_Dkc:
        MicroDraw_Redraw_dkc(C);
        break;
    case mDrawFlag_Custom_CornerMaterial:
    case mDrawFlag_Custom_CornerMaterial_h:
        MicroDraw_Redraw_CornerMaterial(C);
        break;
    case mDrawFlag_Custom_qj_lt:
    case mDrawFlag_Custom_qj_rt:
    case mDrawFlag_Custom_qj_rb:
    case mDrawFlag_Custom_qj_lb:
    case mDrawFlag_Custom_qj_tm:
    case mDrawFlag_Custom_qj_rm:
    case mDrawFlag_Custom_qj_bm:
    case mDrawFlag_Custom_qj_lm:
    case mDrawFlag_Custom_qj_lx:
    case mDrawFlag_Custom_qj_rx:
    case mDrawFlag_Custom_qj_lrx:
        MicroDraw_Redraw_Custom_qj(C);
        break;
    case mDrawFlag_Louver:
        MicroDraw_Redraw_Louver(C);
        break;
    default:
        if (A.substring(0, 3) == mDrawFlag_Tlc) {
            MicroDraw_Redraw_tlc(C)
        } else {
            if (A.substring(0, 3) == mDrawFlag_Zdm) {
                MicroDraw_Redraw_zdm(C)
            }
        }
        break
    }
    MicroDraw_setWinColor(mDrawFlag_SvgId, MicroDraw_ReturnColor($("#" + mDrawFlag_SvgId + " [prcolor]:first").attr("prcolor")), mDrawGlassColor, mDrawWallColor);
    MicroDraw_CombWinSetPos();
    MicroDraw_definedgdShow();
    MicroDraw_moveQjToWinLastPostion();
    MicroDraw_SetSVGObjToTop($("#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_FrameArc + "]"));
    MicroDraw_autoGdPic()
}
var noEexist_definedgdsList = [];
function MicroDraw_getGdpicSettingPos(P) {
    var T = MicroDraw_getCombWinIDs();
    var V = P.find("[mtype=" + mDrawFlag_FrameRect + "]");
    var B = V;
    if ($.Micro.isInArray(P.attr("id"), T) && mDrawCombWin_maxYwin) {
        B = mDrawCombWin_maxYwin.find("[mtype=" + mDrawFlag_FrameRect + "]")
    }
    var S = 1;
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
        S = Number(mDrawSvgViewBox) / Number(MobileFrame_getCurrMobileViewScale(mDrawFlag_SvgId))
    }
    var E = $("#" + mDrawFlag_SvgId).find("[mtype=" + mDrawFlag_CoorX + "][mwinid=" + B.parents("[mtype=win]").attr("id") + "]");
    var D = $("#" + mDrawFlag_SvgId).find("[mtype=" + mDrawFlag_Custom_wall + "][mwallbelongto=" + B.attr("id") + "]");
    var F = $.Micro_SVG.getSVGRect(B);
    var U = F.x;
    var K = F.y;
    var J = F.width;
    var N = F.height;
    var O = K + N;
    var Q, H = 0,
    M = 0;
    if (E.length > 0) {
        Q = $.Micro_SVG.getSVGRect(E);
        H = Q.y * S;
        M = Q.height;
        if (H + M > O) {
            O = H + M
        }
    }
    var T = MicroDraw_getCombWinIDs();
    if ($.Micro.isInArray(P.attr("id"), T)) {
        var L, W = 0,
        R = 0;
        var I = $("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_combCoorX + '"]');
        if (I.length > 0) {
            L = $.Micro_SVG.getSVGRect(I);
            W = L.y * S;
            R = L.height;
            if (W + R > O) {
                O = W + R
            }
        }
    }
    var G, A = 0,
    C = 0;
    if (D.length > 0) {
        G = $.Micro_SVG.getSVGRect(D);
        A = G.y * S;
        C = G.height;
        if (A + C > O) {
            O = A + C
        }
    }
    return {
        frameSize: F,
        MaxBottom: O
    }
}
function MicroDraw_definedgdShow() {
    var defgdSetting = function(twin, tframe, ttlc, coorX, wall) {
        var defScale = mDrawFlag_DefinedgdScale;
        var ttlc = twin.find("[mtype*=tlc],[mtype*=zdm],[mtype*=dkc],[mtype*=pkc]");
        var mgdscale = MicroDraw_GetObjProperty(ttlc.attr("id"), "mgdscale");
        mgdscale = $.Micro.IsEmpty(mgdscale) ? defScale: mgdscale;
        if (isNaN(mgdscale)) {
            mgdscale = defScale
        }
        if (Number(mgdscale) < 0) {
            mgdscale = defScale
        }
        var stroke_width = 0.5;
        var margin = 10;
        var getGdpicSettingPos = MicroDraw_getGdpicSettingPos(twin);
        var frameSize = getGdpicSettingPos.frameSize;
        var MaxBottom = getGdpicSettingPos.MaxBottom;
        var frameX = frameSize.x;
        var frameW = frameSize.width;
        with(twin.find('[mtype = "' + mDrawFlag_Definedgd + '"]')) {
            get(0).removeAttribute("transform");
            attr("transform", "scale(" + mgdscale + ")");
            find("path").attr("stroke_width", stroke_width / mgdscale);
            var defgdSize = $.Micro_SVG.getSVGRect(twin.find('[mtype = "' + mDrawFlag_Definedgd + '"]'));
            var defgdX = defgdSize.x;
            var defgdY = defgdSize.y;
            var defgdW = defgdSize.width;
            var defgdH = defgdSize.height;
            var matrixStr = ["matrix(1,0,0,1,", frameX - defgdX + (frameW - defgdW) / 2, ",", MaxBottom - defgdY + margin, ")"].join("");
            matrixStr = [matrixStr, "scale(" + mgdscale + ")"].join(" ");
            attr("transform", matrixStr)
        }
    };
    if ($("#" + mDraw_BAS_GD_SVG_TEMP).length == 0) {
        $('<div id="' + mDraw_BAS_GD_SVG_TEMP + '" style="display:none"></div>').appendTo($("body"))
    }
    $.each($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Win + "']"),
    function() {
        var twin = $(this);
        var tframe = twin.find("[mtype=" + mDrawFlag_FrameRect + "]");
        var ttlc = twin.find("[mtype*=tlc],[mtype*=zdm],[mtype*=dkc],[mtype*=pkc]");
        var ttlcid = ttlc.attr("id");
        var mgdshowstyle = MicroDraw_GetObjProperty(ttlcid, "mgdshowstyle");
        if ($.Micro.IsEmpty(mgdshowstyle)) {
            mgdshowstyle = 0
        }
        var cond = (mgdpic == "Y");
        cond = cond && (mgdshowstyle == 0);
        var mgdpic = tframe.attr("mgdpic");
        var getPicError = function(objId) {
            $("#" + objId)[0].setAttribute("mgdshowstyle", "0");
            MicroDraw_Redraw(objId);
            MicroDraw_autoGdPic()
        };
        if (mgdshowstyle == 0 || mgdpic == "N") {
            twin.find('[mtype = "' + mDrawFlag_Definedgd + '"]').remove();
            return true
        }
        var gdId = MicroDraw_GetObjProperty(ttlcid, "mgdid");
        if ($.Micro.IsEmpty(gdId)) {
            twin.find('[mtype = "' + mDrawFlag_Definedgd + '"]').remove();
            return true
        }
        var winIDs = MicroDraw_getCombWinIDs();
        if (twin.find('[mtype = "' + mDrawFlag_Definedgd + '"][gdId="' + gdId + '"]').length > 0) {
            defgdSetting(twin);
            return true
        }
        if ($.Micro.isInArray(gdId, noEexist_definedgdsList)) {
            return true
        }
        var ajaxTimeout = $.ajax({
            url: "../MicroBase/AL_BAS_GD.ashx",
            data: {
                action: "getRecord",
                gdId: gdId
            },
            type: "POST",
            dataType: "text",
            async: false,
            success: function(result) {
                twin.find('[mtype = "' + mDrawFlag_Definedgd + '"]').remove();
                try {
                    eval("var _result=" + result);
                    if (!$.Micro.IsEmpty(_result[0])) {
                        var mfanlayer = _result[0].mfanlayer;
                        var mfanswflag = _result[0].mfanswflag;
                        var svg = _result[0].svg;
                        $("#" + mDraw_BAS_GD_SVG_TEMP).html(svg);
                        var gdPic = $("#" + mDraw_BAS_GD_SVG_TEMP).find("svg");
                        var _attr = {
                            mtype: mDrawFlag_Definedgd,
                            gdId: gdId,
                            mfanlayer: mfanlayer,
                            mfanswflag: mfanswflag
                        };
                        var newG = document.createElementNS(mDrawSvgNS, "g");
                        for (var k in _attr) {
                            newG.setAttributeNS(null, k, _attr[k])
                        }
                        twin.append($(newG));
                        $(newG).html(gdPic.html());
                        if (String(mCompanyId) != "127") {
                            if (!$.Micro.IsEmpty(mfanlayer)) {
                                ttlc[0].setAttribute("mfanlayer", mfanlayer)
                            }
                            if (!$.Micro.IsEmpty(mfanswflag)) {
                                ttlc[0].setAttribute("mfanswflag", mfanswflag)
                            }
                        }
                        MicroDraw_Redraw(ttlcid);
                        defgdSetting(twin)
                    } else {
                        if (!$.Micro.isInArray(gdId, noEexist_definedgdsList)) {
                            noEexist_definedgdsList.push(gdId)
                        }
                    }
                } catch(e) {
                    return true
                }
            },
            complete: function(XMLHttpRequest, status) {
                if (status == "timeout") {
                    getPicError(ttlcid);
                    jQuery.messager.alert("提示:", "轨道图获取超时，请稍后再试!", "error");
                    ajaxTimeout.abort()
                } else {
                    if (status == "error") {
                        getPicError(ttlcid);
                        jQuery.messager.alert("提示:", "轨道图获取失败!", "error")
                    }
                }
            }
        })
    })
}
function MicroDraw_Redraw_frameRect(F) {
    var S;
    var Y;
    var R;
    var J = 3;
    var N, U;
    var V = $("#" + F)[0];
    var L = $("#" + F + "_r1")[0];
    var H = $("#" + F + "_r2")[0];
    var Z = $("#" + F + "_l1")[0];
    var Q = $("#" + F + "_l2")[0];
    var P = $("#" + F + "_l3")[0];
    var O = $("#" + F + "_l4")[0];
    S = V.getAttribute("mwidth");
    Y = V.getAttribute("mheight");
    R = V.getAttribute("mpjstyle");
    var c = L.getAttribute("x");
    var I = L.getAttribute("y");
    var T = (Number(S) / 1000) * mDrawPixelPerM;
    var B = (Number(Y) / 1000) * mDrawPixelPerM;
    L.setAttribute("x", c);
    L.setAttribute("y", I);
    L.setAttribute("width", T);
    L.setAttribute("height", B);
    N = Number(T) - Number(2 * mDrawThickFrame * mDrawSvgViewBox);
    if (N < J) {
        N = J
    }
    U = Number(B) - Number(2 * mDrawThickFrame * mDrawSvgViewBox);
    if (U < J) {
        U = J
    }
    H.setAttribute("x", Number(c) + Number(mDrawThickFrame * mDrawSvgViewBox));
    H.setAttribute("y", Number(I) + Number(mDrawThickFrame * mDrawSvgViewBox));
    H.setAttribute("width", N);
    H.setAttribute("height", U);
    switch (R) {
    case "45":
        Z.setAttribute("x1", Number(c));
        Z.setAttribute("y1", Number(I));
        Z.setAttribute("x2", Number(c) + Number(mDrawThickFrame * mDrawSvgViewBox));
        Z.setAttribute("y2", Number(I) + Number(mDrawThickFrame * mDrawSvgViewBox));
        Q.setAttribute("x1", Number(c) + Number(T));
        Q.setAttribute("y1", Number(I));
        Q.setAttribute("x2", Number(c) + Number(T) - Number(mDrawThickFrame * mDrawSvgViewBox));
        Q.setAttribute("y2", Number(I) + Number(mDrawThickFrame * mDrawSvgViewBox));
        P.setAttribute("x1", Number(c) + Number(T));
        P.setAttribute("y1", Number(I) + Number(B));
        P.setAttribute("x2", Number(c) + Number(T) - Number(mDrawThickFrame * mDrawSvgViewBox));
        P.setAttribute("y2", Number(I) + Number(B) - Number(mDrawThickFrame * mDrawSvgViewBox));
        O.setAttribute("x1", Number(c));
        O.setAttribute("y1", Number(I) + Number(B));
        O.setAttribute("x2", Number(c) + Number(mDrawThickFrame * mDrawSvgViewBox));
        O.setAttribute("y2", Number(I) + Number(B) - Number(mDrawThickFrame * mDrawSvgViewBox));
        break;
    case "H":
        Z.setAttribute("x1", Number(c));
        Z.setAttribute("y1", Number(I) + Number(mDrawThickFrame * mDrawSvgViewBox));
        Z.setAttribute("x2", Number(c) + Number(mDrawThickFrame * mDrawSvgViewBox));
        Z.setAttribute("y2", Number(I) + Number(mDrawThickFrame * mDrawSvgViewBox));
        Q.setAttribute("x1", Number(c) + Number(T));
        Q.setAttribute("y1", Number(I) + Number(mDrawThickFrame * mDrawSvgViewBox));
        Q.setAttribute("x2", Number(c) + Number(T) - Number(mDrawThickFrame * mDrawSvgViewBox));
        Q.setAttribute("y2", Number(I) + Number(mDrawThickFrame * mDrawSvgViewBox));
        P.setAttribute("x1", Number(c) + Number(T));
        P.setAttribute("y1", Number(I) + Number(B) - Number(mDrawThickFrame * mDrawSvgViewBox));
        P.setAttribute("x2", Number(c) + Number(T) - Number(mDrawThickFrame * mDrawSvgViewBox));
        P.setAttribute("y2", Number(I) + Number(B) - Number(mDrawThickFrame * mDrawSvgViewBox));
        O.setAttribute("x1", Number(c));
        O.setAttribute("y1", Number(I) + Number(B) - Number(mDrawThickFrame * mDrawSvgViewBox));
        O.setAttribute("x2", Number(c) + Number(mDrawThickFrame * mDrawSvgViewBox));
        O.setAttribute("y2", Number(I) + Number(B) - Number(mDrawThickFrame * mDrawSvgViewBox));
        break;
    case "V":
        Z.setAttribute("x1", Number(c) + Number(mDrawThickFrame * mDrawSvgViewBox));
        Z.setAttribute("y1", Number(I));
        Z.setAttribute("x2", Number(c) + Number(mDrawThickFrame * mDrawSvgViewBox));
        Z.setAttribute("y2", Number(I) + Number(mDrawThickFrame * mDrawSvgViewBox));
        Q.setAttribute("x1", Number(c) + Number(T) - Number(mDrawThickFrame * mDrawSvgViewBox));
        Q.setAttribute("y1", Number(I));
        Q.setAttribute("x2", Number(c) + Number(T) - Number(mDrawThickFrame * mDrawSvgViewBox));
        Q.setAttribute("y2", Number(I) + Number(mDrawThickFrame * mDrawSvgViewBox));
        P.setAttribute("x1", Number(c) + Number(T) - Number(mDrawThickFrame * mDrawSvgViewBox));
        P.setAttribute("y1", Number(I) + Number(B));
        P.setAttribute("x2", Number(c) + Number(T) - Number(mDrawThickFrame * mDrawSvgViewBox));
        P.setAttribute("y2", Number(I) + Number(B) - Number(mDrawThickFrame * mDrawSvgViewBox));
        O.setAttribute("x1", Number(c) + Number(mDrawThickFrame * mDrawSvgViewBox));
        O.setAttribute("y1", Number(I) + Number(B));
        O.setAttribute("x2", Number(c) + Number(mDrawThickFrame * mDrawSvgViewBox));
        O.setAttribute("y2", Number(I) + Number(B) - Number(mDrawThickFrame * mDrawSvgViewBox));
        break;
    case "45V":
        Z.setAttribute("x1", Number(c));
        Z.setAttribute("y1", Number(I));
        Z.setAttribute("x2", Number(c) + Number(mDrawThickFrame * mDrawSvgViewBox));
        Z.setAttribute("y2", Number(I) + Number(mDrawThickFrame * mDrawSvgViewBox));
        Q.setAttribute("x1", Number(c) + Number(T));
        Q.setAttribute("y1", Number(I));
        Q.setAttribute("x2", Number(c) + Number(T) - Number(mDrawThickFrame * mDrawSvgViewBox));
        Q.setAttribute("y2", Number(I) + Number(mDrawThickFrame * mDrawSvgViewBox));
        P.setAttribute("x1", Number(c) + Number(T) - Number(mDrawThickFrame * mDrawSvgViewBox));
        P.setAttribute("y1", Number(I) + Number(B));
        P.setAttribute("x2", Number(c) + Number(T) - Number(mDrawThickFrame * mDrawSvgViewBox));
        P.setAttribute("y2", Number(I) + Number(B) - Number(mDrawThickFrame * mDrawSvgViewBox));
        O.setAttribute("x1", Number(c) + Number(mDrawThickFrame * mDrawSvgViewBox));
        O.setAttribute("y1", Number(I) + Number(B));
        O.setAttribute("x2", Number(c) + Number(mDrawThickFrame * mDrawSvgViewBox));
        O.setAttribute("y2", Number(I) + Number(B) - Number(mDrawThickFrame * mDrawSvgViewBox))
    }
    var b = V.getAttribute("mhideframe");
    var G = $("#" + F + "_rh")[0];
    if (!isEmptyOrNull(G)) {
        V.removeChild(G)
    }
    if (!$.Micro.IsEmpty(b) && b == "Y") {
        var M, D;
        M = Number(H.getAttribute("x"));
        D = Number(H.getAttribute("width"));
        if (R == "H") {
            M = M - Number(mDrawThickFrame * mDrawSvgViewBox) - 2;
            D = D + Number(mDrawThickFrame * mDrawSvgViewBox) * 2 + 2 * 2
        }
        var C = document.createElementNS(mDrawSvgNS, "rect");
        C.setAttributeNS(null, "id", F + "_rh");
        C.setAttributeNS(null, "x", M);
        C.setAttributeNS(null, "y", Number(H.getAttribute("y")) + Number(H.getAttribute("height")));
        C.setAttributeNS(null, "width", D);
        C.setAttributeNS(null, "height", Number(mDrawThickFrame) + 2);
        C.setAttributeNS(null, "fill", "white");
        C.setAttributeNS(null, "stroke", "white");
        C.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        C.setAttributeNS(null, "mselect", "1");
        V.appendChild(C)
    }
    var K = V.getAttribute("mhidelframe");
    $("#" + F + "_lf").remove();
    if (!$.Micro.IsEmpty(K) && K == "Y") {
        var a, X;
        a = Number(L.getAttribute("y")) + Number(mDrawThickFrame) - 1;
        X = Number(H.getAttribute("height")) + 1 * 2;
        if (R != "H") {
            a = a - Number(mDrawThickFrame);
            X = X + Number(mDrawThickFrame) * 2
        }
        var A = document.createElementNS(mDrawSvgNS, "rect");
        A.setAttributeNS(null, "id", F + "_lf");
        A.setAttributeNS(null, "x", Number(L.getAttribute("x")) - 1);
        A.setAttributeNS(null, "y", a);
        A.setAttributeNS(null, "width", Number(mDrawThickFrame) + 1);
        A.setAttributeNS(null, "height", X);
        A.setAttributeNS(null, "fill", "white");
        A.setAttributeNS(null, "stroke", "white");
        A.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        A.setAttributeNS(null, "mselect", "1");
        V.appendChild(A)
    }
    var W = V.getAttribute("mhiderframe");
    $("#" + F + "_rf").remove();
    if (!$.Micro.IsEmpty(W) && W == "Y") {
        var a, X;
        a = Number(L.getAttribute("y")) + Number(mDrawThickFrame) - 1;
        X = Number(H.getAttribute("height")) + 1 * 2;
        if (R != "H") {
            a = a - Number(mDrawThickFrame);
            X = X + Number(mDrawThickFrame) * 2
        }
        var A = document.createElementNS(mDrawSvgNS, "rect");
        A.setAttributeNS(null, "id", F + "_rf");
        A.setAttributeNS(null, "x", Number(L.getAttribute("x")) + N + Number(mDrawThickFrame));
        A.setAttributeNS(null, "y", a);
        A.setAttributeNS(null, "width", Number(mDrawThickFrame) + 1);
        A.setAttributeNS(null, "height", X);
        A.setAttributeNS(null, "fill", "white");
        A.setAttributeNS(null, "stroke", "white");
        A.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        A.setAttributeNS(null, "mselect", "1");
        V.appendChild(A)
    }
    MicroDraw_ShowGlassFan(F);
    var E = $("#" + F).attr("mwall");
    MicroDraw_Redraw_FrameWall(F)
}
function MicroDraw_Redraw_CornerMaterial(objId) {
    var tObj = $("#" + mDrawFlag_SvgId + " #" + objId);
    var pSVG = $("#" + mDrawFlag_SvgId);
    if (pSVG.find('[mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
        pSVG = pSVG.find('[mtype="' + mDrawFlag_ScaleG + '"]')
    }
    with(tObj) {
        if (length > 0) {
            var mfill = attr("mfill");
            var mstroke = attr("mstroke");
            var mstrokewidth = attr("mstrokewidth");
            var mwidth = attr("mwidth") || 0;
            var mheight = attr("mheight") || 0;
            var mcx = attr("mcx");
            var mcy = attr("mcy");
            var mangle = attr("mangle") || 0;
            var mangleshow = attr("mangleshow") || "N";
            var mwidthshow = attr("mwidthshow") || "N";
            var mtype = attr("mtype");
            var mcnt_exp = attr("mcnt_exp") || "";
            var mcnt = Number(attr("mcnt") || 1);
            if ($.Micro.IsEmpty(attr("mcnt"))) {
                attr("mcnt", 1)
            }
            var cnt = MicroBudget_getPropertyValue(mBudgetWinProperty, "cnt");
            var pcnt = mcnt / cnt;
            $("#" + mDrawFlag_SvgId).find("[mtype=" + mDrawFlag_CMangleText + "][belongto=" + objId + "],[mtype=" + mDrawFlag_CMwidthText + "][belongto=" + objId + "]").remove();
            var combsize, combsw, combsh, combx, comby;
            var combwinObj = $("#" + mDrawFlag_SvgId + ' [mtype = "' + mDrawFlag_combsortwin + '"]');
            if (combwinObj.length > 0) {
                if (!$.Micro.IsEmpty(combwinObj.attr(mDrawFlag_combsortwin))) {
                    try {
                        eval("combsize = " + combwinObj.attr("combsize"));
                        combsw = Number(combsize.combsw);
                        combsh = Number(combsize.combsh);
                        combx = Number(combx.combsh);
                        comby = Number(comby.combsh)
                    } catch(e) {}
                }
            }
            if (mtype == mDrawFlag_Custom_CornerMaterial) {
                with(find("rect")) {
                    get(0).setAttribute("fill", mfill);
                    get(0).setAttribute("stroke", mstroke);
                    get(0).setAttribute("stroke-width", mstrokewidth);
                    if (!$.Micro.IsEmpty(mcx) && !isNaN(mcx)) {
                        get(0).setAttribute("x", Number(mcx) * mDrawPixelPerM / 1000)
                    }
                    if (!$.Micro.IsEmpty(mcy) && !isNaN(mcy)) {
                        get(0).setAttribute("y", Number(mcy) * mDrawPixelPerM / 1000)
                    }
                    if (!$.Micro.IsEmpty(mheight) && !isNaN(mheight)) {
                        get(0).setAttribute("height", Number(mheight) * mDrawPixelPerM / 1000)
                    }
                    var x = Number(attr("x"));
                    var y = Number(attr("y"));
                    var h = Number(attr("height")) + 3;
                    var guid;
                    if (mangleshow == "Y") {
                        guid = MicroDraw_GUID();
                        var _attr = {
                            "id": guid,
                            "mtype": mDrawFlag_CMangleText,
                            "belongto": objId
                        };
                        var newG = $.MicroSVG.makeSVG("g", _attr);
                        pSVG.append($(newG));
                        var ntext = mangle + "°";
                        var ntextLen = ntext.length;
                        if (ntextLen > 3) {
                            ntextLen = ntextLen + 8
                        } else {
                            if (ntextLen == 2) {
                                ntextLen = ntextLen + 1
                            } else {
                                if (ntextLen == 3) {
                                    ntextLen = ntextLen + 5
                                }
                            }
                        }
                        _attr = {
                            x: x - ntextLen,
                            y: y - 9,
                            "font-size": "16px"
                        };
                        var newT = $.MicroSVG.makeSVG("text", _attr);
                        $(newG).append($(newT));
                        $(newT).html(ntext)
                    }
                    if (mwidthshow == "Y") {
                        guid = MicroDraw_GUID();
                        var _attr = {
                            "id": guid,
                            "mtype": mDrawFlag_CMwidthText,
                            "belongto": objId
                        };
                        var newG = $.MicroSVG.makeSVG("g", _attr);
                        pSVG.append($(newG));
                        var ntext = Number(mwidth) * pcnt;
                        var ntextLen = String(ntext).length;
                        if (ntextLen > 2) {
                            ntextLen = ntextLen + 8
                        } else {
                            if (ntextLen == 1) {
                                ntextLen = ntextLen + 1
                            } else {
                                if (ntextLen == 2) {
                                    ntextLen = ntextLen + 5
                                }
                            }
                        }
                        _attr = {
                            x: x - ntextLen,
                            y: y + h + 18,
                            "font-size": "16px"
                        };
                        var newT = $.MicroSVG.makeSVG("text", _attr);
                        $(newG).append($(newT));
                        $(newT).html(ntext)
                    }
                }
            } else {
                if (mtype == mDrawFlag_Custom_CornerMaterial_h) {
                    with(find("rect")) {
                        get(0).setAttribute("fill", mfill);
                        get(0).setAttribute("stroke", mstroke);
                        get(0).setAttribute("stroke-width", mstrokewidth);
                        if (!$.Micro.IsEmpty(mcx) && !isNaN(mcx)) {
                            get(0).setAttribute("x", Number(mcx) * mDrawPixelPerM / 1000)
                        }
                        if (!$.Micro.IsEmpty(mcy) && !isNaN(mcy)) {
                            get(0).setAttribute("y", Number(mcy) * mDrawPixelPerM / 1000)
                        }
                        if (!$.Micro.IsEmpty(mwidth) && !isNaN(mwidth)) {
                            get(0).setAttribute("width", Number(mwidth) * mDrawPixelPerM / 1000)
                        }
                        var x = Number(attr("x"));
                        var y = Number(attr("y"));
                        var h = Number(attr("height"));
                        var w = Number(attr("width")) + 3;
                        var guid;
                        if (mangleshow == "Y") {
                            guid = MicroDraw_GUID();
                            var _attr = {
                                "id": guid,
                                "mtype": mDrawFlag_CMangleText,
                                "belongto": objId
                            };
                            var newG = $.MicroSVG.makeSVG("g", _attr);
                            pSVG.append($(newG));
                            var ntext = mangle + "°";
                            var ntextLen = ntext.length;
                            _attr = {
                                x: x - ntextLen * 9,
                                y: y + mDrawThickFrame,
                                "font-size": "16px"
                            };
                            var newT = $.MicroSVG.makeSVG("text", _attr);
                            $(newG).append($(newT));
                            $(newT).html(ntext)
                        }
                        if (mwidthshow == "Y") {
                            guid = MicroDraw_GUID();
                            var _attr = {
                                "id": guid,
                                "mtype": mDrawFlag_CMwidthText,
                                "belongto": objId
                            };
                            var newG = $.MicroSVG.makeSVG("g", _attr);
                            pSVG.append($(newG));
                            var ntext = Number(mheight) * pcnt;
                            var ntextLen = String(ntext).length;
                            if (ntextLen > 2) {
                                ntextLen = ntextLen + 8
                            } else {
                                if (ntextLen == 1) {
                                    ntextLen = ntextLen + 1
                                } else {
                                    if (ntextLen == 2) {
                                        ntextLen = ntextLen + 5
                                    }
                                }
                            }
                            _attr = {
                                x: x + w + 6,
                                y: y + mDrawThickFrame,
                                "font-size": "16px"
                            };
                            var newT = $.MicroSVG.makeSVG("text", _attr);
                            $(newG).append($(newT));
                            $(newT).html(ntext)
                        }
                    }
                }
            }
        }
    }
}
function MicroDraw_Redraw_tingV(O) {
    var K = $("#" + O)[0];
    var J = $("#" + O + "_r1")[0];
    var L = K.parentNode;
    var F = $("#" + L.getAttribute("id") + " [mtype^='frame']")[0];
    var A = $("#" + F.getAttribute("id") + "_r1")[0];
    var C = $("#" + F.getAttribute("id") + "_r2")[0];
    var M = A.getAttribute("x");
    var H = K.getAttribute("mx");
    J.setAttribute("x", Number(M) + Number((H / 1000) * mDrawPixelPerM) - Number((mDrawThickTing * mDrawSvgViewBox) / 2));
    var E, G;
    if (K.getAttribute("mtid").length > 0) {
        var D = $("#" + K.getAttribute("mtid"))[0];
        MicroDraw_Redraw_tingH(D.getAttribute("id"));
        var P = $("#" + D.getAttribute("id") + "_r1")[0];
        E = Number(P.getAttribute("y")) + Number(P.getAttribute("height"))
    } else {
        var I = $("#" + O)[0].getAttribute("mtotallen");
        if (I == "Y") {
            E = A.getAttribute("y")
        } else {
            E = C.getAttribute("y")
        }
    }
    if (K.getAttribute("mbid").length > 0) {
        var B = $("#" + K.getAttribute("mbid"))[0];
        MicroDraw_Redraw_tingH(B.getAttribute("id"));
        var N = $("#" + B.getAttribute("id") + "_r1")[0];
        G = Number(N.getAttribute("y"))
    } else {
        var I = $("#" + O)[0].getAttribute("mtotallen");
        if (I == "Y") {
            G = Number(A.getAttribute("y")) + Number(A.getAttribute("height"))
        } else {
            G = Number(C.getAttribute("y")) + Number(C.getAttribute("height"))
        }
    }
    J.setAttribute("y", E);
    J.setAttribute("height", Number(G) - Number(E));
    MicroDraw_ShowGlassFan(O)
}
function MicroDraw_Redraw_tingH(M) {
    var J = $("#" + M)[0];
    var I = $("#" + M + "_r1")[0];
    var K = J.parentNode;
    var F = $("#" + K.getAttribute("id") + " [mtype^='frame']")[0];
    var A = $("#" + F.getAttribute("id") + "_r1")[0];
    var C = $("#" + F.getAttribute("id") + "_r2")[0];
    var B = A.getAttribute("y");
    var E = J.getAttribute("my");
    I.setAttribute("y", Number(B) + Number((E / 1000) * mDrawPixelPerM) - Number((mDrawThickTing * mDrawSvgViewBox) / 2));
    var D, H;
    if (J.getAttribute("mlid").length > 0) {
        var O = $("#" + J.getAttribute("mlid"))[0];
        MicroDraw_Redraw_tingV(O.getAttribute("id"));
        var L = $("#" + O.getAttribute("id") + "_r1")[0];
        D = Number(L.getAttribute("x")) + Number(L.getAttribute("width"))
    } else {
        var G = $("#" + M)[0].getAttribute("mtotallen");
        if (G == "Y") {
            D = A.getAttribute("x")
        } else {
            D = C.getAttribute("x")
        }
    }
    if (J.getAttribute("mrid").length > 0) {
        var P = $("#" + J.getAttribute("mrid"))[0];
        MicroDraw_Redraw_tingV(P.getAttribute("id"));
        var N = $("#" + P.getAttribute("id") + "_r1")[0];
        H = Number(N.getAttribute("x"))
    } else {
        var G = $("#" + M)[0].getAttribute("mtotallen");
        if (G == "Y") {
            H = Number(A.getAttribute("x")) + Number(A.getAttribute("width"))
        } else {
            H = Number(C.getAttribute("x")) + Number(C.getAttribute("width"))
        }
    }
    I.setAttribute("x", D);
    I.setAttribute("width", Number(H) - Number(D));
    MicroDraw_ShowGlassFan(M)
}
function MicroDraw_Redraw_area(C) {
    var L = $("#" + C)[0];
    var E = $("#" + C + "_r1")[0];
    var M = L.parentNode;
    var F = $("#" + M.getAttribute("id") + " [mtype^='frame']")[0];
    var K = $("#" + F.getAttribute("id") + "_r2")[0];
    var G = L.getAttribute("mlid");
    var P = L.getAttribute("mrid");
    var B = L.getAttribute("mtid");
    var Q = L.getAttribute("mbid");
    var A, N, O, R;
    if (G.length > 0) {
        var I = $("#" + G)[0];
        A = Number($("#" + I.getAttribute("id") + "_r1")[0].getAttribute("x")) + Number($("#" + I.getAttribute("id") + "_r1")[0].getAttribute("width"))
    } else {
        if (M.getAttribute("id") == mDrawFlag_SvgId) {
            A = E.getAttribute("x")
        } else {
            A = K.getAttribute("x")
        }
    }
    if (P.length > 0) {
        var D = $("#" + P)[0];
        N = Number($("#" + D.getAttribute("id") + "_r1")[0].getAttribute("x"))
    } else {
        if (M.getAttribute("id") == mDrawFlag_SvgId) {
            N = Number(E.getAttribute("x")) + Number(E.getAttribute("width"))
        } else {
            N = Number(K.getAttribute("x")) + Number(K.getAttribute("width"))
        }
    }
    if (B.length > 0) {
        var J = $("#" + B)[0];
        O = Number($("#" + J.getAttribute("id") + "_r1")[0].getAttribute("y")) + Number($("#" + J.getAttribute("id") + "_r1")[0].getAttribute("height"))
    } else {
        if (M.getAttribute("id") == mDrawFlag_SvgId) {
            O = E.getAttribute("y")
        } else {
            O = K.getAttribute("y")
        }
    }
    if (Q.length > 0) {
        var H = $("#" + Q)[0];
        R = Number($("#" + H.getAttribute("id") + "_r1")[0].getAttribute("y"))
    } else {
        if (M.getAttribute("id") == mDrawFlag_SvgId) {
            R = Number(E.getAttribute("y")) + Number(E.getAttribute("height"))
        } else {
            R = Number(K.getAttribute("y")) + Number(K.getAttribute("height"))
        }
    }
    E.setAttribute("x", A);
    E.setAttribute("y", O);
    E.setAttribute("width", Number(N) - Number(A));
    E.setAttribute("height", Number(R) - Number(O));
    MicroDraw_ShowGlassFan(C)
}
function MicroDraw_Redraw_glass(A) {
    MicroDraw_glass_resize(A, 0, 0, 0, 0);
    MicroDraw_ShowGlassFan(A)
}
function MicroDraw_Redraw_pkc(A) {
    MicroDraw_pkc_resize(A, 0, 0, 0, 0);
    MicroDraw_ShowGlassFan(A);
    MicroDraw_reflashHandle($("#" + A))
}
function MicroDraw_Redraw_dkc(A) {
    MicroDraw_dkc_resize(A, 0, 0, 0, 0);
    MicroDraw_ShowGlassFan(A)
}
function MicroDraw_Redraw_tlc(A) {
    MicroDraw_tlc_resize(A, 0, 0, 0, 0);
    MicroDraw_ShowGlassFan(A)
}
function MicroDraw_Redraw_zdm(A) {
    MicroDraw_zdm_resize(A, 0, 0, 0, 0);
    MicroDraw_ShowGlassFan(A)
}
function MicroDraw_Redraw_Custom_text(G) {
    var B = $("#" + G)[0];
    var D = $("#" + G + "_t")[0];
    D.setAttribute("font-size", B.getAttribute("mfontsize"));
    D.textContent = B.getAttribute("mtext");
    D.setAttribute("fill", B.getAttribute("mfill"));
    D.setAttribute("writing-mode", B.getAttribute("mdir"));
    D.setAttribute("font-weight", B.getAttribute("mfontweight"));
    var C = B.getAttribute("mx_exp");
    var A = B.getAttribute("my_exp");
    var E = D.getAttribute("x");
    var F = D.getAttribute("y");
    if (!isEmptyOrNull(C)) {
        E = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, C, "", "")) / 1000
    }
    if (!isEmptyOrNull(A)) {
        F = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, A, "", "")) / 1000
    }
    D.setAttribute("x", E);
    D.setAttribute("y", F)
}
function MicroDraw_Redraw_Custom_line(K) {
    var H = $("#" + K)[0];
    var A = $("#" + K + "_l")[0];
    if (isEmptyOrNull(A)) {
        return
    }
    A.setAttribute("stroke", H.getAttribute("mstroke"));
    A.setAttribute("stroke-width", H.getAttribute("mstrokewidth"));
    var I = H.getAttribute("mx1_exp");
    var G = H.getAttribute("my1_exp");
    var J = H.getAttribute("mx2_exp");
    var F = H.getAttribute("my2_exp");
    var B = A.getAttribute("x1");
    var C = A.getAttribute("y1");
    var D = A.getAttribute("x2");
    var E = A.getAttribute("y2");
    if (!isEmptyOrNull(I)) {
        B = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, I, "", "")) / 1000
    }
    if (!isEmptyOrNull(G)) {
        C = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, G, "", "")) / 1000
    }
    if (!isEmptyOrNull(J)) {
        D = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, J, "", "")) / 1000
    }
    if (!isEmptyOrNull(F)) {
        E = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, F, "", "")) / 1000
    }
    A.setAttribute("x1", B);
    A.setAttribute("y1", C);
    A.setAttribute("x2", D);
    A.setAttribute("y2", E)
}
function MicroDraw_Redraw_Custom_rect(J) {
    var E = $("#" + J)[0];
    var G = $("#" + J + "_r")[0];
    G.setAttribute("stroke", E.getAttribute("mstroke"));
    G.setAttribute("stroke-width", E.getAttribute("mstrokewidth"));
    G.setAttribute("fill", E.getAttribute("mfill"));
    var K = E.getAttribute("mx_exp");
    var A = E.getAttribute("my_exp");
    var D = E.getAttribute("mwidth_exp");
    var B = E.getAttribute("mheight_exp");
    var H = G.getAttribute("x");
    var I = G.getAttribute("y");
    var C = G.getAttribute("width");
    var F = G.getAttribute("height");
    if (!isEmptyOrNull(K)) {
        H = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, K, "", "")) / 1000
    }
    if (!isEmptyOrNull(A)) {
        I = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, A, "", "")) / 1000
    }
    if (!isEmptyOrNull(D)) {
        C = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, D, "", "")) / 1000
    }
    if (!isEmptyOrNull(B)) {
        F = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, B, "", "")) / 1000
    }
    G.setAttribute("x", H);
    G.setAttribute("y", I);
    G.setAttribute("width", C);
    G.setAttribute("height", F)
}
function MicroDraw_Redraw_Custom_polygon(N) {
    if ($("#" + N).length == 0 || $("#" + N + "_p").length == 0) {
        return true
    }
    var I = $("#" + N)[0];
    var H = $("#" + N + "_p")[0];
    H.setAttribute("stroke", I.getAttribute("mstroke"));
    H.setAttribute("stroke-width", I.getAttribute("mstrokewidth"));
    H.setAttribute("fill", I.getAttribute("mfill"));
    var D = I.getAttribute("mwidth");
    var G = I.getAttribute("mheight");
    var O = I.getAttribute("mlr");
    var L = H.getAttribute("points");
    L = replaceAll(L, " ", ",");
    var A = L.split(",");
    var F = I.getAttribute("mx");
    var C = I.getAttribute("my");
    if (!isEmptyOrNull(F)) {
        A[0] = (Number(F) / 1000) * Number(mDrawPixelPerM)
    }
    if (!isEmptyOrNull(C)) {
        A[1] = (Number(C) / 1000) * Number(mDrawPixelPerM)
    }
    var E = I.getAttribute("mltoffset");
    var P = I.getAttribute("mrtoffset");
    var M = I.getAttribute("mrboffset");
    var K = I.getAttribute("mlboffset");
    if (isEmptyOrNull(E)) {
        E = "0,0"
    }
    if (isEmptyOrNull(P)) {
        P = "0,0"
    }
    if (isEmptyOrNull(M)) {
        M = "0,0"
    }
    if (isEmptyOrNull(K)) {
        K = "0,0"
    }
    var B = E + "," + P + "," + M + "," + K;
    var J = MicroDraw_getPolygonDataInfo(A[0], A[1], D, G, mDrawThickFrame, O, B);
    H.setAttribute("points", J)
}
function MicroDraw_Redraw_Custom_arc(E) {
    var I = $("#" + E)[0];
    var G = $("#" + E + "_p1")[0];
    var F = $("#" + E + "_p2")[0];
    G.setAttribute("stroke", I.getAttribute("mstroke"));
    F.setAttribute("stroke", I.getAttribute("mstroke"));
    G.setAttribute("stroke-width", I.getAttribute("mstrokewidth"));
    F.setAttribute("stroke-width", I.getAttribute("mstrokewidth"));
    G.setAttribute("fill", I.getAttribute("mfill"));
    var L = G.getAttribute("d");
    L = replaceAll(L, "M", "");
    L = replaceAll(L, " A ", ",");
    L = replaceAll(L, " ", ",");
    var H = L.split(",");
    var K = I.getAttribute("mx_exp");
    var A = I.getAttribute("my_exp");
    if (!isEmptyOrNull(K)) {
        H[0] = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, K, "", "")) / 1000
    }
    if (!isEmptyOrNull(A)) {
        H[1] = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, A, "", "")) / 1000;
        var J = $("#" + mDrawFlag_SvgId + " #" + E).attr("mbframe");
        var C = $("#" + mDrawFlag_SvgId + " #" + E).attr("mtotallen");
        if (J == "Y" && C == "Y") {
            H[1] -= mDrawThickTing
        }
    }
    var B = MicroDraw_getArcDataInfo(H[0], H[1], I.getAttribute("mwidth"), I.getAttribute("mheight"), mDrawThickFrame, I.getAttribute("maddthickwidth"));
    var D = [B.arcOut_d, B.arcIn_d];
    G.setAttribute("d", D[0]);
    F.setAttribute("d", D[1]);
    MicroDraw_DrawDiviArcKT(E);
    MicroDraw_DrawArcTL(E)
}
function MicroDraw_Redraw_Custom_ruler(M) {
    var H = $("#" + M)[0];
    var P = $("#" + M + "_l1")[0];
    var O = $("#" + M + "_l2")[0];
    var N = $("#" + M + "_l3")[0];
    var J = $("#" + M + "_t")[0];
    P.setAttribute("stroke", H.getAttribute("mstroke"));
    O.setAttribute("stroke", H.getAttribute("mstroke"));
    N.setAttribute("stroke", H.getAttribute("mstroke"));
    P.setAttribute("stroke-width", H.getAttribute("mstrokewidth"));
    O.setAttribute("stroke-width", H.getAttribute("mstrokewidth"));
    N.setAttribute("stroke-width", H.getAttribute("mstrokewidth"));
    J.textContent = H.getAttribute("mtext");
    var K = H.getAttribute("mx1_exp");
    var D = H.getAttribute("my1_exp");
    var L = H.getAttribute("mx2_exp");
    var I = H.getAttribute("my2_exp");
    var C = O.getAttribute("x1");
    var E = O.getAttribute("y1");
    var F = O.getAttribute("x2");
    var G = O.getAttribute("y2");
    if (!isEmptyOrNull(K)) {
        C = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, K, "", "")) / 1000
    }
    if (!isEmptyOrNull(D)) {
        E = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, D, "", "")) / 1000
    }
    if (!isEmptyOrNull(L)) {
        F = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, L, "", "")) / 1000
    }
    if (!isEmptyOrNull(I)) {
        G = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, I, "", "")) / 1000
    }
    var A = MicroDraw_getRulerDataInfo(C, E, F, G, H.getAttribute("mtext"));
    var B = A.split(",");
    O.setAttribute("x1", B[0]);
    O.setAttribute("y1", B[1]);
    O.setAttribute("x2", B[2]);
    O.setAttribute("y2", B[3]);
    P.setAttribute("x1", B[4]);
    P.setAttribute("y1", B[5]);
    P.setAttribute("x2", B[6]);
    P.setAttribute("y2", B[7]);
    N.setAttribute("x1", B[8]);
    N.setAttribute("y1", B[9]);
    N.setAttribute("x2", B[10]);
    N.setAttribute("y2", B[11]);
    J.setAttribute("x", B[12]);
    J.setAttribute("y", B[13])
}
function MicroDraw_Redraw_Custom_circle(H) {
    var E = $("#" + H)[0];
    var D = $("#" + H + "_c")[0];
    D.setAttribute("stroke", E.getAttribute("mstroke"));
    D.setAttribute("stroke-width", E.getAttribute("mstrokewidth"));
    D.setAttribute("fill", E.getAttribute("mfill"));
    var I = E.getAttribute("mx_exp");
    var B = E.getAttribute("my_exp");
    var C = E.getAttribute("mr_exp");
    var F = D.getAttribute("cx");
    var G = D.getAttribute("cy");
    var A = D.getAttribute("r");
    if (!isEmptyOrNull(I)) {
        F = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, I, "", "")) / 1000
    }
    if (!isEmptyOrNull(B)) {
        G = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, B, "", "")) / 1000
    }
    if (!isEmptyOrNull(C)) {
        A = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, C, "", "")) / 1000
    }
    D.setAttribute("cx", F);
    D.setAttribute("cy", G);
    D.setAttribute("r", A)
}
function MicroDraw_Redraw_Custom_wall(F) {
    var U = document.getElementById(mDrawFlag_SvgId);
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
        U = $("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]')[0]
    }
    var N = document.createElementNS(mDrawSvgNS, "g");
    var L, C, Q, A, V, T, P, K;
    L = $("#" + F)[0].getAttribute("mfill");
    C = $("#" + F)[0].getAttribute("mstroke");
    Q = $("#" + F)[0].getAttribute("mstrokewidth");
    A = $("#" + F)[0].getAttribute("mwallwidth");
    V = $("#" + F)[0].getAttribute("mwallheight");
    T = $("#" + F)[0].getAttribute("mwallrow");
    P = $("#" + F)[0].getAttribute("mwallrealwidth");
    K = $("#" + F)[0].getAttribute("mwallbelongto");
    var X, Y, D, G;
    var W = Number(T) - 1;
    if (isEmptyOrNull(K)) {
        X = $("#" + F + "_r")[0].getAttribute("x");
        Y = $("#" + F + "_r")[0].getAttribute("y")
    } else {
        X = $("#" + K + "_r1")[0].getAttribute("x");
        Y = Number($("#" + K + "_r1")[0].getAttribute("y")) + Number($("#" + K + "_r1")[0].getAttribute("height"))
    }
    D = (Number(P) / 1000) * mDrawPixelPerM;
    G = Number(T) * Number(V);
    var R = new Array();
    var E = new Array();
    var B = $("#" + F)[0].attributes;
    for (var H = 0; H < B.length; H++) {
        if (B[H].name.indexOf("_exp") >= 0) {
            R[R.length] = B[H].name;
            E[E.length] = B[H].value
        }
    }
    $("#" + F)[0].parentNode.removeChild($("#" + F)[0]);
    N.setAttributeNS(null, "id", F);
    N.setAttributeNS(null, "mtype", mDrawFlag_Custom_wall);
    N.setAttributeNS(null, "mfill", L);
    N.setAttributeNS(null, "mstroke", C);
    N.setAttributeNS(null, "mstrokewidth", Q);
    N.setAttributeNS(null, "mwallwidth", A);
    N.setAttributeNS(null, "mwallheight", V);
    N.setAttributeNS(null, "mwallrow", T);
    N.setAttributeNS(null, "mwallrealwidth", P);
    N.setAttributeNS(null, "mwallbelongto", K);
    for (var H = 0; H < R.length; H++) {
        N.setAttributeNS(null, R[H], E[H])
    }
    U.appendChild(N);
    var J = $("#" + F).html();
    var O = Math.floor(Number(D) / Number(A));
    J = J + "<g id='" + F + "_g1'>";
    J = J + "<rect id='" + F + "_r' x='" + X + "' y='" + Y + "' width='" + D + "' height='" + G + "' stroke='" + C + "' stroke-width='" + Q + "' fill='" + L + "' pointer-events='all'/>";
    J = J + "</g>";
    J = J + "<g id='" + F + "_g2'>";
    for (H = 0; H < W; H++) {
        var I = Number(Y) + (Number(H) + 1) * Number(V);
        J = J + "<line id='" + F + "_lh" + H + "' stroke='" + C + "' stroke-width='" + Q + "' x1='" + X + "' y1='" + I + "' x2='" + (Number(X) + Number(D)) + "' y2='" + I + "' pointer-events='all'/>"
    }
    var M = 0;
    for (H = 0; H < Number(W) + 1; H++) {
        var I = Number(Y) + (Number(H)) * Number(V);
        for (k = 0; k < O; k++) {
            if (H % 2 == 0) {
                M = Number(X) + Number(A) + (Number(k)) * Number(A)
            } else {
                M = Number(X) + Number(A) / 2 + (Number(k)) * Number(A)
            }
            var S = 0;
            J = J + "<line id='" + F + "_lv" + H + k + "' stroke='" + C + "' stroke-width='" + Q + "' x1='" + M + "' y1='" + I + "' x2='" + M + "' y2='" + (Number(I) + Number(V)) + "' pointer-events='all'/>"
        }
    }
    J = J + "</g>";
    $("#" + F).html(J)
}
function MicroDraw_Redraw_Custom_impSvg(E) {
    svgNode = $("#" + E + "_mImpSvgId")[0];
    var P = $("#" + E)[0].getAttribute("morigx");
    var F = $("#" + E)[0].getAttribute("morigy");
    var J = $("#" + E)[0].getAttribute("moffsetx");
    var A = $("#" + E)[0].getAttribute("moffsety");
    var B = $("#" + E)[0].getAttribute("mscale");
    var L = $("#" + E)[0].getAttribute("mrotate");
    var N = "0";
    var O = "0";
    if (B.indexOf(" ") > 0) {
        N = B.substr(0, B.indexOf(" "));
        O = B.substr(B.indexOf(" ") + 1)
    } else {
        N = B;
        O = B
    }
    if (B.length > 0 && L.length > 0) {
        svgNode.setAttribute("transform", "scale(" + B + ") rotate(" + L + " " + P + " " + F + ") translate(" + (Number(J) / Number(N)).toString() + ", " + (Number(A) / Number(O)).toString() + ")")
    }
    var H = document.getElementById(E + "_mImpSvgId");
    var G = H.getBoundingClientRect();
    var S = document.getElementById("mBackGround");
    var D = S.getBoundingClientRect();
    var C = document.getElementById(E + "_mImpSvgBackGround");
    C.setAttribute("x", G.left - D.left);
    C.setAttribute("y", G.top - D.top);
    var M = B;
    var K = $("#" + E)[0].getAttribute("mwidth");
    if (M.indexOf(" ") > 0) {
        var R = B.split(" ");
        M = R[0]
    }
    C.setAttribute("width", Number(K) * Number(M));
    var Q = B;
    var I = $("#" + E)[0].getAttribute("mheight");
    if (Q.indexOf(" ") > 0) {
        var R = B.split(" ");
        Q = R[1]
    }
    C.setAttribute("height", Number(I) * Number(Q));
    MicroDraw_AddCustomControlPoint(E)
}
function MicroDraw_Redraw_Custom_qj(G) {
    var M = document.getElementById(mDrawFlag_SvgId);
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
        M = $("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]')[0]
    }
    var A, D, J, O, S, Q, I, E, P, L, T, R;
    A = $("#" + G)[0].getAttribute("mtype");
    D = $("#" + G)[0].getAttribute("mfill");
    J = $("#" + G)[0].getAttribute("mstroke");
    O = $("#" + G)[0].getAttribute("mstrokewidth");
    S = $("#" + G)[0].getAttribute("mframepjstyle");
    Q = $("#" + G)[0].getAttribute("myt");
    I = $("#" + G)[0].getAttribute("mytpjstyle");
    E = $("#" + G)[0].getAttribute("mqjbelongtoframeid");
    P = $("#" + G)[0].getAttribute("mw");
    L = $("#" + G)[0].getAttribute("mh");
    T = $("#" + G)[0].getAttribute("mw1");
    R = $("#" + G)[0].getAttribute("mh1");
    var C = new Array();
    var F = new Array();
    var B = $("#" + G)[0].attributes;
    for (var H = 0; H < B.length; H++) {
        if (B[H].name.indexOf("_exp") >= 0) {
            C[C.length] = B[H].name;
            F[F.length] = B[H].value
        }
    }
    $("#" + G)[0].parentNode.removeChild($("#" + G)[0]);
    $("#" + mDrawFlag_SvgId + " [moptidbelongtoobj='" + G + "']").each(function(U, V) {
        V.parentNode.removeChild(V)
    });
    var K = MicroDraw_AddCustom_qj(G, E, A, S, Q, I, P, L, T, R);
    var N = $("#" + K)[0];
    N.setAttributeNS(null, "mfill", D);
    N.setAttributeNS(null, "mstroke", J);
    N.setAttributeNS(null, "mstrokewidth", O);
    for (var H = 0; H < C.length; H++) {
        N.setAttributeNS(null, C[H], F[H])
    }
}
function MicroDraw_Redraw_Louver(objId) {
    var node = $("#" + objId)[0];
    var node_r1 = $("#" + objId + "_r1")[0];
    var node_r2 = $("#" + objId + "_r2")[0];
    var node_l1 = $("#" + objId + "_l1")[0];
    var node_l2 = $("#" + objId + "_l2")[0];
    var node_l3 = $("#" + objId + "_l3")[0];
    var node_t1 = $("#" + objId + "_t1")[0];
    var node_t2 = $("#" + objId + "_t2")[0];
    var node_t3 = $("#" + objId + "_t3")[0];
    var node_t4 = $("#" + objId + "_t4")[0];
    var node_win = node.parentNode;
    var node_frame;
    var node_frameRect2;
    var mtype = node_win.getAttribute("mtype");
    if (isEmptyOrNull(mtype)) {
        mtype = ""
    }
    if (mtype == mDrawFlag_Win) {
        node_frame = $("#" + node_win.getAttribute("id") + " [mtype^='frame']")[0];
        node_frameRect2 = $("#" + node_frame.getAttribute("id") + "_r2")[0]
    }
    var mlid = node.getAttribute("mlid");
    var mrid = node.getAttribute("mrid");
    var mtid = node.getAttribute("mtid");
    var mbid = node.getAttribute("mbid");
    var mfanpjstyle = node.getAttribute("mfanpjstyle");
    var x1, x2, y1, y2;
    if (mlid.length > 0) {
        var node_l = $("#" + mlid)[0];
        x1 = Number($("#" + node_l.getAttribute("id") + "_r1")[0].getAttribute("x")) + Number($("#" + node_l.getAttribute("id") + "_r1")[0].getAttribute("width"))
    } else {
        if (node_win.getAttribute("id") == mDrawFlag_SvgId) {
            x1 = node_r1.getAttribute("x")
        } else {
            x1 = node_frameRect2.getAttribute("x")
        }
    }
    if (mrid.length > 0) {
        var node_r = $("#" + mrid)[0];
        x2 = Number($("#" + node_r.getAttribute("id") + "_r1")[0].getAttribute("x"))
    } else {
        if (node_win.getAttribute("id") == mDrawFlag_SvgId) {
            x2 = Number(node_r1.getAttribute("x")) + Number(node_r1.getAttribute("width"))
        } else {
            x2 = Number(node_frameRect2.getAttribute("x")) + Number(node_frameRect2.getAttribute("width"))
        }
    }
    if (mtid.length > 0) {
        var node_t = $("#" + mtid)[0];
        y1 = Number($("#" + node_t.getAttribute("id") + "_r1")[0].getAttribute("y")) + Number($("#" + node_t.getAttribute("id") + "_r1")[0].getAttribute("height"))
    } else {
        if (node_win.getAttribute("id") == mDrawFlag_SvgId) {
            y1 = node_r1.getAttribute("y")
        } else {
            y1 = node_frameRect2.getAttribute("y")
        }
    }
    if (mbid.length > 0) {
        var node_b = $("#" + mbid)[0];
        y2 = Number($("#" + node_b.getAttribute("id") + "_r1")[0].getAttribute("y"))
    } else {
        if (node_win.getAttribute("id") == mDrawFlag_SvgId) {
            y2 = Number(node_r1.getAttribute("y")) + Number(node_r1.getAttribute("height"))
        } else {
            y2 = Number(node_frameRect2.getAttribute("y")) + Number(node_frameRect2.getAttribute("height"))
        }
    }
    var tLouverNode = $("#" + objId + " rect:first");
    with(tLouverNode[0]) {
        setAttribute("x", x1);
        setAttribute("y", y1);
        setAttribute("width", x2 - x1);
        setAttribute("height", y2 - y1)
    }
    MicroDraw_Louver_Add(tLouverNode, objId, {
        mfanpjstyle: mfanpjstyle
    })
}
function MicroDraw_StepRecord() {
    var A = $("#" + mDrawFlag_SvgAreaId).html();
    mDrawStepIdx = mDrawStep.length;
    mDrawStep[mDrawStepIdx] = A;
    MicroDraw_StepBtnIcon()
}
function MicroDraw_StepUndo() {
    if (mDrawStepIdx == 0) {
        return
    }
    mDrawStepIdx = mDrawStepIdx - 1;
    var A = mDrawStep[mDrawStepIdx];
    $("#" + mDrawFlag_SvgAreaId).html(A);
    MicroDraw_ShowSizeProperty();
    MicroDraw_ShowCoordinate();
    MicroDraw_StepBtnIcon();
    MicroDraw_drapDropInit()
}
function MicroDraw_StepRedo() {
    if (mDrawStepIdx == (mDrawStep.length - 1)) {
        return
    }
    mDrawStepIdx = mDrawStepIdx + 1;
    var A = mDrawStep[mDrawStepIdx];
    $("#" + mDrawFlag_SvgAreaId).html(A);
    MicroDraw_ShowSizeProperty();
    MicroDraw_ShowCoordinate();
    MicroDraw_StepBtnIcon();
    MicroDraw_drapDropInit()
}
function MicroDraw_StepInit() {
    mDrawStepIdx = 0;
    mDrawStep = new Array();
    MicroDraw_StepBtnIcon()
}
function MicroDraw_StepBtnIcon() {
    $("#mDraw_Undo").linkbutton({
        iconCls: "icon-mLargeDraw_undo_disable"
    });
    $("#mDraw_Redo").linkbutton({
        iconCls: "icon-mLargeDraw_redo_disable"
    });
    if (mDrawStepIdx > 0) {
        $("#mDraw_Undo").linkbutton({
            iconCls: "icon-mLargeDraw_undo"
        })
    }
    if (mDrawStepIdx < (mDrawStep.length - 1)) {
        $("#mDraw_Redo").linkbutton({
            iconCls: "icon-mLargeDraw_redo"
        })
    }
}
function MicroDraw_AddCustom(K) {
    var H = MicroDraw_GUID();
    var N = document.createElementNS(mDrawSvgNS, "g");
    var W = $("#" + mDrawFlag_SvgId)[0];
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
        W = $("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]')[0]
    }
    switch (K) {
    case mDrawFlag_Custom_text:
        N.setAttributeNS(null, "id", H);
        N.setAttributeNS(null, "mtype", mDrawFlag_Custom_text);
        N.setAttributeNS(null, "mfontsize", "16");
        N.setAttributeNS(null, "mtext", "新增文本");
        N.setAttributeNS(null, "mfill", "#000000");
        N.setAttributeNS(null, "mdir", "lr");
        N.setAttributeNS(null, "mfontweight", "400");
        W.appendChild(N);
        var L = $("#" + H).html();
        L = L + "<text id='" + H + "_t' x='200' y='50' font-size='16' text-anchor='end' fill='#000000' writing-mode='lr' font-weight='400'>新增文本</text>";
        $("#" + H).html(L);
        break;
    case mDrawFlag_Custom_line:
        N.setAttributeNS(null, "id", H);
        N.setAttributeNS(null, "mtype", mDrawFlag_Custom_line);
        N.setAttributeNS(null, "mstroke", "black");
        var l = "2px";
        N.setAttributeNS(null, "mstrokewidth", l);
        W.appendChild(N);
        var L = $("#" + H).html();
        L = L + "<line id='" + H + "_l' stroke='black' stroke-width='" + l + "' x1='100' y1='50' x2='200' y2='50' pointer-events='all'/>";
        $("#" + H).html(L);
        break;
    case mDrawFlag_Custom_rect:
        N.setAttributeNS(null, "id", H);
        N.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
        N.setAttributeNS(null, "mfill", "none");
        N.setAttributeNS(null, "mstroke", "#000000");
        N.setAttributeNS(null, "mstrokewidth", "1px");
        W.appendChild(N);
        var L = $("#" + H).html();
        L = L + "<rect id='" + H + "_r' x='100' y='20' width='100' height='40' stroke='#000000' stroke-width='1px' fill='none' pointer-events='all'/>";
        $("#" + H).html(L);
        break;
    case mDrawFlag_Custom_CornerMaterial_h:
        var A = $("#" + mDrawFlag_SvgId).find("[mtype=" + mDrawFlag_Custom_CornerMaterial_h + "]");
        var B = 2000;
        for (var I = 0; I < A.length; I++) {
            $(this).attr("mcmh", "cmh" + (I + 1))
        }
        N.setAttributeNS(null, "id", H);
        N.setAttributeNS(null, "mtype", mDrawFlag_Custom_CornerMaterial_h);
        N.setAttributeNS(null, "mfill", mDrawProductColor);
        N.setAttributeNS(null, "mstroke", "#000000");
        N.setAttributeNS(null, "mstrokewidth", "1px");
        N.setAttributeNS(null, "mwidth", B);
        N.setAttributeNS(null, "mwidth_exp", "JOINW");
        N.setAttributeNS(null, "mheight", "0");
        N.setAttributeNS(null, "mcmh", "cmh" + (A.length + 1));
        N.setAttributeNS(null, "mangle", "0");
        N.setAttributeNS(null, "madir", "t");
        N.setAttributeNS(null, "mprid", "");
        N.setAttributeNS(null, "mcnt_exp", "");
        N.setAttributeNS(null, "mcolor_exp", "");
        N.setAttributeNS(null, "mbcptype", "");
        W.appendChild(N);
        var L = $("#" + H).html();
        L = L + '<rect id="' + H + '_rect" x="200" y="50" height="' + mDrawThickFrame + '" width="' + B / 1000 * mDrawPixelPerM + '" fill="' + mDrawProductColor + '" stroke="#000000" stroke-width="1" pointer-events="all" />';
        $("#" + H).html(L);
        break;
    case mDrawFlag_Custom_CornerMaterial:
        var A = $("#" + mDrawFlag_SvgId).find("[mtype=" + mDrawFlag_Custom_CornerMaterial + "]");
        var a = 2000;
        for (var I = 0; I < A.length; I++) {
            $(this).attr("mcm", "cm" + (I + 1))
        }
        N.setAttributeNS(null, "id", H);
        N.setAttributeNS(null, "mtype", mDrawFlag_Custom_CornerMaterial);
        N.setAttributeNS(null, "mfill", mDrawProductColor);
        N.setAttributeNS(null, "mstroke", "#000000");
        N.setAttributeNS(null, "mstrokewidth", "1px");
        N.setAttributeNS(null, "mwidth", "0");
        N.setAttributeNS(null, "mheight", a);
        N.setAttributeNS(null, "mheight_exp", "JOINH");
        N.setAttributeNS(null, "mcm", "cm" + (A.length + 1));
        N.setAttributeNS(null, "mangle", "0");
        N.setAttributeNS(null, "madir", "t");
        N.setAttributeNS(null, "mprid", "");
        N.setAttributeNS(null, "mcnt_exp", "");
        N.setAttributeNS(null, "mcolor_exp", "");
        N.setAttributeNS(null, "mbcptype", "");
        W.appendChild(N);
        var L = $("#" + H).html();
        L = L + '<rect id="' + H + '_rect" x="200" y="50" width="' + mDrawThickFrame + '" height="' + a / 1000 * mDrawPixelPerM + '" fill="' + mDrawProductColor + '" stroke="#000000" stroke-width="1" pointer-events="all" />';
        $("#" + H).html(L);
        break;
    case mDrawFlag_Custom_polygon:
        N.setAttributeNS(null, "id", H);
        N.setAttributeNS(null, "mtype", mDrawFlag_Custom_polygon);
        N.setAttributeNS(null, "mfill", mDrawProductColor);
        N.setAttributeNS(null, "mstroke", "#000000");
        N.setAttributeNS(null, "mstrokewidth", "1px");
        N.setAttributeNS(null, "mwidth", "500");
        N.setAttributeNS(null, "mheight", "0");
        N.setAttributeNS(null, "mlr", "N");
        W.appendChild(N);
        var L = $("#" + H).html();
        var Y = MicroDraw_getPolygonDataInfo(200, 50, 500, 0, mDrawThickFrame, "", "");
        L = L + "<polygon id='" + H + "_p' points='" + Y + "' fill='" + mDrawProductColor + "' stroke='#000000' stroke-width='1' pointer-events='all' />";
        $("#" + H).html(L);
        break;
    case mDrawFlag_Custom_polygon_v:
        N.setAttributeNS(null, "id", H);
        N.setAttributeNS(null, "mtype", mDrawFlag_Custom_polygon);
        N.setAttributeNS(null, "mfill", mDrawProductColor);
        N.setAttributeNS(null, "mstroke", "#000000");
        N.setAttributeNS(null, "mstrokewidth", "1px");
        N.setAttributeNS(null, "mwidth", "0");
        N.setAttributeNS(null, "mheight", "500");
        N.setAttributeNS(null, "mlr", "N");
        W.appendChild(N);
        var L = $("#" + H).html();
        var Y = MicroDraw_getPolygonDataInfo(200, 50, 0, 500, mDrawThickFrame, "", "");
        L = L + "<polygon id='" + H + "_p' points='" + Y + "' fill='" + mDrawProductColor + "' stroke='#000000' stroke-width='1' pointer-events='all' />";
        $("#" + H).html(L);
        break;
    case mDrawFlag_Custom_polygon_xl:
        N.setAttributeNS(null, "id", H);
        N.setAttributeNS(null, "mtype", mDrawFlag_Custom_polygon);
        N.setAttributeNS(null, "mfill", mDrawProductColor);
        N.setAttributeNS(null, "mstroke", "#000000");
        N.setAttributeNS(null, "mstrokewidth", "1px");
        N.setAttributeNS(null, "mwidth", "500");
        N.setAttributeNS(null, "mheight", "500");
        N.setAttributeNS(null, "mlr", "L");
        W.appendChild(N);
        var L = $("#" + H).html();
        var Y = MicroDraw_getPolygonDataInfo(200, 50, 500, 500, mDrawThickFrame, "L", "");
        L = L + "<polygon id='" + H + "_p' points='" + Y + "' fill='" + mDrawProductColor + "' stroke='#000000' stroke-width='1' pointer-events='all' />";
        $("#" + H).html(L);
        break;
    case mDrawFlag_Custom_polygon_xr:
        N.setAttributeNS(null, "id", H);
        N.setAttributeNS(null, "mtype", mDrawFlag_Custom_polygon);
        N.setAttributeNS(null, "mfill", mDrawProductColor);
        N.setAttributeNS(null, "mstroke", "#000000");
        N.setAttributeNS(null, "mstrokewidth", "1px");
        N.setAttributeNS(null, "mwidth", "500");
        N.setAttributeNS(null, "mheight", "500");
        N.setAttributeNS(null, "mlr", "R");
        W.appendChild(N);
        var L = $("#" + H).html();
        var Y = MicroDraw_getPolygonDataInfo(200, 50, 500, 500, mDrawThickFrame, "R", "");
        L = L + "<polygon id='" + H + "_p' points='" + Y + "' fill='" + mDrawProductColor + "' stroke='#000000' stroke-width='1' pointer-events='all' />";
        $("#" + H).html(L);
        break;
    case mDrawFlag_Custom_arc:
        var S = 100;
        var V = 300;
        N.setAttributeNS(null, "id", H);
        N.setAttributeNS(null, "mtype", mDrawFlag_Custom_arc);
        var G = MicroDraw_getTagMaxVal($("#" + mDrawFlag_SvgId), "marc", "arc") + 1;
        N.setAttributeNS(null, "marc", "arc" + G);
        N.setAttributeNS(null, "mfill", mDrawProductColor);
        N.setAttributeNS(null, "mstroke", "#000000");
        N.setAttributeNS(null, "mstrokewidth", "1px");
        N.setAttributeNS(null, "mwidth", mDrawArcInitW);
        N.setAttributeNS(null, "mheight", mDrawArcInitH);
        N.setAttributeNS(null, "maddthickwidth", "N");
        N.setAttributeNS(null, "customruler", "1");
        N.setAttributeNS(null, "mtingcnt", "0根");
        N.setAttributeNS(null, "mbframe", "N");
        N.setAttributeNS(null, "mtotallen", "Y");
        N.setAttributeNS(null, "mxcxlid", "");
        N.setAttributeNS(null, "showarclen", "Y");
        W.appendChild(N);
        var L = $("#" + H).html();
        var X = MicroDraw_getArcDataInfo(S, V, mDrawArcInitW, mDrawArcInitH, mDrawThickFrame, "N");
        var T = [X.arcOut_d, X.arcIn_d];
        L = L + "<g id='" + H + "_g1' ><path id='" + H + "_p1' d='" + T[0] + "' fill='" + mDrawProductColor + "' stroke='#000000' stroke-width='1' pointer-events='all' /></g>";
        L = L + "<g id='" + H + "_g2' ><path id='" + H + "_p2' d='" + T[1] + "' fill='" + mDrawGlassColor + "' stroke='#000000' stroke-width='1' pointer-events='all' /></g>";
        $("#" + H).html(L);
        MicroDraw_DrawDiviArcKT(H);
        MicroDraw_AutoRuler(H);
        MicroDraw_DrawArcTL(H);
        break;
    case mDrawFlag_Custom_circle:
        N.setAttributeNS(null, "id", H);
        N.setAttributeNS(null, "mtype", mDrawFlag_Custom_circle);
        N.setAttributeNS(null, "mfill", "none");
        N.setAttributeNS(null, "mstroke", "#000000");
        N.setAttributeNS(null, "mstrokewidth", "1px");
        W.appendChild(N);
        var L = $("#" + H).html();
        L = L + "<circle id='" + H + "_c' cx='150' cy='40' r='30' stroke='#000000' stroke-width='1px' fill='none' pointer-events='all'/>";
        $("#" + H).html(L);
        break;
    case mDrawFlag_Custom_ruler:
        var O = "200";
        N.setAttributeNS(null, "id", H);
        N.setAttributeNS(null, "mtype", mDrawFlag_Custom_ruler);
        N.setAttributeNS(null, "mstroke", "#000000");
        N.setAttributeNS(null, "mstrokewidth", "1px");
        N.setAttributeNS(null, "mtext", O);
        W.appendChild(N);
        var L = $("#" + H).html();
        var C, D, e, f;
        var Z, R, M, Q, E, P, c, b;
        var J, U;
        var F = MicroDraw_getRulerDataInfo(100, 50, 200, 50, O);
        var T = F.split(",");
        C = T[0];
        D = T[1];
        e = T[2];
        f = T[3];
        Z = T[4];
        R = T[5];
        M = T[6];
        Q = T[7];
        E = T[8];
        P = T[9];
        c = T[10];
        b = T[11];
        J = T[12];
        U = T[13];
        L = L + "<line id='" + H + "_l1' x1='" + Z.toString() + "' y1='" + R.toString() + "' x2='" + M.toString() + "' y2='" + Q.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
        L = L + "<line id='" + H + "_l2' x1='" + C.toString() + "' y1='" + D.toString() + "' x2='" + e.toString() + "' y2='" + f.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
        L = L + "<line id='" + H + "_l3' x1='" + E.toString() + "' y1='" + P.toString() + "' x2='" + c.toString() + "' y2='" + b.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
        if (isPcUserAgent()) {
            L = L + "<text id='" + H + "_t' x='" + J.toString() + "' y='" + U.toString() + "' font-size='16' fill='#000000' writing-mode='lr' font-weight='400' ondblclick='MicroDraw_Ruler_doubleClickText(this);'>" + O + "</text>"
        } else {
            L = L + "<text id='" + H + "_t' x='" + J.toString() + "' y='" + U.toString() + "' font-size='16' fill='#000000' writing-mode='lr' font-weight='400' onclick='MicroDraw_Ruler_doubleClickText(this);'>" + O + "</text>"
        }
        $("#" + H).html(L);
        break;
    case mDrawFlag_Custom_wall:
        MicroDraw_AddCustom_Wall(H, 100, 20, 600, mDrawWallColor, 45, 15, 3, "");
        break;
    case mDrawFlag_Custom_glass:
        MicroDraw_AddCustom_Glass();
        break;
    case mDrawFlag_Custom_impSvg:
        MicroDraw_AddCustom_impSvg();
        break
    }
    MicroDraw_StepRecord();
    MicroDraw_drapDropInit();
    return H
}
function MicroDraw_AddCustom_Wall(C, S, T, D, U, Q, J, G, L) {
    var P = C;
    var A = document.createElementNS(mDrawSvgNS, "g");
    var I = D;
    var S, T, B, E;
    var R = Number(G) - 1;
    var K = document.getElementById(mDrawFlag_SvgId);
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
        K = $("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]')[0]
    }
    A.setAttributeNS(null, "id", P);
    A.setAttributeNS(null, "mtype", mDrawFlag_Custom_wall);
    A.setAttributeNS(null, "mfill", U);
    A.setAttributeNS(null, "mstroke", "#000000");
    A.setAttributeNS(null, "mstrokewidth", "1px");
    A.setAttributeNS(null, "mwallwidth", Q);
    A.setAttributeNS(null, "mwallheight", J);
    A.setAttributeNS(null, "mwallrow", G);
    A.setAttributeNS(null, "mwallrealwidth", I);
    A.setAttributeNS(null, "mwallbelongto", L);
    K.appendChild(A);
    var F = $("#" + P).html();
    B = (Number(I) / 1000) * mDrawPixelPerM;
    E = Number(G) * Number(J);
    var H = Math.floor(Number(B) / Number(Q));
    F = F + "<g id='" + P + "_g1'>";
    F = F + "<rect id='" + P + "_r' x='" + S + "' y='" + T + "' width='" + B + "' height='" + E + "' stroke='#000000' stroke-width='1px' fill='" + U + "' pointer-events='all'/>";
    F = F + "</g>";
    F = F + "<g id='" + P + "_g2'>";
    for (i = 0; i < R; i++) {
        var O = Number(T) + (Number(i) + 1) * Number(J);
        F = F + "<line id='" + P + "_lh" + i + "' stroke='black' stroke-width='1px' x1='" + S + "' y1='" + O + "' x2='" + (Number(S) + Number(B)) + "' y2='" + O + "' pointer-events='all'/>"
    }
    var M = 0;
    for (i = 0; i < Number(R) + 1; i++) {
        var O = Number(T) + (Number(i)) * Number(J);
        for (k = 0; k < H; k++) {
            if (i % 2 == 0) {
                M = Number(S) + Number(Q) + (Number(k)) * Number(Q)
            } else {
                M = Number(S) + Number(Q) / 2 + (Number(k)) * Number(Q)
            }
            var N = 0;
            F = F + "<line id='" + P + "_lv" + i + k + "' stroke='black' stroke-width='1px' x1='" + M + "' y1='" + O + "' x2='" + M + "' y2='" + (Number(O) + Number(J)) + "' pointer-events='all'/>"
        }
    }
    F = F + "</g>";
    $("#" + P).html(F)
}
function MicroDraw_AddCustom_impSvg() {
    $("<div></div>").dialog({
        id: "WEB_BUDGET_CUSTOMIMP_DLG",
        title: "导入 SVG 图元",
        href: "../MicroBudget/WEB_BUDGET_CUSTOMIMP.html",
        height: 150,
        width: 550,
        modal: true,
        iconCls: "icon-add",
        buttons: [{
            text: "开始导入",
            iconCls: "icon-add",
            handler: function() {
                $("#WEB_BUDGET_CUSTOMIMP_FORM").form("submit", {
                    url: "../MicroBudget/WEB_BUDGET.ashx",
                    onSubmit: function(A) {
                        A.action = "ImpPic";
                        return $(this).form("validate")
                    },
                    success: function(A) {
                        if (A.substr(0, 2) == "ok") {
                            var B = MicroDecodeHtml(A.toString().substr(3));
                            MicroDraw_AddCustom_impSvgHtml(B);
                            $("#WEB_BUDGET_CUSTOMIMP_DLG").dialog("destroy")
                        } else {
                            jQuery.messager.alert("提示:", "操作失败" + A, "error")
                        }
                    }
                })
            }
        },
        {
            text: "退出",
            iconCls: "icon-cancel",
            handler: function() {
                $("#WEB_BUDGET_CUSTOMIMP_DLG").dialog("destroy")
            }
        }],
        onClose: function() {
            $("#WEB_BUDGET_CUSTOMIMP_DLG").dialog("destroy")
        },
        onLoad: function() {}
    })
}
function MicroDraw_AddCustom_Glass(D) {
    if ($.Micro.IsEmpty(D)) {
        return
    }
    var K = D.tArea;
    var E = D.x;
    var F = D.y;
    var G = D.w;
    var B = D.h;
    if (K.length == 0) {
        return
    }
    var J;
    var I, A, H;
    var C = mDrawGlassDiff;
    J = {
        "tag": mDrawFlag_Custom_glass
    };
    I = $.MicroSVG.makeSVG("g", J);
    K.append($(I));
    J = {
        "x1": E + G / 2 - C,
        "y1": F + B / 2,
        "x2": E + G / 2,
        "y2": F + B / 2 - C,
        "stroke": "#000",
        "stroke-width": "1px"
    };
    H = $.MicroSVG.makeSVG("line", J);
    $(I).append($(H));
    J = {
        "x1": E + G / 2 - C,
        "y1": F + B / 2 + C,
        "x2": E + G / 2 + C,
        "y2": F + B / 2 - C,
        "stroke": "#000",
        "stroke-width": "1px"
    };
    H = $.MicroSVG.makeSVG("line", J);
    $(I).append($(H));
    J = {
        "x1": E + G / 2,
        "y1": F + B / 2 + C,
        "x2": E + G / 2 + C,
        "y2": F + B / 2,
        "stroke": "#000",
        "stroke-width": "1px"
    };
    H = $.MicroSVG.makeSVG("line", J);
    $(I).append($(H))
}
function MicroDraw_AddCustom_impSvgHtml(B) {
    var H = MicroDraw_GUID();
    var I = document.createElementNS(mDrawSvgNS, "g");
    I.setAttributeNS(null, "id", H);
    I.setAttributeNS(null, "mtype", mDrawFlag_Custom_impSvg);
    I.setAttributeNS(null, "mscale", "1");
    I.setAttributeNS(null, "mrotate", "0");
    var C = $("#" + mDrawFlag_SvgId)[0];
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
        C = $("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]')[0]
    }
    C.appendChild(I);
    B = replaceAll(B, "mImpSvgId", H + "_mImpSvgId");
    B = replaceAll(B, "mImpSvgBackGround", H + "_mImpSvgBackGround");
    $("#" + H).html(B);
    var A = document.getElementById(H + "_mImpSvgId");
    var E = A.getBoundingClientRect();
    var F = document.getElementById("mBackGround");
    var G = F.getBoundingClientRect();
    var J = document.getElementById(H);
    J.setAttribute("mx", E.left);
    J.setAttribute("my", E.top);
    J.setAttribute("mwidth", E.width);
    J.setAttribute("mheight", E.height);
    J.setAttribute("morigx", (E.left - G.left) + (E.right - E.left) / 2);
    J.setAttribute("morigy", (E.top - G.top) + (E.bottom - G.top) / 2);
    var D = document.getElementById(H + "_mImpSvgBackGround");
    D.setAttribute("x", E.left - G.left);
    D.setAttribute("y", E.top - G.top);
    D.setAttribute("width", E.right - E.left);
    D.setAttribute("height", E.bottom - G.top);
    MicroDraw_Redraw_Custom_impSvg(H);
    MicroDraw_drapDropInit();
    return H
}
function MicroDraw_AddCustom_qj(Y, A, v, Q, N, Aa, Ac, Ae, r, t) {
    var G = MicroDraw_GUID();
    if (!isEmptyOrNull(Y)) {
        G = Y
    }
    var Al = document.createElementNS(mDrawSvgNS, "g");
    Al.setAttributeNS(null, "id", G);
    Al.setAttributeNS(null, "mtype", v);
    Al.setAttributeNS(null, "mfill", "none");
    Al.setAttributeNS(null, "mstroke", "#000000");
    Al.setAttributeNS(null, "mstrokewidth", "1px");
    Al.setAttributeNS(null, "mframepjstyle", Q);
    Al.setAttributeNS(null, "myt", N);
    Al.setAttributeNS(null, "mytpjstyle", Aa);
    Al.setAttributeNS(null, "mqjbelongtoframeid", A);
    Al.setAttributeNS(null, "mw", Ac);
    Al.setAttributeNS(null, "mh", Ae);
    Al.setAttributeNS(null, "mw1", r);
    Al.setAttributeNS(null, "mh1", t);
    var V = (Number(Ac) / 1000) * mDrawPixelPerM;
    var I = (Number(Ae) / 1000) * mDrawPixelPerM;
    var O = (Number(r) / 1000) * mDrawPixelPerM;
    var X = (Number(t) / 1000) * mDrawPixelPerM;
    frameXPixel = Number($("#" + A + "_r1")[0].getAttribute("x"));
    frameYPixel = Number($("#" + A + "_r1")[0].getAttribute("y"));
    frameWPixel = Number($("#" + A + "_r1")[0].getAttribute("width"));
    frameHPixel = Number($("#" + A + "_r1")[0].getAttribute("height"));
    switch (v) {
    case mDrawFlag_Custom_qj_lt:
        var S, T, F, Ab, Ah, Ai, o, p;
        S = Number(frameXPixel);
        T = Number(frameYPixel);
        F = Number(frameXPixel) + Number(V);
        Ab = Number(frameYPixel);
        Ah = Number(frameXPixel) + Number(V);
        Ai = Number(frameYPixel) + Number(I);
        o = Number(frameXPixel);
        p = Number(frameYPixel) + Number(I);
        $("#" + A)[0].parentNode.appendChild(Al);
        var J = $("#" + G).html();
        J = J + "<g><rect id='" + G + "_r' x='" + (Number(S) - 2) + "' y='" + (Number(T) - 2) + "' width='" + (Number(F) - Number(S)) + "' height='" + (Number(Ai) - Number(Ab)) + "' stroke='#000000' stroke-width='0px' fill='white' pointer-events='all'/></g>";
        J = J + "<g><rect id='" + G + "_rr' x='" + (Number(F) - Number(mDrawThickFrame)) + "' y='" + Number(Ab) + "' width='" + mDrawThickFrame + "' height='" + (Number(Ai) - Number(Ab)) + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
        J = J + "<g><rect id='" + G + "_rb' x='" + Number(S) + "' y='" + (Number(p) - Number(mDrawThickFrame)) + "' width='" + (Number(Ah) - Number(o)) + "' height='" + mDrawThickFrame + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
        var u = "";
        u = u + "<g>";
        u = u + "<line id='" + G + "_l1' stroke='black' stroke-width='1' x1='" + (Number(F) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ab)) + "' x2='" + (Number(F) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l2' stroke='black' stroke-width='1' x1='" + (Number(F)) + "' y1='" + (Number(Ab) + Number(mDrawThickFrame)) + "' x2='" + (Number(F)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l3' stroke='black' stroke-width='1' x1='" + (Number(o)) + "' y1='" + (Number(p) - Number(mDrawThickFrame)) + "' x2='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l4' stroke='black' stroke-width='1' x1='" + (Number(o) + Number(mDrawThickFrame)) + "' y1='" + (Number(p)) + "' x2='" + (Number(Ah)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l5' stroke='black' stroke-width='1' x1='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ab)) + "' x2='" + (Number(F)) + "' y2='" + (Number(Ab)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l6' stroke='black' stroke-width='1' x1='" + (Number(o)) + "' y1='" + (Number(p) - Number(mDrawThickFrame)) + "' x2='" + (Number(o)) + "' y2='" + (Number(p)) + "' pointer-events='all'/>";
        switch (Q) {
        case "45":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (Number(F) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ab)) + "' x2='" + (Number(F)) + "' y2='" + (Number(Ab) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ai) - Number(mDrawThickFrame)) + "' x2='" + (Number(Ah)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj3' stroke='black' stroke-width='1' x1='" + (Number(o)) + "' y1='" + (Number(p) - Number(mDrawThickFrame)) + "' x2='" + (Number(o) + Number(mDrawThickFrame)) + "' y2='" + (Number(p)) + "' pointer-events='all'/>";
            break;
        case "H":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (Number(F) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ab) + Number(mDrawThickFrame)) + "' x2='" + (Number(F)) + "' y2='" + (Number(Ab) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ai) - Number(mDrawThickFrame)) + "' x2='" + (Number(Ah)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj3' stroke='black' stroke-width='1' x1='" + (Number(o)) + "' y1='" + (Number(p)) + "' x2='" + (Number(o) + Number(mDrawThickFrame)) + "' y2='" + (Number(p)) + "' pointer-events='all'/>";
            break;
        case "V":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (Number(F)) + "' y1='" + (Number(Ab)) + "' x2='" + (Number(F)) + "' y2='" + (Number(Ab) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ai) - Number(mDrawThickFrame)) + "' x2='" + (Number(Ah)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj3' stroke='black' stroke-width='1' x1='" + (Number(o) + Number(mDrawThickFrame)) + "' y1='" + (Number(p) - Number(mDrawThickFrame)) + "' x2='" + (Number(o) + Number(mDrawThickFrame)) + "' y2='" + (Number(p)) + "' pointer-events='all'/>";
            break
        }
        u = u + "</g>";
        J = J + u;
        if (N == "Y") {
            var e = "<g>";
            e = e + "<g><rect id='" + G + "_ytr' x='" + (Number(F) + 1) + "' y='" + (Number(Ab) + Number(mDrawThickFrame) + 1) + "' width='" + mDrawThickYt + "' height='" + (Number(Ai) - Number(Ab) - Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
            e = e + "<g><rect id='" + G + "_ytb' x='" + (Number(o) + Number(mDrawThickFrame) + 1) + "' y='" + (Number(p) + 1) + "' width='" + (Number(Ah) - Number(o) - Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' height='" + mDrawThickYt + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
            e = e + "<line id='" + G + "_ytl1' stroke='black' stroke-width='1' x1='" + (Number(F) + Number(mDrawThickYt)) + "' y1='" + (Number(Ab) + Number(mDrawThickFrame) + Number(mDrawThickYt) - 1) + "' x2='" + (Number(F) + Number(mDrawThickYt)) + "' y2='" + (Number(Ai) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
            e = e + "<line id='" + G + "_ytl2' stroke='black' stroke-width='1' x1='" + (Number(o) + Number(mDrawThickFrame) + Number(mDrawThickYt) - 1) + "' y1='" + (Number(p) + Number(mDrawThickYt)) + "' x2='" + (Number(Ah) + Number(mDrawThickYt)) + "' y2='" + (Number(p) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
            switch (Aa) {
            case "45":
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(F)) + "' y1='" + (Number(Ab) + Number(mDrawThickFrame)) + "' x2='" + (Number(F) + Number(mDrawThickYt)) + "' y2='" + (Number(Ab) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj2' stroke='black' stroke-width='1' x1='" + (Number(Ah)) + "' y1='" + (Number(Ai)) + "' x2='" + (Number(Ah) + Number(mDrawThickYt)) + "' y2='" + (Number(Ai) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj3' stroke='black' stroke-width='1' x1='" + (Number(o) + Number(mDrawThickFrame)) + "' y1='" + (Number(p)) + "' x2='" + (Number(o) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' y2='" + (Number(p) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                break;
            case "H":
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(F)) + "' y1='" + (Number(Ab) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' x2='" + (Number(F) + Number(mDrawThickYt)) + "' y2='" + (Number(Ab) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj2' stroke='black' stroke-width='1' x1='" + (Number(Ah)) + "' y1='" + (Number(Ai)) + "' x2='" + (Number(Ah) + Number(mDrawThickYt)) + "' y2='" + (Number(Ai) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj3' stroke='black' stroke-width='1' x1='" + (Number(o) + Number(mDrawThickFrame)) + "' y1='" + (Number(p) + Number(mDrawThickYt)) + "' x2='" + (Number(o) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' y2='" + (Number(p) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                break;
            case "V":
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(F) + Number(mDrawThickYt)) + "' y1='" + (Number(Ab) + Number(mDrawThickFrame)) + "' x2='" + (Number(F) + Number(mDrawThickYt)) + "' y2='" + (Number(Ab) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj2' stroke='black' stroke-width='1' x1='" + (Number(Ah)) + "' y1='" + (Number(Ai)) + "' x2='" + (Number(Ah) + Number(mDrawThickYt)) + "' y2='" + (Number(Ai) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj3' stroke='black' stroke-width='1' x1='" + (Number(o) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' y1='" + (Number(p)) + "' x2='" + (Number(o) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' y2='" + (Number(p) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                break
            }
            e = e + "</g>";
            J = J + e
        }
        var l = MicroDraw_AddCustom(mDrawFlag_Custom_ruler);
        var M = MicroDraw_getRulerDataInfo(S, Number(T) - 12, Number(F) - Number(mDrawThickFrame), Number(Ab) - 12, Ac.toString());
        var Af = M.split(",");
        var q = $("#" + l)[0];
        var E = $("#" + l + "_l1")[0];
        var D = $("#" + l + "_l2")[0];
        var C = $("#" + l + "_l3")[0];
        var U = $("#" + l + "_t")[0];
        D.setAttribute("x1", Af[0]);
        D.setAttribute("y1", Af[1]);
        D.setAttribute("x2", Af[2]);
        D.setAttribute("y2", Af[3]);
        E.setAttribute("x1", Af[4]);
        E.setAttribute("y1", Af[5]);
        E.setAttribute("x2", Af[6]);
        E.setAttribute("y2", Af[7]);
        C.setAttribute("x1", Af[8]);
        C.setAttribute("y1", Af[9]);
        C.setAttribute("x2", Af[10]);
        C.setAttribute("y2", Af[11]);
        U.setAttribute("x", Af[12]);
        U.setAttribute("y", Af[13]);
        U.textContent = Ac.toString();
        q.setAttribute("moptid", "mw");
        q.setAttribute("moptvalexp", "VAL");
        q.setAttribute("moptidbelongtoobj", G);
        var l = MicroDraw_AddCustom(mDrawFlag_Custom_ruler);
        var M = MicroDraw_getRulerDataInfo(Number(S) - 12, T, Number(o) - 12, Number(p) - Number(mDrawThickFrame), Ae.toString());
        var Af = M.split(",");
        var q = $("#" + l)[0];
        var E = $("#" + l + "_l1")[0];
        var D = $("#" + l + "_l2")[0];
        var C = $("#" + l + "_l3")[0];
        var U = $("#" + l + "_t")[0];
        D.setAttribute("x1", Af[0]);
        D.setAttribute("y1", Af[1]);
        D.setAttribute("x2", Af[2]);
        D.setAttribute("y2", Af[3]);
        E.setAttribute("x1", Af[4]);
        E.setAttribute("y1", Af[5]);
        E.setAttribute("x2", Af[6]);
        E.setAttribute("y2", Af[7]);
        C.setAttribute("x1", Af[8]);
        C.setAttribute("y1", Af[9]);
        C.setAttribute("x2", Af[10]);
        C.setAttribute("y2", Af[11]);
        U.setAttribute("x", Af[12]);
        U.setAttribute("y", Af[13]);
        U.textContent = Ae.toString();
        q.setAttribute("moptid", "mh");
        q.setAttribute("moptvalexp", "VAL");
        q.setAttribute("moptidbelongtoobj", G);
        $("#" + G).html(J);
        break;
    case mDrawFlag_Custom_qj_rt:
        var S, T, F, Ab, Ah, Ai, o, p;
        S = Number(frameXPixel) + Number(frameWPixel) - Number(V);
        T = Number(frameYPixel);
        F = Number(frameXPixel) + Number(frameWPixel);
        Ab = Number(frameYPixel);
        Ah = Number(frameXPixel) + Number(frameWPixel);
        Ai = Number(frameYPixel) + Number(I);
        o = Number(frameXPixel) + Number(frameWPixel) - Number(V);
        p = Number(frameYPixel) + Number(I);
        $("#" + A)[0].parentNode.appendChild(Al);
        var J = $("#" + G).html();
        J = J + "<g><rect id='" + G + "_r' x='" + (Number(S) + 2) + "' y='" + (Number(T) - 2) + "' width='" + (Number(F) - Number(S)) + "' height='" + (Number(Ai) - Number(Ab)) + "' stroke='#000000' stroke-width='0px' fill='white' pointer-events='all'/></g>";
        J = J + "<g><rect id='" + G + "_rr' x='" + (Number(S)) + "' y='" + Number(T) + "' width='" + mDrawThickFrame + "' height='" + (Number(p) - Number(T)) + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
        J = J + "<g><rect id='" + G + "_rb' x='" + Number(S) + "' y='" + (Number(p) - Number(mDrawThickFrame)) + "' width='" + (Number(Ah) - Number(o)) + "' height='" + mDrawThickFrame + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
        var u = "";
        u = u + "<g>";
        u = u + "<line id='" + G + "_l1' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame)) + "' y1='" + (Number(T)) + "' x2='" + (Number(S) + Number(mDrawThickFrame)) + "' y2='" + (Number(p) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l2' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(Ab) + Number(mDrawThickFrame)) + "' x2='" + (Number(S)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l3' stroke='black' stroke-width='1' x1='" + (Number(o) + Number(mDrawThickFrame)) + "' y1='" + (Number(p) - Number(mDrawThickFrame)) + "' x2='" + (Number(Ah)) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l4' stroke='black' stroke-width='1' x1='" + (Number(o)) + "' y1='" + (Number(p)) + "' x2='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y2='" + (Number(p)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l5' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T)) + "' x2='" + (Number(S) + Number(mDrawThickFrame)) + "' y2='" + (Number(T)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l6' stroke='black' stroke-width='1' x1='" + (Number(Ah)) + "' y1='" + (Number(Ai) - Number(mDrawThickFrame)) + "' x2='" + (Number(Ah)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
        switch (Q) {
        case "45":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame)) + "' y1='" + (Number(T)) + "' x2='" + (Number(S)) + "' y2='" + (Number(T) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (Number(o) + Number(mDrawThickFrame)) + "' y1='" + (Number(p) - Number(mDrawThickFrame)) + "' x2='" + (Number(o)) + "' y2='" + (Number(p)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj3' stroke='black' stroke-width='1' x1='" + (Number(Ah)) + "' y1='" + (Number(Ai) - Number(mDrawThickFrame)) + "' x2='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
            break;
        case "H":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame)) + "' y1='" + (Number(T) + Number(mDrawThickFrame)) + "' x2='" + (Number(S)) + "' y2='" + (Number(T) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (Number(o) + Number(mDrawThickFrame)) + "' y1='" + (Number(p) - Number(mDrawThickFrame)) + "' x2='" + (Number(o)) + "' y2='" + (Number(p)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj3' stroke='black' stroke-width='1' x1='" + (Number(Ah)) + "' y1='" + (Number(Ai)) + "' x2='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
            break;
        case "V":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T)) + "' x2='" + (Number(S)) + "' y2='" + (Number(T) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (Number(o) + Number(mDrawThickFrame)) + "' y1='" + (Number(p) - Number(mDrawThickFrame)) + "' x2='" + (Number(o)) + "' y2='" + (Number(p)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj3' stroke='black' stroke-width='1' x1='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ai) - Number(mDrawThickFrame)) + "' x2='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
            break
        }
        u = u + "</g>";
        J = J + u;
        if (N == "Y") {
            var e = "<g>";
            e = e + "<g><rect id='" + G + "_ytr' x='" + (Number(S) - Number(mDrawThickYt) - 1) + "' y='" + (Number(T) + Number(mDrawThickFrame) + 1) + "' width='" + mDrawThickYt + "' height='" + (Number(p) - Number(T) - Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
            e = e + "<g><rect id='" + G + "_ytb' x='" + (Number(o) - 2) + "' y='" + (Number(p) + 1) + "' width='" + (Number(Ah) - Number(o) - Number(mDrawThickFrame)) + "' height='" + mDrawThickYt + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
            e = e + "<line id='" + G + "_ytl1' stroke='black' stroke-width='1' x1='" + (Number(S) - Number(mDrawThickYt)) + "' y1='" + (Number(T) + Number(mDrawThickFrame) + Number(mDrawThickYt) - 1) + "' x2='" + (Number(o) - Number(mDrawThickYt)) + "' y2='" + (Number(p) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
            e = e + "<line id='" + G + "_ytl2' stroke='black' stroke-width='1' x1='" + (Number(o) - Number(mDrawThickYt)) + "' y1='" + (Number(p) + Number(mDrawThickYt)) + "' x2='" + (Number(Ah) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' y2='" + (Number(p) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
            switch (Aa) {
            case "45":
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T) + Number(mDrawThickFrame)) + "' x2='" + (Number(S) - Number(mDrawThickYt)) + "' y2='" + (Number(T) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj2' stroke='black' stroke-width='1' x1='" + (Number(o)) + "' y1='" + (Number(p)) + "' x2='" + (Number(o) - Number(mDrawThickYt)) + "' y2='" + (Number(p) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj3' stroke='black' stroke-width='1' x1='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ai)) + "' x2='" + (Number(Ah) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' y2='" + (Number(Ai) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                break;
            case "H":
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' x2='" + (Number(S) - Number(mDrawThickYt)) + "' y2='" + (Number(T) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj2' stroke='black' stroke-width='1' x1='" + (Number(o)) + "' y1='" + (Number(p)) + "' x2='" + (Number(o) - Number(mDrawThickYt)) + "' y2='" + (Number(p) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj3' stroke='black' stroke-width='1' x1='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ai) + Number(mDrawThickYt)) + "' x2='" + (Number(Ah) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' y2='" + (Number(Ai) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                break;
            case "V":
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(S) - Number(mDrawThickYt)) + "' y1='" + (Number(T) + Number(mDrawThickFrame)) + "' x2='" + (Number(S) - Number(mDrawThickYt)) + "' y2='" + (Number(T) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj2' stroke='black' stroke-width='1' x1='" + (Number(o)) + "' y1='" + (Number(p)) + "' x2='" + (Number(o) - Number(mDrawThickYt)) + "' y2='" + (Number(p) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj3' stroke='black' stroke-width='1' x1='" + (Number(Ah) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' y1='" + (Number(Ai)) + "' x2='" + (Number(Ah) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' y2='" + (Number(Ai) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                break
            }
            e = e + "</g>";
            J = J + e
        }
        var l = MicroDraw_AddCustom(mDrawFlag_Custom_ruler);
        var M = MicroDraw_getRulerDataInfo(Number(S) + Number(mDrawThickFrame), Number(T) - 12, Number(F), Number(Ab) - 12, Ac.toString());
        var Af = M.split(",");
        var q = $("#" + l)[0];
        var E = $("#" + l + "_l1")[0];
        var D = $("#" + l + "_l2")[0];
        var C = $("#" + l + "_l3")[0];
        var U = $("#" + l + "_t")[0];
        D.setAttribute("x1", Af[0]);
        D.setAttribute("y1", Af[1]);
        D.setAttribute("x2", Af[2]);
        D.setAttribute("y2", Af[3]);
        E.setAttribute("x1", Af[4]);
        E.setAttribute("y1", Af[5]);
        E.setAttribute("x2", Af[6]);
        E.setAttribute("y2", Af[7]);
        C.setAttribute("x1", Af[8]);
        C.setAttribute("y1", Af[9]);
        C.setAttribute("x2", Af[10]);
        C.setAttribute("y2", Af[11]);
        U.setAttribute("x", Af[12]);
        U.setAttribute("y", Af[13]);
        U.textContent = Ac.toString();
        q.setAttribute("moptid", "mw");
        q.setAttribute("moptvalexp", "VAL");
        q.setAttribute("moptidbelongtoobj", G);
        var l = MicroDraw_AddCustom(mDrawFlag_Custom_ruler);
        var M = MicroDraw_getRulerDataInfo(Number(F) + 12, T, Number(Ah) + 12, Number(p) - Number(mDrawThickFrame), Ae.toString());
        var Af = M.split(",");
        var q = $("#" + l)[0];
        var E = $("#" + l + "_l1")[0];
        var D = $("#" + l + "_l2")[0];
        var C = $("#" + l + "_l3")[0];
        var U = $("#" + l + "_t")[0];
        D.setAttribute("x1", Af[0]);
        D.setAttribute("y1", Af[1]);
        D.setAttribute("x2", Af[2]);
        D.setAttribute("y2", Af[3]);
        E.setAttribute("x1", Af[4]);
        E.setAttribute("y1", Af[5]);
        E.setAttribute("x2", Af[6]);
        E.setAttribute("y2", Af[7]);
        C.setAttribute("x1", Af[8]);
        C.setAttribute("y1", Af[9]);
        C.setAttribute("x2", Af[10]);
        C.setAttribute("y2", Af[11]);
        U.setAttribute("x", Af[12]);
        U.setAttribute("y", Af[13]);
        U.textContent = Ae.toString();
        q.setAttribute("moptid", "mh");
        q.setAttribute("moptvalexp", "VAL");
        q.setAttribute("moptidbelongtoobj", G);
        $("#" + G).html(J);
        break;
    case mDrawFlag_Custom_qj_rb:
        var S, T, F, Ab, Ah, Ai, o, p;
        S = Number(frameXPixel) + Number(frameWPixel) - Number(V);
        T = Number(frameYPixel) + Number(frameHPixel) - Number(I);
        F = Number(frameXPixel) + Number(frameWPixel);
        Ab = Number(frameYPixel) + Number(frameHPixel) - Number(I);
        Ah = Number(frameXPixel) + Number(frameWPixel);
        Ai = Number(frameYPixel) + Number(frameHPixel);
        o = Number(frameXPixel) + Number(frameWPixel) - Number(V);
        p = Number(frameYPixel) + Number(frameHPixel);
        $("#" + A)[0].parentNode.appendChild(Al);
        var J = $("#" + G).html();
        J = J + "<g><rect id='" + G + "_r' x='" + (Number(S) + 2) + "' y='" + (Number(T) + 2) + "' width='" + (Number(F) - Number(S)) + "' height='" + (Number(Ai) - Number(Ab)) + "' stroke='#000000' stroke-width='0px' fill='white' pointer-events='all'/></g>";
        J = J + "<g><rect id='" + G + "_rr' x='" + (Number(S)) + "' y='" + Number(T) + "' width='" + mDrawThickFrame + "' height='" + (Number(p) - Number(T)) + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
        J = J + "<g><rect id='" + G + "_rb' x='" + Number(S) + "' y='" + (Number(T)) + "' width='" + (Number(F) - Number(S)) + "' height='" + mDrawThickFrame + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
        var u = "";
        u = u + "<g>";
        u = u + "<line id='" + G + "_l1' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T)) + "' x2='" + (Number(S)) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l2' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame)) + "' y1='" + (Number(T) + Number(mDrawThickFrame)) + "' x2='" + (Number(o) + Number(mDrawThickFrame)) + "' y2='" + (Number(p)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l3' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T)) + "' x2='" + (Number(F) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ab)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l4' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame)) + "' y1='" + (Number(T) + Number(mDrawThickFrame)) + "' x2='" + (Number(F)) + "' y2='" + (Number(Ab) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l5' stroke='black' stroke-width='1' x1='" + (Number(o)) + "' y1='" + (Number(p)) + "' x2='" + (Number(o) + Number(mDrawThickFrame)) + "' y2='" + (Number(p)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l6' stroke='black' stroke-width='1' x1='" + (Number(F)) + "' y1='" + (Number(Ab)) + "' x2='" + (Number(F)) + "' y2='" + (Number(Ab) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        switch (Q) {
        case "45":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (Number(F)) + "' y1='" + (Number(Ab) + Number(mDrawThickFrame)) + "' x2='" + (Number(F) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ab)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame)) + "' y1='" + (Number(T) + Number(mDrawThickFrame)) + "' x2='" + (Number(S)) + "' y2='" + (Number(T)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj3' stroke='black' stroke-width='1' x1='" + (Number(o) + Number(mDrawThickFrame)) + "' y1='" + (Number(p)) + "' x2='" + (Number(o)) + "' y2='" + (Number(p) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            break;
        case "H":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (Number(F)) + "' y1='" + (Number(Ab)) + "' x2='" + (Number(F) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ab)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame)) + "' y1='" + (Number(T) + Number(mDrawThickFrame)) + "' x2='" + (Number(S)) + "' y2='" + (Number(T)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj3' stroke='black' stroke-width='1' x1='" + (Number(o) + Number(mDrawThickFrame)) + "' y1='" + (Number(p) - Number(mDrawThickFrame)) + "' x2='" + (Number(o)) + "' y2='" + (Number(p) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            break;
        case "V":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (Number(F) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ab) + Number(mDrawThickFrame)) + "' x2='" + (Number(F) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ab)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame)) + "' y1='" + (Number(T) + Number(mDrawThickFrame)) + "' x2='" + (Number(S)) + "' y2='" + (Number(T)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj3' stroke='black' stroke-width='1' x1='" + (Number(o)) + "' y1='" + (Number(p)) + "' x2='" + (Number(o)) + "' y2='" + (Number(p) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            break
        }
        u = u + "</g>";
        J = J + u;
        if (N == "Y") {
            var e = "<g>";
            e = e + "<g><rect id='" + G + "_ytr' x='" + (Number(S) - Number(mDrawThickYt) - 1) + "' y='" + (Number(T) - 1) + "' width='" + mDrawThickYt + "' height='" + (Number(p) - Number(T) - Number(mDrawThickFrame)) + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
            e = e + "<g><rect id='" + G + "_ytb' x='" + (Number(S) - Number(mDrawThickYt) - 1) + "' y='" + (Number(T) - Number(mDrawThickYt) - 1) + "' width='" + (Number(F) - Number(S) - Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' height='" + mDrawThickYt + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
            e = e + "<line id='" + G + "_ytl1' stroke='black' stroke-width='1' x1='" + (Number(S) - Number(mDrawThickYt)) + "' y1='" + (Number(T) - Number(mDrawThickYt)) + "' x2='" + (Number(o) - Number(mDrawThickYt)) + "' y2='" + (Number(p) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
            e = e + "<line id='" + G + "_ytl2' stroke='black' stroke-width='1' x1='" + (Number(S) - Number(mDrawThickYt)) + "' y1='" + (Number(T) - Number(mDrawThickYt)) + "' x2='" + (Number(F) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' y2='" + (Number(Ab) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
            switch (Aa) {
            case "45":
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(F) - Number(mDrawThickFrame)) + "' y1='" + (Number(T)) + "' x2='" + (Number(F) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' y2='" + (Number(T) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T)) + "' x2='" + (Number(S) - Number(mDrawThickYt)) + "' y2='" + (Number(T) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(p) - Number(mDrawThickFrame)) + "' x2='" + (Number(S) - Number(mDrawThickYt)) + "' y2='" + (Number(p) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                break;
            case "H":
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(F) - Number(mDrawThickFrame)) + "' y1='" + (Number(T) - Number(mDrawThickYt)) + "' x2='" + (Number(F) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' y2='" + (Number(T) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T)) + "' x2='" + (Number(S) - Number(mDrawThickYt)) + "' y2='" + (Number(T) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(p) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' x2='" + (Number(S) - Number(mDrawThickYt)) + "' y2='" + (Number(p) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                break;
            case "V":
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(F) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' y1='" + (Number(T)) + "' x2='" + (Number(F) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' y2='" + (Number(T) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T)) + "' x2='" + (Number(S) - Number(mDrawThickYt)) + "' y2='" + (Number(T) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(S) - Number(mDrawThickYt)) + "' y1='" + (Number(p) - Number(mDrawThickFrame)) + "' x2='" + (Number(S) - Number(mDrawThickYt)) + "' y2='" + (Number(p) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                break
            }
            e = e + "</g>";
            J = J + e
        }
        var l = MicroDraw_AddCustom(mDrawFlag_Custom_ruler);
        if ($("#" + A)[0].getAttribute("mwall") == "N") {
            var M = MicroDraw_getRulerDataInfo(Number(S) + Number(mDrawThickFrame), Number(Ai) + 12, Number(F), Number(Ai) + 12, Ac.toString())
        } else {
            var M = MicroDraw_getRulerDataInfo(Number(S) + Number(mDrawThickFrame), Number(Ai) - 12, Number(F), Number(Ai) - 12, Ac.toString())
        }
        var Af = M.split(",");
        var q = $("#" + l)[0];
        var E = $("#" + l + "_l1")[0];
        var D = $("#" + l + "_l2")[0];
        var C = $("#" + l + "_l3")[0];
        var U = $("#" + l + "_t")[0];
        D.setAttribute("x1", Af[0]);
        D.setAttribute("y1", Af[1]);
        D.setAttribute("x2", Af[2]);
        D.setAttribute("y2", Af[3]);
        E.setAttribute("x1", Af[4]);
        E.setAttribute("y1", Af[5]);
        E.setAttribute("x2", Af[6]);
        E.setAttribute("y2", Af[7]);
        C.setAttribute("x1", Af[8]);
        C.setAttribute("y1", Af[9]);
        C.setAttribute("x2", Af[10]);
        C.setAttribute("y2", Af[11]);
        U.setAttribute("x", Af[12]);
        U.setAttribute("y", Af[13]);
        U.textContent = Ac.toString();
        q.setAttribute("moptid", "mw");
        q.setAttribute("moptvalexp", "VAL");
        q.setAttribute("moptidbelongtoobj", G);
        var l = MicroDraw_AddCustom(mDrawFlag_Custom_ruler);
        var M = MicroDraw_getRulerDataInfo(Number(F) + 12, Number(T) + Number(mDrawThickFrame), Number(Ah) + 12, Number(p), Ae.toString());
        var Af = M.split(",");
        var q = $("#" + l)[0];
        var E = $("#" + l + "_l1")[0];
        var D = $("#" + l + "_l2")[0];
        var C = $("#" + l + "_l3")[0];
        var U = $("#" + l + "_t")[0];
        D.setAttribute("x1", Af[0]);
        D.setAttribute("y1", Af[1]);
        D.setAttribute("x2", Af[2]);
        D.setAttribute("y2", Af[3]);
        E.setAttribute("x1", Af[4]);
        E.setAttribute("y1", Af[5]);
        E.setAttribute("x2", Af[6]);
        E.setAttribute("y2", Af[7]);
        C.setAttribute("x1", Af[8]);
        C.setAttribute("y1", Af[9]);
        C.setAttribute("x2", Af[10]);
        C.setAttribute("y2", Af[11]);
        U.setAttribute("x", Af[12]);
        U.setAttribute("y", Af[13]);
        U.textContent = Ae.toString();
        q.setAttribute("moptid", "mh");
        q.setAttribute("moptvalexp", "VAL");
        q.setAttribute("moptidbelongtoobj", G);
        $("#" + G).html(J);
        break;
    case mDrawFlag_Custom_qj_lb:
        var S, T, F, Ab, Ah, Ai, o, p;
        S = Number(frameXPixel);
        T = Number(frameYPixel) + Number(frameHPixel) - Number(I);
        F = Number(frameXPixel) + Number(V);
        Ab = Number(frameYPixel) + Number(frameHPixel) - Number(I);
        Ah = Number(frameXPixel) + Number(V);
        Ai = Number(frameYPixel) + Number(frameHPixel);
        o = Number(frameXPixel);
        p = Number(frameYPixel) + Number(frameHPixel);
        $("#" + A)[0].parentNode.appendChild(Al);
        var J = $("#" + G).html();
        J = J + "<g><rect id='" + G + "_r' x='" + (Number(S) - 2) + "' y='" + (Number(T) + 2) + "' width='" + (Number(F) - Number(S)) + "' height='" + (Number(Ai) - Number(Ab)) + "' stroke='#000000' stroke-width='0px' fill='white' pointer-events='all'/></g>";
        J = J + "<g><rect id='" + G + "_rr' x='" + (Number(F) - Number(mDrawThickFrame)) + "' y='" + Number(Ab) + "' width='" + mDrawThickFrame + "' height='" + (Number(Ai) - Number(Ab)) + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
        J = J + "<g><rect id='" + G + "_rb' x='" + Number(S) + "' y='" + (Number(T)) + "' width='" + (Number(F) - Number(S)) + "' height='" + mDrawThickFrame + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
        var u = "";
        u = u + "<g>";
        u = u + "<line id='" + G + "_l1' stroke='black' stroke-width='1' x1='" + (Number(F)) + "' y1='" + (Number(Ab)) + "' x2='" + (Number(Ah)) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l2' stroke='black' stroke-width='1' x1='" + (Number(F) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ab) + Number(mDrawThickFrame)) + "' x2='" + (Number(F) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l3' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame)) + "' y1='" + (Number(T)) + "' x2='" + (Number(F)) + "' y2='" + (Number(Ab)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l4' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T) + Number(mDrawThickFrame)) + "' x2='" + (Number(F) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ab) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l5' stroke='black' stroke-width='1' x1='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ai)) + "' x2='" + (Number(Ah)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l6' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T)) + "' x2='" + (Number(S)) + "' y2='" + (Number(T) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        switch (Q) {
        case "45":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T) + Number(mDrawThickFrame)) + "' x2='" + (Number(S) + Number(mDrawThickFrame)) + "' y2='" + (Number(T)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (Number(F)) + "' y1='" + (Number(Ab)) + "' x2='" + (Number(F) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ab) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj3' stroke='black' stroke-width='1' x1='" + (Number(Ah)) + "' y1='" + (Number(Ai) - Number(mDrawThickFrame)) + "' x2='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
            break;
        case "H":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T)) + "' x2='" + (Number(S) + Number(mDrawThickFrame)) + "' y2='" + (Number(T)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (Number(F)) + "' y1='" + (Number(Ab)) + "' x2='" + (Number(F) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ab) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj3' stroke='black' stroke-width='1' x1='" + (Number(Ah)) + "' y1='" + (Number(Ai) - Number(mDrawThickFrame)) + "' x2='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            break;
        case "V":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame)) + "' y1='" + (Number(T) + Number(mDrawThickFrame)) + "' x2='" + (Number(S) + Number(mDrawThickFrame)) + "' y2='" + (Number(T)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (Number(F)) + "' y1='" + (Number(Ab)) + "' x2='" + (Number(F) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ab) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj3' stroke='black' stroke-width='1' x1='" + (Number(Ah)) + "' y1='" + (Number(Ai) - Number(mDrawThickFrame)) + "' x2='" + (Number(Ah)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
            break
        }
        u = u + "</g>";
        J = J + u;
        if (N == "Y") {
            var e = "<g>";
            e = e + "<g><rect id='" + G + "_ytr' x='" + (Number(F) + 1) + "' y='" + (Number(Ab) - Number(mDrawThickYt)) + "' width='" + mDrawThickYt + "' height='" + (Number(Ai) - Number(Ab) - Number(mDrawThickFrame) + Number(mDrawThickYt) - 1) + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
            e = e + "<g><rect id='" + G + "_ytb' x='" + (Number(o) + Number(mDrawThickFrame) + 1) + "' y='" + (Number(Ab) - Number(mDrawThickYt) - 1) + "' width='" + (Number(Ah) - Number(o) - Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' height='" + mDrawThickYt + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
            e = e + "<line id='" + G + "_ytl1' stroke='black' stroke-width='1' x1='" + (Number(F) + Number(mDrawThickYt)) + "' y1='" + (Number(Ab) - Number(mDrawThickYt)) + "' x2='" + (Number(Ah) + Number(mDrawThickYt)) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
            e = e + "<line id='" + G + "_ytl2' stroke='black' stroke-width='1' x1='" + (Number(o) + Number(mDrawThickFrame) + Number(mDrawThickYt) - 1) + "' y1='" + (Number(Ab) - Number(mDrawThickYt)) + "' x2='" + (Number(Ah) + Number(mDrawThickYt)) + "' y2='" + (Number(Ab) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
            switch (Aa) {
            case "45":
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' y1='" + (Number(T) - Number(mDrawThickYt)) + "' x2='" + (Number(S) + Number(mDrawThickFrame)) + "' y2='" + (Number(T)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj2' stroke='black' stroke-width='1' x1='" + (Number(F) + Number(mDrawThickYt)) + "' y1='" + (Number(Ab) - Number(mDrawThickYt)) + "' x2='" + (Number(F)) + "' y2='" + (Number(Ab)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj3' stroke='black' stroke-width='1' x1='" + (Number(Ah) + Number(mDrawThickYt)) + "' y1='" + (Number(Ai) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' x2='" + (Number(Ah)) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
                break;
            case "H":
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' y1='" + (Number(T) - Number(mDrawThickYt)) + "' x2='" + (Number(S) + Number(mDrawThickFrame)) + "' y2='" + (Number(T) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj2' stroke='black' stroke-width='1' x1='" + (Number(F) + Number(mDrawThickYt)) + "' y1='" + (Number(Ab) - Number(mDrawThickYt)) + "' x2='" + (Number(F)) + "' y2='" + (Number(Ab)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj3' stroke='black' stroke-width='1' x1='" + (Number(Ah) + Number(mDrawThickYt)) + "' y1='" + (Number(Ai) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' x2='" + (Number(Ah)) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                break;
            case "V":
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' y1='" + (Number(T) - Number(mDrawThickYt)) + "' x2='" + (Number(S) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' y2='" + (Number(T)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj2' stroke='black' stroke-width='1' x1='" + (Number(F) + Number(mDrawThickYt)) + "' y1='" + (Number(Ab) - Number(mDrawThickYt)) + "' x2='" + (Number(F)) + "' y2='" + (Number(Ab)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj3' stroke='black' stroke-width='1' x1='" + (Number(Ah) + Number(mDrawThickYt)) + "' y1='" + (Number(Ai) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' x2='" + (Number(Ah) + Number(mDrawThickYt)) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
                break
            }
            e = e + "</g>";
            J = J + e
        }
        var l = MicroDraw_AddCustom(mDrawFlag_Custom_ruler);
        var M = MicroDraw_getRulerDataInfo(Number(S), Number(Ai) + 12, Number(F) - Number(mDrawThickFrame), Number(Ai) + 12, Ac.toString());
        var Af = M.split(",");
        var q = $("#" + l)[0];
        var E = $("#" + l + "_l1")[0];
        var D = $("#" + l + "_l2")[0];
        var C = $("#" + l + "_l3")[0];
        var U = $("#" + l + "_t")[0];
        D.setAttribute("x1", Af[0]);
        D.setAttribute("y1", Af[1]);
        D.setAttribute("x2", Af[2]);
        D.setAttribute("y2", Af[3]);
        E.setAttribute("x1", Af[4]);
        E.setAttribute("y1", Af[5]);
        E.setAttribute("x2", Af[6]);
        E.setAttribute("y2", Af[7]);
        C.setAttribute("x1", Af[8]);
        C.setAttribute("y1", Af[9]);
        C.setAttribute("x2", Af[10]);
        C.setAttribute("y2", Af[11]);
        U.setAttribute("x", Af[12]);
        U.setAttribute("y", Af[13]);
        U.textContent = Ac.toString();
        q.setAttribute("moptid", "mw");
        q.setAttribute("moptvalexp", "VAL");
        q.setAttribute("moptidbelongtoobj", G);
        var l = MicroDraw_AddCustom(mDrawFlag_Custom_ruler);
        var M = MicroDraw_getRulerDataInfo(Number(S) - 12, Number(T) + Number(mDrawThickFrame), Number(o) - 12, Number(p), Ae.toString());
        var Af = M.split(",");
        var q = $("#" + l)[0];
        var E = $("#" + l + "_l1")[0];
        var D = $("#" + l + "_l2")[0];
        var C = $("#" + l + "_l3")[0];
        var U = $("#" + l + "_t")[0];
        D.setAttribute("x1", Af[0]);
        D.setAttribute("y1", Af[1]);
        D.setAttribute("x2", Af[2]);
        D.setAttribute("y2", Af[3]);
        E.setAttribute("x1", Af[4]);
        E.setAttribute("y1", Af[5]);
        E.setAttribute("x2", Af[6]);
        E.setAttribute("y2", Af[7]);
        C.setAttribute("x1", Af[8]);
        C.setAttribute("y1", Af[9]);
        C.setAttribute("x2", Af[10]);
        C.setAttribute("y2", Af[11]);
        U.setAttribute("x", Af[12]);
        U.setAttribute("y", Af[13]);
        U.textContent = Ae.toString();
        q.setAttribute("moptid", "mh");
        q.setAttribute("moptvalexp", "VAL");
        q.setAttribute("moptidbelongtoobj", G);
        $("#" + G).html(J);
        break;
    case mDrawFlag_Custom_qj_tm:
        var S, T, F, Ab, Ah, Ai, o, p;
        S = Number(frameXPixel) + Number(O);
        T = Number(frameYPixel);
        F = Number(frameXPixel) + Number(V) + Number(O);
        Ab = Number(frameYPixel);
        Ah = Number(frameXPixel) + Number(V) + Number(O);
        Ai = Number(frameYPixel) + Number(I);
        o = Number(frameXPixel) + Number(O);
        p = Number(frameYPixel) + Number(I);
        $("#" + A)[0].parentNode.appendChild(Al);
        var J = $("#" + G).html();
        J = J + "<g><rect id='" + G + "_r' x='" + (Number(S)) + "' y='" + (Number(T) - 2) + "' width='" + (Number(F) - Number(S)) + "' height='" + (Number(Ai) - Number(Ab)) + "' stroke='#000000' stroke-width='0px' fill='white' pointer-events='all'/></g>";
        J = J + "<g><rect id='" + G + "_rl' x='" + (Number(S)) + "' y='" + Number(T) + "' width='" + mDrawThickFrame + "' height='" + (Number(p) - Number(T)) + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
        J = J + "<g><rect id='" + G + "_rr' x='" + (Number(F) - Number(mDrawThickFrame)) + "' y='" + Number(Ab) + "' width='" + mDrawThickFrame + "' height='" + (Number(Ai) - Number(Ab)) + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
        J = J + "<g><rect id='" + G + "_rb' x='" + Number(o) + "' y='" + (Number(p) - Number(mDrawThickFrame)) + "' width='" + (Number(Ah) - Number(o)) + "' height='" + mDrawThickFrame + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
        var u = "";
        u = u + "<g>";
        u = u + "<line id='" + G + "_l1' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame)) + "' y1='" + (Number(T)) + "' x2='" + (Number(S) + Number(mDrawThickFrame)) + "' y2='" + (Number(p) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l2' stroke='black' stroke-width='1' x1='" + (Number(F) - Number(mDrawThickFrame)) + "' y1='" + (Number(T)) + "' x2='" + (Number(F) - Number(mDrawThickFrame)) + "' y2='" + (Number(p) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l3' stroke='black' stroke-width='1' x1='" + (Number(o) + Number(mDrawThickFrame)) + "' y1='" + (Number(p) - Number(mDrawThickFrame)) + "' x2='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l4' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T) + Number(mDrawThickFrame)) + "' x2='" + (Number(S)) + "' y2='" + (Number(p)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l5' stroke='black' stroke-width='1' x1='" + (Number(F)) + "' y1='" + (Number(T) + Number(mDrawThickFrame)) + "' x2='" + (Number(F)) + "' y2='" + (Number(p)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l6' stroke='black' stroke-width='1' x1='" + (Number(o)) + "' y1='" + (Number(p)) + "' x2='" + (Number(Ah)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l7' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T)) + "' x2='" + (Number(S) + Number(mDrawThickFrame)) + "' y2='" + (Number(T)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l8' stroke='black' stroke-width='1' x1='" + (Number(F) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ab)) + "' x2='" + (Number(F)) + "' y2='" + (Number(Ab)) + "' pointer-events='all'/>";
        switch (Q) {
        case "45":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame)) + "' y1='" + (Number(T)) + "' x2='" + (Number(S)) + "' y2='" + (Number(T) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (Number(o) + Number(mDrawThickFrame)) + "' y1='" + (Number(p) - Number(mDrawThickFrame)) + "' x2='" + (Number(o)) + "' y2='" + (Number(p)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj3' stroke='black' stroke-width='1' x1='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ai) - Number(mDrawThickFrame)) + "' x2='" + (Number(Ah)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj4' stroke='black' stroke-width='1' x1='" + (Number(F) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ab)) + "' x2='" + (Number(F)) + "' y2='" + (Number(Ab) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            break;
        case "H":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame)) + "' y1='" + (Number(T) + Number(mDrawThickFrame)) + "' x2='" + (Number(S)) + "' y2='" + (Number(T) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (Number(o) + Number(mDrawThickFrame)) + "' y1='" + (Number(p) - Number(mDrawThickFrame)) + "' x2='" + (Number(o)) + "' y2='" + (Number(p)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj3' stroke='black' stroke-width='1' x1='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ai) - Number(mDrawThickFrame)) + "' x2='" + (Number(Ah)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj4' stroke='black' stroke-width='1' x1='" + (Number(F) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ab) + Number(mDrawThickFrame)) + "' x2='" + (Number(F)) + "' y2='" + (Number(Ab) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            break;
        case "V":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T)) + "' x2='" + (Number(S)) + "' y2='" + (Number(T) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (Number(o) + Number(mDrawThickFrame)) + "' y1='" + (Number(p) - Number(mDrawThickFrame)) + "' x2='" + (Number(o)) + "' y2='" + (Number(p)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj3' stroke='black' stroke-width='1' x1='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ai) - Number(mDrawThickFrame)) + "' x2='" + (Number(Ah)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj4' stroke='black' stroke-width='1' x1='" + (Number(F)) + "' y1='" + (Number(Ab)) + "' x2='" + (Number(F)) + "' y2='" + (Number(Ab) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            break
        }
        u = u + "</g>";
        J = J + u;
        if (N == "Y") {
            var e = "<g>";
            e = e + "<g><rect id='" + G + "_ytl' x='" + (Number(S) - Number(mDrawThickYt) - 1) + "' y='" + (Number(T) + Number(mDrawThickFrame) + 1) + "' width='" + mDrawThickYt + "' height='" + (Number(p) - Number(T) - Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
            e = e + "<g><rect id='" + G + "_ytr' x='" + (Number(F) + 1) + "' y='" + (Number(T) + Number(mDrawThickFrame) + 1) + "' width='" + mDrawThickYt + "' height='" + (Number(p) - Number(T) - Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
            e = e + "<g><rect id='" + G + "_ytb' x='" + (Number(o) - Number(mDrawThickYt) - 1) + "' y='" + (Number(p) + 1) + "' width='" + (Number(Ah) - Number(o) + 2 * Number(mDrawThickYt)) + "' height='" + mDrawThickYt + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
            e = e + "<line id='" + G + "_ytll' stroke='black' stroke-width='1' x1='" + (Number(S) - Number(mDrawThickYt)) + "' y1='" + (Number(Ab) + Number(mDrawThickFrame) + Number(mDrawThickYt) - 1) + "' x2='" + (Number(S) - Number(mDrawThickYt)) + "' y2='" + (Number(p) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
            e = e + "<line id='" + G + "_ytrr' stroke='black' stroke-width='1' x1='" + (Number(F) + Number(mDrawThickYt)) + "' y1='" + (Number(Ab) + Number(mDrawThickFrame) + Number(mDrawThickYt) - 1) + "' x2='" + (Number(F) + Number(mDrawThickYt)) + "' y2='" + (Number(Ai) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
            e = e + "<line id='" + G + "_ytbb' stroke='black' stroke-width='1' x1='" + (Number(o) - Number(mDrawThickYt)) + "' y1='" + (Number(p) + Number(mDrawThickYt)) + "' x2='" + (Number(Ah) + Number(mDrawThickYt)) + "' y2='" + (Number(Ai) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
            switch (Aa) {
            case "45":
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T) + Number(mDrawThickFrame)) + "' x2='" + (Number(S) - Number(mDrawThickYt)) + "' y2='" + (Number(T) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj2' stroke='black' stroke-width='1' x1='" + (Number(o)) + "' y1='" + (Number(p)) + "' x2='" + (Number(o) - Number(mDrawThickYt)) + "' y2='" + (Number(p) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj3' stroke='black' stroke-width='1' x1='" + (Number(Ah) + Number(mDrawThickYt)) + "' y1='" + (Number(Ai) + Number(mDrawThickYt)) + "' x2='" + (Number(Ah)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj4' stroke='black' stroke-width='1' x1='" + (Number(F) + Number(mDrawThickYt)) + "' y1='" + (Number(Ab) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' x2='" + (Number(F)) + "' y2='" + (Number(Ab) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
                break;
            case "H":
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' x2='" + (Number(S) - Number(mDrawThickYt)) + "' y2='" + (Number(T) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj2' stroke='black' stroke-width='1' x1='" + (Number(o)) + "' y1='" + (Number(p)) + "' x2='" + (Number(o) - Number(mDrawThickYt)) + "' y2='" + (Number(p) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj3' stroke='black' stroke-width='1' x1='" + (Number(Ah) + Number(mDrawThickYt)) + "' y1='" + (Number(Ai) + Number(mDrawThickYt)) + "' x2='" + (Number(Ah)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj4' stroke='black' stroke-width='1' x1='" + (Number(F) + Number(mDrawThickYt)) + "' y1='" + (Number(Ab) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' x2='" + (Number(F)) + "' y2='" + (Number(Ab) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                break;
            case "V":
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(S) - Number(mDrawThickYt)) + "' y1='" + (Number(T) + Number(mDrawThickFrame)) + "' x2='" + (Number(S) - Number(mDrawThickYt)) + "' y2='" + (Number(T) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj2' stroke='black' stroke-width='1' x1='" + (Number(o)) + "' y1='" + (Number(p)) + "' x2='" + (Number(o) - Number(mDrawThickYt)) + "' y2='" + (Number(p) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj3' stroke='black' stroke-width='1' x1='" + (Number(Ah) + Number(mDrawThickYt)) + "' y1='" + (Number(Ai) + Number(mDrawThickYt)) + "' x2='" + (Number(Ah)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj4' stroke='black' stroke-width='1' x1='" + (Number(F) + Number(mDrawThickYt)) + "' y1='" + (Number(Ab) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' x2='" + (Number(F) + Number(mDrawThickYt)) + "' y2='" + (Number(Ab) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
                break
            }
            e = e + "</g>";
            J = J + e
        }
        var l = MicroDraw_AddCustom(mDrawFlag_Custom_ruler);
        var M = MicroDraw_getRulerDataInfo(Number(S) + Number(mDrawThickFrame), Number(T) - 12, Number(F) - Number(mDrawThickFrame), Number(Ab) - 12, Ac.toString());
        var Af = M.split(",");
        var q = $("#" + l)[0];
        var E = $("#" + l + "_l1")[0];
        var D = $("#" + l + "_l2")[0];
        var C = $("#" + l + "_l3")[0];
        var U = $("#" + l + "_t")[0];
        D.setAttribute("x1", Af[0]);
        D.setAttribute("y1", Af[1]);
        D.setAttribute("x2", Af[2]);
        D.setAttribute("y2", Af[3]);
        E.setAttribute("x1", Af[4]);
        E.setAttribute("y1", Af[5]);
        E.setAttribute("x2", Af[6]);
        E.setAttribute("y2", Af[7]);
        C.setAttribute("x1", Af[8]);
        C.setAttribute("y1", Af[9]);
        C.setAttribute("x2", Af[10]);
        C.setAttribute("y2", Af[11]);
        U.setAttribute("x", Af[12]);
        U.setAttribute("y", Af[13]);
        U.textContent = Ac.toString();
        q.setAttribute("moptid", "mw");
        q.setAttribute("moptvalexp", "VAL");
        q.setAttribute("moptidbelongtoobj", G);
        var l = MicroDraw_AddCustom(mDrawFlag_Custom_ruler);
        var M = MicroDraw_getRulerDataInfo(Number(S) + Number(mDrawThickFrame) + 12, Number(T), Number(o) + Number(mDrawThickFrame) + 12, Number(p) - Number(mDrawThickFrame), Ae.toString());
        var Af = M.split(",");
        var q = $("#" + l)[0];
        var E = $("#" + l + "_l1")[0];
        var D = $("#" + l + "_l2")[0];
        var C = $("#" + l + "_l3")[0];
        var U = $("#" + l + "_t")[0];
        D.setAttribute("x1", Af[0]);
        D.setAttribute("y1", Af[1]);
        D.setAttribute("x2", Af[2]);
        D.setAttribute("y2", Af[3]);
        E.setAttribute("x1", Af[4]);
        E.setAttribute("y1", Af[5]);
        E.setAttribute("x2", Af[6]);
        E.setAttribute("y2", Af[7]);
        C.setAttribute("x1", Af[8]);
        C.setAttribute("y1", Af[9]);
        C.setAttribute("x2", Af[10]);
        C.setAttribute("y2", Af[11]);
        U.setAttribute("x", Af[12]);
        U.setAttribute("y", Af[13]);
        U.textContent = Ae.toString();
        q.setAttribute("moptid", "mh");
        q.setAttribute("moptvalexp", "VAL");
        q.setAttribute("moptidbelongtoobj", G);
        var l = MicroDraw_AddCustom(mDrawFlag_Custom_ruler);
        var M = MicroDraw_getRulerDataInfo(Number(frameXPixel), Number(T) - 12, Number(S) + Number(mDrawThickFrame), Number(Ab) - 12, r.toString());
        var Af = M.split(",");
        var q = $("#" + l)[0];
        var E = $("#" + l + "_l1")[0];
        var D = $("#" + l + "_l2")[0];
        var C = $("#" + l + "_l3")[0];
        var U = $("#" + l + "_t")[0];
        D.setAttribute("x1", Af[0]);
        D.setAttribute("y1", Af[1]);
        D.setAttribute("x2", Af[2]);
        D.setAttribute("y2", Af[3]);
        E.setAttribute("x1", Af[4]);
        E.setAttribute("y1", Af[5]);
        E.setAttribute("x2", Af[6]);
        E.setAttribute("y2", Af[7]);
        C.setAttribute("x1", Af[8]);
        C.setAttribute("y1", Af[9]);
        C.setAttribute("x2", Af[10]);
        C.setAttribute("y2", Af[11]);
        U.setAttribute("x", Af[12]);
        U.setAttribute("y", Af[13]);
        U.textContent = r.toString();
        q.setAttribute("moptid", "mw1");
        q.setAttribute("moptvalexp", "VAL");
        q.setAttribute("moptidbelongtoobj", G);
        $("#" + G).html(J);
        break;
    case mDrawFlag_Custom_qj_bm:
        var S, T, F, Ab, Ah, Ai, o, p;
        S = Number(frameXPixel) + Number(O);
        T = Number(frameYPixel) + Number(frameHPixel) - Number(I);
        F = Number(frameXPixel) + Number(V) + Number(O);
        Ab = Number(frameYPixel) + Number(frameHPixel) - Number(I);
        Ah = Number(frameXPixel) + Number(V) + Number(O);
        Ai = Number(frameYPixel) + Number(frameHPixel);
        o = Number(frameXPixel) + Number(O);
        p = Number(frameYPixel) + Number(frameHPixel);
        $("#" + A)[0].parentNode.appendChild(Al);
        var J = $("#" + G).html();
        J = J + "<g><rect id='" + G + "_r' x='" + (Number(S)) + "' y='" + (Number(T) + 1) + "' width='" + (Number(F) - Number(S)) + "' height='" + (Number(Ai) - Number(Ab)) + "' stroke='#000000' stroke-width='0px' fill='white' pointer-events='all'/></g>";
        J = J + "<g><rect id='" + G + "_rl' x='" + (Number(S)) + "' y='" + Number(T) + "' width='" + mDrawThickFrame + "' height='" + (Number(p) - Number(T)) + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
        J = J + "<g><rect id='" + G + "_rr' x='" + (Number(F) - Number(mDrawThickFrame)) + "' y='" + Number(Ab) + "' width='" + mDrawThickFrame + "' height='" + (Number(Ai) - Number(Ab)) + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
        J = J + "<g><rect id='" + G + "_rb' x='" + Number(o) + "' y='" + (Number(T)) + "' width='" + (Number(Ah) - Number(o)) + "' height='" + mDrawThickFrame + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
        var u = "";
        u = u + "<g>";
        u = u + "<line id='" + G + "_l1' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame)) + "' y1='" + (Number(T) + Number(mDrawThickFrame)) + "' x2='" + (Number(S) + Number(mDrawThickFrame)) + "' y2='" + (Number(p)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l2' stroke='black' stroke-width='1' x1='" + (Number(F) - Number(mDrawThickFrame)) + "' y1='" + (Number(T) + Number(mDrawThickFrame)) + "' x2='" + (Number(F) - Number(mDrawThickFrame)) + "' y2='" + (Number(p)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l3' stroke='black' stroke-width='1' x1='" + (Number(o) + Number(mDrawThickFrame)) + "' y1='" + (Number(T) + Number(mDrawThickFrame)) + "' x2='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ab) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l4' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T)) + "' x2='" + (Number(S)) + "' y2='" + (Number(p) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l5' stroke='black' stroke-width='1' x1='" + (Number(F)) + "' y1='" + (Number(T)) + "' x2='" + (Number(F)) + "' y2='" + (Number(p) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l6' stroke='black' stroke-width='1' x1='" + (Number(o)) + "' y1='" + (Number(T)) + "' x2='" + (Number(Ah)) + "' y2='" + (Number(Ab)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l7' stroke='black' stroke-width='1' x1='" + (Number(o)) + "' y1='" + (Number(p)) + "' x2='" + (Number(o) + Number(mDrawThickFrame)) + "' y2='" + (Number(p)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l8' stroke='black' stroke-width='1' x1='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ai)) + "' x2='" + (Number(Ah)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
        switch (Q) {
        case "45":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (Number(o) + Number(mDrawThickFrame)) + "' y1='" + (Number(p)) + "' x2='" + (Number(o)) + "' y2='" + (Number(p) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame)) + "' y1='" + (Number(T) + Number(mDrawThickFrame)) + "' x2='" + (Number(S)) + "' y2='" + (Number(T)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj3' stroke='black' stroke-width='1' x1='" + (Number(F) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ab) + Number(mDrawThickFrame)) + "' x2='" + (Number(F)) + "' y2='" + (Number(Ab)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj4' stroke='black' stroke-width='1' x1='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ai)) + "' x2='" + (Number(Ah)) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            break;
        case "H":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (Number(o) + Number(mDrawThickFrame)) + "' y1='" + (Number(p) - Number(mDrawThickFrame)) + "' x2='" + (Number(o)) + "' y2='" + (Number(p) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame)) + "' y1='" + (Number(T) + Number(mDrawThickFrame)) + "' x2='" + (Number(S)) + "' y2='" + (Number(T)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj3' stroke='black' stroke-width='1' x1='" + (Number(F) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ab) + Number(mDrawThickFrame)) + "' x2='" + (Number(F)) + "' y2='" + (Number(Ab)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj4' stroke='black' stroke-width='1' x1='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ai) - Number(mDrawThickFrame)) + "' x2='" + (Number(Ah)) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            break;
        case "V":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (Number(o)) + "' y1='" + (Number(p)) + "' x2='" + (Number(o)) + "' y2='" + (Number(p) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame)) + "' y1='" + (Number(T) + Number(mDrawThickFrame)) + "' x2='" + (Number(S)) + "' y2='" + (Number(T)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj3' stroke='black' stroke-width='1' x1='" + (Number(F) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ab) + Number(mDrawThickFrame)) + "' x2='" + (Number(F)) + "' y2='" + (Number(Ab)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj4' stroke='black' stroke-width='1' x1='" + (Number(Ah)) + "' y1='" + (Number(Ai)) + "' x2='" + (Number(Ah)) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            break
        }
        u = u + "</g>";
        J = J + u;
        if (N == "Y") {
            var e = "<g>";
            e = e + "<g><rect id='" + G + "_ytl' x='" + (Number(S) - Number(mDrawThickYt) - 1) + "' y='" + (Number(T) - Number(mDrawThickYt) - 1) + "' width='" + mDrawThickYt + "' height='" + (Number(p) - Number(T) - Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
            e = e + "<g><rect id='" + G + "_ytr' x='" + (Number(F) + 1) + "' y='" + (Number(T) - Number(mDrawThickYt) - 1) + "' width='" + mDrawThickYt + "' height='" + (Number(p) - Number(T) - Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
            e = e + "<g><rect id='" + G + "_ytb' x='" + (Number(o) - Number(mDrawThickYt) - 1) + "' y='" + (Number(T) - Number(mDrawThickYt) - 1) + "' width='" + (Number(Ah) - Number(o) + 2 * Number(mDrawThickYt)) + "' height='" + mDrawThickYt + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
            e = e + "<line id='" + G + "_ytll' stroke='black' stroke-width='1' x1='" + (Number(S) - Number(mDrawThickYt)) + "' y1='" + (Number(Ab) - Number(mDrawThickYt)) + "' x2='" + (Number(S) - Number(mDrawThickYt)) + "' y2='" + (Number(p) - Number(mDrawThickFrame) - Number(mDrawThickYt) + 1) + "' pointer-events='all'/>";
            e = e + "<line id='" + G + "_ytrr' stroke='black' stroke-width='1' x1='" + (Number(F) + Number(mDrawThickYt)) + "' y1='" + (Number(Ab) - Number(mDrawThickYt) - 1) + "' x2='" + (Number(F) + Number(mDrawThickYt)) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame) - Number(mDrawThickYt) + 1) + "' pointer-events='all'/>";
            e = e + "<line id='" + G + "_ytbb' stroke='black' stroke-width='1' x1='" + (Number(o) - Number(mDrawThickYt)) + "' y1='" + (Number(T) - Number(mDrawThickYt)) + "' x2='" + (Number(Ah) + Number(mDrawThickYt)) + "' y2='" + (Number(Ab) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
            switch (Aa) {
            case "45":
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(o)) + "' y1='" + (Number(p) - Number(mDrawThickFrame)) + "' x2='" + (Number(o) - Number(mDrawThickYt)) + "' y2='" + (Number(p) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj2' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T)) + "' x2='" + (Number(S) - Number(mDrawThickYt)) + "' y2='" + (Number(T) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj3' stroke='black' stroke-width='1' x1='" + (Number(F)) + "' y1='" + (Number(Ab)) + "' x2='" + (Number(F) + Number(mDrawThickYt)) + "' y2='" + (Number(Ab) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj4' stroke='black' stroke-width='1' x1='" + (Number(Ah)) + "' y1='" + (Number(Ai) - Number(mDrawThickFrame)) + "' x2='" + (Number(Ah) + Number(mDrawThickYt)) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                break;
            case "H":
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(o)) + "' y1='" + (Number(p) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' x2='" + (Number(o) - Number(mDrawThickYt)) + "' y2='" + (Number(p) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj2' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T)) + "' x2='" + (Number(S) - Number(mDrawThickYt)) + "' y2='" + (Number(T) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj3' stroke='black' stroke-width='1' x1='" + (Number(F)) + "' y1='" + (Number(Ab)) + "' x2='" + (Number(F) + Number(mDrawThickYt)) + "' y2='" + (Number(Ab) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj4' stroke='black' stroke-width='1' x1='" + (Number(Ah)) + "' y1='" + (Number(Ai) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' x2='" + (Number(Ah) + Number(mDrawThickYt)) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                break;
            case "V":
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(o) - Number(mDrawThickYt)) + "' y1='" + (Number(p) - Number(mDrawThickFrame)) + "' x2='" + (Number(o) - Number(mDrawThickYt)) + "' y2='" + (Number(p) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj2' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T)) + "' x2='" + (Number(S) - Number(mDrawThickYt)) + "' y2='" + (Number(T) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj3' stroke='black' stroke-width='1' x1='" + (Number(F)) + "' y1='" + (Number(Ab)) + "' x2='" + (Number(F) + Number(mDrawThickYt)) + "' y2='" + (Number(Ab) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj4' stroke='black' stroke-width='1' x1='" + (Number(Ah) + Number(mDrawThickYt)) + "' y1='" + (Number(Ai) - Number(mDrawThickFrame)) + "' x2='" + (Number(Ah) + Number(mDrawThickYt)) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                break
            }
            e = e + "</g>";
            J = J + e
        }
        var l = MicroDraw_AddCustom(mDrawFlag_Custom_ruler);
        var M = MicroDraw_getRulerDataInfo(Number(S) + Number(mDrawThickFrame), Number(p) + 20, Number(F) - Number(mDrawThickFrame), Number(p) + 20, Ac.toString());
        var Af = M.split(",");
        var q = $("#" + l)[0];
        var E = $("#" + l + "_l1")[0];
        var D = $("#" + l + "_l2")[0];
        var C = $("#" + l + "_l3")[0];
        var U = $("#" + l + "_t")[0];
        D.setAttribute("x1", Af[0]);
        D.setAttribute("y1", Af[1]);
        D.setAttribute("x2", Af[2]);
        D.setAttribute("y2", Af[3]);
        E.setAttribute("x1", Af[4]);
        E.setAttribute("y1", Af[5]);
        E.setAttribute("x2", Af[6]);
        E.setAttribute("y2", Af[7]);
        C.setAttribute("x1", Af[8]);
        C.setAttribute("y1", Af[9]);
        C.setAttribute("x2", Af[10]);
        C.setAttribute("y2", Af[11]);
        U.setAttribute("x", Af[12]);
        U.setAttribute("y", Af[13]);
        U.textContent = Ac.toString();
        q.setAttribute("moptid", "mw");
        q.setAttribute("moptvalexp", "VAL");
        q.setAttribute("moptidbelongtoobj", G);
        var l = MicroDraw_AddCustom(mDrawFlag_Custom_ruler);
        var M = MicroDraw_getRulerDataInfo(Number(S) + Number(mDrawThickFrame) + 12, Number(T) + Number(mDrawThickFrame), Number(o) + Number(mDrawThickFrame) + 12, Number(p), Ae.toString());
        var Af = M.split(",");
        var q = $("#" + l)[0];
        var E = $("#" + l + "_l1")[0];
        var D = $("#" + l + "_l2")[0];
        var C = $("#" + l + "_l3")[0];
        var U = $("#" + l + "_t")[0];
        D.setAttribute("x1", Af[0]);
        D.setAttribute("y1", Af[1]);
        D.setAttribute("x2", Af[2]);
        D.setAttribute("y2", Af[3]);
        E.setAttribute("x1", Af[4]);
        E.setAttribute("y1", Af[5]);
        E.setAttribute("x2", Af[6]);
        E.setAttribute("y2", Af[7]);
        C.setAttribute("x1", Af[8]);
        C.setAttribute("y1", Af[9]);
        C.setAttribute("x2", Af[10]);
        C.setAttribute("y2", Af[11]);
        U.setAttribute("x", Af[12]);
        U.setAttribute("y", Af[13]);
        U.textContent = Ae.toString();
        q.setAttribute("moptid", "mh");
        q.setAttribute("moptvalexp", "VAL");
        q.setAttribute("moptidbelongtoobj", G);
        var l = MicroDraw_AddCustom(mDrawFlag_Custom_ruler);
        var M = MicroDraw_getRulerDataInfo(Number(frameXPixel), Number(p) + 20, Number(S) + Number(mDrawThickFrame), Number(p) + 20, r.toString());
        var Af = M.split(",");
        var q = $("#" + l)[0];
        var E = $("#" + l + "_l1")[0];
        var D = $("#" + l + "_l2")[0];
        var C = $("#" + l + "_l3")[0];
        var U = $("#" + l + "_t")[0];
        D.setAttribute("x1", Af[0]);
        D.setAttribute("y1", Af[1]);
        D.setAttribute("x2", Af[2]);
        D.setAttribute("y2", Af[3]);
        E.setAttribute("x1", Af[4]);
        E.setAttribute("y1", Af[5]);
        E.setAttribute("x2", Af[6]);
        E.setAttribute("y2", Af[7]);
        C.setAttribute("x1", Af[8]);
        C.setAttribute("y1", Af[9]);
        C.setAttribute("x2", Af[10]);
        C.setAttribute("y2", Af[11]);
        U.setAttribute("x", Af[12]);
        U.setAttribute("y", Af[13]);
        U.textContent = r.toString();
        q.setAttribute("moptid", "mw1");
        q.setAttribute("moptvalexp", "VAL");
        q.setAttribute("moptidbelongtoobj", G);
        $("#" + G).html(J);
        break;
    case mDrawFlag_Custom_qj_lm:
        var S, T, F, Ab, Ah, Ai, o, p;
        S = Number(frameXPixel);
        T = Number(frameYPixel) + Number(X);
        F = Number(frameXPixel) + Number(V);
        Ab = Number(frameYPixel) + Number(X);
        Ah = Number(frameXPixel) + Number(V);
        Ai = Number(frameYPixel) + Number(X) + Number(I);
        o = Number(frameXPixel);
        p = Number(frameYPixel) + Number(X) + Number(I);
        $("#" + A)[0].parentNode.appendChild(Al);
        var J = $("#" + G).html();
        J = J + "<g><rect id='" + G + "_r' x='" + (Number(S) - 1) + "' y='" + (Number(T)) + "' width='" + (Number(F) - Number(S)) + "' height='" + (Number(Ai) - Number(Ab)) + "' stroke='#000000' stroke-width='0px' fill='white' pointer-events='all'/></g>";
        J = J + "<g><rect id='" + G + "_lr' x='" + (Number(F) - Number(mDrawThickFrame)) + "' y='" + Number(Ab) + "' width='" + mDrawThickFrame + "' height='" + (Number(Ai) - Number(Ab)) + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
        J = J + "<g><rect id='" + G + "_lt' x='" + Number(o) + "' y='" + (Number(T)) + "' width='" + (Number(Ah) - Number(o)) + "' height='" + mDrawThickFrame + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
        J = J + "<g><rect id='" + G + "_lb' x='" + Number(o) + "' y='" + (Number(p) - Number(mDrawThickFrame)) + "' width='" + (Number(Ah) - Number(o)) + "' height='" + mDrawThickFrame + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
        var u = "";
        u = u + "<g>";
        u = u + "<line id='" + G + "_l1' stroke='black' stroke-width='1' x1='" + (Number(F) - Number(mDrawThickFrame)) + "' y1='" + (Number(T) + Number(mDrawThickFrame)) + "' x2='" + (Number(F) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l2' stroke='black' stroke-width='1' x1='" + (Number(F)) + "' y1='" + (Number(Ab)) + "' x2='" + (Number(Ah)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l3' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame)) + "' y1='" + (Number(T)) + "' x2='" + (Number(F)) + "' y2='" + (Number(Ab)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l4' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame)) + "' y1='" + (Number(p)) + "' x2='" + (Number(F)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l5' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T) + Number(mDrawThickFrame)) + "' x2='" + (Number(F) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ab) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l6' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(p) - Number(mDrawThickFrame)) + "' x2='" + (Number(F) - Number(mDrawThickFrame)) + "' y2='" + (Number(p) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l7' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T)) + "' x2='" + (Number(S)) + "' y2='" + (Number(T) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l8' stroke='black' stroke-width='1' x1='" + (Number(o)) + "' y1='" + (Number(p)) + "' x2='" + (Number(o)) + "' y2='" + (Number(p) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        switch (Q) {
        case "45":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T + Number(mDrawThickFrame))) + "' x2='" + (Number(S) + Number(mDrawThickFrame)) + "' y2='" + (Number(T)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (Number(F)) + "' y1='" + (Number(Ab)) + "' x2='" + (Number(F) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ab) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj3' stroke='black' stroke-width='1' x1='" + (Number(Ah)) + "' y1='" + (Number(Ai)) + "' x2='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj4' stroke='black' stroke-width='1' x1='" + (Number(o)) + "' y1='" + (Number(p) - Number(mDrawThickFrame)) + "' x2='" + (Number(o) + Number(mDrawThickFrame)) + "' y2='" + (Number(p)) + "' pointer-events='all'/>";
            break;
        case "H":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T)) + "' x2='" + (Number(S) + Number(mDrawThickFrame)) + "' y2='" + (Number(T)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (Number(F)) + "' y1='" + (Number(Ab)) + "' x2='" + (Number(F) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ab) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj3' stroke='black' stroke-width='1' x1='" + (Number(Ah)) + "' y1='" + (Number(Ai)) + "' x2='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj4' stroke='black' stroke-width='1' x1='" + (Number(o)) + "' y1='" + (Number(p)) + "' x2='" + (Number(o) + Number(mDrawThickFrame)) + "' y2='" + (Number(p)) + "' pointer-events='all'/>";
            break;
        case "V":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame)) + "' y1='" + (Number(T + Number(mDrawThickFrame))) + "' x2='" + (Number(S) + Number(mDrawThickFrame)) + "' y2='" + (Number(T)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (Number(F)) + "' y1='" + (Number(Ab)) + "' x2='" + (Number(F) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ab) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj3' stroke='black' stroke-width='1' x1='" + (Number(Ah)) + "' y1='" + (Number(Ai)) + "' x2='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj4' stroke='black' stroke-width='1' x1='" + (Number(o) + Number(mDrawThickFrame)) + "' y1='" + (Number(p) - Number(mDrawThickFrame)) + "' x2='" + (Number(o) + Number(mDrawThickFrame)) + "' y2='" + (Number(p)) + "' pointer-events='all'/>";
            break
        }
        u = u + "</g>";
        J = J + u;
        if (N == "Y") {
            var e = "<g>";
            e = e + "<g><rect id='" + G + "_ytr' x='" + (Number(F) + 1) + "' y='" + (Number(Ab) - Number(mDrawThickYt) - 1) + "' width='" + mDrawThickYt + "' height='" + (Number(p) - Number(T) + 2 * Number(mDrawThickYt)) + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
            e = e + "<g><rect id='" + G + "_ytt' x='" + (Number(S) + Number(mDrawThickFrame) + 1) + "' y='" + (Number(T) - Number(mDrawThickYt) - 1) + "' width='" + (Number(Ah) - Number(o) - Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' height='" + mDrawThickYt + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
            e = e + "<g><rect id='" + G + "_ytb' x='" + (Number(S) + Number(mDrawThickFrame) + 1) + "' y='" + (Number(p) + 1) + "' width='" + (Number(Ah) - Number(o) - Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' height='" + mDrawThickYt + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
            e = e + "<line id='" + G + "_ytrr' stroke='black' stroke-width='1' x1='" + (Number(F) + Number(mDrawThickYt)) + "' y1='" + (Number(Ab) - Number(mDrawThickYt) - 1) + "' x2='" + (Number(F) + Number(mDrawThickYt)) + "' y2='" + (Number(Ai) + Number(mDrawThickYt) + 1) + "' pointer-events='all'/>";
            e = e + "<line id='" + G + "_ytbt' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' y1='" + (Number(T) - Number(mDrawThickYt)) + "' x2='" + (Number(F) + Number(mDrawThickYt)) + "' y2='" + (Number(Ab) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
            e = e + "<line id='" + G + "_ytbb' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' y1='" + (Number(p) + Number(mDrawThickYt)) + "' x2='" + (Number(F) + Number(mDrawThickYt)) + "' y2='" + (Number(p) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
            switch (Aa) {
            case "45":
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame)) + "' y1='" + (Number(T)) + "' x2='" + (Number(S) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' y2='" + (Number(T) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj2' stroke='black' stroke-width='1' x1='" + (Number(F)) + "' y1='" + (Number(Ab)) + "' x2='" + (Number(F) + Number(mDrawThickYt)) + "' y2='" + (Number(Ab) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj3' stroke='black' stroke-width='1' x1='" + (Number(Ah)) + "' y1='" + (Number(Ai)) + "' x2='" + (Number(Ah) + Number(mDrawThickYt)) + "' y2='" + (Number(Ai) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj4' stroke='black' stroke-width='1' x1='" + (Number(o) + Number(mDrawThickFrame)) + "' y1='" + (Number(p)) + "' x2='" + (Number(o) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' y2='" + (Number(p) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                break;
            case "H":
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame)) + "' y1='" + (Number(T) - Number(mDrawThickYt)) + "' x2='" + (Number(S) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' y2='" + (Number(T) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj2' stroke='black' stroke-width='1' x1='" + (Number(F)) + "' y1='" + (Number(Ab)) + "' x2='" + (Number(F) + Number(mDrawThickYt)) + "' y2='" + (Number(Ab) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj3' stroke='black' stroke-width='1' x1='" + (Number(Ah)) + "' y1='" + (Number(Ai)) + "' x2='" + (Number(Ah) + Number(mDrawThickYt)) + "' y2='" + (Number(Ai) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj4' stroke='black' stroke-width='1' x1='" + (Number(o) + Number(mDrawThickFrame)) + "' y1='" + (Number(p) + Number(mDrawThickYt)) + "' x2='" + (Number(o) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' y2='" + (Number(p) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                break;
            case "V":
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' y1='" + (Number(T)) + "' x2='" + (Number(S) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' y2='" + (Number(T) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj2' stroke='black' stroke-width='1' x1='" + (Number(F)) + "' y1='" + (Number(Ab)) + "' x2='" + (Number(F) + Number(mDrawThickYt)) + "' y2='" + (Number(Ab) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj3' stroke='black' stroke-width='1' x1='" + (Number(Ah)) + "' y1='" + (Number(Ai)) + "' x2='" + (Number(Ah) + Number(mDrawThickYt)) + "' y2='" + (Number(Ai) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj4' stroke='black' stroke-width='1' x1='" + (Number(o) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' y1='" + (Number(p)) + "' x2='" + (Number(o) + Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' y2='" + (Number(p) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                break
            }
            e = e + "</g>";
            J = J + e
        }
        var l = MicroDraw_AddCustom(mDrawFlag_Custom_ruler);
        var M = MicroDraw_getRulerDataInfo(Number(o), Number(p) - Number(mDrawThickFrame) - 12, Number(Ah) - Number(mDrawThickFrame), Number(p) - Number(mDrawThickFrame) - 12, Ac.toString());
        var Af = M.split(",");
        var q = $("#" + l)[0];
        var E = $("#" + l + "_l1")[0];
        var D = $("#" + l + "_l2")[0];
        var C = $("#" + l + "_l3")[0];
        var U = $("#" + l + "_t")[0];
        D.setAttribute("x1", Af[0]);
        D.setAttribute("y1", Af[1]);
        D.setAttribute("x2", Af[2]);
        D.setAttribute("y2", Af[3]);
        E.setAttribute("x1", Af[4]);
        E.setAttribute("y1", Af[5]);
        E.setAttribute("x2", Af[6]);
        E.setAttribute("y2", Af[7]);
        C.setAttribute("x1", Af[8]);
        C.setAttribute("y1", Af[9]);
        C.setAttribute("x2", Af[10]);
        C.setAttribute("y2", Af[11]);
        U.setAttribute("x", Af[12]);
        U.setAttribute("y", Af[13]);
        U.textContent = Ac.toString();
        q.setAttribute("moptid", "mw");
        q.setAttribute("moptvalexp", "VAL");
        q.setAttribute("moptidbelongtoobj", G);
        var l = MicroDraw_AddCustom(mDrawFlag_Custom_ruler);
        var M = MicroDraw_getRulerDataInfo(Number(S) - 20, Number(T) + Number(mDrawThickFrame), Number(o) - 20, Number(p) - Number(mDrawThickFrame), Ae.toString());
        var Af = M.split(",");
        var q = $("#" + l)[0];
        var E = $("#" + l + "_l1")[0];
        var D = $("#" + l + "_l2")[0];
        var C = $("#" + l + "_l3")[0];
        var U = $("#" + l + "_t")[0];
        D.setAttribute("x1", Af[0]);
        D.setAttribute("y1", Af[1]);
        D.setAttribute("x2", Af[2]);
        D.setAttribute("y2", Af[3]);
        E.setAttribute("x1", Af[4]);
        E.setAttribute("y1", Af[5]);
        E.setAttribute("x2", Af[6]);
        E.setAttribute("y2", Af[7]);
        C.setAttribute("x1", Af[8]);
        C.setAttribute("y1", Af[9]);
        C.setAttribute("x2", Af[10]);
        C.setAttribute("y2", Af[11]);
        U.setAttribute("x", Af[12]);
        U.setAttribute("y", Af[13]);
        U.textContent = Ae.toString();
        q.setAttribute("moptid", "mh");
        q.setAttribute("moptvalexp", "VAL");
        q.setAttribute("moptidbelongtoobj", G);
        var l = MicroDraw_AddCustom(mDrawFlag_Custom_ruler);
        var M = MicroDraw_getRulerDataInfo(Number(S) - 20, Number(frameYPixel), Number(o) - 20, Number(T) + Number(mDrawThickFrame), t.toString());
        var Af = M.split(",");
        var q = $("#" + l)[0];
        var E = $("#" + l + "_l1")[0];
        var D = $("#" + l + "_l2")[0];
        var C = $("#" + l + "_l3")[0];
        var U = $("#" + l + "_t")[0];
        D.setAttribute("x1", Af[0]);
        D.setAttribute("y1", Af[1]);
        D.setAttribute("x2", Af[2]);
        D.setAttribute("y2", Af[3]);
        E.setAttribute("x1", Af[4]);
        E.setAttribute("y1", Af[5]);
        E.setAttribute("x2", Af[6]);
        E.setAttribute("y2", Af[7]);
        C.setAttribute("x1", Af[8]);
        C.setAttribute("y1", Af[9]);
        C.setAttribute("x2", Af[10]);
        C.setAttribute("y2", Af[11]);
        U.setAttribute("x", Af[12]);
        U.setAttribute("y", Af[13]);
        U.textContent = t.toString();
        q.setAttribute("moptid", "mh1");
        q.setAttribute("moptvalexp", "VAL");
        q.setAttribute("moptidbelongtoobj", G);
        $("#" + G).html(J);
        break;
    case mDrawFlag_Custom_qj_rm:
        var S, T, F, Ab, Ah, Ai, o, p;
        S = Number(frameXPixel) + Number(frameWPixel) - Number(V);
        T = Number(frameYPixel) + Number(X);
        F = Number(frameXPixel) + Number(frameWPixel);
        Ab = Number(frameYPixel) + Number(X);
        Ah = Number(frameXPixel) + Number(frameWPixel);
        Ai = Number(frameYPixel) + Number(X) + Number(I);
        o = Number(frameXPixel) + Number(frameWPixel) - Number(V);
        p = Number(frameYPixel) + Number(X) + Number(I);
        $("#" + A)[0].parentNode.appendChild(Al);
        var J = $("#" + G).html();
        J = J + "<g><rect id='" + G + "_r' x='" + (Number(S) + 1) + "' y='" + (Number(T)) + "' width='" + (Number(F) - Number(S)) + "' height='" + (Number(Ai) - Number(Ab)) + "' stroke='#000000' stroke-width='0px' fill='white' pointer-events='all'/></g>";
        J = J + "<g><rect id='" + G + "_lr' x='" + (Number(S)) + "' y='" + Number(Ab) + "' width='" + mDrawThickFrame + "' height='" + (Number(Ai) - Number(Ab)) + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
        J = J + "<g><rect id='" + G + "_lt' x='" + Number(o) + "' y='" + (Number(T)) + "' width='" + (Number(Ah) - Number(o)) + "' height='" + mDrawThickFrame + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
        J = J + "<g><rect id='" + G + "_lb' x='" + Number(o) + "' y='" + (Number(p) - Number(mDrawThickFrame)) + "' width='" + (Number(Ah) - Number(o)) + "' height='" + mDrawThickFrame + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
        var u = "";
        u = u + "<g>";
        u = u + "<line id='" + G + "_l1' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame)) + "' y1='" + (Number(T) + Number(mDrawThickFrame)) + "' x2='" + (Number(S) + Number(mDrawThickFrame)) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l2' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T)) + "' x2='" + (Number(o)) + "' y2='" + (Number(p)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l3' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T)) + "' x2='" + (Number(F) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ab)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l4' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(p)) + "' x2='" + (Number(F) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l5' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame)) + "' y1='" + (Number(T) + Number(mDrawThickFrame)) + "' x2='" + (Number(F)) + "' y2='" + (Number(Ab) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l6' stroke='black' stroke-width='1' x1='" + (Number(S) + Number(mDrawThickFrame)) + "' y1='" + (Number(Ai) - Number(mDrawThickFrame)) + "' x2='" + (Number(F)) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l7' stroke='black' stroke-width='1' x1='" + (Number(F)) + "' y1='" + (Number(Ab)) + "' x2='" + (Number(F)) + "' y2='" + (Number(Ab) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l8' stroke='black' stroke-width='1' x1='" + (Number(Ah)) + "' y1='" + (Number(Ai)) + "' x2='" + (Number(Ah)) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        switch (Q) {
        case "45":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (Number(F)) + "' y1='" + (Number(Ab) + Number(mDrawThickFrame)) + "' x2='" + (Number(F) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ab)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T)) + "' x2='" + (Number(S) + Number(mDrawThickFrame)) + "' y2='" + (Number(T) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj3' stroke='black' stroke-width='1' x1='" + (Number(o)) + "' y1='" + (Number(p)) + "' x2='" + (Number(o) + Number(mDrawThickFrame)) + "' y2='" + (Number(p) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj4' stroke='black' stroke-width='1' x1='" + (Number(Ah)) + "' y1='" + (Number(Ai) - Number(mDrawThickFrame)) + "' x2='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
            break;
        case "H":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (Number(F)) + "' y1='" + (Number(Ab)) + "' x2='" + (Number(F) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ab)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T)) + "' x2='" + (Number(S) + Number(mDrawThickFrame)) + "' y2='" + (Number(T) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj3' stroke='black' stroke-width='1' x1='" + (Number(o)) + "' y1='" + (Number(p)) + "' x2='" + (Number(o) + Number(mDrawThickFrame)) + "' y2='" + (Number(p) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj4' stroke='black' stroke-width='1' x1='" + (Number(Ah)) + "' y1='" + (Number(Ai)) + "' x2='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
            break;
        case "V":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (Number(F) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ab) + Number(mDrawThickFrame)) + "' x2='" + (Number(F) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ab)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T)) + "' x2='" + (Number(S) + Number(mDrawThickFrame)) + "' y2='" + (Number(T) + Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj3' stroke='black' stroke-width='1' x1='" + (Number(o)) + "' y1='" + (Number(p)) + "' x2='" + (Number(o) + Number(mDrawThickFrame)) + "' y2='" + (Number(p) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj4' stroke='black' stroke-width='1' x1='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ai) - Number(mDrawThickFrame)) + "' x2='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
            break
        }
        u = u + "</g>";
        J = J + u;
        if (N == "Y") {
            var e = "<g>";
            e = e + "<g><rect id='" + G + "_ytr' x='" + (Number(S) - Number(mDrawThickYt) - 1) + "' y='" + (Number(T) - Number(mDrawThickYt) - 1) + "' width='" + mDrawThickYt + "' height='" + (Number(p) - Number(T) + 2 * Number(mDrawThickYt)) + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
            e = e + "<g><rect id='" + G + "_ytt' x='" + (Number(S) - Number(mDrawThickYt) - 1) + "' y='" + (Number(T) - Number(mDrawThickYt) - 1) + "' width='" + (Number(Ah) - Number(o) - Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' height='" + mDrawThickYt + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
            e = e + "<g><rect id='" + G + "_ytb' x='" + (Number(o) - Number(mDrawThickYt) - 1) + "' y='" + (Number(p) + 1) + "' width='" + (Number(Ah) - Number(o) - Number(mDrawThickFrame) + Number(mDrawThickYt)) + "' height='" + mDrawThickYt + "' stroke='#000000' stroke-width='0px' fill='" + mDrawProductColor + "' pointer-events='all'/></g>";
            e = e + "<line id='" + G + "_ytrr' stroke='black' stroke-width='1' x1='" + (Number(S) - Number(mDrawThickYt)) + "' y1='" + (Number(T) - Number(mDrawThickYt)) + "' x2='" + (Number(o) - Number(mDrawThickYt)) + "' y2='" + (Number(p) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
            e = e + "<line id='" + G + "_ytbt' stroke='black' stroke-width='1' x1='" + (Number(S) - Number(mDrawThickYt)) + "' y1='" + (Number(T) - Number(mDrawThickYt)) + "' x2='" + (Number(F) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' y2='" + (Number(Ab) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
            e = e + "<line id='" + G + "_ytbb' stroke='black' stroke-width='1' x1='" + (Number(o) - Number(mDrawThickYt)) + "' y1='" + (Number(p) + Number(mDrawThickYt)) + "' x2='" + (Number(Ah) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' y2='" + (Number(Ai) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
            switch (Aa) {
            case "45":
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(F) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ab)) + "' x2='" + (Number(F) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' y2='" + (Number(Ab) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj2' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T)) + "' x2='" + (Number(S) - Number(mDrawThickYt)) + "' y2='" + (Number(T) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj3' stroke='black' stroke-width='1' x1='" + (Number(o)) + "' y1='" + (Number(p)) + "' x2='" + (Number(o) - Number(mDrawThickYt)) + "' y2='" + (Number(p) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj4' stroke='black' stroke-width='1' x1='" + (Number(Ah) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' y1='" + (Number(Ai) + Number(mDrawThickYt)) + "' x2='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
                break;
            case "H":
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(F) - Number(mDrawThickFrame)) + "' y1='" + (Number(Ab) - Number(mDrawThickYt)) + "' x2='" + (Number(F) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' y2='" + (Number(Ab) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj2' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T)) + "' x2='" + (Number(S) - Number(mDrawThickYt)) + "' y2='" + (Number(T) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj3' stroke='black' stroke-width='1' x1='" + (Number(o)) + "' y1='" + (Number(p)) + "' x2='" + (Number(o) - Number(mDrawThickYt)) + "' y2='" + (Number(p) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj4' stroke='black' stroke-width='1' x1='" + (Number(Ah) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' y1='" + (Number(Ai) + Number(mDrawThickYt)) + "' x2='" + (Number(Ah) - Number(mDrawThickFrame)) + "' y2='" + (Number(Ai) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                break;
            case "V":
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (Number(F) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' y1='" + (Number(Ab)) + "' x2='" + (Number(F) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' y2='" + (Number(Ab) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj2' stroke='black' stroke-width='1' x1='" + (Number(S)) + "' y1='" + (Number(T)) + "' x2='" + (Number(S) - Number(mDrawThickYt)) + "' y2='" + (Number(T) - Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj3' stroke='black' stroke-width='1' x1='" + (Number(o)) + "' y1='" + (Number(p)) + "' x2='" + (Number(o) - Number(mDrawThickYt)) + "' y2='" + (Number(p) + Number(mDrawThickYt)) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj4' stroke='black' stroke-width='1' x1='" + (Number(Ah) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' y1='" + (Number(Ai) + Number(mDrawThickYt)) + "' x2='" + (Number(Ah) - Number(mDrawThickFrame) - Number(mDrawThickYt)) + "' y2='" + (Number(Ai)) + "' pointer-events='all'/>";
                break
            }
            e = e + "</g>";
            J = J + e
        }
        var l = MicroDraw_AddCustom(mDrawFlag_Custom_ruler);
        var M = MicroDraw_getRulerDataInfo(Number(S) + Number(mDrawThickFrame), Number(T) + Number(mDrawThickFrame) + 20, Number(F), Number(Ab) + Number(mDrawThickFrame) + 20, Ac.toString());
        var Af = M.split(",");
        var q = $("#" + l)[0];
        var E = $("#" + l + "_l1")[0];
        var D = $("#" + l + "_l2")[0];
        var C = $("#" + l + "_l3")[0];
        var U = $("#" + l + "_t")[0];
        D.setAttribute("x1", Af[0]);
        D.setAttribute("y1", Af[1]);
        D.setAttribute("x2", Af[2]);
        D.setAttribute("y2", Af[3]);
        E.setAttribute("x1", Af[4]);
        E.setAttribute("y1", Af[5]);
        E.setAttribute("x2", Af[6]);
        E.setAttribute("y2", Af[7]);
        C.setAttribute("x1", Af[8]);
        C.setAttribute("y1", Af[9]);
        C.setAttribute("x2", Af[10]);
        C.setAttribute("y2", Af[11]);
        U.setAttribute("x", Af[12]);
        U.setAttribute("y", Af[13]);
        U.textContent = Ac.toString();
        q.setAttribute("moptid", "mw");
        q.setAttribute("moptvalexp", "VAL");
        q.setAttribute("moptidbelongtoobj", G);
        var l = MicroDraw_AddCustom(mDrawFlag_Custom_ruler);
        var M = MicroDraw_getRulerDataInfo(Number(F) + 20, Number(Ab) + Number(mDrawThickFrame), Number(Ah) + 20, Number(Ai) - Number(mDrawThickFrame), Ae.toString());
        var Af = M.split(",");
        var q = $("#" + l)[0];
        var E = $("#" + l + "_l1")[0];
        var D = $("#" + l + "_l2")[0];
        var C = $("#" + l + "_l3")[0];
        var U = $("#" + l + "_t")[0];
        D.setAttribute("x1", Af[0]);
        D.setAttribute("y1", Af[1]);
        D.setAttribute("x2", Af[2]);
        D.setAttribute("y2", Af[3]);
        E.setAttribute("x1", Af[4]);
        E.setAttribute("y1", Af[5]);
        E.setAttribute("x2", Af[6]);
        E.setAttribute("y2", Af[7]);
        C.setAttribute("x1", Af[8]);
        C.setAttribute("y1", Af[9]);
        C.setAttribute("x2", Af[10]);
        C.setAttribute("y2", Af[11]);
        U.setAttribute("x", Af[12]);
        U.setAttribute("y", Af[13]);
        U.textContent = Ae.toString();
        q.setAttribute("moptid", "mh");
        q.setAttribute("moptvalexp", "VAL");
        q.setAttribute("moptidbelongtoobj", G);
        var l = MicroDraw_AddCustom(mDrawFlag_Custom_ruler);
        var M = MicroDraw_getRulerDataInfo(Number(F) + 20, Number(frameYPixel), Number(Ah) + 20, Number(T) + Number(mDrawThickFrame), t.toString());
        var Af = M.split(",");
        var q = $("#" + l)[0];
        var E = $("#" + l + "_l1")[0];
        var D = $("#" + l + "_l2")[0];
        var C = $("#" + l + "_l3")[0];
        var U = $("#" + l + "_t")[0];
        D.setAttribute("x1", Af[0]);
        D.setAttribute("y1", Af[1]);
        D.setAttribute("x2", Af[2]);
        D.setAttribute("y2", Af[3]);
        E.setAttribute("x1", Af[4]);
        E.setAttribute("y1", Af[5]);
        E.setAttribute("x2", Af[6]);
        E.setAttribute("y2", Af[7]);
        C.setAttribute("x1", Af[8]);
        C.setAttribute("y1", Af[9]);
        C.setAttribute("x2", Af[10]);
        C.setAttribute("y2", Af[11]);
        U.setAttribute("x", Af[12]);
        U.setAttribute("y", Af[13]);
        U.textContent = t.toString();
        q.setAttribute("moptid", "mh1");
        q.setAttribute("moptvalexp", "VAL");
        q.setAttribute("moptidbelongtoobj", G);
        $("#" + G).html(J);
        break;
    case mDrawFlag_Custom_qj_rx:
        var S, T, F, Ab, Ah, Ai, o, p;
        S = Number(frameXPixel);
        T = Number(frameYPixel);
        F = Number(frameXPixel) + Number(frameWPixel);
        Ab = Number(frameYPixel);
        Ah = Number(frameXPixel) + Number(frameWPixel);
        Ai = Number(frameYPixel) + Number(I);
        o = Number(frameXPixel);
        p = Number(frameYPixel) + Number(mDrawThickFrame);
        $("#" + A)[0].parentNode.appendChild(Al);
        var J = $("#" + G).html();
        J = J + "<g><polygon id='" + G + "_p1' points='" + (Number(S) - 1) + "," + (Number(T) - 1) + " " + (Number(F) + 1) + "," + (Number(Ab) - 1) + " " + (Number(Ah) + 1) + "," + Number(Ai) + " " + (Number(o) - 1) + "," + Number(p) + "' fill='white' stroke='#000000' stroke-width='0px' pointer-events='all'></polygon></g>";
        J = J + "<g><polygon id='" + G + "_p2' points='" + (Number(S)) + "," + (Number(T)) + " " + (Number(Ah)) + "," + (Number(Ai) - Number(mDrawThickFrame)) + " " + (Number(Ah)) + "," + Number(Ai) + " " + (Number(S)) + "," + (Number(T) + Number(mDrawThickFrame)) + "' fill='" + mDrawProductColor + "' stroke='#000000' stroke-width='0px' pointer-events='all'></polygon></g>";
        var K = Number(mDrawThickFrame) * (Number(Ai) - Number(p)) / (Number(Ah) - Number(o));
        var s = Number(o) + Number(mDrawThickFrame);
        var n = Number(p) + Number(K);
        var m = Number(Ah) - Number(mDrawThickFrame);
        var R = Number(Ai) - Number(K);
        var u = "";
        u = u + "<g>";
        u = u + "<line id='" + G + "_l1' stroke='black' stroke-width='1' x1='" + (s) + "' y1='" + (n) + "' x2='" + (m) + "' y2='" + (R) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l2' stroke='black' stroke-width='1' x1='" + (S) + "' y1='" + (T) + "' x2='" + (o) + "' y2='" + (p) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l3' stroke='black' stroke-width='1' x1='" + (Ah) + "' y1='" + (Ai) + "' x2='" + (Ah) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l4' stroke='black' stroke-width='1' x1='" + (S) + "' y1='" + (T) + "' x2='" + (Ah) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        switch (Q) {
        case "45":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (S) + "' y1='" + (T) + "' x2='" + (s) + "' y2='" + (n) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (Ah) + "' y1='" + (Number(Ai) - Number(mDrawThickFrame)) + "' x2='" + (m) + "' y2='" + (R) + "' pointer-events='all'/>";
            break;
        case "H":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (Number(s) - Number(mDrawThickFrame)) + "' y1='" + (Number(n) - Number(K)) + "' x2='" + (s) + "' y2='" + (n) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (m) + "' y1='" + (R) + "' x2='" + (Number(m) + Number(mDrawThickFrame)) + "' y2='" + (Number(R) + Number(K)) + "' pointer-events='all'/>";
            break;
        case "V":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (s) + "' y1='" + (Number(n) - Number(mDrawThickFrame)) + "' x2='" + (s) + "' y2='" + (n) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (m) + "' y1='" + (Number(R) - Number(mDrawThickFrame)) + "' x2='" + (m) + "' y2='" + (R) + "' pointer-events='all'/>";
            break
        }
        u = u + "</g>";
        J = J + u;
        if (N == "Y") {
            var e = "<g>";
            var Aj = Number(n) - Number(T);
            var Ag = Number(s) - Number(S);
            var Z = Math.sqrt(Aj * Aj + Ag * Ag);
            var W = Math.asin(Ag / Z) * 180 / Math.PI;
            var Ad = (Ag + Number(mDrawThickYt)) / Math.sin(Number(W) * Math.PI / 180) - Number(Z);
            var L = Number(mDrawThickYt);
            var f = Math.sqrt(Ad * Ad - L * L);
            var B = Number(s) + Number(mDrawThickYt);
            var P = Number(n) + f;
            var Aj = Number(R) - (Number(Ai) - Number(mDrawThickFrame));
            var Ag = Number(mDrawThickFrame);
            var Z = Math.sqrt(Aj * Aj + Ag * Ag);
            var W = Math.asin(Ag / Z) * 180 / Math.PI;
            var Ad = (Ag + Number(mDrawThickYt)) / Math.sin(Number(W) * Math.PI / 180) - Number(Z);
            var L = Number(mDrawThickYt);
            var f = Math.sqrt(Ad * Ad - L * L);
            var Ak = Number(m) - Number(mDrawThickYt);
            var H = Number(R) + f;
            e = e + "<g><polygon id='" + G + "_pyt' points='" + (Number(s)) + "," + (Number(n) + 1) + " " + (Number(m)) + "," + (Number(R) + 1) + " " + (Number(Ak)) + "," + (Number(H)) + " " + (Number(B)) + "," + (Number(P)) + "' fill='" + mDrawProductColor + "' stroke='#000000' stroke-width='0px' pointer-events='all'></polygon></g>";
            e = e + "<line id='" + G + "_ytl1' stroke='black' stroke-width='1' x1='" + (B) + "' y1='" + (P) + "' x2='" + (Ak) + "' y2='" + (H) + "' pointer-events='all'/>";
            switch (Aa) {
            case "45":
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (s) + "' y1='" + (n) + "' x2='" + (B) + "' y2='" + (P) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj2' stroke='black' stroke-width='1' x1='" + (m) + "' y1='" + (R) + "' x2='" + (Ak) + "' y2='" + (H) + "' pointer-events='all'/>";
                break;
            case "H":
                break;
            case "V":
                break
            }
            e = e + "</g>";
            J = J + e
        }
        var l = MicroDraw_AddCustom(mDrawFlag_Custom_ruler);
        var M = MicroDraw_getRulerDataInfo(Number(F) + 12, Number(Ab), Number(Ah) + 12, Number(Ai) - Number(mDrawThickFrame), Ae.toString());
        var Af = M.split(",");
        var q = $("#" + l)[0];
        var E = $("#" + l + "_l1")[0];
        var D = $("#" + l + "_l2")[0];
        var C = $("#" + l + "_l3")[0];
        var U = $("#" + l + "_t")[0];
        D.setAttribute("x1", Af[0]);
        D.setAttribute("y1", Af[1]);
        D.setAttribute("x2", Af[2]);
        D.setAttribute("y2", Af[3]);
        E.setAttribute("x1", Af[4]);
        E.setAttribute("y1", Af[5]);
        E.setAttribute("x2", Af[6]);
        E.setAttribute("y2", Af[7]);
        C.setAttribute("x1", Af[8]);
        C.setAttribute("y1", Af[9]);
        C.setAttribute("x2", Af[10]);
        C.setAttribute("y2", Af[11]);
        U.setAttribute("x", Af[12]);
        U.setAttribute("y", Af[13]);
        U.textContent = Ae.toString();
        q.setAttribute("moptid", "mh");
        q.setAttribute("moptvalexp", "VAL");
        q.setAttribute("moptidbelongtoobj", G);
        $("#" + G).html(J);
        break;
    case mDrawFlag_Custom_qj_lx:
        var S, T, F, Ab, Ah, Ai, o, p;
        S = Number(frameXPixel);
        T = Number(frameYPixel);
        F = Number(frameXPixel) + Number(frameWPixel);
        Ab = Number(frameYPixel);
        Ah = Number(frameXPixel) + Number(frameWPixel);
        Ai = Number(frameYPixel) + Number(mDrawThickFrame);
        o = Number(frameXPixel);
        p = Number(frameYPixel) + Number(I);
        $("#" + A)[0].parentNode.appendChild(Al);
        var J = $("#" + G).html();
        J = J + "<g><polygon id='" + G + "_p1' points='" + (Number(S) - 1) + "," + (Number(T) - 1) + " " + (Number(F) + 1) + "," + (Number(Ab) - 1) + " " + (Number(Ah) + 1) + "," + Number(Ai) + " " + (Number(o) - 1) + "," + Number(p) + "' fill='white' stroke='#000000' stroke-width='0px' pointer-events='all'></polygon></g>";
        J = J + "<g><polygon id='" + G + "_p2' points='" + (Number(o)) + "," + (Number(p)) + " " + (Number(o)) + "," + (Number(p) - Number(mDrawThickFrame)) + " " + (Number(F)) + "," + Number(Ab) + " " + (Number(Ah)) + "," + (Number(Ai)) + "' fill='" + mDrawProductColor + "' stroke='#000000' stroke-width='0px' pointer-events='all'></polygon></g>";
        var K = Number(mDrawThickFrame) * (Number(p) - Number(T)) / (Number(F) - Number(S));
        var s = Number(o) + Number(mDrawThickFrame);
        var n = Number(p) - Number(K);
        var m = Number(Ah) - Number(mDrawThickFrame);
        var R = Number(Ai) + Number(K);
        var u = "";
        u = u + "<g>";
        u = u + "<line id='" + G + "_l1' stroke='black' stroke-width='1' x1='" + (s) + "' y1='" + (n) + "' x2='" + (m) + "' y2='" + (R) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l2' stroke='black' stroke-width='1' x1='" + (o) + "' y1='" + (p) + "' x2='" + (o) + "' y2='" + (p - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l3' stroke='black' stroke-width='1' x1='" + (Ah) + "' y1='" + (Ai) + "' x2='" + (Ah) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l4' stroke='black' stroke-width='1' x1='" + (o) + "' y1='" + (p - Number(mDrawThickFrame)) + "' x2='" + (F) + "' y2='" + (Number(Ab)) + "' pointer-events='all'/>";
        switch (Q) {
        case "45":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (o) + "' y1='" + (p - Number(mDrawThickFrame)) + "' x2='" + (s) + "' y2='" + (n) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (F) + "' y1='" + (Number(Ab)) + "' x2='" + (m) + "' y2='" + (R) + "' pointer-events='all'/>";
            break;
        case "H":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (o) + "' y1='" + (p) + "' x2='" + (s) + "' y2='" + (n) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (Ah) + "' y1='" + (Number(Ai)) + "' x2='" + (m) + "' y2='" + (R) + "' pointer-events='all'/>";
            break;
        case "V":
            u = u + "<line id='" + G + "_pj1' stroke='black' stroke-width='1' x1='" + (s) + "' y1='" + (n) + "' x2='" + (s) + "' y2='" + (n - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (m) + "' y1='" + (R) + "' x2='" + (m) + "' y2='" + (R - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            break
        }
        u = u + "</g>";
        J = J + u;
        if (N == "Y") {
            var e = "<g>";
            var Aj = Number(R) - Number(Ab);
            var Ag = Number(m) - Number(F);
            var Z = Math.sqrt(Aj * Aj + Ag * Ag);
            var W = Math.asin(Ag / Z) * 180 / Math.PI;
            var Ad = (Ag + Number(mDrawThickYt)) / Math.sin(Number(W) * Math.PI / 180) - Number(Z);
            var L = Number(mDrawThickYt);
            var f = Math.sqrt(Ad * Ad - L * L);
            var Ak = Number(m) - Number(mDrawThickYt);
            var H = Number(R) + f;
            var Aj = Number(n) - (Number(p) - Number(mDrawThickFrame));
            var Ag = Number(mDrawThickFrame);
            var Z = Math.sqrt(Aj * Aj + Ag * Ag);
            var W = Math.asin(Ag / Z) * 180 / Math.PI;
            var Ad = (Ag + Number(mDrawThickYt)) / Math.sin(Number(W) * Math.PI / 180) - Number(Z);
            var L = Number(mDrawThickYt);
            var f = Math.sqrt(Ad * Ad - L * L);
            var B = Number(s) + Number(mDrawThickYt);
            var P = Number(n) + f;
            e = e + "<g><polygon id='" + G + "_pyt' points='" + (Number(m)) + "," + (Number(R) + 1) + " " + (Number(s)) + "," + (Number(n) + 1) + " " + (Number(B)) + "," + (Number(P)) + " " + (Number(Ak)) + "," + (Number(H)) + "' fill='" + mDrawProductColor + "' stroke='#000000' stroke-width='0px' pointer-events='all'></polygon></g>";
            e = e + "<line id='" + G + "_ytl1' stroke='black' stroke-width='1' x1='" + (B) + "' y1='" + (P) + "' x2='" + (Ak) + "' y2='" + (H) + "' pointer-events='all'/>";
            switch (Aa) {
            case "45":
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (s) + "' y1='" + (n) + "' x2='" + (B) + "' y2='" + (P) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj2' stroke='black' stroke-width='1' x1='" + (m) + "' y1='" + (R) + "' x2='" + (Ak) + "' y2='" + (H) + "' pointer-events='all'/>";
                break;
            case "H":
                break;
            case "V":
                break
            }
            e = e + "</g>";
            J = J + e
        }
        var l = MicroDraw_AddCustom(mDrawFlag_Custom_ruler);
        var M = MicroDraw_getRulerDataInfo(Number(S) - 12, Number(T), Number(o) - 12, Number(p) - Number(mDrawThickFrame), Ae.toString());
        var Af = M.split(",");
        var q = $("#" + l)[0];
        var E = $("#" + l + "_l1")[0];
        var D = $("#" + l + "_l2")[0];
        var C = $("#" + l + "_l3")[0];
        var U = $("#" + l + "_t")[0];
        D.setAttribute("x1", Af[0]);
        D.setAttribute("y1", Af[1]);
        D.setAttribute("x2", Af[2]);
        D.setAttribute("y2", Af[3]);
        E.setAttribute("x1", Af[4]);
        E.setAttribute("y1", Af[5]);
        E.setAttribute("x2", Af[6]);
        E.setAttribute("y2", Af[7]);
        C.setAttribute("x1", Af[8]);
        C.setAttribute("y1", Af[9]);
        C.setAttribute("x2", Af[10]);
        C.setAttribute("y2", Af[11]);
        U.setAttribute("x", Af[12]);
        U.setAttribute("y", Af[13]);
        U.textContent = Ae.toString();
        q.setAttribute("moptid", "mh");
        q.setAttribute("moptvalexp", "VAL");
        q.setAttribute("moptidbelongtoobj", G);
        $("#" + G).html(J);
        break;
    case mDrawFlag_Custom_qj_lrx:
        var S, T, F, Ab, Ah, Ai, o, p;
        S = Number(frameXPixel) + Number(frameWPixel) / 2;
        T = Number(frameYPixel);
        F = Number(frameXPixel) + Number(frameWPixel);
        Ab = Number(frameYPixel);
        Ah = Number(frameXPixel) + Number(frameWPixel);
        Ai = Number(frameYPixel) + Number(I);
        o = Number(frameXPixel) + Number(frameWPixel) / 2;
        p = Number(frameYPixel) + Number(mDrawThickFrame);
        $("#" + A)[0].parentNode.appendChild(Al);
        var J = $("#" + G).html();
        J = J + "<g><polygon id='" + G + "_p1' points='" + (Number(S) - 1) + "," + (Number(T) - 1) + " " + (Number(F) + 1) + "," + (Number(Ab) - 1) + " " + (Number(Ah) + 1) + "," + Number(Ai) + " " + (Number(o) - 1) + "," + Number(p) + "' fill='white' stroke='#000000' stroke-width='0px' pointer-events='all'></polygon></g>";
        J = J + "<g><polygon id='" + G + "_p2' points='" + (Number(S)) + "," + (Number(T)) + " " + (Number(Ah)) + "," + (Number(Ai) - Number(mDrawThickFrame)) + " " + (Number(Ah)) + "," + Number(Ai) + " " + (Number(S)) + "," + (Number(T) + Number(mDrawThickFrame)) + "' fill='" + mDrawProductColor + "' stroke='#000000' stroke-width='0px' pointer-events='all'></polygon></g>";
        var K = Number(mDrawThickFrame) * (Number(Ai) - Number(p)) / (Number(Ah) - Number(o));
        var s = Number(S);
        var n = Number(T) + Number(mDrawThickFrame);
        var m = Number(Ah) - Number(mDrawThickFrame);
        var R = Number(Ai) - Number(K);
        var u = "";
        u = u + "<g>";
        u = u + "<line id='" + G + "_l1' stroke='black' stroke-width='1' x1='" + (s) + "' y1='" + (n) + "' x2='" + (m) + "' y2='" + (R) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l2' stroke='black' stroke-width='1' x1='" + (Ah) + "' y1='" + (Ai) + "' x2='" + (Ah) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_l3' stroke='black' stroke-width='1' x1='" + (S) + "' y1='" + (T) + "' x2='" + (Ah) + "' y2='" + (Number(Ai) - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        switch (Q) {
        case "45":
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (Ah) + "' y1='" + (Number(Ai) - Number(mDrawThickFrame)) + "' x2='" + (m) + "' y2='" + (R) + "' pointer-events='all'/>";
            break;
        case "H":
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (m) + "' y1='" + (R) + "' x2='" + (Number(m) + Number(mDrawThickFrame)) + "' y2='" + (Number(R) + Number(K)) + "' pointer-events='all'/>";
            break;
        case "V":
            u = u + "<line id='" + G + "_pj2' stroke='black' stroke-width='1' x1='" + (m) + "' y1='" + (Number(R) - Number(mDrawThickFrame)) + "' x2='" + (m) + "' y2='" + (R) + "' pointer-events='all'/>";
            break
        }
        u = u + "</g>";
        J = J + u;
        if (N == "Y") {
            var e = "<g>";
            var Aj = Number(n) - Number(T);
            var Ag = Number(s) - Number(S);
            var Z = Math.sqrt(Aj * Aj + Ag * Ag);
            var W = Math.asin(Ag / Z) * 180 / Math.PI;
            var Ad = (Ag + Number(mDrawThickYt)) / Math.sin(Number(W) * Math.PI / 180) - Number(Z);
            var L = Number(mDrawThickYt);
            var f = Math.sqrt(Ad * Ad - L * L);
            var B = Number(o);
            var P = Number(p) + Number(mDrawThickYt);
            var Aj = Number(R) - (Number(Ai) - Number(mDrawThickFrame));
            var Ag = Number(mDrawThickFrame);
            var Z = Math.sqrt(Aj * Aj + Ag * Ag);
            var W = Math.asin(Ag / Z) * 180 / Math.PI;
            var Ad = (Ag + Number(mDrawThickYt)) / Math.sin(Number(W) * Math.PI / 180) - Number(Z);
            var L = Number(mDrawThickYt);
            var f = Math.sqrt(Ad * Ad - L * L);
            var Ak = Number(m) - Number(mDrawThickYt);
            var H = Number(R) + f;
            e = e + "<g><polygon id='" + G + "_pyt' points='" + (Number(s)) + "," + (Number(n) + 1) + " " + (Number(m)) + "," + (Number(R) + 1) + " " + (Number(Ak)) + "," + (Number(H)) + " " + (Number(B)) + "," + (Number(P)) + "' fill='" + mDrawProductColor + "' stroke='#000000' stroke-width='0px' pointer-events='all'></polygon></g>";
            e = e + "<line id='" + G + "_ytl1' stroke='black' stroke-width='1' x1='" + (B) + "' y1='" + (P) + "' x2='" + (Ak) + "' y2='" + (H) + "' pointer-events='all'/>";
            switch (Aa) {
            case "45":
                e = e + "<line id='" + G + "_ytpj1' stroke='black' stroke-width='1' x1='" + (s) + "' y1='" + (n) + "' x2='" + (B) + "' y2='" + (P) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_ytpj2' stroke='black' stroke-width='1' x1='" + (m) + "' y1='" + (R) + "' x2='" + (Ak) + "' y2='" + (H) + "' pointer-events='all'/>";
                break;
            case "H":
                break;
            case "V":
                break
            }
            e = e + "</g>";
            J = J + e
        }
        var l = MicroDraw_AddCustom(mDrawFlag_Custom_ruler);
        var M = MicroDraw_getRulerDataInfo(Number(F) + 12, Number(Ab), Number(Ah) + 12, Number(Ai) - Number(mDrawThickFrame), Ae.toString());
        var Af = M.split(",");
        var q = $("#" + l)[0];
        var E = $("#" + l + "_l1")[0];
        var D = $("#" + l + "_l2")[0];
        var C = $("#" + l + "_l3")[0];
        var U = $("#" + l + "_t")[0];
        D.setAttribute("x1", Af[0]);
        D.setAttribute("y1", Af[1]);
        D.setAttribute("x2", Af[2]);
        D.setAttribute("y2", Af[3]);
        E.setAttribute("x1", Af[4]);
        E.setAttribute("y1", Af[5]);
        E.setAttribute("x2", Af[6]);
        E.setAttribute("y2", Af[7]);
        C.setAttribute("x1", Af[8]);
        C.setAttribute("y1", Af[9]);
        C.setAttribute("x2", Af[10]);
        C.setAttribute("y2", Af[11]);
        U.setAttribute("x", Af[12]);
        U.setAttribute("y", Af[13]);
        U.textContent = Ae.toString();
        q.setAttribute("moptid", "mh");
        q.setAttribute("moptvalexp", "VAL");
        q.setAttribute("moptidbelongtoobj", G);
        var S, T, F, Ab, Ah, Ai, o, p;
        S = Number(frameXPixel);
        T = Number(frameYPixel);
        F = Number(frameXPixel) + Number(frameWPixel) / 2;
        Ab = Number(frameYPixel);
        Ah = Number(frameXPixel) + Number(frameWPixel) / 2;
        Ai = Number(frameYPixel) + Number(mDrawThickFrame);
        o = Number(frameXPixel);
        p = Number(frameYPixel) + Number(I);
        J = J + "<g><polygon id='" + G + "_pp1' points='" + (Number(S) - 1) + "," + (Number(T) - 1) + " " + (Number(F) + 1) + "," + (Number(Ab) - 1) + " " + (Number(Ah) + 1) + "," + Number(Ai) + " " + (Number(o) - 1) + "," + Number(p) + "' fill='white' stroke='#000000' stroke-width='0px' pointer-events='all'></polygon></g>";
        J = J + "<g><polygon id='" + G + "_pp2' points='" + (Number(o)) + "," + (Number(p)) + " " + (Number(o)) + "," + (Number(p) - Number(mDrawThickFrame)) + " " + (Number(F)) + "," + Number(Ab) + " " + (Number(Ah)) + "," + (Number(Ai)) + "' fill='" + mDrawProductColor + "' stroke='#000000' stroke-width='0px' pointer-events='all'></polygon></g>";
        var K = Number(mDrawThickFrame) * (Number(p) - Number(T)) / (Number(F) - Number(S));
        var s = Number(o) + Number(mDrawThickFrame);
        var n = Number(p) - Number(K);
        var m = Number(Ah);
        var R = Number(Ai);
        var u = "";
        u = u + "<g>";
        u = u + "<line id='" + G + "_ll1' stroke='black' stroke-width='1' x1='" + (s) + "' y1='" + (n) + "' x2='" + (m) + "' y2='" + (R) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_ll2' stroke='black' stroke-width='1' x1='" + (o) + "' y1='" + (p) + "' x2='" + (o) + "' y2='" + (p - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_ll3' stroke='black' stroke-width='1' x1='" + (o) + "' y1='" + (p - Number(mDrawThickFrame)) + "' x2='" + (F) + "' y2='" + (Number(Ab)) + "' pointer-events='all'/>";
        u = u + "<line id='" + G + "_lm' stroke='black' stroke-width='1' x1='" + (F) + "' y1='" + (Ab - 1) + "' x2='" + (Ah) + "' y2='" + (Ai) + "' pointer-events='all'/>";
        switch (Q) {
        case "45":
            u = u + "<line id='" + G + "_ppj1' stroke='black' stroke-width='1' x1='" + (o) + "' y1='" + (p - Number(mDrawThickFrame)) + "' x2='" + (s) + "' y2='" + (n) + "' pointer-events='all'/>";
            break;
        case "H":
            u = u + "<line id='" + G + "_ppj1' stroke='black' stroke-width='1' x1='" + (o) + "' y1='" + (p) + "' x2='" + (s) + "' y2='" + (n) + "' pointer-events='all'/>";
            break;
        case "V":
            u = u + "<line id='" + G + "_ppj1' stroke='black' stroke-width='1' x1='" + (s) + "' y1='" + (n) + "' x2='" + (s) + "' y2='" + (n - Number(mDrawThickFrame)) + "' pointer-events='all'/>";
            break
        }
        u = u + "</g>";
        J = J + u;
        if (N == "Y") {
            var e = "<g>";
            var Aj = Number(R) - Number(Ab);
            var Ag = Number(m) - Number(F);
            var Z = Math.sqrt(Aj * Aj + Ag * Ag);
            var W = Math.asin(Ag / Z) * 180 / Math.PI;
            var Ad = (Ag + Number(mDrawThickYt)) / Math.sin(Number(W) * Math.PI / 180) - Number(Z);
            var L = Number(mDrawThickYt);
            var f = Math.sqrt(Ad * Ad - L * L);
            var Ak = Number(Ah);
            var H = Number(Ai) + Number(mDrawThickYt);
            var Aj = Number(n) - (Number(p) - Number(mDrawThickFrame));
            var Ag = Number(mDrawThickFrame);
            var Z = Math.sqrt(Aj * Aj + Ag * Ag);
            var W = Math.asin(Ag / Z) * 180 / Math.PI;
            var Ad = (Ag + Number(mDrawThickYt)) / Math.sin(Number(W) * Math.PI / 180) - Number(Z);
            var L = Number(mDrawThickYt);
            var f = Math.sqrt(Ad * Ad - L * L);
            var B = Number(s) + Number(mDrawThickYt);
            var P = Number(n) + f;
            e = e + "<g><polygon id='" + G + "_ppyt' points='" + (Number(m)) + "," + (Number(R) + 1) + " " + (Number(s)) + "," + (Number(n) + 1) + " " + (Number(B)) + "," + (Number(P)) + " " + (Number(Ak)) + "," + (Number(H)) + "' fill='" + mDrawProductColor + "' stroke='#000000' stroke-width='0px' pointer-events='all'></polygon></g>";
            e = e + "<line id='" + G + "_pytl1' stroke='black' stroke-width='1' x1='" + (B) + "' y1='" + (P) + "' x2='" + (Ak) + "' y2='" + (H) + "' pointer-events='all'/>";
            switch (Aa) {
            case "45":
                e = e + "<line id='" + G + "_pytpj1' stroke='black' stroke-width='1' x1='" + (s) + "' y1='" + (n) + "' x2='" + (B) + "' y2='" + (P) + "' pointer-events='all'/>";
                e = e + "<line id='" + G + "_pytpj2' stroke='black' stroke-width='1' x1='" + (m) + "' y1='" + (R) + "' x2='" + (Ak) + "' y2='" + (H) + "' pointer-events='all'/>";
                break;
            case "H":
                break;
            case "V":
                break
            }
            e = e + "</g>";
            J = J + e
        }
        $("#" + G).html(J);
        break
    }
    MicroDraw_ShowCoordinate();
    MicroDraw_StepRecord();
    MicroDraw_drapDropInit();
    return G
}
function MicroDraw_getSvgStore(A) {
    var B = "";
    para = {};
    para.action = "getSvgStore";
    para.svgFileName = A;
    $.ajax({
        url: "../MicroBudget/MicroDraw.ashx",
        data: para,
        type: "POST",
        dataType: "text",
        async: false,
        success: function(C) {
            if (C.substr(0, 2) == "ok") {
                B = C.substr(3)
            } else {
                jQuery.messager.alert("提示:", "获取 " + A + " 失败!", "error")
            }
        }
    });
    return MicroDecodeHtml(B.toString())
}
function MicroDraw_impSvgTranslate(F, P, Q) {
    var N = $("#" + F)[0];
    var A = $("#" + F + "_mImpSvgId")[0];
    var J = $("#" + F + "_mImpSvgBackGround")[0];
    var K = N.getAttribute("moffsetx");
    var B = N.getAttribute("moffsety");
    var M = A.getAttribute("transform");
    var E = M.substr(M.indexOf("translate("));
    E = replaceAll(E, "translate[(]", "");
    E = replaceAll(E, "[)]", "");
    var I = E.substr(0, E.indexOf(","));
    var H = E.substr(E.indexOf(",") + 1);
    var C = J.getAttribute("x");
    var L = J.getAttribute("y");
    var G = Number(C) - Number(K);
    var D = Number(L) - Number(B);
    N.setAttribute("moffsetx", P);
    N.setAttribute("moffsety", Q);
    var O = M.substr(0, M.indexOf("translate(")) + " translate(" + P + "," + Q + ")";
    A.setAttribute("transform", O);
    J.setAttribute("x", Number(G) + Number(P));
    J.setAttribute("y", Number(D) + Number(Q));
    MicroDraw_Redraw_Custom_impSvg(F)
}
function MicroDraw_textMove(G, E, F, H, A, D) {
    var B = $("#" + G)[0];
    var C = $("#" + G + "_t")[0];
    C.setAttribute("x", E);
    C.setAttribute("y", F);
    if (!isEmptyOrNull(A)) {
        B.setAttribute("mfontsize", A);
        C.setAttribute("font-size", A)
    }
    if (!isEmptyOrNull(H)) {
        B.setAttribute("mtext", H);
        C.textContent = H
    }
    if (!isEmptyOrNull(D)) {
        C.setAttribute("text-anchor", D)
    }
}
function MicroDraw_lineMove(F, E, D, A, B) {
    var C = $("#" + F + "_l")[0];
    C.setAttribute("x1", E);
    C.setAttribute("y1", D);
    C.setAttribute("x2", A);
    C.setAttribute("y2", B)
}
function MicroDraw_AddCustomControlPoint(D) {
    $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_controlPoint + "']").each(function(Z, a) {
        var b = a.parentNode;
        b.removeChild(a)
    });
    var B = D.split(",");
    for (i = 0; i < B.length; i++) {
        if ($("#" + B[i]).parents("[mtype=" + mDrawFlag_Cornergdpic + "]").length > 0) {
            return true
        }
    }
    var Q = document.getElementById(mDrawFlag_SvgId);
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
        Q = $("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]')[0]
    }
    var B = D.split(",");
    for (i = 0; i < B.length; i++) {
        var E = MicroDraw_GUID();
        var L = document.createElementNS(mDrawSvgNS, "g");
        L.setAttributeNS(null, "id", E);
        L.setAttributeNS(null, "mtype", mDrawFlag_Custom_controlPoint);
        Q.appendChild(L);
        var I = $("#" + E).html();
        node = $("#" + B[i])[0];
        if (node == undefined) {
            continue
        }
        mtype = node.getAttribute("mtype");
        switch (mtype) {
        case mDrawFlag_Custom_text:
            var U, V, M, W;
            node_t = $("#" + B[i] + "_t")[0];
            U = node_t.getAttribute("x");
            V = node_t.getAttribute("y");
            I = I + "<rect id='" + E + "_xy' moldx='" + U + "' moldy='" + V + "' mmoving='lt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U)).toString() + "' y='" + (Number(V)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            break;
        case mDrawFlag_Custom_CornerMaterial:
            var U, V, M, W;
            node_r = $("#" + B[i] + "_rect")[0];
            U = node_r.getAttribute("x");
            V = node_r.getAttribute("y");
            M = node_r.getAttribute("width");
            W = node_r.getAttribute("height");
            I = I + "<rect id='" + E + "_lt' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='lt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(V) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_lb' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='lb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(V) + Number(W)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rt' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='rt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) + Number(M)).toString() + "' y='" + (Number(V) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rb' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='rb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) + Number(M)).toString() + "' y='" + (Number(V) + Number(W)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            break;
        case mDrawFlag_Custom_CornerMaterial_h:
            var U, V, M, W;
            node_r = $("#" + B[i] + "_rect")[0];
            U = node_r.getAttribute("x");
            V = node_r.getAttribute("y");
            M = node_r.getAttribute("width");
            W = node_r.getAttribute("height");
            I = I + "<rect id='" + E + "_lt' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='lt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(V) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_lb' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='lb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(V) + Number(W)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rt' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='rt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) + Number(M)).toString() + "' y='" + (Number(V) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rb' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='rb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) + Number(M)).toString() + "' y='" + (Number(V) + Number(W)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            break;
        case mDrawFlag_Custom_rect:
            var U, V, M, W;
            node_r = $("#" + B[i] + "_r")[0];
            U = node_r.getAttribute("x");
            V = node_r.getAttribute("y");
            M = node_r.getAttribute("width");
            W = node_r.getAttribute("height");
            I = I + "<rect id='" + E + "_lt' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='lt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(V) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_lb' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='lb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(V) + Number(W)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rt' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='rt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) + Number(M)).toString() + "' y='" + (Number(V) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rb' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='rb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) + Number(M)).toString() + "' y='" + (Number(V) + Number(W)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            break;
        case mDrawFlag_Custom_polygon:
            node_r = $("#" + B[i] + "_p")[0];
            points = node_r.getAttribute("points");
            var R, S, X, Y, J, K, N, O;
            var F = points.split(" ");
            var A;
            A = F[0].split(",");
            R = A[0];
            S = A[1];
            A = F[1].split(",");
            X = A[0];
            Y = A[1];
            A = F[2].split(",");
            J = A[0];
            K = A[1];
            A = F[3].split(",");
            N = A[0];
            O = A[1];
            if (!isEmptyOrNull(mDrawPolygonPointMoveInfo)) {
                var G = mDrawPolygonPointMoveInfo.split(",");
                var H = G[1];
                if (H == "lt") {
                    I = I + "<rect id='" + E + "_lt' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='lt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(R) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(S) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='#FF0000' pointer-events='all'/>";
                    I = I + "<rect id='" + E + "_rt' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='rt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(X)).toString() + "' y='" + (Number(Y) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
                    I = I + "<rect id='" + E + "_rb' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='rb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(J)).toString() + "' y='" + (Number(K)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
                    I = I + "<rect id='" + E + "_lb' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='lb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(N) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(O)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>"
                } else {
                    if (H == "rt") {
                        I = I + "<rect id='" + E + "_lt' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='lt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(R) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(S) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
                        I = I + "<rect id='" + E + "_rt' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='rt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(X)).toString() + "' y='" + (Number(Y) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='#FF0000' pointer-events='all'/>";
                        I = I + "<rect id='" + E + "_rb' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='rb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(J)).toString() + "' y='" + (Number(K)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
                        I = I + "<rect id='" + E + "_lb' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='lb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(N) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(O)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>"
                    } else {
                        if (H == "rb") {
                            I = I + "<rect id='" + E + "_lt' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='lt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(R) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(S) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
                            I = I + "<rect id='" + E + "_rt' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='rt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(X)).toString() + "' y='" + (Number(Y) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
                            I = I + "<rect id='" + E + "_rb' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='rb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(J)).toString() + "' y='" + (Number(K)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='#FF0000' pointer-events='all'/>";
                            I = I + "<rect id='" + E + "_lb' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='lb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(N) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(O)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>"
                        } else {
                            if (H == "lb") {
                                I = I + "<rect id='" + E + "_lt' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='lt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(R) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(S) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
                                I = I + "<rect id='" + E + "_rt' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='rt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(X)).toString() + "' y='" + (Number(Y) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
                                I = I + "<rect id='" + E + "_rb' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='rb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(J)).toString() + "' y='" + (Number(K)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
                                I = I + "<rect id='" + E + "_lb' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='lb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(N) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(O)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='#FF0000' pointer-events='all'/>"
                            }
                        }
                    }
                }
            } else {
                I = I + "<rect id='" + E + "_lt' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='lt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(R) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(S) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
                I = I + "<rect id='" + E + "_rt' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='rt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(X)).toString() + "' y='" + (Number(Y) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
                I = I + "<rect id='" + E + "_rb' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='rb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(J)).toString() + "' y='" + (Number(K)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
                I = I + "<rect id='" + E + "_lb' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='lb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(N) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(O)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>"
            }
            break;
        case mDrawFlag_Custom_arc:
            node = $("#" + B[i])[0];
            node_r = $("#" + B[i] + "_p1")[0];
            d = node_r.getAttribute("d");
            d = replaceAll(d, "M", "");
            d = replaceAll(d, " A ", ",");
            d = replaceAll(d, " ", ",");
            var R, S, X, Y, J, K;
            var F = d.split(",");
            R = Number(F[0]) - Number(4);
            S = F[1];
            J = Number(F[7]) + Number(4);
            K = F[8];
            X = Number(R) + (Number(J) - Number(R)) / 2;
            Y = Number(S) - (Number(node.getAttribute("mheight")) / 1000) * Number(mDrawPixelPerM) - Number(4);
            I = I + "<rect id='" + E + "_l' mmoving='l' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(R) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(S) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_t' mmoving='t' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(X) - Number(mDrawCPWidth) / 2).toString() + "' y='" + (Number(Y) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_r' mmoving='r' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(J)).toString() + "' y='" + (Number(K) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            break;
        case mDrawFlag_Custom_circle:
            var C, P, T;
            node_c = $("#" + B[i] + "_c")[0];
            C = node_c.getAttribute("cx");
            P = node_c.getAttribute("cy");
            T = node_c.getAttribute("r");
            I = I + "<rect id='" + E + "_t' moldcx='" + C + "' moldcy='" + P + "' moldr='" + T + "' mmoving='t' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(C) - Number(mDrawCPWidth) / 2).toString() + "' y='" + (Number(P) - Number(T) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_b' moldcx='" + C + "' moldcy='" + P + "' moldr='" + T + "' mmoving='b' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(C) - Number(mDrawCPWidth) / 2).toString() + "' y='" + (Number(P) + Number(T)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_l' moldcx='" + C + "' moldcy='" + P + "' moldr='" + T + "' mmoving='l' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(C) - Number(T) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(P) - Number(mDrawCPWidth) / 2).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_r' moldcx='" + C + "' moldcy='" + P + "' moldr='" + T + "' mmoving='r' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(C) + Number(T)).toString() + "' y='" + (Number(P) - Number(mDrawCPWidth) / 2).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            break;
        case mDrawFlag_Custom_line:
            var R, S, X, Y;
            node_l = $("#" + B[i] + "_l")[0];
            R = node_l.getAttribute("x1");
            S = node_l.getAttribute("y1");
            X = node_l.getAttribute("x2");
            Y = node_l.getAttribute("y2");
            I = I + "<rect id='" + E + "_s' moldx1='" + R + "' moldy1='" + S + "' moldx2='" + X + "' moldy2='" + Y + "' mmoving='s' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(R) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(S) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_e' moldx1='" + R + "' moldy1='" + S + "' moldx2='" + X + "' moldy2='" + Y + "' mmoving='e' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(X)).toString() + "' y='" + (Number(Y)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            break;
        case mDrawFlag_Custom_ruler:
            var R, S, X, Y;
            node_l = $("#" + B[i] + "_l2")[0];
            R = node_l.getAttribute("x1");
            S = node_l.getAttribute("y1");
            X = node_l.getAttribute("x2");
            Y = node_l.getAttribute("y2");
            I = I + "<rect id='" + E + "_s' moldx1='" + R + "' moldy1='" + S + "' moldx2='" + X + "' moldy2='" + Y + "' mmoving='s' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(R) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(S) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='yellow' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_e' moldx1='" + R + "' moldy1='" + S + "' moldx2='" + X + "' moldy2='" + Y + "' mmoving='e' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(X)).toString() + "' y='" + (Number(Y)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='red' pointer-events='all'/>";
            break;
        case mDrawFlag_Custom_wall:
            var U, V, M, W;
            node_r = $("#" + B[i] + "_r")[0];
            U = node_r.getAttribute("x");
            V = node_r.getAttribute("y");
            M = node_r.getAttribute("width");
            W = node_r.getAttribute("height");
            I = I + "<rect id='" + E + "_lt' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='lt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(V) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_lb' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='lb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(V) + Number(W)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rt' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='rt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) + Number(M)).toString() + "' y='" + (Number(V) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rb' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='rb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) + Number(M)).toString() + "' y='" + (Number(V) + Number(W)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            break;
        case mDrawFlag_Custom_impSvg:
            var U, V, M, W;
            node_r = $("#" + B[i] + "_mImpSvgBackGround")[0];
            U = node_r.getAttribute("x");
            V = node_r.getAttribute("y");
            M = node_r.getAttribute("width");
            W = node_r.getAttribute("height");
            I = I + "<rect id='" + E + "_lt' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='lt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(V) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_lb' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='lb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(V) + Number(W)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rt' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='rt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) + Number(M)).toString() + "' y='" + (Number(V) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rb' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='rb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) + Number(M)).toString() + "' y='" + (Number(V) + Number(W)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            break;
        case mDrawFlag_Custom_qj_lt:
            var U, V, M, W;
            node_r = $("#" + B[i] + "_r")[0];
            U = node_r.getAttribute("x");
            V = node_r.getAttribute("y");
            M = node_r.getAttribute("width");
            W = node_r.getAttribute("height");
            I = I + "<rect id='" + E + "_lt' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='lt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(V) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_lb' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='lb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(V) + Number(W)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rt' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='rt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) + Number(M)).toString() + "' y='" + (Number(V) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rb' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='rb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) + Number(M)).toString() + "' y='" + (Number(V) + Number(W)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            break;
        case mDrawFlag_Custom_qj_rt:
            var U, V, M, W;
            node_r = $("#" + B[i] + "_r")[0];
            U = node_r.getAttribute("x");
            V = node_r.getAttribute("y");
            M = node_r.getAttribute("width");
            W = node_r.getAttribute("height");
            I = I + "<rect id='" + E + "_lt' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='lt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(V) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_lb' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='lb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(V) + Number(W)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rt' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='rt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) + Number(M)).toString() + "' y='" + (Number(V) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rb' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='rb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) + Number(M)).toString() + "' y='" + (Number(V) + Number(W)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            break;
        case mDrawFlag_Custom_qj_rb:
            var U, V, M, W;
            node_r = $("#" + B[i] + "_r")[0];
            U = node_r.getAttribute("x");
            V = node_r.getAttribute("y");
            M = node_r.getAttribute("width");
            W = node_r.getAttribute("height");
            I = I + "<rect id='" + E + "_lt' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='lt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(V) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_lb' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='lb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(V) + Number(W)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rt' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='rt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) + Number(M)).toString() + "' y='" + (Number(V) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rb' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='rb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) + Number(M)).toString() + "' y='" + (Number(V) + Number(W)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            break;
        case mDrawFlag_Custom_qj_lb:
            var U, V, M, W;
            node_r = $("#" + B[i] + "_r")[0];
            U = node_r.getAttribute("x");
            V = node_r.getAttribute("y");
            M = node_r.getAttribute("width");
            W = node_r.getAttribute("height");
            I = I + "<rect id='" + E + "_lt' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='lt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(V) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_lb' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='lb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(V) + Number(W)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rt' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='rt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) + Number(M)).toString() + "' y='" + (Number(V) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rb' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='rb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) + Number(M)).toString() + "' y='" + (Number(V) + Number(W)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            break;
        case mDrawFlag_Custom_qj_tm:
            var U, V, M, W;
            node_r = $("#" + B[i] + "_r")[0];
            U = node_r.getAttribute("x");
            V = node_r.getAttribute("y");
            M = node_r.getAttribute("width");
            W = node_r.getAttribute("height");
            I = I + "<rect id='" + E + "_lt' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='lt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(V) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_lb' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='lb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(V) + Number(W)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rt' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='rt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) + Number(M)).toString() + "' y='" + (Number(V) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rb' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='rb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) + Number(M)).toString() + "' y='" + (Number(V) + Number(W)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            break;
        case mDrawFlag_Custom_qj_rm:
            var U, V, M, W;
            node_r = $("#" + B[i] + "_r")[0];
            U = node_r.getAttribute("x");
            V = node_r.getAttribute("y");
            M = node_r.getAttribute("width");
            W = node_r.getAttribute("height");
            I = I + "<rect id='" + E + "_lt' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='lt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(V) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_lb' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='lb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(V) + Number(W)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rt' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='rt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) + Number(M)).toString() + "' y='" + (Number(V) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rb' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='rb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) + Number(M)).toString() + "' y='" + (Number(V) + Number(W)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            break;
        case mDrawFlag_Custom_qj_bm:
            var U, V, M, W;
            node_r = $("#" + B[i] + "_r")[0];
            U = node_r.getAttribute("x");
            V = node_r.getAttribute("y");
            M = node_r.getAttribute("width");
            W = node_r.getAttribute("height");
            I = I + "<rect id='" + E + "_lt' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='lt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(V) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_lb' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='lb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(V) + Number(W)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rt' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='rt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) + Number(M)).toString() + "' y='" + (Number(V) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rb' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='rb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) + Number(M)).toString() + "' y='" + (Number(V) + Number(W)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            break;
        case mDrawFlag_Custom_qj_lm:
            var U, V, M, W;
            node_r = $("#" + B[i] + "_r")[0];
            U = node_r.getAttribute("x");
            V = node_r.getAttribute("y");
            M = node_r.getAttribute("width");
            W = node_r.getAttribute("height");
            I = I + "<rect id='" + E + "_lt' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='lt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(V) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_lb' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='lb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(V) + Number(W)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rt' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='rt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) + Number(M)).toString() + "' y='" + (Number(V) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rb' moldx='" + U + "' moldy='" + V + "' moldw='" + M + "' moldh='" + W + "' mmoving='rb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(U) + Number(M)).toString() + "' y='" + (Number(V) + Number(W)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            break;
        case mDrawFlag_Custom_qj_rx:
            node_r = $("#" + B[i] + "_p1")[0];
            points = node_r.getAttribute("points");
            var R, S, X, Y, J, K, N, O;
            var F = points.split(" ");
            var A;
            A = F[0].split(",");
            R = A[0];
            S = A[1];
            A = F[1].split(",");
            X = A[0];
            Y = A[1];
            A = F[2].split(",");
            J = A[0];
            K = A[1];
            A = F[3].split(",");
            N = A[0];
            O = A[1];
            I = I + "<rect id='" + E + "_lt' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='lt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(R) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(S) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rt' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='rt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(X)).toString() + "' y='" + (Number(Y) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rb' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='rb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(J)).toString() + "' y='" + (Number(K)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_lb' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='lb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(N) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(O)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            break;
        case mDrawFlag_Custom_qj_lx:
            node_r = $("#" + B[i] + "_p1")[0];
            points = node_r.getAttribute("points");
            var R, S, X, Y, J, K, N, O;
            var F = points.split(" ");
            var A;
            A = F[0].split(",");
            R = A[0];
            S = A[1];
            A = F[1].split(",");
            X = A[0];
            Y = A[1];
            A = F[2].split(",");
            J = A[0];
            K = A[1];
            A = F[3].split(",");
            N = A[0];
            O = A[1];
            I = I + "<rect id='" + E + "_lt' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='lt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(R) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(S) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rt' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='rt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(X)).toString() + "' y='" + (Number(Y) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rb' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='rb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(J)).toString() + "' y='" + (Number(K)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_lb' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='lb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(N) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(O)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            break;
        case mDrawFlag_Custom_qj_lrx:
            node_r = $("#" + B[i] + "_p1")[0];
            points = node_r.getAttribute("points");
            var R, S, X, Y, J, K, N, O;
            var F = points.split(" ");
            var A;
            A = F[0].split(",");
            R = A[0];
            S = A[1];
            A = F[1].split(",");
            X = A[0];
            Y = A[1];
            A = F[2].split(",");
            J = A[0];
            K = A[1];
            A = F[3].split(",");
            N = A[0];
            O = A[1];
            I = I + "<rect id='" + E + "_lt' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='lt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(R) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(S) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rt' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='rt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(X)).toString() + "' y='" + (Number(Y) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rb' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='rb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(J)).toString() + "' y='" + (Number(K)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_lb' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='lb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(N) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(O)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            node_r = $("#" + B[i] + "_pp1")[0];
            points = node_r.getAttribute("points");
            var R, S, X, Y, J, K, N, O;
            var F = points.split(" ");
            var A;
            A = F[0].split(",");
            R = A[0];
            S = A[1];
            A = F[1].split(",");
            X = A[0];
            Y = A[1];
            A = F[2].split(",");
            J = A[0];
            K = A[1];
            A = F[3].split(",");
            N = A[0];
            O = A[1];
            I = I + "<rect id='" + E + "_lt' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='lt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(R) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(S) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rt' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='rt' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(X)).toString() + "' y='" + (Number(Y) - Number(mDrawCPWidth)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_rb' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='rb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(J)).toString() + "' y='" + (Number(K)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            I = I + "<rect id='" + E + "_lb' mx1=" + R.toString() + " my1=" + S.toString() + " mx2=" + X.toString() + " my2=" + Y.toString() + " mx3=" + J.toString() + " my3=" + K.toString() + " mx4=" + N.toString() + " my4=" + O.toString() + " mmoving='lb' mbelongtype='" + mtype + "' mbelongid='" + B[i] + "' x='" + (Number(N) - Number(mDrawCPWidth)).toString() + "' y='" + (Number(O)).toString() + "' width='" + mDrawCPWidth + "' height='" + mDrawCPWidth + "' stroke='black' stroke-width='1px' fill='black' pointer-events='all'/>";
            break
        }
        $("#" + E).html(I)
    }
}
function MicroDraw_DelSelectedCustom(A) {
    if ($.Micro.IsEmpty(A)) {
        A = 0
    }
    if (A == 0) {
        if (MicroDraw_SysSelectObj) {
            if (MicroDraw_SysSelectObj.length > 0) {
                if (MicroDraw_SysSelectObj.parents("svg").length == 0) {
                    return true
                }
            }
        }
    }
    var E = "";
    var F = "";
    var B = $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_controlPoint + "'] rect")[0];
    E = B.getAttribute("mbelongid");
    F = B.getAttribute("mbelongtype");
    if (E == "") {
        return
    }
    if (! (F.indexOf(mDrawFlag_Custom) > -1)) {
        return
    }
    var D = $("#" + E)[0];
    var C = D.parentNode;
    C.removeChild(D);
    $("#" + mDrawFlag_SvgId + " [mrulermaster=" + E + "]").remove();
    $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_controlPoint + "']").each(function(G, H) {
        var I = H.parentNode;
        I.removeChild(H)
    });
    MicroDraw_drapDropInit()
}
function MicroDraw_CustomObj_Group() {
    if (isEmptyOrNull(mDrawCustomObjList)) {
        jQuery.messager.alert("提示:", "请选择多个自定义对象，然后再进行组合！", "info");
        return
    }
    var B = MicroDraw_GUID();
    var A = document.createElementNS(mDrawSvgNS, "g");
    A.setAttributeNS(null, "id", B);
    A.setAttributeNS(null, "mtype", mDrawFlag_Custom_g);
    var D = $("#" + mDrawFlag_SvgId)[0];
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
        D = $("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]')[0]
    }
    D.appendChild(A);
    var C = mDrawCustomObjList.split(",");
    for (i = 0; i < C.length; i++) {
        $("#" + B).append($("#" + C[i]))
    }
    $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_g + "']").each(function(E, F) {
        if ($("#" + F.id).children().length == 0) {
            $("#" + F.id).remove()
        }
    });
    MicroDraw_drapDropInit();
    MicroDraw_StepRecord();
    $.messager.show({
        title: "提示",
        msg: "组合成功",
        showType: "slide",
        timeout: 50,
        style: {
            right: "",
            bottom: ""
        }
    })
}
function MicroDraw_CustomObj_deGroup() {
    if (isEmptyOrNull(mDrawCustomObjList)) {
        jQuery.messager.alert("提示:", "请选择自定义对象，然后再进行取消组合！", "info");
        return
    }
    var B = $("#" + mDrawFlag_SvgId)[0];
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
        B = $("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]')[0]
    }
    var A = mDrawCustomObjList.split(",");
    for (i = 0; i < A.length; i++) {
        B.appendChild($("#" + A[i])[0])
    }
    $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_g + "']").each(function(C, D) {
        if ($("#" + D.id).children().length == 0) {
            $("#" + D.id).remove()
        }
    });
    MicroDraw_StepRecord();
    $.messager.show({
        title: "提示",
        msg: "取消组合成功",
        showType: "slide",
        timeout: 50,
        style: {
            right: "",
            bottom: ""
        }
    })
}
function MicroDraw_CustomObj_left() {
    if (isEmptyOrNull(mDrawCustomObjList)) {
        jQuery.messager.alert("提示:", "请选择自定义对象，然后再对齐！", "info");
        return
    }
    var R = mDrawCustomObjList.split(",");
    if (R.length < 2) {
        jQuery.messager.alert("提示:", "请选择两个或以上的自定义对象，然后再对齐！", "info");
        return
    }
    var w = $("#" + R[0])[0].getAttribute("mtype");
    for (i = 0; i < R.length; i++) {
        selectCustomObjId = R[i];
        selectNode = $("#" + selectCustomObjId)[0];
        selectCustomObjType = selectNode.getAttribute("mtype");
        if (selectCustomObjType != w) {
            jQuery.messager.alert("提示:", "请选择两个或以上种类相同的自定义对象，然后再对齐！", "info");
            return
        }
    }
    switch (w) {
    case mDrawFlag_Custom_line:
        var n = $("#" + R[0] + "_l")[0].getAttribute("x1");
        for (i = 0; i < R.length; i++) {
            selectCustomObjId = R[i];
            selectNode = $("#" + selectCustomObjId + "_l")[0];
            selectNode.setAttribute("x2", Number(selectNode.getAttribute("x2")) - (Number(selectNode.getAttribute("x1")) - Number(n)));
            selectNode.setAttribute("x1", n)
        }
        break;
    case mDrawFlag_Custom_rect:
        var n = $("#" + R[0] + "_r")[0].getAttribute("x");
        for (i = 0; i < R.length; i++) {
            selectCustomObjId = R[i];
            selectNode = $("#" + selectCustomObjId + "_r")[0];
            selectNode.setAttribute("x", n)
        }
        break;
    case mDrawFlag_Custom_polygon:
        var Aa = MicroDraw_CustomObj_getPolygonMinMax(R[0] + "_p", "minx");
        var u;
        for (i = 1; i < R.length; i++) {
            selectCustomObjId = R[i];
            selectNode = $("#" + selectCustomObjId + "_p")[0];
            u = MicroDraw_CustomObj_getPolygonMinMax(selectCustomObjId + "_p", "minx");
            var H = Aa - u;
            var S, T, C, D, Af, Ag, b, c;
            var v = selectNode.getAttribute("points");
            var Ae = v.split(" ");
            var Z;
            Z = Ae[0].split(",");
            S = Z[0];
            T = Z[1];
            Z = Ae[1].split(",");
            C = Z[0];
            D = Z[1];
            Z = Ae[2].split(",");
            Af = Z[0];
            Ag = Z[1];
            Z = Ae[3].split(",");
            b = Z[0];
            c = Z[1];
            S = Number(S) + Number(H);
            C = Number(C) + Number(H);
            Af = Number(Af) + Number(H);
            b = Number(b) + Number(H);
            selectNode.setAttribute("points", S + "," + T + " " + C + "," + D + " " + Af + "," + Ag + " " + b + "," + c)
        }
        break;
    case mDrawFlag_Custom_arc:
        var A = $("#" + R[0] + "_p1")[0].getAttribute("d");
        A = replaceAll(A, "M", "");
        A = replaceAll(A, " A ", ",");
        A = replaceAll(A, " ", ",");
        var m, J, E, M;
        var L = A.split(",");
        m = L[0];
        J = L[1];
        E = L[7];
        M = L[8];
        var q = $("#" + R[0] + "_p2")[0].getAttribute("d");
        q = replaceAll(q, "M", "");
        q = replaceAll(q, " A ", ",");
        q = replaceAll(q, " ", ",");
        var f, I, g, K;
        var F = q.split(",");
        f = F[0];
        I = F[1];
        g = F[7];
        K = F[8];
        for (i = 1; i < R.length; i++) {
            selectCustomObjId = R[i];
            selectNode = $("#" + selectCustomObjId + "_p1")[0];
            var U = $("#" + R[i] + "_p1")[0].getAttribute("d");
            U = replaceAll(U, "M", "");
            U = replaceAll(U, " A ", ",");
            U = replaceAll(U, " ", ",");
            var a, W, X, V;
            var B = U.split(",");
            a = B[0];
            W = B[1];
            X = B[7];
            V = B[8];
            var H = Number(a) - Number(m);
            a = Number(a) - Number(H);
            X = Number(X) - Number(H);
            B[0] = a;
            B[7] = X;
            selectNode.setAttribute("d", "M" + B[0].toString() + " " + B[1].toString() + " A " + B[2].toString() + " " + B[3].toString() + "," + B[4].toString() + "," + B[5].toString() + "," + B[6].toString() + "," + B[7].toString() + " " + B[8].toString() + "");
            selectNode = $("#" + selectCustomObjId + "_p2")[0];
            var U = $("#" + R[i] + "_p2")[0].getAttribute("d");
            U = replaceAll(U, "M", "");
            U = replaceAll(U, " A ", ",");
            U = replaceAll(U, " ", ",");
            var a, W, X, V;
            var B = U.split(",");
            a = B[0];
            W = B[1];
            X = B[7];
            V = B[8];
            var H = Number(a) - Number(f);
            a = Number(a) - Number(H);
            X = Number(X) - Number(H);
            B[0] = a;
            B[7] = X;
            selectNode.setAttribute("d", "M" + B[0].toString() + " " + B[1].toString() + " A " + B[2].toString() + " " + B[3].toString() + "," + B[4].toString() + "," + B[5].toString() + "," + B[6].toString() + "," + B[7].toString() + " " + B[8].toString() + "")
        }
        break;
    case mDrawFlag_Custom_ruler:
        var S = $("#" + R[0] + "_l2")[0].getAttribute("x1");
        var T = $("#" + R[0] + "_l2")[0].getAttribute("y1");
        var C = $("#" + R[0] + "_l2")[0].getAttribute("x2");
        var D = $("#" + R[0] + "_l2")[0].getAttribute("y2");
        var Y = $("#" + R[0])[0].getAttribute("mtext");
        var S, T, C, D;
        var P, t, N, s, O, r, Q, Ab;
        var Ah, G;
        for (i = 1; i < R.length; i++) {
            selectCustomObjId = R[i];
            node_l1 = $("#" + selectCustomObjId + "_l1")[0];
            node_l2 = $("#" + selectCustomObjId + "_l2")[0];
            node_l3 = $("#" + selectCustomObjId + "_l3")[0];
            node_t = $("#" + selectCustomObjId + "_t")[0];
            var p = $("#" + selectCustomObjId + "_l2")[0].getAttribute("x1");
            var Ad = $("#" + selectCustomObjId + "_l2")[0].getAttribute("y1");
            var o = $("#" + selectCustomObjId + "_l2")[0].getAttribute("x2");
            var Ac = $("#" + selectCustomObjId + "_l2")[0].getAttribute("y2");
            var H = S - p;
            var e = MicroDraw_getRulerDataInfo(S, Ad, Number(o) + Number(H), Number(Ac), Y);
            var Ae = e.split(",");
            mx1 = Ae[0];
            my1 = Ae[1];
            mx2 = Ae[2];
            my2 = Ae[3];
            P = Ae[4];
            t = Ae[5];
            N = Ae[6];
            s = Ae[7];
            O = Ae[8];
            r = Ae[9];
            Q = Ae[10];
            Ab = Ae[11];
            Ah = Ae[12];
            G = Ae[13];
            node_l1.setAttribute("x1", P);
            node_l1.setAttribute("y1", t);
            node_l1.setAttribute("x2", N);
            node_l1.setAttribute("y2", s);
            node_l2.setAttribute("x1", mx1);
            node_l2.setAttribute("y1", my1);
            node_l2.setAttribute("x2", mx2);
            node_l2.setAttribute("y2", my2);
            node_l3.setAttribute("x1", O);
            node_l3.setAttribute("y1", r);
            node_l3.setAttribute("x2", Q);
            node_l3.setAttribute("y2", Ab);
            node_t.setAttribute("x", Ah);
            node_t.setAttribute("y", G)
        }
        break;
    case mDrawFlag_Custom_circle:
        var n = Number($("#" + R[0] + "_c")[0].getAttribute("cx")) - Number($("#" + R[0] + "_c")[0].getAttribute("r"));
        for (i = 0; i < R.length; i++) {
            selectCustomObjId = R[i];
            selectNode = $("#" + selectCustomObjId + "_c")[0];
            cx = Number(n) + Number(selectNode.getAttribute("r"));
            selectNode.setAttribute("cx", cx)
        }
        break;
    case mDrawFlag_Custom_wall:
        var n = $("#" + R[0] + "_r")[0].getAttribute("x");
        for (i = 0; i < R.length; i++) {
            selectCustomObjId = R[i];
            selectNode = $("#" + selectCustomObjId + "_r")[0];
            var l = Number(n) - Number($("#" + R[i] + "_r")[0].getAttribute("x"));
            selectNode.setAttribute("x", n);
            $("#" + R[i] + " line").each(function(Aj, Ai) {
                Ai.setAttribute("x1", Number(Ai.getAttribute("x1")) + Number(l));
                Ai.setAttribute("x2", Number(Ai.getAttribute("x2")) + Number(l))
            })
        }
        break
    }
    MicroDraw_StepRecord();
    MicroDraw_AddCustomControlPoint(mDrawCustomObjList)
}
function MicroDraw_CustomObj_right() {
    if (isEmptyOrNull(mDrawCustomObjList)) {
        jQuery.messager.alert("提示:", "请选择自定义对象，然后再对齐！", "info");
        return
    }
    var R = mDrawCustomObjList.split(",");
    if (R.length < 2) {
        jQuery.messager.alert("提示:", "请选择两个或以上的自定义对象，然后再对齐！", "info");
        return
    }
    var Aa = $("#" + R[0])[0].getAttribute("mtype");
    for (i = 0; i < R.length; i++) {
        selectCustomObjId = R[i];
        selectNode = $("#" + selectCustomObjId)[0];
        selectCustomObjType = selectNode.getAttribute("mtype");
        if (selectCustomObjType != Aa) {
            jQuery.messager.alert("提示:", "请选择两个或以上种类相同的自定义对象，然后再对齐！", "info");
            return
        }
    }
    switch (Aa) {
    case mDrawFlag_Custom_line:
        var o = $("#" + R[0] + "_l")[0].getAttribute("x2");
        for (i = 0; i < R.length; i++) {
            selectCustomObjId = R[i];
            selectNode = $("#" + selectCustomObjId + "_l")[0];
            selectNode.setAttribute("x1", Number(selectNode.getAttribute("x1")) - (Number(selectNode.getAttribute("x2")) - Number(o)));
            selectNode.setAttribute("x2", o)
        }
        break;
    case mDrawFlag_Custom_rect:
        var o = Number($("#" + R[0] + "_r")[0].getAttribute("x")) + Number($("#" + R[0] + "_r")[0].getAttribute("width"));
        for (i = 0; i < R.length; i++) {
            selectCustomObjId = R[i];
            selectNode = $("#" + selectCustomObjId + "_r")[0];
            selectNode.setAttribute("x", Number(o) - Number(selectNode.getAttribute("width")))
        }
        break;
    case mDrawFlag_Custom_polygon:
        var P = MicroDraw_CustomObj_getPolygonMinMax(R[0] + "_p", "maxx");
        var e;
        for (i = 1; i < R.length; i++) {
            selectCustomObjId = R[i];
            selectNode = $("#" + selectCustomObjId + "_p")[0];
            e = MicroDraw_CustomObj_getPolygonMinMax(selectCustomObjId + "_p", "maxx");
            var G = P - e;
            var S, T, C, D, Af, Ag, b, c;
            var w = selectNode.getAttribute("points");
            var Ae = w.split(" ");
            var Z;
            Z = Ae[0].split(",");
            S = Z[0];
            T = Z[1];
            Z = Ae[1].split(",");
            C = Z[0];
            D = Z[1];
            Z = Ae[2].split(",");
            Af = Z[0];
            Ag = Z[1];
            Z = Ae[3].split(",");
            b = Z[0];
            c = Z[1];
            S = Number(S) + Number(G);
            C = Number(C) + Number(G);
            Af = Number(Af) + Number(G);
            b = Number(b) + Number(G);
            selectNode.setAttribute("points", S + "," + T + " " + C + "," + D + " " + Af + "," + Ag + " " + b + "," + c)
        }
        break;
    case mDrawFlag_Custom_arc:
        var A = $("#" + R[0] + "_p1")[0].getAttribute("d");
        A = replaceAll(A, "M", "");
        A = replaceAll(A, " A ", ",");
        A = replaceAll(A, " ", ",");
        var n, I, E, L;
        var K = A.split(",");
        n = K[0];
        I = K[1];
        E = K[7];
        L = K[8];
        var r = $("#" + R[0] + "_p2")[0].getAttribute("d");
        r = replaceAll(r, "M", "");
        r = replaceAll(r, " A ", ",");
        r = replaceAll(r, " ", ",");
        var g, H, l, J;
        var F = r.split(",");
        g = F[0];
        H = F[1];
        l = F[7];
        J = F[8];
        for (i = 1; i < R.length; i++) {
            selectCustomObjId = R[i];
            selectNode = $("#" + selectCustomObjId + "_p1")[0];
            var U = $("#" + R[i] + "_p1")[0].getAttribute("d");
            U = replaceAll(U, "M", "");
            U = replaceAll(U, " A ", ",");
            U = replaceAll(U, " ", ",");
            var a, W, X, V;
            var B = U.split(",");
            a = B[0];
            W = B[1];
            X = B[7];
            V = B[8];
            var G = Number(X) - Number(E);
            a = Number(a) - Number(G);
            X = Number(X) - Number(G);
            B[0] = a;
            B[7] = X;
            selectNode.setAttribute("d", "M" + B[0].toString() + " " + B[1].toString() + " A " + B[2].toString() + " " + B[3].toString() + "," + B[4].toString() + "," + B[5].toString() + "," + B[6].toString() + "," + B[7].toString() + " " + B[8].toString() + "");
            selectNode = $("#" + selectCustomObjId + "_p2")[0];
            var U = $("#" + R[i] + "_p2")[0].getAttribute("d");
            U = replaceAll(U, "M", "");
            U = replaceAll(U, " A ", ",");
            U = replaceAll(U, " ", ",");
            var a, W, X, V;
            var B = U.split(",");
            a = B[0];
            W = B[1];
            X = B[7];
            V = B[8];
            var G = Number(X) - Number(l);
            a = Number(a) - Number(G);
            X = Number(X) - Number(G);
            B[0] = a;
            B[7] = X;
            selectNode.setAttribute("d", "M" + B[0].toString() + " " + B[1].toString() + " A " + B[2].toString() + " " + B[3].toString() + "," + B[4].toString() + "," + B[5].toString() + "," + B[6].toString() + "," + B[7].toString() + " " + B[8].toString() + "")
        }
        break;
    case mDrawFlag_Custom_ruler:
        var S = $("#" + R[0] + "_l2")[0].getAttribute("x1");
        var T = $("#" + R[0] + "_l2")[0].getAttribute("y1");
        var C = $("#" + R[0] + "_l2")[0].getAttribute("x2");
        var D = $("#" + R[0] + "_l2")[0].getAttribute("y2");
        var Y = $("#" + R[0])[0].getAttribute("mtext");
        var S, T, C, D;
        var O, u, M, t, N, s, Q, Ab;
        var Ah, v;
        for (i = 1; i < R.length; i++) {
            selectCustomObjId = R[i];
            node_l1 = $("#" + selectCustomObjId + "_l1")[0];
            node_l2 = $("#" + selectCustomObjId + "_l2")[0];
            node_l3 = $("#" + selectCustomObjId + "_l3")[0];
            node_t = $("#" + selectCustomObjId + "_t")[0];
            var q = $("#" + selectCustomObjId + "_l2")[0].getAttribute("x1");
            var Ad = $("#" + selectCustomObjId + "_l2")[0].getAttribute("y1");
            var p = $("#" + selectCustomObjId + "_l2")[0].getAttribute("x2");
            var Ac = $("#" + selectCustomObjId + "_l2")[0].getAttribute("y2");
            var G = C - p;
            var f = MicroDraw_getRulerDataInfo(Number(q) + Number(G), Ad, C, Number(Ac), Y);
            var Ae = f.split(",");
            mx1 = Ae[0];
            my1 = Ae[1];
            mx2 = Ae[2];
            my2 = Ae[3];
            O = Ae[4];
            u = Ae[5];
            M = Ae[6];
            t = Ae[7];
            N = Ae[8];
            s = Ae[9];
            Q = Ae[10];
            Ab = Ae[11];
            Ah = Ae[12];
            v = Ae[13];
            node_l1.setAttribute("x1", O);
            node_l1.setAttribute("y1", u);
            node_l1.setAttribute("x2", M);
            node_l1.setAttribute("y2", t);
            node_l2.setAttribute("x1", mx1);
            node_l2.setAttribute("y1", my1);
            node_l2.setAttribute("x2", mx2);
            node_l2.setAttribute("y2", my2);
            node_l3.setAttribute("x1", N);
            node_l3.setAttribute("y1", s);
            node_l3.setAttribute("x2", Q);
            node_l3.setAttribute("y2", Ab);
            node_t.setAttribute("x", Ah);
            node_t.setAttribute("y", v)
        }
        break;
    case mDrawFlag_Custom_circle:
        var o = Number($("#" + R[0] + "_c")[0].getAttribute("cx")) + Number($("#" + R[0] + "_c")[0].getAttribute("r"));
        for (i = 0; i < R.length; i++) {
            selectCustomObjId = R[i];
            selectNode = $("#" + selectCustomObjId + "_c")[0];
            cx = Number(o) - Number(selectNode.getAttribute("r"));
            selectNode.setAttribute("cx", cx)
        }
        break;
    case mDrawFlag_Custom_wall:
        var o = Number($("#" + R[0] + "_r")[0].getAttribute("x")) + Number($("#" + R[0] + "_r")[0].getAttribute("width"));
        for (i = 0; i < R.length; i++) {
            selectCustomObjId = R[i];
            selectNode = $("#" + selectCustomObjId + "_r")[0];
            var m = Number(o) - (Number(selectNode.getAttribute("x")) + Number(selectNode.getAttribute("width")));
            selectNode.setAttribute("x", Number(o) - Number(selectNode.getAttribute("width")));
            $("#" + R[i] + " line").each(function(Aj, Ai) {
                Ai.setAttribute("x1", Number(Ai.getAttribute("x1")) + Number(m));
                Ai.setAttribute("x2", Number(Ai.getAttribute("x2")) + Number(m))
            })
        }
        break
    }
    MicroDraw_StepRecord();
    MicroDraw_AddCustomControlPoint(mDrawCustomObjList)
}
function MicroDraw_CustomObj_top() {
    if (isEmptyOrNull(mDrawCustomObjList)) {
        jQuery.messager.alert("提示:", "请选择自定义对象，然后再对齐！", "info");
        return
    }
    var S = mDrawCustomObjList.split(",");
    if (S.length < 2) {
        jQuery.messager.alert("提示:", "请选择两个或以上的自定义对象，然后再对齐！", "info");
        return
    }
    var Ag = $("#" + S[0])[0].getAttribute("mtype");
    for (i = 0; i < S.length; i++) {
        selectCustomObjId = S[i];
        selectNode = $("#" + selectCustomObjId)[0];
        selectCustomObjType = selectNode.getAttribute("mtype");
        if (selectCustomObjType != Ag) {
            jQuery.messager.alert("提示:", "请选择两个或以上种类相同的自定义对象，然后再对齐！", "info");
            return
        }
    }
    switch (Ag) {
    case mDrawFlag_Custom_line:
        var t = $("#" + S[0] + "_l")[0].getAttribute("y1");
        for (i = 0; i < S.length; i++) {
            selectCustomObjId = S[i];
            selectNode = $("#" + selectCustomObjId + "_l")[0];
            selectNode.setAttribute("y2", Number(selectNode.getAttribute("y2")) - (Number(selectNode.getAttribute("y1")) - Number(t)));
            selectNode.setAttribute("y1", t)
        }
        break;
    case mDrawFlag_Custom_rect:
        var t = $("#" + S[0] + "_r")[0].getAttribute("y");
        for (i = 0; i < S.length; i++) {
            selectCustomObjId = S[i];
            selectNode = $("#" + selectCustomObjId + "_r")[0];
            selectNode.setAttribute("y", t)
        }
        break;
    case mDrawFlag_Custom_polygon:
        var K = MicroDraw_CustomObj_getPolygonMinMax(S[0] + "_p", "miny");
        var E;
        for (i = 1; i < S.length; i++) {
            selectCustomObjId = S[i];
            selectNode = $("#" + selectCustomObjId + "_p")[0];
            E = MicroDraw_CustomObj_getPolygonMinMax(selectCustomObjId + "_p", "miny");
            var I = K - E;
            var U, V, D, W, Am, An, m, n;
            var Af = selectNode.getAttribute("points");
            var Al = Af.split(" ");
            var f;
            f = Al[0].split(",");
            U = f[0];
            V = f[1];
            f = Al[1].split(",");
            D = f[0];
            W = f[1];
            f = Al[2].split(",");
            Am = f[0];
            An = f[1];
            f = Al[3].split(",");
            m = f[0];
            n = f[1];
            V = Number(V) + Number(I);
            W = Number(W) + Number(I);
            An = Number(An) + Number(I);
            n = Number(n) + Number(I);
            selectNode.setAttribute("points", U + "," + V + " " + D + "," + W + " " + Am + "," + An + " " + m + "," + n)
        }
        break;
    case mDrawFlag_Custom_arc:
        var N = $("#" + S[0] + "_p1")[0].getAttribute("d");
        N = replaceAll(N, "M", "");
        N = replaceAll(N, " A ", ",");
        N = replaceAll(N, " ", ",");
        var s, Ai, G, u, F, C;
        var M = N.split(",");
        var A = $("#" + S[0])[0].getAttribute("mheight");
        s = M[0];
        Ai = M[1];
        F = Number(M[0]) + (Number(M[7]) - Number(M[0])) / 2;
        C = Number(M[1]) - ((Number(A) / 1000) * Number(mDrawPixelPerM));
        G = M[7];
        u = M[8];
        var Aa = $("#" + S[0] + "_p2")[0].getAttribute("d");
        Aa = replaceAll(Aa, "M", "");
        Aa = replaceAll(Aa, " A ", ",");
        Aa = replaceAll(Aa, " ", ",");
        var p, J, r, L, q, T;
        var H = Aa.split(",");
        var A = $("#" + S[0])[0].getAttribute("mheight");
        p = H[0];
        J = H[1];
        q = Number(H[0]) + (Number(H[7]) - Number(H[0])) / 2;
        T = Number(H[1]) - ((Number(A) / 1000) * Number(mDrawPixelPerM));
        r = H[7];
        L = H[8];
        for (i = 1; i < S.length; i++) {
            selectCustomObjId = S[i];
            selectNode = $("#" + selectCustomObjId + "_p1")[0];
            var X = $("#" + S[i] + "_p1")[0].getAttribute("d");
            X = replaceAll(X, "M", "");
            X = replaceAll(X, " A ", ",");
            X = replaceAll(X, " ", ",");
            var l, a, c, Y, g, Z;
            var B = X.split(",");
            var A = $("#" + S[i])[0].getAttribute("mheight");
            l = B[0];
            a = B[1];
            g = Number(B[0]) + (Number(B[7]) - Number(B[0])) / 2;
            Z = Number(B[1]) - ((Number(A) / 1000) * Number(mDrawPixelPerM));
            c = B[7];
            Y = B[8];
            var I = Number(Z) - Number(C);
            a = Number(a) - Number(I);
            Y = Number(Y) - Number(I);
            B[1] = a;
            B[8] = Y;
            selectNode.setAttribute("d", "M" + B[0].toString() + " " + B[1].toString() + " A " + B[2].toString() + " " + B[3].toString() + "," + B[4].toString() + "," + B[5].toString() + "," + B[6].toString() + "," + B[7].toString() + " " + B[8].toString() + "");
            selectNode = $("#" + selectCustomObjId + "_p2")[0];
            var X = $("#" + S[i] + "_p2")[0].getAttribute("d");
            X = replaceAll(X, "M", "");
            X = replaceAll(X, " A ", ",");
            X = replaceAll(X, " ", ",");
            var l, a, c, Y, g, Z;
            var B = X.split(",");
            var A = $("#" + S[i])[0].getAttribute("mheight");
            l = B[0];
            a = B[1];
            g = Number(B[0]) + (Number(B[7]) - Number(B[0])) / 2;
            Z = Number(B[1]) - ((Number(A) / 1000) * Number(mDrawPixelPerM));
            c = B[7];
            Y = B[8];
            var I = Number(Z) - Number(T);
            a = Number(a) - Number(I);
            Y = Number(Y) - Number(I);
            B[1] = a;
            B[8] = Y;
            selectNode.setAttribute("d", "M" + B[0].toString() + " " + B[1].toString() + " A " + B[2].toString() + " " + B[3].toString() + "," + B[4].toString() + "," + B[5].toString() + "," + B[6].toString() + "," + B[7].toString() + " " + B[8].toString() + "")
        }
        break;
    case mDrawFlag_Custom_ruler:
        var U = $("#" + S[0] + "_l2")[0].getAttribute("x1");
        var V = $("#" + S[0] + "_l2")[0].getAttribute("y1");
        var D = $("#" + S[0] + "_l2")[0].getAttribute("x2");
        var W = $("#" + S[0] + "_l2")[0].getAttribute("y2");
        var e = $("#" + S[0])[0].getAttribute("mtext");
        var U, V, D, W;
        var Q, Ad, O, Ac, P, Ab, R, Ah;
        var Ao, Ae;
        for (i = 1; i < S.length; i++) {
            selectCustomObjId = S[i];
            node_l1 = $("#" + selectCustomObjId + "_l1")[0];
            node_l2 = $("#" + selectCustomObjId + "_l2")[0];
            node_l3 = $("#" + selectCustomObjId + "_l3")[0];
            node_t = $("#" + selectCustomObjId + "_t")[0];
            var w = $("#" + selectCustomObjId + "_l2")[0].getAttribute("x1");
            var Ak = $("#" + selectCustomObjId + "_l2")[0].getAttribute("y1");
            var v = $("#" + selectCustomObjId + "_l2")[0].getAttribute("x2");
            var Aj = $("#" + selectCustomObjId + "_l2")[0].getAttribute("y2");
            var I = Number(V) - Number(Ak);
            var o = MicroDraw_getRulerDataInfo(Number(w), Number(V), Number(v), Number(Aj) + Number(I), e);
            var Al = o.split(",");
            mx1 = Al[0];
            my1 = Al[1];
            mx2 = Al[2];
            my2 = Al[3];
            Q = Al[4];
            Ad = Al[5];
            O = Al[6];
            Ac = Al[7];
            P = Al[8];
            Ab = Al[9];
            R = Al[10];
            Ah = Al[11];
            Ao = Al[12];
            Ae = Al[13];
            node_l1.setAttribute("x1", Q);
            node_l1.setAttribute("y1", Ad);
            node_l1.setAttribute("x2", O);
            node_l1.setAttribute("y2", Ac);
            node_l2.setAttribute("x1", mx1);
            node_l2.setAttribute("y1", my1);
            node_l2.setAttribute("x2", mx2);
            node_l2.setAttribute("y2", my2);
            node_l3.setAttribute("x1", P);
            node_l3.setAttribute("y1", Ab);
            node_l3.setAttribute("x2", R);
            node_l3.setAttribute("y2", Ah);
            node_t.setAttribute("x", Ao);
            node_t.setAttribute("y", Ae)
        }
        break;
    case mDrawFlag_Custom_circle:
        var t = Number($("#" + S[0] + "_c")[0].getAttribute("cy")) - Number($("#" + S[0] + "_c")[0].getAttribute("r"));
        for (i = 0; i < S.length; i++) {
            selectCustomObjId = S[i];
            selectNode = $("#" + selectCustomObjId + "_c")[0];
            cy = Number(t) + Number(selectNode.getAttribute("r"));
            selectNode.setAttribute("cy", cy)
        }
        break;
    case mDrawFlag_Custom_wall:
        var t = $("#" + S[0] + "_r")[0].getAttribute("y");
        for (i = 0; i < S.length; i++) {
            selectCustomObjId = S[i];
            selectNode = $("#" + selectCustomObjId + "_r")[0];
            var b = Number(t) - Number($("#" + S[i] + "_r")[0].getAttribute("y"));
            selectNode.setAttribute("y", t);
            $("#" + S[i] + " line").each(function(Aq, Ap) {
                Ap.setAttribute("y1", Number(Ap.getAttribute("y1")) + Number(b));
                Ap.setAttribute("y2", Number(Ap.getAttribute("y2")) + Number(b))
            })
        }
        break
    }
    MicroDraw_StepRecord();
    MicroDraw_AddCustomControlPoint(mDrawCustomObjList)
}
function MicroDraw_CustomObj_bottom() {
    if (isEmptyOrNull(mDrawCustomObjList)) {
        jQuery.messager.alert("提示:", "请选择自定义对象，然后再对齐！", "info");
        return
    }
    var U = mDrawCustomObjList.split(",");
    if (U.length < 2) {
        jQuery.messager.alert("提示:", "请选择两个或以上的自定义对象，然后再对齐！", "info");
        return
    }
    var Ah = $("#" + U[0])[0].getAttribute("mtype");
    for (i = 0; i < U.length; i++) {
        selectCustomObjId = U[i];
        selectNode = $("#" + selectCustomObjId)[0];
        selectCustomObjType = selectNode.getAttribute("mtype");
        if (selectCustomObjType != Ah) {
            jQuery.messager.alert("提示:", "请选择两个或以上种类相同的自定义对象，然后再对齐！", "info");
            return
        }
    }
    switch (Ah) {
    case mDrawFlag_Custom_line:
        var v = $("#" + U[0] + "_l")[0].getAttribute("y2");
        for (i = 0; i < U.length; i++) {
            selectCustomObjId = U[i];
            selectNode = $("#" + selectCustomObjId + "_l")[0];
            selectNode.setAttribute("y1", Number(selectNode.getAttribute("y1")) - (Number(selectNode.getAttribute("y2")) - Number(v)));
            selectNode.setAttribute("y2", v)
        }
        break;
    case mDrawFlag_Custom_rect:
        var v = Number($("#" + U[0] + "_r")[0].getAttribute("y")) + Number($("#" + U[0] + "_r")[0].getAttribute("height"));
        for (i = 0; i < U.length; i++) {
            selectCustomObjId = U[i];
            selectNode = $("#" + selectCustomObjId + "_r")[0];
            selectNode.setAttribute("y", Number(v) - Number(selectNode.getAttribute("height")))
        }
        break;
    case mDrawFlag_Custom_polygon:
        var Y = MicroDraw_CustomObj_getPolygonMinMax(U[0] + "_p", "maxy");
        var J;
        for (i = 1; i < U.length; i++) {
            selectCustomObjId = U[i];
            selectNode = $("#" + selectCustomObjId + "_p")[0];
            J = MicroDraw_CustomObj_getPolygonMinMax(selectCustomObjId + "_p", "maxy");
            var K = Y - J;
            var W, X, E, F, Am, An, o, p;
            var Ag = selectNode.getAttribute("points");
            var Al = Ag.split(" ");
            var l;
            l = Al[0].split(",");
            W = l[0];
            X = l[1];
            l = Al[1].split(",");
            E = l[0];
            F = l[1];
            l = Al[2].split(",");
            Am = l[0];
            An = l[1];
            l = Al[3].split(",");
            o = l[0];
            p = l[1];
            X = Number(X) + Number(K);
            F = Number(F) + Number(K);
            An = Number(An) + Number(K);
            p = Number(p) + Number(K);
            selectNode.setAttribute("points", W + "," + X + " " + E + "," + F + " " + Am + "," + An + " " + o + "," + p)
        }
        break;
    case mDrawFlag_Custom_arc:
        var A = $("#" + U[0] + "_p1")[0].getAttribute("d");
        A = replaceAll(A, "M", "");
        A = replaceAll(A, " A ", ",");
        A = replaceAll(A, " ", ",");
        var u, M, H, P, G, D;
        var O = A.split(",");
        var B = $("#" + U[0])[0].getAttribute("mheight");
        u = O[0];
        M = O[1];
        G = Number(O[0]) + (Number(O[7]) - Number(O[0])) / 2;
        D = Number(O[1]) - ((Number(B) / 1000) * Number(mDrawPixelPerM));
        H = O[7];
        P = O[8];
        var Ab = $("#" + U[0] + "_p2")[0].getAttribute("d");
        Ab = replaceAll(Ab, "M", "");
        Ab = replaceAll(Ab, " A ", ",");
        Ab = replaceAll(Ab, " ", ",");
        var r, L, t, N, s, V;
        var I = Ab.split(",");
        var B = $("#" + U[0])[0].getAttribute("mheight");
        r = I[0];
        L = I[1];
        s = Number(I[0]) + (Number(I[7]) - Number(I[0])) / 2;
        V = Number(I[1]) - ((Number(B) / 1000) * Number(mDrawPixelPerM));
        t = I[7];
        N = I[8];
        for (i = 1; i < U.length; i++) {
            selectCustomObjId = U[i];
            selectNode = $("#" + selectCustomObjId + "_p1")[0];
            var Z = $("#" + U[i] + "_p1")[0].getAttribute("d");
            Z = replaceAll(Z, "M", "");
            Z = replaceAll(Z, " A ", ",");
            Z = replaceAll(Z, " ", ",");
            var n, c, f, a, m, b;
            var C = Z.split(",");
            var B = $("#" + U[i])[0].getAttribute("mheight");
            n = C[0];
            c = C[1];
            m = Number(C[0]) + (Number(C[7]) - Number(C[0])) / 2;
            b = Number(C[1]) - ((Number(B) / 1000) * Number(mDrawPixelPerM));
            f = C[7];
            a = C[8];
            var K = Number(c) - Number(M);
            c = Number(c) - Number(K);
            a = Number(a) - Number(K);
            C[1] = c;
            C[8] = a;
            selectNode.setAttribute("d", "M" + C[0].toString() + " " + C[1].toString() + " A " + C[2].toString() + " " + C[3].toString() + "," + C[4].toString() + "," + C[5].toString() + "," + C[6].toString() + "," + C[7].toString() + " " + C[8].toString() + "");
            selectNode = $("#" + selectCustomObjId + "_p2")[0];
            var Z = $("#" + U[i] + "_p2")[0].getAttribute("d");
            Z = replaceAll(Z, "M", "");
            Z = replaceAll(Z, " A ", ",");
            Z = replaceAll(Z, " ", ",");
            var n, c, f, a, m, b;
            var C = Z.split(",");
            var B = $("#" + U[i])[0].getAttribute("mheight");
            n = C[0];
            c = C[1];
            m = Number(C[0]) + (Number(C[7]) - Number(C[0])) / 2;
            b = Number(C[1]) - ((Number(B) / 1000) * Number(mDrawPixelPerM));
            f = C[7];
            a = C[8];
            var K = Number(c) - Number(L);
            c = Number(c) - Number(K);
            a = Number(a) - Number(K);
            C[1] = c;
            C[8] = a;
            selectNode.setAttribute("d", "M" + C[0].toString() + " " + C[1].toString() + " A " + C[2].toString() + " " + C[3].toString() + "," + C[4].toString() + "," + C[5].toString() + "," + C[6].toString() + "," + C[7].toString() + " " + C[8].toString() + "")
        }
        break;
    case mDrawFlag_Custom_ruler:
        var W = $("#" + U[0] + "_l2")[0].getAttribute("x1");
        var X = $("#" + U[0] + "_l2")[0].getAttribute("y1");
        var E = $("#" + U[0] + "_l2")[0].getAttribute("x2");
        var F = $("#" + U[0] + "_l2")[0].getAttribute("y2");
        var g = $("#" + U[0])[0].getAttribute("mtext");
        var W, X, E, F;
        var S, Ae, Q, Ad, R, Ac, T, Ai;
        var Ao, Af;
        for (i = 1; i < U.length; i++) {
            selectCustomObjId = U[i];
            node_l1 = $("#" + selectCustomObjId + "_l1")[0];
            node_l2 = $("#" + selectCustomObjId + "_l2")[0];
            node_l3 = $("#" + selectCustomObjId + "_l3")[0];
            node_t = $("#" + selectCustomObjId + "_t")[0];
            var Aa = $("#" + selectCustomObjId + "_l2")[0].getAttribute("x1");
            var Ak = $("#" + selectCustomObjId + "_l2")[0].getAttribute("y1");
            var w = $("#" + selectCustomObjId + "_l2")[0].getAttribute("x2");
            var Aj = $("#" + selectCustomObjId + "_l2")[0].getAttribute("y2");
            var K = Number(F) - Number(Aj);
            var q = MicroDraw_getRulerDataInfo(Number(Aa), Number(Ak) + Number(K), Number(w), Number(F), g);
            var Al = q.split(",");
            mx1 = Al[0];
            my1 = Al[1];
            mx2 = Al[2];
            my2 = Al[3];
            S = Al[4];
            Ae = Al[5];
            Q = Al[6];
            Ad = Al[7];
            R = Al[8];
            Ac = Al[9];
            T = Al[10];
            Ai = Al[11];
            Ao = Al[12];
            Af = Al[13];
            node_l1.setAttribute("x1", S);
            node_l1.setAttribute("y1", Ae);
            node_l1.setAttribute("x2", Q);
            node_l1.setAttribute("y2", Ad);
            node_l2.setAttribute("x1", mx1);
            node_l2.setAttribute("y1", my1);
            node_l2.setAttribute("x2", mx2);
            node_l2.setAttribute("y2", my2);
            node_l3.setAttribute("x1", R);
            node_l3.setAttribute("y1", Ac);
            node_l3.setAttribute("x2", T);
            node_l3.setAttribute("y2", Ai);
            node_t.setAttribute("x", Ao);
            node_t.setAttribute("y", Af)
        }
        break;
    case mDrawFlag_Custom_circle:
        var v = Number($("#" + U[0] + "_c")[0].getAttribute("cy")) + Number($("#" + U[0] + "_c")[0].getAttribute("r"));
        for (i = 0; i < U.length; i++) {
            selectCustomObjId = U[i];
            selectNode = $("#" + selectCustomObjId + "_c")[0];
            cy = Number(v) - Number(selectNode.getAttribute("r"));
            selectNode.setAttribute("cy", cy)
        }
        break;
    case mDrawFlag_Custom_wall:
        var v = Number($("#" + U[0] + "_r")[0].getAttribute("y")) + Number($("#" + U[0] + "_r")[0].getAttribute("height"));
        for (i = 0; i < U.length; i++) {
            selectCustomObjId = U[i];
            selectNode = $("#" + selectCustomObjId + "_r")[0];
            var e = Number(v) - (Number(selectNode.getAttribute("y")) + Number(selectNode.getAttribute("height")));
            selectNode.setAttribute("y", Number(v) - Number(selectNode.getAttribute("height")));
            $("#" + U[i] + " line").each(function(Aq, Ap) {
                Ap.setAttribute("y1", Number(Ap.getAttribute("y1")) + Number(e));
                Ap.setAttribute("y2", Number(Ap.getAttribute("y2")) + Number(e))
            })
        }
        break
    }
    MicroDraw_StepRecord();
    MicroDraw_AddCustomControlPoint(mDrawCustomObjList)
}
function MicroDraw_CustomObj_sameWidth() {
    if (isEmptyOrNull(mDrawCustomObjList)) {
        jQuery.messager.alert("提示:", "请选择自定义对象，然后再操作！", "info");
        return
    }
    var J = mDrawCustomObjList.split(",");
    if (J.length < 2) {
        jQuery.messager.alert("提示:", "请选择两个或以上的自定义对象，然后再操作！", "info");
        return
    }
    var C = $("#" + J[0])[0].getAttribute("mtype");
    for (i = 0; i < J.length; i++) {
        selectCustomObjId = J[i];
        selectNode = $("#" + selectCustomObjId)[0];
        selectCustomObjType = selectNode.getAttribute("mtype");
        if (selectCustomObjType != C) {
            jQuery.messager.alert("提示:", "请选择两个或以上种类相同的自定义对象，然后再操作！", "info");
            return
        }
    }
    if (! (C == mDrawFlag_Custom_line || C == mDrawFlag_Custom_rect || C == mDrawFlag_Custom_circle || C == mDrawFlag_Custom_arc || C == mDrawFlag_Custom_ruler || C == mDrawFlag_Custom_wall)) {
        jQuery.messager.alert("提示:", "线条，矩形，圆，弧顶,标尺才能进行等宽操作！", "info");
        return
    }
    switch (C) {
    case mDrawFlag_Custom_line:
        var X = $("#" + J[0] + "_l")[0].getAttribute("x1");
        var c = $("#" + J[0] + "_l")[0].getAttribute("x2");
        var S = Number(c) - Number(X);
        for (i = 0; i < J.length; i++) {
            selectCustomObjId = J[i];
            selectNode = $("#" + selectCustomObjId + "_l")[0];
            selectNode.setAttribute("x2", Number(selectNode.getAttribute("x1")) + Number(S))
        }
        break;
    case mDrawFlag_Custom_rect:
        var R = $("#" + J[0] + "_r")[0].getAttribute("width");
        for (i = 0; i < J.length; i++) {
            selectCustomObjId = J[i];
            selectNode = $("#" + selectCustomObjId + "_r")[0];
            selectNode.setAttribute("width", R)
        }
        break;
    case mDrawFlag_Custom_circle:
        var A = $("#" + J[0] + "_c")[0].getAttribute("r");
        for (i = 0; i < J.length; i++) {
            selectCustomObjId = J[i];
            selectNode = $("#" + selectCustomObjId + "_c")[0];
            selectNode.setAttribute("r", A)
        }
        break;
    case mDrawFlag_Custom_arc:
        var D = $("#" + J[0])[0].getAttribute("mwidth");
        for (i = 1; i < J.length; i++) {
            selectCustomObjId = J[i];
            selectNode = $("#" + selectCustomObjId)[0];
            var H = selectNode.getAttribute("mheight");
            if (Number(D) < 2 * Number(H)) {
                jQuery.messager.alert("提示:", "不能把对象的宽度设置为 " + D + " 当前对象高度为 " + H + "，" + H + " 的两倍大于 " + D + "！", "info")
            } else {
                selectNode.setAttribute("mwidth", D);
                MicroDraw_Redraw_Custom_arc(selectCustomObjId)
            }
        }
        break;
    case mDrawFlag_Custom_ruler:
        var X = $("#" + J[0] + "_l2")[0].getAttribute("x1");
        var Y = $("#" + J[0] + "_l2")[0].getAttribute("y1");
        var c = $("#" + J[0] + "_l2")[0].getAttribute("x2");
        var e = $("#" + J[0] + "_l2")[0].getAttribute("y2");
        var M = $("#" + J[0])[0].getAttribute("mtext");
        var X, Y, c, e;
        var Z, Q, W, P, E, O, a, T;
        var G, U;
        for (i = 1; i < J.length; i++) {
            selectCustomObjId = J[i];
            node_l1 = $("#" + selectCustomObjId + "_l1")[0];
            node_l2 = $("#" + selectCustomObjId + "_l2")[0];
            node_l3 = $("#" + selectCustomObjId + "_l3")[0];
            node_t = $("#" + selectCustomObjId + "_t")[0];
            var L = $("#" + selectCustomObjId + "_l2")[0].getAttribute("x1");
            var V = $("#" + selectCustomObjId + "_l2")[0].getAttribute("y1");
            var K = $("#" + selectCustomObjId + "_l2")[0].getAttribute("x2");
            var b = $("#" + selectCustomObjId + "_l2")[0].getAttribute("y2");
            var F = MicroDraw_getRulerDataInfo(Number(L), Number(V), Number(L) + Number(c) - Number(X), Number(b), M);
            var I = F.split(",");
            mx1 = I[0];
            my1 = I[1];
            mx2 = I[2];
            my2 = I[3];
            Z = I[4];
            Q = I[5];
            W = I[6];
            P = I[7];
            E = I[8];
            O = I[9];
            a = I[10];
            T = I[11];
            G = I[12];
            U = I[13];
            node_l1.setAttribute("x1", Z);
            node_l1.setAttribute("y1", Q);
            node_l1.setAttribute("x2", W);
            node_l1.setAttribute("y2", P);
            node_l2.setAttribute("x1", mx1);
            node_l2.setAttribute("y1", my1);
            node_l2.setAttribute("x2", mx2);
            node_l2.setAttribute("y2", my2);
            node_l3.setAttribute("x1", E);
            node_l3.setAttribute("y1", O);
            node_l3.setAttribute("x2", a);
            node_l3.setAttribute("y2", T);
            node_t.setAttribute("x", G);
            node_t.setAttribute("y", U)
        }
        break;
    case mDrawFlag_Custom_wall:
        var B = $("#" + J[0])[0].getAttribute("mwallwidth");
        var N = $("#" + J[0])[0].getAttribute("mwallrealwidth");
        for (i = 0; i < J.length; i++) {
            selectCustomObjId = J[i];
            selectNode = $("#" + selectCustomObjId)[0];
            selectNode.setAttribute("mwallwidth", B);
            selectNode.setAttribute("mwallrealwidth", N)
        }
        for (i = 0; i < J.length; i++) {
            MicroDraw_Redraw_Custom_wall(selectCustomObjId)
        }
        break
    }
    MicroDraw_StepRecord();
    MicroDraw_AddCustomControlPoint(mDrawCustomObjList)
}
function MicroDraw_CustomObj_sameHeight() {
    if (isEmptyOrNull(mDrawCustomObjList)) {
        jQuery.messager.alert("提示:", "请选择自定义对象，然后再操作！", "info");
        return
    }
    var I = mDrawCustomObjList.split(",");
    if (I.length < 2) {
        jQuery.messager.alert("提示:", "请选择两个或以上的自定义对象，然后再操作！", "info");
        return
    }
    var B = $("#" + I[0])[0].getAttribute("mtype");
    for (i = 0; i < I.length; i++) {
        selectCustomObjId = I[i];
        selectNode = $("#" + selectCustomObjId)[0];
        selectCustomObjType = selectNode.getAttribute("mtype");
        if (selectCustomObjType != B) {
            jQuery.messager.alert("提示:", "请选择两个或以上种类相同的自定义对象，然后再操作！", "info");
            return
        }
    }
    if (! (B == mDrawFlag_Custom_line || B == mDrawFlag_Custom_rect || B == mDrawFlag_Custom_circle || B == mDrawFlag_Custom_arc || B == mDrawFlag_Custom_ruler || B == mDrawFlag_Custom_wall)) {
        jQuery.messager.alert("提示:", "线条，矩形，圆，弧顶，标尺才能进行等高操作！", "info");
        return
    }
    switch (B) {
    case mDrawFlag_Custom_line:
        var Y = $("#" + I[0] + "_l")[0].getAttribute("y1");
        var e = $("#" + I[0] + "_l")[0].getAttribute("y2");
        var R = Number(e) - Number(Y);
        for (i = 0; i < I.length; i++) {
            selectCustomObjId = I[i];
            selectNode = $("#" + selectCustomObjId + "_l")[0];
            selectNode.setAttribute("y2", Number(selectNode.getAttribute("y1")) + Number(R))
        }
        break;
    case mDrawFlag_Custom_rect:
        var b = $("#" + I[0] + "_r")[0].getAttribute("height");
        for (i = 0; i < I.length; i++) {
            selectCustomObjId = I[i];
            selectNode = $("#" + selectCustomObjId + "_r")[0];
            selectNode.setAttribute("height", b)
        }
        break;
    case mDrawFlag_Custom_circle:
        var A = $("#" + I[0] + "_c")[0].getAttribute("r");
        for (i = 0; i < I.length; i++) {
            selectCustomObjId = I[i];
            selectNode = $("#" + selectCustomObjId + "_c")[0];
            selectNode.setAttribute("r", A)
        }
        break;
    case mDrawFlag_Custom_arc:
        var G = $("#" + I[0])[0].getAttribute("mheight");
        for (i = 1; i < I.length; i++) {
            selectCustomObjId = I[i];
            selectNode = $("#" + selectCustomObjId)[0];
            var C = selectNode.getAttribute("mwidth");
            if (Number(C) < 2 * Number(G)) {
                jQuery.messager.alert("提示:", "不能把对象的高度设置为 " + G + "， 当前对象宽度为 " + C + "，" + C + " 小于高度 " + G + " 的两倍！", "info")
            } else {
                selectNode.setAttribute("mheight", G);
                MicroDraw_Redraw_Custom_arc(selectCustomObjId)
            }
        }
        break;
    case mDrawFlag_Custom_ruler:
        var X = $("#" + I[0] + "_l2")[0].getAttribute("x1");
        var Y = $("#" + I[0] + "_l2")[0].getAttribute("y1");
        var c = $("#" + I[0] + "_l2")[0].getAttribute("x2");
        var e = $("#" + I[0] + "_l2")[0].getAttribute("y2");
        var M = $("#" + I[0])[0].getAttribute("mtext");
        var X, Y, c, e;
        var Z, Q, W, P, D, O, a, T;
        var F, U;
        for (i = 1; i < I.length; i++) {
            selectCustomObjId = I[i];
            node_l1 = $("#" + selectCustomObjId + "_l1")[0];
            node_l2 = $("#" + selectCustomObjId + "_l2")[0];
            node_l3 = $("#" + selectCustomObjId + "_l3")[0];
            node_t = $("#" + selectCustomObjId + "_t")[0];
            var K = $("#" + selectCustomObjId + "_l2")[0].getAttribute("x1");
            var V = $("#" + selectCustomObjId + "_l2")[0].getAttribute("y1");
            var J = $("#" + selectCustomObjId + "_l2")[0].getAttribute("x2");
            var N = $("#" + selectCustomObjId + "_l2")[0].getAttribute("y2");
            var E = MicroDraw_getRulerDataInfo(Number(K), Number(V), Number(K), Number(V) + Number(e) - Number(Y), M);
            var H = E.split(",");
            mx1 = H[0];
            my1 = H[1];
            mx2 = H[2];
            my2 = H[3];
            Z = H[4];
            Q = H[5];
            W = H[6];
            P = H[7];
            D = H[8];
            O = H[9];
            a = H[10];
            T = H[11];
            F = H[12];
            U = H[13];
            node_l1.setAttribute("x1", Z);
            node_l1.setAttribute("y1", Q);
            node_l1.setAttribute("x2", W);
            node_l1.setAttribute("y2", P);
            node_l2.setAttribute("x1", mx1);
            node_l2.setAttribute("y1", my1);
            node_l2.setAttribute("x2", mx2);
            node_l2.setAttribute("y2", my2);
            node_l3.setAttribute("x1", D);
            node_l3.setAttribute("y1", O);
            node_l3.setAttribute("x2", a);
            node_l3.setAttribute("y2", T);
            node_t.setAttribute("x", F);
            node_t.setAttribute("y", U)
        }
        break;
    case mDrawFlag_Custom_wall:
        var L = $("#" + I[0])[0].getAttribute("mwallheight");
        var S = $("#" + I[0])[0].getAttribute("mwallrow");
        for (i = 0; i < I.length; i++) {
            selectCustomObjId = I[i];
            selectNode = $("#" + selectCustomObjId)[0];
            selectNode.setAttribute("mwallheight", L);
            selectNode.setAttribute("mwallrow", S)
        }
        for (i = 0; i < I.length; i++) {
            MicroDraw_Redraw_Custom_wall(selectCustomObjId)
        }
        break
    }
    MicroDraw_StepRecord();
    MicroDraw_AddCustomControlPoint(mDrawCustomObjList)
}
function MicroDraw_CustomObj_getPolygonMinMax(O, I) {
    var G;
    var H = $("#" + O)[0];
    var D, E, F, J, N, C, A, B;
    var M = H.getAttribute("points");
    var K = M.split(" ");
    var L;
    L = K[0].split(",");
    D = L[0];
    E = L[1];
    L = K[1].split(",");
    F = L[0];
    J = L[1];
    L = K[2].split(",");
    N = L[0];
    C = L[1];
    L = K[3].split(",");
    A = L[0];
    B = L[1];
    switch (I) {
    case "minx":
        G = 100000000;
        if (Number(G) > Number(D)) {
            G = D
        }
        if (Number(G) > Number(F)) {
            G = F
        }
        if (Number(G) > Number(N)) {
            G = N
        }
        if (Number(G) > Number(A)) {
            G = A
        }
        break;
    case "miny":
        G = 100000000;
        if (Number(G) > Number(E)) {
            G = E
        }
        if (Number(G) > Number(J)) {
            G = J
        }
        if (Number(G) > Number(C)) {
            G = C
        }
        if (Number(G) > Number(B)) {
            G = B
        }
        break;
    case "maxx":
        G = 0;
        if (Number(G) < Number(D)) {
            G = D
        }
        if (Number(G) < Number(F)) {
            G = F
        }
        if (Number(G) < Number(N)) {
            G = N
        }
        if (Number(G) < Number(A)) {
            G = A
        }
        break;
    case "maxy":
        G = 0;
        if (Number(G) < Number(E)) {
            G = E
        }
        if (Number(G) < Number(J)) {
            G = J
        }
        if (Number(G) < Number(C)) {
            G = C
        }
        if (Number(G) < Number(B)) {
            G = B
        }
        break
    }
    return G
}
var mDrawDropSVGRoot = null;
var mDrawDropTrueCoords = null;
var mDrawDropGrabPoint = null;
var mDrawDropBackDrop = null;
var mDrawDropDragTarget = null;
var mDrawCustomObjList = "";
function MicroDraw_drapDropInit() {
    try {
        mDrawDropSVGRoot = $("#" + mDrawFlag_SvgId)[0];
        mDrawDropTrueCoords = mDrawDropSVGRoot.createSVGPoint();
        mDrawDropGrabPoint = mDrawDropSVGRoot.createSVGPoint();
        mDrawDropBackDrop = $("#mBackGround")[0];
        if (isPcUserAgent()) {
            $("#" + mDrawFlag_SvgId).unbind("mousedown");
            $("#" + mDrawFlag_SvgId).unbind("mousemove");
            $("#" + mDrawFlag_SvgId).unbind("mouseup");
            $("#" + mDrawFlag_SvgId).on("mousedown",
            function(B) {
                MicroDraw_mousedown(B)
            });
            $("#" + mDrawFlag_SvgId).on("mousemove",
            function(B) {
                MicroDraw_mousemove(B)
            });
            $("#" + mDrawFlag_SvgId).on("mouseup",
            function(B) {
                MicroDraw_mouseup(B)
            })
        } else {
            $("#" + mDrawFlag_SvgId).unbind("touchstart");
            $("#" + mDrawFlag_SvgId).unbind("touchmove");
            $("#" + mDrawFlag_SvgId).unbind("touchend");
            $("#" + mDrawFlag_SvgId).on("touchstart",
            function(C) {
                var B = event || C;
                MicroDraw_mousedown(B)
            });
            $("#" + mDrawFlag_SvgId).on("touchmove",
            function(C) {
                var B = event || C;
                MicroDraw_mousemove(B)
            });
            $("#" + mDrawFlag_SvgId).on("touchend",
            function(C) {
                var B = event || C;
                MicroDraw_mouseup(B)
            })
        }
    } catch(A) {}
}
function MicroDraw_mousedown(evt) {
    try {
        var targetElement = evt.target;
        var pNode = $(targetElement)[0].parentNode;
        var pId = pNode.getAttribute("id");
        var mtype = pNode.getAttribute("mtype"); (function() {
            var firstWinId = "";
            if ($(targetElement).length > 0) {
                var firstWin = $(targetElement).parents("[mwin]");
                if (firstWin.length > 0) {
                    firstWin = MicroDraw_GetmoveCombWin(firstWin);
                    firstWinId = firstWin.attr("id");
                    if (firstWin.length > 0) {
                        MicroDraw_RemoveCombs3DShow(firstWinId)
                    }
                }
            }
        })();
        if (isEmptyOrNull(pId)) {
            pId = "";
            if ($(targetElement).parents("[mtype=" + mDrawFlag_Custom_impSvg + "]").length > 0) {
                targetElement = $(targetElement).parents("[mtype=" + mDrawFlag_Custom_impSvg + "]").children().last().get(0);
                pNode = $(targetElement)[0].parentNode;
                pId = pNode.getAttribute("id");
                mtype = pNode.getAttribute("mtype")
            }
        }
        if (isEmptyOrNull(mtype)) {
            mtype = pNode.parentNode.getAttribute("mtype")
        }
        if (mtype == mDrawFlag_Custom_controlPoint) {
            if ($(targetElement)[0].getAttribute("mbelongtype") == mDrawFlag_Custom_polygon) {
                $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_controlPoint + "'] rect").each(function(i, o) {
                    o.setAttributeNS(null, "fill", "#000000")
                });
                var node = $(targetElement)[0];
                node.setAttribute("fill", "#FF0000");
                mDrawPolygonPointMoveInfo = node.getAttribute("mbelongid") + "," + node.getAttribute("mmoving")
            }
        }
        if (mtype != mDrawFlag_Custom_controlPoint) {
            if (mtype != mDrawFlag_Custom_controlPoint) {
                $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_controlPoint + "']").each(function(i, o) {
                    var curNode = o.parentNode;
                    curNode.removeChild(o)
                })
            }
        }
        $.each($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_CornerMaterial + "'] rect"),
        function() {
            $(this).get(0).setAttribute("fill", $(this).parent().attr("mfill"))
        });
        $.each($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_CornerMaterial_h + "'] rect"),
        function() {
            $(this).get(0).setAttribute("fill", $(this).parent().attr("mfill"))
        });
        if (mDrawDropBackDrop == targetElement) {
            mDrawCustomObjList = "";
            MicroDraw_UnselectObj();
            mDrawDropDragTarget = null;
            MicroDraw_closeEditor();
            $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_text + "'] text").each(function(i, o) {
                o.setAttributeNS(null, "pointer-events", "all")
            });
            $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_rect + "'] rect").each(function(i, o) {
                o.setAttributeNS(null, "pointer-events", "all")
            });
            $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_line + "'] line").each(function(i, o) {
                o.setAttributeNS(null, "pointer-events", "all")
            });
            $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_circle + "'] circle").each(function(i, o) {
                o.setAttributeNS(null, "pointer-events", "all")
            });
            $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_polygon + "'] polygon").each(function(i, o) {
                o.setAttributeNS(null, "pointer-events", "all")
            });
            $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_arc + "'] path").each(function(i, o) {
                o.setAttributeNS(null, "pointer-events", "all")
            });
            $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_ruler + "'] line").each(function(i, o) {
                o.setAttributeNS(null, "pointer-events", "all")
            });
            $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_ruler + "'] text").each(function(i, o) {
                o.setAttributeNS(null, "pointer-events", "all")
            });
            $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_wall + "'] path").each(function(i, o) {
                o.setAttributeNS(null, "pointer-events", "all")
            });
            $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_CornerMaterial + "'] rect").each(function(i, o) {
                o.setAttributeNS(null, "pointer-events", "all")
            });
            $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_CornerMaterial_h + "'] rect").each(function(i, o) {
                o.setAttributeNS(null, "pointer-events", "all")
            });
            $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_WinArcs + "'] path").each(function(i, o) {
                o.setAttributeNS(null, "pointer-events", "all")
            });
            mDrawPolygonPointMoveInfo = ""
        } else {
            if (mtype == mDrawFlag_Custom_arc || mtype == mDrawFlag_Custom_wall || mtype == mDrawFlag_Custom_qj_lt || mtype == mDrawFlag_Custom_qj_rt || mtype == mDrawFlag_Custom_qj_rb || mtype == mDrawFlag_Custom_qj_lb || mtype == mDrawFlag_Custom_qj_tm || mtype == mDrawFlag_Custom_qj_rm || mtype == mDrawFlag_Custom_qj_bm || mtype == mDrawFlag_Custom_qj_lm || mtype == mDrawFlag_Custom_qj_rx || mtype == mDrawFlag_Custom_qj_lx || mtype == mDrawFlag_Custom_qj_lrx) {
                mDrawDropDragTarget = targetElement;
                mDrawDropDragTarget.parentNode.appendChild(mDrawDropDragTarget);
                mDrawDropDragTarget.setAttributeNS(null, "pointer-events", "none");
                if (!isPcUserAgent()) {
                    var touch = evt.targetTouches[0];
                    mDrawDropTrueCoords.x = Number(touch.pageX);
                    mDrawDropTrueCoords.y = Number(touch.pageY)
                }
                var transMatrix = mDrawDropDragTarget.getCTM();
                mDrawDropGrabPoint.x = mDrawDropTrueCoords.x - Number(transMatrix.e);
                mDrawDropGrabPoint.y = mDrawDropTrueCoords.y - Number(transMatrix.f);
                MicroDraw_UnselectObj();
                var ppNode = pNode.parentNode;
                pId = ppNode.getAttribute("id");
                var arc_pObj = $("#" + pId + "_g1");
                with(arc_pObj.find("path")) {
                    attr("mselect", "1");
                    attr("mselected", "1");
                    attr("fill", mDrawSvgFocusColor)
                }
                $("#" + pId + " [mtype=" + mDrawFlag_Custom_arc_bf + "] path").attr("fill", mDrawSvgFocusColor);
                MicroDraw_showObjProperty(pId);
                MicroDraw_selectObjPrGl(pId);
                var e = evt || window.event || arguments.callee.caller.arguments[0];
                if (e.ctrlKey == 1) {
                    var pppNode = ppNode.parentNode;
                    if (pppNode.getAttribute("mtype") == mDrawFlag_Custom_g) {
                        $.each($("#" + pppNode.getAttribute("id")).children(),
                        function(i, c) {
                            MicroDraw_addObjIdToCustomObjList(c.id)
                        })
                    } else {
                        MicroDraw_addObjIdToCustomObjList(pId)
                    }
                } else {
                    mDrawCustomObjList = "";
                    var pppNode = ppNode.parentNode;
                    if (pppNode.getAttribute("mtype") == mDrawFlag_Custom_g) {
                        $("#" + pppNode.getAttribute("id") + " g").each(function(i, o) {
                            MicroDraw_addObjIdToCustomObjList(o.id)
                        })
                    } else {
                        if (pNode.getAttribute("mtype") == mDrawFlag_Custom_controlPoint) {
                            MicroDraw_addObjIdToCustomObjList($(targetElement)[0].getAttribute("mbelongid"))
                        } else {
                            MicroDraw_addObjIdToCustomObjList(pId)
                        }
                    }
                }
                if (mtype != mDrawFlag_Custom_controlPoint) {
                    MicroDraw_AddCustomControlPoint(mDrawCustomObjList)
                }
            } else {
                if (mtype && mtype.indexOf(mDrawFlag_Custom) >= 0) {
                    mDrawDropDragTarget = targetElement;
                    if (mtype != mDrawFlag_Custom_ruler) {
                        mDrawDropDragTarget.parentNode.appendChild(mDrawDropDragTarget);
                        mDrawDropDragTarget.setAttributeNS(null, "pointer-events", "none")
                    } else {
                        if (isPcUserAgent()) {
                            var node_ruler = $(targetElement)[0].parentNode;
                            var rulerId = node_ruler.getAttribute("id");
                            var clickEvent = $("#" + rulerId + "_t")[0].getAttribute("ondblclick");
                            if (isEmptyOrNull(clickEvent)) {
                                clickEvent = ""
                            }
                            if (clickEvent.length == 0) {
                                $("#" + rulerId + "_t")[0].setAttribute("ondblclick", "MicroDraw_Ruler_doubleClickText(this);")
                            }
                        } else {
                            var node_ruler = $(targetElement)[0].parentNode;
                            var rulerId = node_ruler.getAttribute("id");
                            var clickEvent = $("#" + rulerId + "_t")[0].getAttribute("onclick");
                            if (isEmptyOrNull(clickEvent)) {
                                clickEvent = ""
                            }
                            if (clickEvent.length == 0) {
                                $("#" + rulerId + "_t")[0].setAttribute("onclick", "MicroDraw_Ruler_doubleClickText(this);")
                            }
                        }
                    }
                    if (mtype == mDrawFlag_Custom_CornerMaterial) {
                        mDrawDropDragTarget.setAttribute("fill", mDrawSvgFocusColor);
                        MicroDraw_selectObjPrGl(pId)
                    }
                    if (mtype == mDrawFlag_Custom_CornerMaterial_h) {
                        mDrawDropDragTarget.setAttribute("fill", mDrawSvgFocusColor);
                        MicroDraw_selectObjPrGl(pId)
                    }
                    if (!isPcUserAgent()) {
                        var touch = evt.targetTouches[0];
                        mDrawDropTrueCoords.x = Number(touch.pageX);
                        mDrawDropTrueCoords.y = Number(touch.pageY)
                    }
                    var transMatrix = mDrawDropDragTarget.getCTM();
                    mDrawDropGrabPoint.x = mDrawDropTrueCoords.x - Number(transMatrix.e);
                    mDrawDropGrabPoint.y = mDrawDropTrueCoords.y - Number(transMatrix.f);
                    MicroDraw_UnselectObj();
                    MicroDraw_showObjProperty(pId);
                    var e = evt || window.event || arguments.callee.caller.arguments[0];
                    var mobileMultiSelect = false;
                    if ($("#mMobileDraw_drawMenu_multiSelect").length > 0) {
                        mobileMultiSelect = $("#mMobileDraw_drawMenu_multiSelect").linkbutton("options").selected
                    }
                    if (e.ctrlKey == 1 || mobileMultiSelect) {
                        var ppNode = pNode.parentNode;
                        if (ppNode.getAttribute("mtype") == mDrawFlag_Custom_g) {
                            $.each($("#" + ppNode.getAttribute("id")).children(),
                            function(i, c) {
                                MicroDraw_addObjIdToCustomObjList(c.id)
                            })
                        } else {
                            MicroDraw_addObjIdToCustomObjList(pId)
                        }
                    } else {
                        mDrawCustomObjList = "";
                        if (mtype != mDrawFlag_Custom_controlPoint) {
                            MicroDraw_addObjIdToCustomObjList(pId)
                        }
                        var ppNode = pNode.parentNode;
                        if (ppNode.getAttribute("mtype") == mDrawFlag_Custom_g) {
                            $.each($("#" + ppNode.getAttribute("id")).children(),
                            function(i, o) {
                                MicroDraw_addObjIdToCustomObjList(o.id)
                            })
                        } else {
                            if (pNode.getAttribute("mtype") == mDrawFlag_Custom_controlPoint) {
                                MicroDraw_addObjIdToCustomObjList($(targetElement)[0].getAttribute("mbelongid"))
                            } else {
                                MicroDraw_addObjIdToCustomObjList(pId)
                            }
                        }
                    }
                    if (mtype != mDrawFlag_Custom_controlPoint) {
                        MicroDraw_AddCustomControlPoint(mDrawCustomObjList)
                    }
                } else {
                    if ($(pNode).parents('[mtype="' + mDrawFlag_Win + '"]').length > 0) {
                        mDrawDropDragTarget = targetElement;
                        if (!isPcUserAgent()) {
                            var touch = evt.targetTouches[0];
                            mDrawDropTrueCoords.x = Number(touch.pageX);
                            mDrawDropTrueCoords.y = Number(touch.pageY)
                        }
                        var transMatrix = mDrawDropDragTarget.getCTM();
                        mDrawDropGrabPoint.x = mDrawDropTrueCoords.x - Number(transMatrix.e);
                        mDrawDropGrabPoint.y = mDrawDropTrueCoords.y - Number(transMatrix.f);
                        var nodeClick = $(targetElement)[0];
                        MicroDraw_WinObjClick(nodeClick.getAttribute("id"));
                        var twin = $(mDrawDropDragTarget.parentNode).parents('[mtype="' + mDrawFlag_Win + '"]');
                        if (twin.length == 0) {
                            return true
                        }
                        winNode = $(mDrawDropDragTarget.parentNode).parents('[mtype="' + mDrawFlag_Win + '"]')[0];
                        mDrawCustomObjList = winNode.getAttribute("id")
                    } else {
                        if (mtype.indexOf(mDrawFlag_CoorX) >= 0) {
                            mDrawDropDragTarget = targetElement;
                            if (!isPcUserAgent()) {
                                var touch = evt.targetTouches[0];
                                mDrawDropTrueCoords.x = Number(touch.pageX);
                                mDrawDropTrueCoords.y = Number(touch.pageY)
                            }
                            var transMatrix = mDrawDropDragTarget.getCTM();
                            mDrawDropGrabPoint.x = mDrawDropTrueCoords.x - Number(transMatrix.e);
                            mDrawDropGrabPoint.y = mDrawDropTrueCoords.y - Number(transMatrix.f);
                            var coorx = $(targetElement).parents("[mtype=" + mDrawFlag_CoorX + "]");
                            var transform = $.MicroSVG.getMatrix(coorx.attr("transform"));
                            var matrix = transform.matrix;
                            coorx.attr("_transform", "matrix(1,0,0,1,0," + matrix[5] + ")")
                        } else {
                            if (mtype.indexOf(mDrawFlag_CoorY) >= 0) {
                                mDrawDropDragTarget = targetElement;
                                if (!isPcUserAgent()) {
                                    var touch = evt.targetTouches[0];
                                    mDrawDropTrueCoords.x = Number(touch.pageX);
                                    mDrawDropTrueCoords.y = Number(touch.pageY)
                                }
                                var transMatrix = mDrawDropDragTarget.getCTM();
                                mDrawDropGrabPoint.x = mDrawDropTrueCoords.x - 0;
                                mDrawDropGrabPoint.y = mDrawDropTrueCoords.y - 0;
                                var coory = $(targetElement).parents("[mtype=" + mDrawFlag_CoorY + "]");
                                var transform = $.MicroSVG.getMatrix(coory.attr("transform"));
                                var matrix = transform.matrix;
                                coory.attr("_transform", "matrix(1,0,0,1," + matrix[4] + "," + matrix[5] + ")")
                            } else {
                                if (mtype.indexOf(mDrawFlag_combCoorX) >= 0) {
                                    mDrawDropDragTarget = targetElement;
                                    if (!isPcUserAgent()) {
                                        var touch = evt.targetTouches[0];
                                        mDrawDropTrueCoords.x = Number(touch.pageX);
                                        mDrawDropTrueCoords.y = Number(touch.pageY)
                                    }
                                    var transMatrix = mDrawDropDragTarget.getCTM();
                                    mDrawDropGrabPoint.x = mDrawDropTrueCoords.x - Number(transMatrix.e);
                                    mDrawDropGrabPoint.y = mDrawDropTrueCoords.y - Number(transMatrix.f)
                                } else {
                                    if (mtype.indexOf(mDrawFlag_combCoorY) >= 0) {
                                        mDrawDropDragTarget = targetElement;
                                        if (!isPcUserAgent()) {
                                            var touch = evt.targetTouches[0];
                                            mDrawDropTrueCoords.x = Number(touch.pageX);
                                            mDrawDropTrueCoords.y = Number(touch.pageY)
                                        }
                                        var transMatrix = mDrawDropDragTarget.getCTM();
                                        mDrawDropGrabPoint.x = mDrawDropTrueCoords.x - 0;
                                        mDrawDropGrabPoint.y = mDrawDropTrueCoords.y - 0
                                    } else {
                                        if (mtype.indexOf(mDrawFlag_ArcsCoorY) >= 0) {
                                            mDrawDropDragTarget = targetElement;
                                            if (!isPcUserAgent()) {
                                                var touch = evt.targetTouches[0];
                                                mDrawDropTrueCoords.x = Number(touch.pageX);
                                                mDrawDropTrueCoords.y = Number(touch.pageY)
                                            }
                                            var transMatrix = mDrawDropDragTarget.getCTM();
                                            mDrawDropGrabPoint.x = mDrawDropTrueCoords.x - 0;
                                            mDrawDropGrabPoint.y = mDrawDropTrueCoords.y - 0
                                        } else {
                                            if (mtype == mDrawFlag_Area || mtype == mDrawFlag_Glass || mtype == mDrawFlag_Pkc || mtype.substring(0, 3) == mDrawFlag_Tlc || mtype == mDrawFlag_Dkc || mtype.substring(0, 3) == mDrawFlag_Zdm || mtype == mDrawFlag_ArcsGlass || mtype == mDrawFlag_FrameArcs || mDrawFlag_FrameArcsTingH || mDrawFlag_FrameArcsTingV || mDrawFlag_ArcsPkc || mDrawFlag_ArcsDkc) {
                                                mDrawDropDragTarget = targetElement;
                                                if (!isPcUserAgent()) {
                                                    var touch = evt.targetTouches[0];
                                                    mDrawDropTrueCoords.x = Number(touch.pageX);
                                                    mDrawDropTrueCoords.y = Number(touch.pageY)
                                                }
                                                var transMatrix = mDrawDropDragTarget.getCTM();
                                                mDrawDropGrabPoint.x = mDrawDropTrueCoords.x - Number(transMatrix.e);
                                                mDrawDropGrabPoint.y = mDrawDropTrueCoords.y - Number(transMatrix.f);
                                                var nodeClick = $(targetElement)[0];
                                                MicroDraw_WinObjClick(nodeClick.getAttribute("id"));
                                                if (mtype.substring(0, 3) == mDrawFlag_Tlc || mtype == mDrawFlag_Dkc || mtype.substring(0, 3) == mDrawFlag_Zdm) {
                                                    mDrawCustomObjList = mDrawDropDragTarget.parentNode.parentNode.getAttribute("id")
                                                } else {
                                                    if ($(nodeClick).parents("[mtype=" + mDrawFlag_WinArcs + "]").length > 0) {
                                                        mDrawCustomObjList = $(nodeClick).parents("[mtype=" + mDrawFlag_WinArcs + "]").attr("id")
                                                    } else {
                                                        mDrawCustomObjList = mDrawDropDragTarget.parentNode.getAttribute("id")
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    } catch(e) {
        console.log(e.name + ":" + e.message)
    }
}
function MicroDraw_ShiftLine(D, E, A, B) {
    var D = Number(D);
    var A = Number(A);
    var E = Number(E);
    var B = Number(B);
    var C = (Math.atan((B - E) / (A - D)) * 180 / Math.PI);
    var F = Math.abs(C);
    if (F < 30) {
        B = E
    } else {
        if ((F >= 30 && F <= 45) || (F >= 45 && F <= 60)) {
            B = C >= 0 ? A - D + E: D - A + E
        } else {
            A = D
        }
    }
    return {
        x: A,
        y: B
    }
}
function MicroDraw_mousemove(evt) {
    try {
        MicroDraw_GetTrueCoords(evt);
        if (mDrawDropDragTarget && (evt.which == 1 || evt.targetTouches.length <= 1)) {
            var ScaleG_scale = 1;
            if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
                ScaleG_scale = Number(mDrawSvgViewBox) / Number(MobileFrame_getCurrMobileViewScale(mDrawFlag_SvgId))
            }
            if (!isPcUserAgent()) {
                evt.preventDefault();
                var touch = evt.targetTouches[0];
                mDrawDropTrueCoords.x = Number(touch.pageX);
                mDrawDropTrueCoords.y = Number(touch.pageY)
            }
            var newX = mDrawDropTrueCoords.x - mDrawDropGrabPoint.x;
            var newY = mDrawDropTrueCoords.y - mDrawDropGrabPoint.y;
            if (isNaN(newX) || isNaN(newY)) {
                newX = 0;
                newY = 0
            }
            if ($(mDrawDropDragTarget).parents("[mtype=" + mDrawFlag_WinArcs + "]").length > 0) {
                if ($(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_ArcsCoorY + '"]').length > 0) {
                    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
                        $(mDrawDropDragTarget).parents("[mtype=" + mDrawFlag_ArcsCoorY + "]").attr("transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + ",0)")
                    } else {
                        $(mDrawDropDragTarget).parents("[mtype=" + mDrawFlag_WinArcs + "]").find("[mtype=" + mDrawFlag_ArcsCoorY + "]").attr("transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) + ", 0)")
                    }
                } else {
                    if ($(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_ArcsCoorX + '"]').length > 0) {
                        var coor = $(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_ArcsCoorX + '"]')[0];
                        if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
                            coor.setAttributeNS(null, "transform", "translate(0, " + Number(newY) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + ")")
                        } else {
                            coor.setAttributeNS(null, "transform", "translate(0, " + Number(newY) * Number(mDrawSvgViewBox) + ")")
                        }
                    } else {
                        var transform = "translate(" + Number(newX) * Number(mDrawSvgViewBox) + "," + Number(newY) * Number(mDrawSvgViewBox) + ")";
                        if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
                            transform = "translate(" + Number(newX) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + "," + Number(newY) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + ")"
                        }
                        $(mDrawDropDragTarget).parents("[mtype=" + mDrawFlag_WinArcs + "]").attr("transform", transform)
                    }
                }
                return
            }
            var cusArc = $(mDrawDropDragTarget).parents("[mtype]");
            with(cusArc) {
                if (length > 0) {
                    var mx_exp = attr("mx_exp");
                    var my_exp = attr("my_exp");
                    if (!$.Micro.IsEmpty(mx_exp) || !$.Micro.IsEmpty(my_exp)) {
                        return true
                    }
                }
            }
            if ($(mDrawDropDragTarget).parent().attr("mtype") == mDrawFlag_Custom_arc_bf) {
                return true
            }
            if ($(mDrawDropDragTarget).parents("[mtype=" + mDrawFlag_Glass + "]").length > 0 && $(mDrawDropDragTarget).parents("[mtype=" + mDrawFlag_Custom_arc + "]").length > 0) {
                return true
            }
            if ($(mDrawDropDragTarget.parentNode).parents('[mtype="' + mDrawFlag_Win + '"]').length > 0 || $(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_CoorX + '"]').length > 0 || $(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_CoorY + '"]').length > 0 || $(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_combCoorX + '"]').length > 0 || $(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_combCoorY + '"]').length > 0) {} else {
                if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
                    mDrawDropDragTarget.setAttributeNS(null, "transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + "," + Number(newY) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + ")")
                } else {
                    mDrawDropDragTarget.setAttributeNS(null, "transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) + "," + Number(newY) * Number(mDrawSvgViewBox) + ")");
                    if ($(mDrawDropDragTarget).parents("[mtype=" + mDrawFlag_Custom_CornerMaterial + "]").length > 0) {
                        var CMObj = $(mDrawDropDragTarget).parents("[mtype=" + mDrawFlag_Custom_CornerMaterial + "]");
                        $("#" + mDrawFlag_SvgId).find("[belongto=" + CMObj.attr("id") + "] text").attr("transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) + "," + Number(newY) * Number(mDrawSvgViewBox) + ")")
                    }
                }
            }
            var mtype = mDrawDropDragTarget.parentNode.getAttribute("mtype");
            if (mtype != mDrawFlag_Custom_controlPoint) {
                $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_controlPoint + "']").each(function(i, o) {
                    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
                        o.setAttributeNS(null, "transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + "," + Number(newY) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + ")")
                    } else {
                        o.setAttributeNS(null, "transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) + "," + Number(newY) * Number(mDrawSvgViewBox) + ")")
                    }
                })
            }
            var pNode = mDrawDropDragTarget.parentNode;
            try {
                switch (pNode.getAttribute("mtype")) {
                case mDrawFlag_Custom_controlPoint:
                    var belongType = mDrawDropDragTarget.getAttribute("mbelongtype");
                    var belongId = mDrawDropDragTarget.getAttribute("mbelongid");
                    switch (belongType) {
                    case mDrawFlag_Custom_CornerMaterial:
                    case mDrawFlag_Custom_CornerMaterial_h:
                    case mDrawFlag_Custom_rect:
                        var node = $("#" + belongId + "_r")[0];
                        if (belongType == mDrawFlag_Custom_CornerMaterial || belongType == mDrawFlag_Custom_CornerMaterial_h) {
                            node = $("#" + belongId + "_rect")[0]
                        }
                        var moving = mDrawDropDragTarget.getAttribute("mmoving");
                        var oldX = mDrawDropDragTarget.getAttribute("moldx");
                        var oldY = mDrawDropDragTarget.getAttribute("moldy");
                        var oldW = mDrawDropDragTarget.getAttribute("moldw");
                        var oldH = mDrawDropDragTarget.getAttribute("moldh");
                        switch (moving) {
                        case "lt":
                            if ((belongType == mDrawFlag_Custom_CornerMaterial || belongType == mDrawFlag_Custom_CornerMaterial_h) && oldW != mDrawThickFrame || belongType == mDrawFlag_Custom_rect) {
                                node.setAttribute("x", Number(oldX) + Number(newX));
                                node.setAttribute("width", (Number(oldX) + Number(oldW)) - Number(node.getAttribute("x")))
                            }
                            if ((belongType == mDrawFlag_Custom_CornerMaterial || belongType == mDrawFlag_Custom_CornerMaterial_h) && oldH != mDrawThickFrame || belongType == mDrawFlag_Custom_rect) {
                                node.setAttribute("y", Number(oldY) + Number(newY));
                                node.setAttribute("height", (Number(oldY) + Number(oldH)) - Number(node.getAttribute("y")))
                            }
                            break;
                        case "lb":
                            if ((belongType == mDrawFlag_Custom_CornerMaterial || belongType == mDrawFlag_Custom_CornerMaterial_h) && oldW != mDrawThickFrame || belongType == mDrawFlag_Custom_rect) {
                                node.setAttribute("x", Number(oldX) + Number(newX));
                                node.setAttribute("width", (Number(oldX) + Number(oldW)) - Number(node.getAttribute("x")))
                            }
                            if ((belongType == mDrawFlag_Custom_CornerMaterial || belongType == mDrawFlag_Custom_CornerMaterial_h) && oldH != mDrawThickFrame || belongType == mDrawFlag_Custom_rect) {
                                node.setAttribute("height", Number(oldH) + Number(newY))
                            }
                            break;
                        case "rt":
                            if ((belongType == mDrawFlag_Custom_CornerMaterial || belongType == mDrawFlag_Custom_CornerMaterial_h) && oldW != mDrawThickFrame || belongType == mDrawFlag_Custom_rect) {
                                node.setAttribute("width", Number(oldW) + Number(newX))
                            }
                            if ((belongType == mDrawFlag_Custom_CornerMaterial || belongType == mDrawFlag_Custom_CornerMaterial_h) && oldH != mDrawThickFrame || belongType == mDrawFlag_Custom_rect) {
                                node.setAttribute("y", Number(oldY) + Number(newY));
                                node.setAttribute("height", (Number(oldY) + Number(oldH)) - Number(node.getAttribute("y")))
                            }
                            break;
                        case "rb":
                            if ((belongType == mDrawFlag_Custom_CornerMaterial || belongType == mDrawFlag_Custom_CornerMaterial_h) && oldW != mDrawThickFrame || belongType == mDrawFlag_Custom_rect) {
                                node.setAttribute("width", Number(oldW) + Number(newX))
                            }
                            if ((belongType == mDrawFlag_Custom_CornerMaterial || belongType == mDrawFlag_Custom_CornerMaterial_h) && oldH != mDrawThickFrame || belongType == mDrawFlag_Custom_rect) {
                                node.setAttribute("height", Number(oldH) + Number(newY))
                            }
                            break
                        }
                        var belongId = mDrawDropDragTarget.getAttribute("mbelongid");
                        MicroDraw_AddCustomControlPoint(belongId);
                        break;
                    case mDrawFlag_Custom_polygon:
                        var node = $("#" + belongId + "_p")[0];
                        var moving = mDrawDropDragTarget.getAttribute("mmoving");
                        var x1, y1, x2, y2, x3, y3, x4, y4;
                        x1 = mDrawDropDragTarget.getAttribute("mx1");
                        y1 = mDrawDropDragTarget.getAttribute("my1");
                        x2 = mDrawDropDragTarget.getAttribute("mx2");
                        y2 = mDrawDropDragTarget.getAttribute("my2");
                        x3 = mDrawDropDragTarget.getAttribute("mx3");
                        y3 = mDrawDropDragTarget.getAttribute("my3");
                        x4 = mDrawDropDragTarget.getAttribute("mx4");
                        y4 = mDrawDropDragTarget.getAttribute("my4");
                        switch (moving) {
                        case "lt":
                            x1 = Number(x1) + Number(newX);
                            y1 = Number(y1) + Number(newY);
                            node.setAttribute("points", x1 + "," + y1 + " " + x2 + "," + y2 + " " + x3 + "," + y3 + " " + x4 + "," + y4);
                            break;
                        case "lb":
                            x4 = Number(x4) + Number(newX);
                            y4 = Number(y4) + Number(newY);
                            node.setAttribute("points", x1 + "," + y1 + " " + x2 + "," + y2 + " " + x3 + "," + y3 + " " + x4 + "," + y4);
                            break;
                        case "rt":
                            x2 = Number(x2) + Number(newX);
                            y2 = Number(y2) + Number(newY);
                            node.setAttribute("points", x1 + "," + y1 + " " + x2 + "," + y2 + " " + x3 + "," + y3 + " " + x4 + "," + y4);
                            break;
                        case "rb":
                            x3 = Number(x3) + Number(newX);
                            y3 = Number(y3) + Number(newY);
                            node.setAttribute("points", x1 + "," + y1 + " " + x2 + "," + y2 + " " + x3 + "," + y3 + " " + x4 + "," + y4);
                            break
                        }
                        var belongId = mDrawDropDragTarget.getAttribute("mbelongid");
                        MicroDraw_AddCustomControlPoint(belongId);
                        break;
                    case mDrawFlag_Custom_circle:
                        var node = $("#" + belongId + "_c")[0];
                        var moving = mDrawDropDragTarget.getAttribute("mmoving");
                        var oldCX = mDrawDropDragTarget.getAttribute("moldcx");
                        var oldCY = mDrawDropDragTarget.getAttribute("moldcy");
                        var oldR = mDrawDropDragTarget.getAttribute("moldr");
                        switch (moving) {
                        case "t":
                            node.setAttribute("cy", Number(oldCY) + Number(newY) / 2);
                            node.setAttribute("r", Number(oldR) - Number(newY) / 2);
                            break;
                        case "b":
                            node.setAttribute("cy", Number(oldCY) + Number(newY) / 2);
                            node.setAttribute("r", Number(oldR) + Number(newY) / 2);
                            break;
                        case "l":
                            node.setAttribute("cx", Number(oldCX) + Number(newX) / 2);
                            node.setAttribute("r", Number(oldR) - Number(newX) / 2);
                            break;
                        case "r":
                            node.setAttribute("cx", Number(oldCX) + Number(newX) / 2);
                            node.setAttribute("r", Number(oldR) + Number(newX) / 2);
                            break
                        }
                        var belongId = mDrawDropDragTarget.getAttribute("mbelongid");
                        MicroDraw_AddCustomControlPoint(belongId);
                        break;
                    case mDrawFlag_Custom_line:
                        var node = $("#" + belongId + "_l")[0];
                        var moving = mDrawDropDragTarget.getAttribute("mmoving");
                        var oldX1 = mDrawDropDragTarget.getAttribute("moldx1");
                        var oldY1 = mDrawDropDragTarget.getAttribute("moldy1");
                        var oldX2 = mDrawDropDragTarget.getAttribute("moldx2");
                        var oldY2 = mDrawDropDragTarget.getAttribute("moldy2");
                        switch (moving) {
                        case "s":
                            node.setAttribute("x1", Number(oldX1) + Number(newX));
                            node.setAttribute("y1", Number(oldY1) + Number(newY));
                            break;
                        case "e":
                            node.setAttribute("x2", Number(oldX2) + Number(newX));
                            node.setAttribute("y2", Number(oldY2) + Number(newY));
                            break
                        }
                        var belongId = mDrawDropDragTarget.getAttribute("mbelongid");
                        MicroDraw_AddCustomControlPoint(belongId);
                        break;
                    case mDrawFlag_Custom_ruler:
                        var node = $("#" + belongId + "_l2")[0];
                        var moving = mDrawDropDragTarget.getAttribute("mmoving");
                        var oldX1 = mDrawDropDragTarget.getAttribute("moldx1");
                        var oldY1 = mDrawDropDragTarget.getAttribute("moldy1");
                        var oldX2 = mDrawDropDragTarget.getAttribute("moldx2");
                        var oldY2 = mDrawDropDragTarget.getAttribute("moldy2");
                        var new_x1, new_y1, new_x2, new_y2;
                        var text = $("#" + belongId)[0].getAttribute("mtext");
                        switch (moving) {
                        case "s":
                            new_x1 = Number(oldX1) + Number(newX);
                            new_y1 = Number(oldY1) + Number(newY);
                            new_x2 = oldX2;
                            new_y2 = oldY2;
                            if (evt && evt.shiftKey) {
                                var newXY = MicroDraw_ShiftLine(new_x2, new_y2, new_x1, new_y1);
                                new_x1 = newXY.x;
                                new_y1 = newXY.y
                            }
                            break;
                        case "e":
                            new_x1 = Number(oldX1);
                            new_y1 = Number(oldY1);
                            new_x2 = Number(oldX2) + Number(newX);
                            new_y2 = Number(oldY2) + Number(newY);
                            if (evt && evt.shiftKey) {
                                var newXY = MicroDraw_ShiftLine(new_x1, new_y1, new_x2, new_y2);
                                new_x2 = newXY.x;
                                new_y2 = newXY.y
                            }
                            break;
                        case "txt":
                            new_x1 = oldX1;
                            new_y1 = oldY1;
                            new_x2 = oldX2;
                            new_y2 = oldY2;
                            break
                        }
                        var ArrStr = MicroDraw_getRulerDataInfo(new_x1, new_y1, new_x2, new_y2, text);
                        var Arr = ArrStr.split(",");
                        x1 = Arr[0];
                        y1 = Arr[1];
                        x2 = Arr[2];
                        y2 = Arr[3];
                        xx1 = Arr[4];
                        yy1 = Arr[5];
                        xx2 = Arr[6];
                        yy2 = Arr[7];
                        xx3 = Arr[8];
                        yy3 = Arr[9];
                        xx4 = Arr[10];
                        yy4 = Arr[11];
                        tx1 = Arr[12];
                        ty1 = Arr[13];
                        var node_l1 = $("#" + belongId + "_l1")[0];
                        var node_l2 = $("#" + belongId + "_l2")[0];
                        var node_l3 = $("#" + belongId + "_l3")[0];
                        var node_t = $("#" + belongId + "_t")[0];
                        node_l1.setAttribute("x1", xx1);
                        node_l1.setAttribute("y1", yy1);
                        node_l1.setAttribute("x2", xx2);
                        node_l1.setAttribute("y2", yy2);
                        node_l2.setAttribute("x1", x1);
                        node_l2.setAttribute("y1", y1);
                        node_l2.setAttribute("x2", x2);
                        node_l2.setAttribute("y2", y2);
                        node_l3.setAttribute("x1", xx3);
                        node_l3.setAttribute("y1", yy3);
                        node_l3.setAttribute("x2", xx4);
                        node_l3.setAttribute("y2", yy4);
                        node_t.setAttribute("x", tx1);
                        node_t.setAttribute("y", ty1);
                        var belongId = mDrawDropDragTarget.getAttribute("mbelongid");
                        MicroDraw_AddCustomControlPoint(belongId);
                        break
                    }
                    break
                }
            } catch(e) {
                return true
            }
            var pNode = mDrawDropDragTarget.parentNode;
            if ($(mDrawDropDragTarget.parentNode.parentNode).length == 0) {
                return true
            }
            var mtype = mDrawDropDragTarget.parentNode.parentNode.getAttribute("mtype");
            if (mtype == mDrawFlag_Custom_g) {
                $.each($("#" + pNode.getAttribute("id")).siblings(),
                function(i, obj) {
                    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
                        obj.setAttributeNS(null, "transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + "," + Number(newY) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + ")")
                    } else {
                        obj.setAttributeNS(null, "transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) + "," + Number(newY) * Number(mDrawSvgViewBox) + ")")
                    }
                })
            }
            var mtype = mDrawDropDragTarget.parentNode.parentNode.getAttribute("mtype");
            if (mtype == mDrawFlag_Custom_arc || mtype == mDrawFlag_Custom_wall) {
                if ($(mDrawDropDragTarget.parentNode).attr("mtype") == mDrawFlag_Custom_arc_bf) {
                    return true
                }
                $.each($("#" + mDrawDropDragTarget.parentNode.getAttribute("id")).siblings(),
                function(i, obj) {
                    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
                        obj.setAttributeNS(null, "transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + "," + Number(newY) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + ")")
                    } else {
                        obj.setAttributeNS(null, "transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) + "," + Number(newY) * Number(mDrawSvgViewBox) + ")")
                    }
                });
                $.each($("#" + mDrawDropDragTarget.getAttribute("id")).siblings(),
                function(i, obj) {
                    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
                        obj.setAttributeNS(null, "transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + "," + Number(newY) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + ")")
                    } else {
                        obj.setAttributeNS(null, "transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) + "," + Number(newY) * Number(mDrawSvgViewBox) + ")")
                    }
                })
            }
            var mtype = mDrawDropDragTarget.parentNode.parentNode.parentNode.getAttribute("mtype");
            if (mtype == mDrawFlag_Custom_g) {
                $.each($("#" + mDrawDropDragTarget.parentNode.parentNode.getAttribute("id")).siblings(),
                function(i, obj) {
                    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
                        obj.setAttributeNS(null, "transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + "," + Number(newY) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + ")")
                    } else {
                        obj.setAttributeNS(null, "transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) + "," + Number(newY) * Number(mDrawSvgViewBox) + ")")
                    }
                })
            }
            var mtype = mDrawDropDragTarget.parentNode.getAttribute("mtype");
            if (mtype == mDrawFlag_Custom_ruler) {
                $.each($("#" + mDrawDropDragTarget.getAttribute("id")).siblings(),
                function(i, obj) {
                    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
                        obj.setAttributeNS(null, "transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + "," + Number(newY) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + ")")
                    } else {
                        obj.setAttributeNS(null, "transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) + "," + Number(newY) * Number(mDrawSvgViewBox) + ")")
                    }
                })
            }
            var mtype = mDrawDropDragTarget.parentNode.getAttribute("mtype");
            if (mtype == mDrawFlag_Glass) {
                if ($(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_Win + '"]').length == 0) {
                    $.each($("#" + mDrawDropDragTarget.getAttribute("id")).siblings(),
                    function(i, obj) {
                        if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
                            obj.setAttributeNS(null, "transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + "," + Number(newY) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + ")")
                        } else {
                            obj.setAttributeNS(null, "transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) + "," + Number(newY) * Number(mDrawSvgViewBox) + ")")
                        }
                    })
                }
            }
            var mtype = mDrawDropDragTarget.parentNode.getAttribute("mtype");
            if (mtype == mDrawFlag_Pkc) {
                if ($(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_Win + '"]').length == 0) {
                    $.each($("#" + mDrawDropDragTarget.getAttribute("id")).siblings(),
                    function(i, obj) {
                        if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
                            obj.setAttributeNS(null, "transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + "," + Number(newY) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + ")")
                        } else {
                            obj.setAttributeNS(null, "transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) + "," + Number(newY) * Number(mDrawSvgViewBox) + ")")
                        }
                    })
                }
            }
            var mtype = mDrawDropDragTarget.parentNode.parentNode.getAttribute("mtype");
            if (!isEmptyOrNull(mtype)) {
                if (mtype.substring(0, 3) == mDrawFlag_Tlc || mtype == mDrawFlag_Dkc || mtype.substring(0, 3) == mDrawFlag_Zdm) {
                    if ($(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_Win + '"]').length == 0) {
                        $.each($("#" + mDrawDropDragTarget.parentNode.parentNode.getAttribute("id") + " rect"),
                        function(i, obj) {
                            if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
                                obj.setAttributeNS(null, "transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + "," + Number(newY) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + ")")
                            } else {
                                obj.setAttributeNS(null, "transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) + "," + Number(newY) * Number(mDrawSvgViewBox) + ")")
                            }
                        });
                        $.each($("#" + mDrawDropDragTarget.parentNode.parentNode.getAttribute("id") + " line"),
                        function(i, obj) {
                            if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
                                obj.setAttributeNS(null, "transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + "," + Number(newY) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + ")")
                            } else {
                                obj.setAttributeNS(null, "transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) + "," + Number(newY) * Number(mDrawSvgViewBox) + ")")
                            }
                        });
                        $.each($("#" + mDrawDropDragTarget.parentNode.parentNode.getAttribute("id") + " text"),
                        function(i, obj) {
                            if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
                                obj.setAttributeNS(null, "transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + "," + Number(newY) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + ")")
                            } else {
                                obj.setAttributeNS(null, "transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) + "," + Number(newY) * Number(mDrawSvgViewBox) + ")")
                            }
                        })
                    }
                }
            }
            var mtype = mDrawDropDragTarget.parentNode.getAttribute("mtype");
            if (mtype == mDrawFlag_Custom_impSvg) {
                var pNodeId = mDrawDropDragTarget.parentNode.getAttribute("id");
                var mscale = $("#" + pNodeId)[0].getAttribute("mscale");
                var mrotate = $("#" + pNodeId)[0].getAttribute("mrotate");
                var morigx = $("#" + pNodeId)[0].getAttribute("morigx");
                var morigy = $("#" + pNodeId)[0].getAttribute("morigy");
                var moffsetx = $("#" + pNodeId)[0].getAttribute("moffsetx");
                var moffsety = $("#" + pNodeId)[0].getAttribute("moffsety");
                var impSvgId = mDrawDropDragTarget.parentNode.getAttribute("id") + "_mImpSvgId";
                var offsetX = "";
                var offsetY = "";
                if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
                    offsetX = (Number(moffsetx) + Number(newX) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId))).toString();
                    offsetY = (Number(moffsety) + Number(newY) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId))).toString()
                } else {
                    offsetX = (Number(moffsetx) + Number(newX) * Number(mDrawSvgViewBox)).toString();
                    offsetY = (Number(moffsety) + Number(newY) * Number(mDrawSvgViewBox)).toString()
                }
                var mscalex = "0";
                var mscaley = "0";
                if (mscale.indexOf(" ") > 0) {
                    mscalex = mscale.substr(0, mscale.indexOf(" "));
                    mscaley = mscale.substr(mscale.indexOf(" ") + 1)
                } else {
                    mscalex = mscale;
                    mscaley = mscale
                }
                var mtransform = "";
                mtransform = "scale(" + mscale + ") rotate(" + mrotate + " " + morigx + " " + morigy + ") translate(" + (Number(offsetX) / Number(mscalex)).toString() + "," + (Number(offsetY) / Number(mscaley)).toString() + ")";
                $("#" + impSvgId)[0].setAttribute("transform", mtransform)
            }
            if (evt.which == 1 || evt.targetTouches.length <= 1) {
                if ($(mDrawDropDragTarget.parentNode).parents('[mtype="' + mDrawFlag_Win + '"]').length > 0) {
                    var winNode = $(mDrawDropDragTarget.parentNode).parents('[mtype="' + mDrawFlag_Win + '"]')[0];
                    winNode = MicroDraw_GetmoveCombWin($(winNode)).get(0);
                    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
                        winNode.setAttributeNS(null, "transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + "," + Number(newY) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId)) + ")")
                    } else {
                        winNode.setAttributeNS(null, "transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) + "," + Number(newY) * Number(mDrawSvgViewBox) + ")")
                    }
                    MicroDraw_CombWinSetPos({
                        "show3D": false
                    });
                    MicroDraw_ExpChangeCustom("pos")
                }
                if ($(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_CoorX + '"]').length > 0) {
                    var coor = $(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_CoorX + '"]')[0];
                    var Ttransform = $.MicroSVG.getMatrix($(coor).attr("transform"));
                    var matrix = Ttransform.matrix;
                    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
                        matrix[5] = Number(newY) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId))
                    } else {
                        matrix[5] = Number(newY) * Number(mDrawSvgViewBox)
                    }
                    $(coor).attr("transform", "matrix(" + matrix.join(",") + ")");
                    MicroDraw_gdPicAutoSettingPos()
                }
                if ($(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_CoorY + '"]').length > 0) {
                    var coor = $(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_CoorY + '"]')[0];
                    var Ttransform = $.MicroSVG.getMatrix($(coor).attr("transform"));
                    var matrix = Ttransform.matrix;
                    var _Ttransform = $.MicroSVG.getMatrix($(coor).attr("_transform"));
                    var _matrix = _Ttransform.matrix;
                    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
                        matrix[4] = (Number(newX) + Number(_matrix[4])) * Number(mDrawSvgViewBox) / Number(MobileFrame_getMobileViewScale(mDrawFlag_SvgId))
                    } else {
                        matrix[4] = (Number(newX) + Number(_matrix[4])) * Number(mDrawSvgViewBox)
                    }
                    matrix[5] = Number(_matrix[5]) + (Number(matrix[4]) - Number(_matrix[4])) * Number(matrix[1]);
                    $(coor).attr("transform", "matrix(" + matrix.join(",") + ")")
                }
                if ($(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_combCoorX + '"]').length > 0) {
                    var coor = $(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_combCoorX + '"]');
                    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
                        var transform = "translate(0, " + Number(newY) + ")";
                        coor.get(0).setAttributeNS(null, "transform", transform)
                    } else {
                        coor.get(0).setAttributeNS(null, "transform", "translate(0, " + Number(newY) * Number(mDrawSvgViewBox) + ")")
                    }
                    MicroDraw_gdPicAutoSettingPos()
                }
                if ($(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_combCoorY + '"]').length > 0) {
                    var coor = $(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_combCoorY + '"]');
                    var transform = "translate(" + Number(newX) + ", 0)";
                    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
                        coor.get(0).setAttributeNS(null, "transform", transform)
                    } else {
                        coor.get(0).setAttributeNS(null, "transform", "translate(" + Number(newX) * Number(mDrawSvgViewBox) + ", 0)")
                    }
                }
                if ($(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_Custom_arc + '"]').length > 0) {
                    var arcid = $(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_Custom_arc + '"]').attr("id");
                    setTimeout(function() {
                        MicroDraw_AutoRuler(arcid)
                    },
                    500)
                }
            }
        }
    } catch(e) {
        console.log(e.name + ":" + e.message)
    }
}
function MicroDraw_mouseup(evt) {
    try {
        var arcObjId = "";
        if (mDrawDropDragTarget) {
            var targetElement = evt.target;
            var transform = mDrawDropDragTarget.getAttribute("transform");
            var mtype = $(mDrawDropDragTarget)[0].parentNode.getAttribute("mtype");
            if (isEmptyOrNull(mtype)) {
                mtype = $(mDrawDropDragTarget)[0].parentNode.parentNode.getAttribute("mtype")
            }
            if ((isEmptyOrNull(transform) && mtype.indexOf(mDrawFlag_Custom) != 0) || $(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_CoorX + '"]').length > 0 || $(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_CoorY + '"]').length > 0 || $(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_combCoorX + '"]').length > 0 || $(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_combCoorY + '"]').length > 0) {
                var pNode = $(targetElement)[0].parentNode;
                if ($(pNode).parents('[mtype="' + mDrawFlag_Win + '"]').length) {
                    var twin = $(pNode).parents('[mtype="' + mDrawFlag_Win + '"]');
                    twin = MicroDraw_GetmoveCombWin(twin);
                    var winId = twin.attr("id");
                    var transform = twin.attr("transform");
                    var idx;
                    var xyArr;
                    var offsetX;
                    var offsetY;
                    if (isEmptyOrNull(transform)) {
                        offsetX = 0;
                        offsetY = 0
                    } else {
                        idx = transform.indexOf("(");
                        xyArr = transform.substring(idx).replace("(", "").replace(")", "").split(",");
                        offsetX = xyArr[0];
                        offsetY = xyArr[1]
                    }
                    MicroDraw_MoveFrameWinPostion([{
                        win: $("#" + mDrawFlag_SvgId + " #" + winId),
                        x_dev: offsetX,
                        y_dev: offsetY
                    }]);
                    $("#" + winId).removeAttr("transform");
                    MicroDraw_ShowSizeProperty();
                    MicroDraw_ShowCoordinate();
                    var RefreshObj = function(winid) {
                        var nodeFrame = $("#" + winid + ' [mtype="' + mDrawFlag_FrameRect + '"]')[0];
                        var wallNode = $("#" + mDrawFlag_SvgId + " [mwallbelongto=" + nodeFrame.getAttribute("id") + "]")[0];
                        if (!isEmptyOrNull(wallNode)) {
                            MicroDraw_Redraw_Custom_wall(wallNode.getAttribute("id"))
                        }
                        var frameId = nodeFrame.getAttribute("id");
                        $("#" + mDrawFlag_SvgId + " [mqjbelongtoframeid='" + frameId + "']").each(function(i, o) {
                            MicroDraw_Redraw(o.id)
                        })
                    };
                    var getCombWinIDs = MicroDraw_getCombWinIDs("all");
                    var Wins = getCombWinIDs.Wins;
                    if ($.Micro.isInArray(winId, Wins)) {
                        for (var ii = 0; ii < Wins.length; ii++) {
                            RefreshObj(Wins[ii])
                        }
                    } else {
                        RefreshObj(winId)
                    }
                    with($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_combCoorX + '"]')) {
                        if (length > 0) {
                            removeAttr("transform")
                        }
                    }
                    with($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_combCoorY + '"]')) {
                        if (length > 0) {
                            removeAttr("transform")
                        }
                    }
                    $.each($("#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_Custom_CornerMaterial + "]"),
                    function() {
                        MicroDraw_Redraw($(this).attr("id"))
                    });
                    $.each($("#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_Custom_CornerMaterial_h + "]"),
                    function() {
                        MicroDraw_Redraw($(this).attr("id"))
                    });
                    MicroDraw_reflashHandleCoorY();
                    MicroDraw_autoGdPic();
                    if (!isEmptyOrNull(mDrawSelectObjId)) {
                        MicroDraw_SelectObj(mDrawSelectObjId)
                    }
                }
                if ($(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_CoorX + '"]').length) {
                    var transform = $(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_CoorX + '"]')[0].getAttribute("transform");
                    var coorId = $(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_CoorX + '"]')[0].getAttribute("id");
                    if (!isEmptyOrNull(transform)) {
                        var transform = $(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_CoorX + '"]').attr("transform");
                        var transform = $.MicroSVG.getMatrix(transform);
                        var matrix = transform.matrix;
                        var _transform = $(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_CoorX + '"]').attr("_transform");
                        var _transform = $.MicroSVG.getMatrix(_transform);
                        var _matrix = _transform.matrix;
                        var xyArr = [0, Number(matrix[5]) - Number(_matrix[5])];
                        $("#" + coorId).removeAttr("_transform");
                        var offsetX = xyArr[0];
                        var offsetY = xyArr[1];
                        $("#" + coorId + " line").each(function(i, o) {
                            o.setAttributeNS(null, "x1", Number(o.getAttribute("x1")) + Number(offsetX));
                            o.setAttributeNS(null, "y1", Number(o.getAttribute("y1")) + Number(offsetY));
                            o.setAttributeNS(null, "x2", Number(o.getAttribute("x2")) + Number(offsetX));
                            o.setAttributeNS(null, "y2", Number(o.getAttribute("y2")) + Number(offsetY))
                        });
                        $("#" + coorId + " text").each(function(i, o) {
                            o.setAttributeNS(null, "x", Number(o.getAttribute("x")) + Number(offsetX));
                            o.setAttributeNS(null, "y", Number(o.getAttribute("y")) + Number(offsetY))
                        });
                        $("#" + coorId + " rect").each(function(i, o) {
                            o.setAttributeNS(null, "x", Number(o.getAttribute("x")) + Number(offsetX));
                            o.setAttributeNS(null, "y", Number(o.getAttribute("y")) + Number(offsetY))
                        });
                        $("#" + coorId).removeAttr("transform");
                        var maxCoorY = 0;
                        $("#" + coorId + " line").each(function(i, o) {
                            if (Number(maxCoorY) < Number(o.getAttribute("y2"))) {
                                maxCoorY = o.getAttribute("y2")
                            }
                        });
                        var minWinY = 10000000;
                        var minWinHeight = 0;
                        var winId = $("#" + coorId)[0].getAttribute("mwinid");
                        var nodeWin = $("#" + winId)[0];
                        $("#" + winId + " rect").each(function(i, o) {
                            if ($(o).parents("[mtype*='custom_qj_']").length > 0) {
                                return true
                            }
                            if (Number(minWinY) > Number(o.getAttribute("y"))) {
                                minWinY = o.getAttribute("y");
                                minWinHeight = o.getAttribute("height")
                            }
                        });
                        if (Number(maxCoorY) > (Number(minWinY) + Number(minWinHeight))) {
                            nodeWin.setAttribute("mcoorxoffset", "Y + H");
                            nodeWin.setAttribute("mcoorxoffsetval", (Number(maxCoorY) - (Number(minWinY) + Number(minWinHeight))).toString())
                        } else {
                            nodeWin.setAttribute("mcoorxoffset", "Y");
                            nodeWin.setAttribute("mcoorxoffsetval", (Number(maxCoorY) - Number(minWinY)).toString())
                        }
                    }
                }
                if ($(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_CoorY + '"]').length) {
                    var transform = $(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_CoorY + '"]')[0].getAttribute("transform");
                    var coorId = $(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_CoorY + '"]')[0].getAttribute("id");
                    if (!isEmptyOrNull(transform)) {
                        var transform = $(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_CoorY + '"]').attr("transform");
                        var transform = $.MicroSVG.getMatrix(transform);
                        var matrix = transform.matrix;
                        var _transform = $(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_CoorY + '"]').attr("_transform");
                        var _transform = $.MicroSVG.getMatrix(_transform);
                        var _matrix = _transform.matrix;
                        var xyArr = [Number(matrix[4]) - Number(_matrix[4]), 0];
                        $("#" + coorId).removeAttr("_transform");
                        var offsetX = xyArr[0];
                        var offsetY = xyArr[1];
                        $("#" + coorId + " line").each(function(i, o) {
                            o.setAttributeNS(null, "x1", Number(o.getAttribute("x1")) + Number(offsetX));
                            o.setAttributeNS(null, "y1", Number(o.getAttribute("y1")) + Number(offsetY));
                            o.setAttributeNS(null, "x2", Number(o.getAttribute("x2")) + Number(offsetX));
                            o.setAttributeNS(null, "y2", Number(o.getAttribute("y2")) + Number(offsetY))
                        });
                        $("#" + coorId + " text").each(function(i, o) {
                            var x = Number(o.getAttribute("x")) + Number(offsetX);
                            var y = Number(o.getAttribute("y")) + Number(offsetY);
                            o.setAttributeNS(null, "x", x);
                            o.setAttributeNS(null, "y", y);
                            var transform = o.getAttribute("transform");
                            var tem = transform.substr(transform.indexOf("(") + 1);
                            tem = tem.substr(0, tem.length - 1);
                            var arr = tem.split(" ");
                            var newTransform = "rotate(-90 " + x.toString() + " " + y.toString() + ")";
                            o.setAttributeNS(null, "transform", newTransform)
                        });
                        $("#" + coorId + " rect").each(function(i, o) {
                            o.setAttributeNS(null, "x", Number(o.getAttribute("x")) + Number(offsetX));
                            o.setAttributeNS(null, "y", Number(o.getAttribute("y")) + Number(offsetY))
                        });
                        $("#" + coorId).removeAttr("transform");
                        var minCoorX = 10000000;
                        $("#" + coorId + " line").each(function(i, o) {
                            if (Number(minCoorX) > Number(o.getAttribute("x1"))) {
                                minCoorX = o.getAttribute("x1")
                            }
                        });
                        var minWinX = 10000000;
                        var minWinWidth = 0;
                        var winId = $("#" + coorId)[0].getAttribute("mwinid");
                        var nodeWin = $("#" + winId)[0];
                        $("#" + winId + " rect").each(function(i, o) {
                            if (Number(minWinX) > Number(o.getAttribute("x"))) {
                                minWinX = o.getAttribute("x");
                                minWinWidth = o.getAttribute("width")
                            }
                        });
                        if (Number(minCoorX) > (Number(minWinX) + Number(minWinWidth))) {
                            nodeWin.setAttribute("mcooryoffset", "X + W");
                            nodeWin.setAttribute("mcooryoffsetval", (Number(minCoorX) - (Number(minWinX) + Number(minWinWidth))).toString())
                        } else {
                            nodeWin.setAttribute("mcooryoffset", "X");
                            nodeWin.setAttribute("mcooryoffsetval", (Number(minCoorX) - Number(minWinX)).toString())
                        }
                    }
                }
                if ($(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_combCoorX + '"]').length > 0) {
                    var coorObj = $(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_combCoorX + '"]');
                    var transform = coorObj.attr("transform");
                    if (!isEmptyOrNull(transform)) {
                        var idx = transform.indexOf("(");
                        var xyArr = transform.substring(idx).replace("(", "").replace(")", "").split(",");
                        var offsetX = 0,
                        offsetY = 0;
                        if (xyArr.length > 1) {
                            offsetX = xyArr[0];
                            offsetY = xyArr[1]
                        }
                        coorObj.find("line").each(function(i, o) {
                            o.setAttributeNS(null, "x1", Number(o.getAttribute("x1")) + Number(offsetX));
                            o.setAttributeNS(null, "y1", Number(o.getAttribute("y1")) + Number(offsetY));
                            o.setAttributeNS(null, "x2", Number(o.getAttribute("x2")) + Number(offsetX));
                            o.setAttributeNS(null, "y2", Number(o.getAttribute("y2")) + Number(offsetY))
                        });
                        coorObj.find("text").each(function(i, o) {
                            o.setAttributeNS(null, "x", Number(o.getAttribute("x")) + Number(offsetX));
                            o.setAttributeNS(null, "y", Number(o.getAttribute("y")) + Number(offsetY))
                        });
                        coorObj.find("rect").each(function(i, o) {
                            o.setAttributeNS(null, "x", Number(o.getAttribute("x")) + Number(offsetX));
                            o.setAttributeNS(null, "y", Number(o.getAttribute("y")) + Number(offsetY))
                        });
                        coorObj.removeAttr("transform");
                        var mcombsortwin = $("#" + mDrawFlag_SvgId + ' [mtype = "' + mDrawFlag_combsortwin + '"]');
                        if (mcombsortwin.length > 0) {
                            eval("var combcoor = " + mcombsortwin.attr(mDrawFlag_combCoorX));
                            if (combcoor.dir == "t") {
                                offsetY = 0 - offsetY
                            }
                            combcoor.offset = $.Micro.Oper_Add([combcoor.offset, offsetY]);
                            var str = "";
                            for (var Key in combcoor) {
                                if (str != "") {
                                    str += ","
                                }
                                str += [Key, ":", '"' + combcoor[Key] + '"'].join("")
                            }
                            mcombsortwin.attr(mDrawFlag_combCoorX, "{" + str + "}")
                        }
                    }
                }
                if ($(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_combCoorY + '"]').length > 0) {
                    var coorObj = $(mDrawDropDragTarget).parents('[mtype="' + mDrawFlag_combCoorY + '"]');
                    var transform = coorObj.attr("transform");
                    if (!isEmptyOrNull(transform)) {
                        var idx = transform.indexOf("(");
                        var xyArr = transform.substring(idx).replace("(", "").replace(")", "").split(",");
                        var offsetX = 0,
                        offsetY = 0;
                        if (xyArr.length > 1) {
                            offsetX = xyArr[0];
                            offsetY = xyArr[1]
                        }
                        coorObj.find("line").each(function(i, o) {
                            o.setAttributeNS(null, "x1", Number(o.getAttribute("x1")) + Number(offsetX));
                            o.setAttributeNS(null, "y1", Number(o.getAttribute("y1")) + Number(offsetY));
                            o.setAttributeNS(null, "x2", Number(o.getAttribute("x2")) + Number(offsetX));
                            o.setAttributeNS(null, "y2", Number(o.getAttribute("y2")) + Number(offsetY))
                        });
                        coorObj.find("text").each(function(i, o) {
                            var x = Number(o.getAttribute("x")) + Number(offsetX);
                            var y = Number(o.getAttribute("y")) + Number(offsetY);
                            o.setAttributeNS(null, "x", x);
                            o.setAttributeNS(null, "y", y);
                            var transform = o.getAttribute("transform");
                            var tem = transform.substr(transform.indexOf("(") + 1);
                            tem = tem.substr(0, tem.length - 1);
                            var arr = tem.split(" ");
                            var newTransform = "rotate(-90 " + x.toString() + " " + y.toString() + ")";
                            o.setAttributeNS(null, "transform", newTransform)
                        });
                        coorObj.find("rect").each(function(i, o) {
                            o.setAttributeNS(null, "x", Number(o.getAttribute("x")) + Number(offsetX));
                            o.setAttributeNS(null, "y", Number(o.getAttribute("y")) + Number(offsetY))
                        });
                        coorObj.removeAttr("transform");
                        var mcombsortwin = $("#" + mDrawFlag_SvgId + ' [mtype = "' + mDrawFlag_combsortwin + '"]');
                        if (mcombsortwin.length > 0) {
                            eval("var combcoor = " + mcombsortwin.attr(mDrawFlag_combCoorY));
                            combcoor.offset = $.Micro.Oper_Add([combcoor.offset, offsetX]);
                            var str = "";
                            for (var Key in combcoor) {
                                if (str != "") {
                                    str += ","
                                }
                                str += [Key, ":", '"' + combcoor[Key] + '"'].join("")
                            }
                            mcombsortwin.attr(mDrawFlag_combCoorY, "{" + str + "}")
                        }
                    }
                }
            } else {
                var idx = 0;
                var xyArr;
                var offsetX = 0;
                var offsetY = 0;
                if (!isEmptyOrNull(transform)) {
                    idx = transform.indexOf("(");
                    xyArr = transform.substring(idx).replace("(", "").replace(")", "").split(",");
                    if (xyArr.length > 1) {
                        offsetX = xyArr[0];
                        offsetY = xyArr[1]
                    }
                }
                var pNode = mDrawDropDragTarget.parentNode;
                var mtype = pNode.getAttribute("mtype");
                if (isEmptyOrNull(mtype)) {
                    mtype = mDrawDropDragTarget.parentNode.parentNode.getAttribute("mtype");
                    if (mtype == mDrawFlag_Custom_arc) {
                        arcObjId = mDrawDropDragTarget.parentNode.parentNode.getAttribute("id")
                    }
                }
                switch (mtype) {
                case mDrawFlag_Custom_text:
                    mDrawDropDragTarget.setAttributeNS(null, "x", Number(mDrawDropDragTarget.getAttribute("x")) + Number(offsetX));
                    mDrawDropDragTarget.setAttributeNS(null, "y", Number(mDrawDropDragTarget.getAttribute("y")) + Number(offsetY));
                    break;
                case mDrawFlag_Custom_line:
                    mDrawDropDragTarget.setAttributeNS(null, "x1", Number(mDrawDropDragTarget.getAttribute("x1")) + Number(offsetX));
                    mDrawDropDragTarget.setAttributeNS(null, "y1", Number(mDrawDropDragTarget.getAttribute("y1")) + Number(offsetY));
                    mDrawDropDragTarget.setAttributeNS(null, "x2", Number(mDrawDropDragTarget.getAttribute("x2")) + Number(offsetX));
                    mDrawDropDragTarget.setAttributeNS(null, "y2", Number(mDrawDropDragTarget.getAttribute("y2")) + Number(offsetY));
                    break;
                case mDrawFlag_Custom_CornerMaterial:
                case mDrawFlag_Custom_CornerMaterial_h:
                    $.each($("#" + mDrawFlag_SvgId).find("[belongto=" + $(pNode).attr("id") + "] text"),
                    function(i, o) {
                        o.setAttributeNS(null, "x", Number(o.getAttribute("x")) + Number(offsetX));
                        o.setAttributeNS(null, "y", Number(o.getAttribute("y")) + Number(offsetY));
                        $(o).removeAttr("transform")
                    });
                case mDrawFlag_Custom_rect:
                    mDrawDropDragTarget.setAttributeNS(null, "x", Number(mDrawDropDragTarget.getAttribute("x")) + Number(offsetX));
                    mDrawDropDragTarget.setAttributeNS(null, "y", Number(mDrawDropDragTarget.getAttribute("y")) + Number(offsetY));
                    break;
                case mDrawFlag_Custom_polygon:
                    var x1, y1, x2, y2, x3, y3, x4, y4;
                    var points = mDrawDropDragTarget.getAttribute("points");
                    var Arr = points.split(" ");
                    var subArr;
                    subArr = Arr[0].split(",");
                    x1 = subArr[0];
                    y1 = subArr[1];
                    subArr = Arr[1].split(",");
                    x2 = subArr[0];
                    y2 = subArr[1];
                    subArr = Arr[2].split(",");
                    x3 = subArr[0];
                    y3 = subArr[1];
                    subArr = Arr[3].split(",");
                    x4 = subArr[0];
                    y4 = subArr[1];
                    x1 = Number(x1) + Number(offsetX);
                    y1 = Number(y1) + Number(offsetY);
                    x2 = Number(x2) + Number(offsetX);
                    y2 = Number(y2) + Number(offsetY);
                    x3 = Number(x3) + Number(offsetX);
                    y3 = Number(y3) + Number(offsetY);
                    x4 = Number(x4) + Number(offsetX);
                    y4 = Number(y4) + Number(offsetY);
                    mDrawDropDragTarget.setAttributeNS(null, "points", x1 + "," + y1 + " " + x2 + "," + y2 + " " + x3 + "," + y3 + " " + x4 + "," + y4);
                    break;
                case mDrawFlag_Custom_arc:
                    var d = mDrawDropDragTarget.getAttribute("d");
                    d = replaceAll(d, "M", "");
                    d = replaceAll(d, " A ", ",");
                    d = replaceAll(d, " ", ",");
                    var x1, y1, x2, y2;
                    var Arr = d.split(",");
                    x1 = Arr[0];
                    y1 = Arr[1];
                    x2 = Arr[7];
                    y2 = Arr[8];
                    x1 = Number(x1) + Number(offsetX);
                    y1 = Number(y1) + Number(offsetY);
                    x2 = Number(x2) + Number(offsetX);
                    y2 = Number(y2) + Number(offsetY);
                    Arr[0] = x1;
                    Arr[1] = y1;
                    Arr[7] = x2;
                    Arr[8] = y2;
                    d = $.MicroSVG.UnifiedSVGPath("M" + Arr[0].toString() + " " + Arr[1].toString() + " A " + $.Micro.ConvToNum(Arr[2].toString()) + " " + Arr[3].toString() + "," + Arr[4].toString() + "," + Arr[5].toString() + "," + Arr[6].toString() + "," + Arr[7].toString() + " " + Arr[8].toString());
                    $(mDrawDropDragTarget).attr("d", d);
                    $.each($("#" + arcObjId + " [mtype=" + mDrawFlag_Custom_arc_bf + "]").find("path"),
                    function() {
                        var d = $.MicroSVG.UnifiedSVGPath($(this).attr("d"));
                        var Ds = d.split(" ");
                        var new_d = "";
                        var new_Ds = [];
                        for (var di = 0; di < Ds.length; di += 2) {
                            var stag = (di == 0 ? "M": "L");
                            var etag = (di + 1 == Ds.length - 1) ? "Z": "";
                            var new_x = $.Micro.ConvToNum(Ds[di]) + Number(offsetX);
                            var new_y = $.Micro.ConvToNum(Ds[di + 1]) + Number(offsetY);
                            new_Ds.push(stag + new_x);
                            new_Ds.push(new_y + etag)
                        }
                        $(this).attr("d", new_Ds.join(" "));
                        $(this).parent().removeAttr("transform")
                    });
                    break;
                case mDrawFlag_Custom_ruler:
                    if ($(mDrawDropDragTarget).is("text")) {
                        mDrawDropDragTarget.setAttributeNS(null, "x", Number(mDrawDropDragTarget.getAttribute("x")) + Number(offsetX));
                        mDrawDropDragTarget.setAttributeNS(null, "y", Number(mDrawDropDragTarget.getAttribute("y")) + Number(offsetY))
                    } else {
                        mDrawDropDragTarget.setAttributeNS(null, "x1", Number(mDrawDropDragTarget.getAttribute("x1")) + Number(offsetX));
                        mDrawDropDragTarget.setAttributeNS(null, "y1", Number(mDrawDropDragTarget.getAttribute("y1")) + Number(offsetY));
                        mDrawDropDragTarget.setAttributeNS(null, "x2", Number(mDrawDropDragTarget.getAttribute("x2")) + Number(offsetX));
                        mDrawDropDragTarget.setAttributeNS(null, "y2", Number(mDrawDropDragTarget.getAttribute("y2")) + Number(offsetY))
                    }
                    break;
                case mDrawFlag_Custom_circle:
                    mDrawDropDragTarget.setAttributeNS(null, "cx", Number(mDrawDropDragTarget.getAttribute("cx")) + Number(offsetX));
                    mDrawDropDragTarget.setAttributeNS(null, "cy", Number(mDrawDropDragTarget.getAttribute("cy")) + Number(offsetY));
                    break;
                case mDrawFlag_Custom_controlPoint:
                    mDrawDropDragTarget.setAttributeNS(null, "x", Number(mDrawDropDragTarget.getAttribute("x")) + Number(offsetX));
                    mDrawDropDragTarget.setAttributeNS(null, "y", Number(mDrawDropDragTarget.getAttribute("y")) + Number(offsetY));
                    var belongId = mDrawDropDragTarget.getAttribute("mbelongid");
                    MicroDraw_AddCustomControlPoint(belongId);
                    break;
                case mDrawFlag_Area:
                    mDrawDropDragTarget.setAttributeNS(null, "x", Number(mDrawDropDragTarget.getAttribute("x")) + Number(offsetX));
                    mDrawDropDragTarget.setAttributeNS(null, "y", Number(mDrawDropDragTarget.getAttribute("y")) + Number(offsetY));
                    break;
                case mDrawFlag_Glass:
                    mDrawDropDragTarget.setAttributeNS(null, "x", Number(mDrawDropDragTarget.getAttribute("x")) + Number(offsetX));
                    mDrawDropDragTarget.setAttributeNS(null, "y", Number(mDrawDropDragTarget.getAttribute("y")) + Number(offsetY));
                    break;
                case mDrawFlag_Pkc:
                    mDrawDropDragTarget.setAttributeNS(null, "x", Number(mDrawDropDragTarget.getAttribute("x")) + Number(offsetX));
                    mDrawDropDragTarget.setAttributeNS(null, "y", Number(mDrawDropDragTarget.getAttribute("y")) + Number(offsetY));
                    break;
                case mDrawFlag_Dkc:
                    mDrawDropDragTarget.setAttributeNS(null, "x", Number(mDrawDropDragTarget.getAttribute("x")) + Number(offsetX));
                    mDrawDropDragTarget.setAttributeNS(null, "y", Number(mDrawDropDragTarget.getAttribute("y")) + Number(offsetY));
                    break;
                case mDrawFlag_Custom_wall:
                    if ($(mDrawDropDragTarget).is("rect")) {
                        mDrawDropDragTarget.setAttributeNS(null, "x", Number(mDrawDropDragTarget.getAttribute("x")) + Number(offsetX));
                        mDrawDropDragTarget.setAttributeNS(null, "y", Number(mDrawDropDragTarget.getAttribute("y")) + Number(offsetY))
                    } else {
                        if ($(mDrawDropDragTarget).is("line")) {
                            mDrawDropDragTarget.setAttributeNS(null, "x1", Number(mDrawDropDragTarget.getAttribute("x1")) + Number(offsetX));
                            mDrawDropDragTarget.setAttributeNS(null, "y1", Number(mDrawDropDragTarget.getAttribute("y1")) + Number(offsetY));
                            mDrawDropDragTarget.setAttributeNS(null, "x2", Number(mDrawDropDragTarget.getAttribute("x2")) + Number(offsetX));
                            mDrawDropDragTarget.setAttributeNS(null, "y2", Number(mDrawDropDragTarget.getAttribute("y2")) + Number(offsetY))
                        }
                    }
                    break;
                default:
                    if (mtype.substring(0, 3) == mDrawFlag_Tlc) {
                        mDrawDropDragTarget.setAttributeNS(null, "x", Number(mDrawDropDragTarget.getAttribute("x")) + Number(offsetX));
                        mDrawDropDragTarget.setAttributeNS(null, "y", Number(mDrawDropDragTarget.getAttribute("y")) + Number(offsetY))
                    } else {
                        if (mtype.substring(0, 3) == mDrawFlag_Zdm) {
                            mDrawDropDragTarget.setAttributeNS(null, "x", Number(mDrawDropDragTarget.getAttribute("x")) + Number(offsetX));
                            mDrawDropDragTarget.setAttributeNS(null, "y", Number(mDrawDropDragTarget.getAttribute("y")) + Number(offsetY))
                        }
                    }
                    break
                }
                if ($(mDrawDropDragTarget).parents("[mtype=" + mDrawFlag_ArcsCoorY + "]").length == 0) {
                    $(mDrawDropDragTarget).removeAttr("transform")
                }
                if (typeof($(mDrawDropDragTarget.parentNode.parentNode).attr("mtype")) != "undefined") {
                    var mtype = mDrawDropDragTarget.parentNode.parentNode.getAttribute("mtype");
                    if (mtype == mDrawFlag_Custom_g) {
                        $.each($("#" + mDrawDropDragTarget.parentNode.getAttribute("id")).siblings(),
                        function(i, obj) {
                            $(obj).removeAttr("transform");
                            switch (obj.getAttribute("mtype")) {
                            case mDrawFlag_Custom_text:
                                var node = $("#" + obj.getAttribute("id") + "_t")[0];
                                node.setAttribute("x", Number(node.getAttribute("x")) + Number(offsetX));
                                node.setAttribute("y", Number(node.getAttribute("y")) + Number(offsetY));
                                break;
                            case mDrawFlag_Custom_line:
                                var node = $("#" + obj.getAttribute("id") + "_l")[0];
                                node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY));
                                break;
                            case mDrawFlag_Custom_rect:
                                var node = $("#" + obj.getAttribute("id") + "_r")[0];
                                node.setAttribute("x", Number(node.getAttribute("x")) + Number(offsetX));
                                node.setAttribute("y", Number(node.getAttribute("y")) + Number(offsetY));
                                break;
                            case mDrawFlag_Custom_polygon:
                                var node = $("#" + obj.getAttribute("id") + "_p")[0];
                                var points = node.getAttribute("points");
                                var Arr = points.split(" ");
                                var subArr;
                                subArr = Arr[0].split(",");
                                x1 = subArr[0];
                                y1 = subArr[1];
                                subArr = Arr[1].split(",");
                                x2 = subArr[0];
                                y2 = subArr[1];
                                subArr = Arr[2].split(",");
                                x3 = subArr[0];
                                y3 = subArr[1];
                                subArr = Arr[3].split(",");
                                x4 = subArr[0];
                                y4 = subArr[1];
                                x1 = Number(x1) + Number(offsetX);
                                y1 = Number(y1) + Number(offsetY);
                                x2 = Number(x2) + Number(offsetX);
                                y2 = Number(y2) + Number(offsetY);
                                x3 = Number(x3) + Number(offsetX);
                                y3 = Number(y3) + Number(offsetY);
                                x4 = Number(x4) + Number(offsetX);
                                y4 = Number(y4) + Number(offsetY);
                                node.setAttribute("points", x1 + "," + y1 + " " + x2 + "," + y2 + " " + x3 + "," + y3 + " " + x4 + "," + y4);
                                break;
                            case mDrawFlag_Custom_circle:
                                var node = $("#" + obj.getAttribute("id") + "_c")[0];
                                node.setAttribute("cx", Number(node.getAttribute("cx")) + Number(offsetX));
                                node.setAttribute("cy", Number(node.getAttribute("cy")) + Number(offsetY));
                                break;
                            case mDrawFlag_Custom_ruler:
                                var node = $("#" + obj.getAttribute("id") + "_l1")[0];
                                node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY));
                                var node = $("#" + obj.getAttribute("id") + "_l2")[0];
                                node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY));
                                var node = $("#" + obj.getAttribute("id") + "_l3")[0];
                                node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY));
                                var node = $("#" + obj.getAttribute("id") + "_t")[0];
                                node.setAttribute("x", Number(node.getAttribute("x")) + Number(offsetX));
                                node.setAttribute("y", Number(node.getAttribute("y")) + Number(offsetY));
                                break;
                            case mDrawFlag_Custom_arc:
                                var node = $("#" + obj.getAttribute("id") + "_p1")[0];
                                var d = node.getAttribute("d");
                                d = replaceAll(d, "M", "");
                                d = replaceAll(d, " A ", ",");
                                d = replaceAll(d, " ", ",");
                                var x1, y1, x2, y2;
                                var Arr = d.split(",");
                                x1 = Arr[0];
                                y1 = Arr[1];
                                x2 = Arr[7];
                                y2 = Arr[8];
                                x1 = Number(x1) + Number(offsetX);
                                y1 = Number(y1) + Number(offsetY);
                                x2 = Number(x2) + Number(offsetX);
                                y2 = Number(y2) + Number(offsetY);
                                Arr[0] = x1;
                                Arr[1] = y1;
                                Arr[7] = x2;
                                Arr[8] = y2;
                                d = $.MicroSVG.UnifiedSVGPath("M" + Arr[0].toString() + " " + Arr[1].toString() + " A " + $.Micro.ConvToNum(Arr[2].toString()) + " " + Arr[3].toString() + "," + Arr[4].toString() + "," + Arr[5].toString() + "," + Arr[6].toString() + "," + Arr[7].toString() + " " + Arr[8].toString());
                                $(node).attr("d", d);
                                var node = $("#" + obj.getAttribute("id") + "_p2")[0];
                                var d = node.getAttribute("d");
                                d = replaceAll(d, "M", "");
                                d = replaceAll(d, " A ", ",");
                                d = replaceAll(d, " ", ",");
                                var x1, y1, x2, y2;
                                var Arr = d.split(",");
                                x1 = Arr[0];
                                y1 = Arr[1];
                                x2 = Arr[7];
                                y2 = Arr[8];
                                x1 = Number(x1) + Number(offsetX);
                                y1 = Number(y1) + Number(offsetY);
                                x2 = Number(x2) + Number(offsetX);
                                y2 = Number(y2) + Number(offsetY);
                                Arr[0] = x1;
                                Arr[1] = y1;
                                Arr[7] = x2;
                                Arr[8] = y2;
                                d = $.MicroSVG.UnifiedSVGPath("M" + Arr[0].toString() + " " + Arr[1].toString() + " A " + $.Micro.ConvToNum(Arr[2].toString()) + " " + Arr[3].toString() + "," + Arr[4].toString() + "," + Arr[5].toString() + "," + Arr[6].toString() + "," + Arr[7].toString() + " " + Arr[8].toString());
                                $(node).attr("d", d);
                                break;
                            case mDrawFlag_Custom_wall:
                                $.each($("#" + obj.id + " line"),
                                function(i, o) {
                                    var node = $(o)[0];
                                    node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                    node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                    node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                    node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY))
                                });
                                $.each($("#" + obj.id + " rect"),
                                function(i, o) {
                                    var node = $(o)[0];
                                    node.setAttribute("x", Number(node.getAttribute("x")) + Number(offsetX));
                                    node.setAttribute("y", Number(node.getAttribute("y")) + Number(offsetY))
                                });
                                break
                            }
                        })
                    } else {
                        if (mtype == mDrawFlag_Custom_arc) {
                            var dropTargetId = mDrawDropDragTarget.getAttribute("id");
                            if (dropTargetId.indexOf("_p1") >= 0) {
                                $("#" + mDrawDropDragTarget.parentNode.parentNode.getAttribute("id") + "_g2").removeAttr("transform");
                                var d = $("#" + mDrawDropDragTarget.parentNode.parentNode.getAttribute("id") + "_p2")[0].getAttribute("d");
                                d = replaceAll(d, "M", "");
                                d = replaceAll(d, " A ", ",");
                                d = replaceAll(d, " ", ",");
                                var x1, y1, x2, y2;
                                var Arr = d.split(",");
                                x1 = Arr[0];
                                y1 = Arr[1];
                                x2 = Arr[7];
                                y2 = Arr[8];
                                x1 = Number(x1) + Number(offsetX);
                                y1 = Number(y1) + Number(offsetY);
                                x2 = Number(x2) + Number(offsetX);
                                y2 = Number(y2) + Number(offsetY);
                                Arr[0] = x1;
                                Arr[1] = y1;
                                Arr[7] = x2;
                                Arr[8] = y2;
                                var d = $.MicroSVG.UnifiedSVGPath("M" + Arr[0].toString() + " " + Arr[1].toString() + " A " + $.Micro.ConvToNum(Arr[2].toString()) + " " + Arr[3].toString() + "," + Arr[4].toString() + "," + Arr[5].toString() + "," + Arr[6].toString() + "," + Arr[7].toString() + " " + Arr[8].toString());
                                $("#" + mDrawDropDragTarget.parentNode.parentNode.getAttribute("id") + "_p2")[0].setAttribute("d", d)
                            } else {
                                $("#" + mDrawDropDragTarget.parentNode.parentNode.getAttribute("id") + "_g1").removeAttr("transform");
                                var d = $("#" + mDrawDropDragTarget.parentNode.parentNode.getAttribute("id") + "_p1")[0].getAttribute("d");
                                d = replaceAll(d, "M", "");
                                d = replaceAll(d, " A ", ",");
                                d = replaceAll(d, " ", ",");
                                var x1, y1, x2, y2;
                                var Arr = d.split(",");
                                x1 = Arr[0];
                                y1 = Arr[1];
                                x2 = Arr[7];
                                y2 = Arr[8];
                                x1 = Number(x1) + Number(offsetX);
                                y1 = Number(y1) + Number(offsetY);
                                x2 = Number(x2) + Number(offsetX);
                                y2 = Number(y2) + Number(offsetY);
                                Arr[0] = x1;
                                Arr[1] = y1;
                                Arr[7] = x2;
                                Arr[8] = y2;
                                d = $.MicroSVG.UnifiedSVGPath("M" + Arr[0].toString() + " " + Arr[1].toString() + " A " + $.Micro.ConvToNum(Arr[2].toString()) + " " + Arr[3].toString() + "," + Arr[4].toString() + "," + Arr[5].toString() + "," + Arr[6].toString() + "," + Arr[7].toString() + " " + Arr[8].toString());
                                $("#" + mDrawDropDragTarget.parentNode.parentNode.getAttribute("id") + "_p1").attr("d", d)
                            }
                            var mtype = mDrawDropDragTarget.parentNode.parentNode.parentNode.getAttribute("mtype");
                            if (mtype == mDrawFlag_Custom_g) {
                                $.each($("#" + mDrawDropDragTarget.parentNode.parentNode.getAttribute("id")).siblings(),
                                function(i, obj) {
                                    $(obj).removeAttr("transform");
                                    switch (obj.getAttribute("mtype")) {
                                    case mDrawFlag_Custom_text:
                                        var node = $("#" + obj.getAttribute("id") + "_t")[0];
                                        node.setAttribute("x", Number(node.getAttribute("x")) + Number(offsetX));
                                        node.setAttribute("y", Number(node.getAttribute("y")) + Number(offsetY));
                                        break;
                                    case mDrawFlag_Custom_line:
                                        var node = $("#" + obj.getAttribute("id") + "_l")[0];
                                        node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                        node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                        node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                        node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY));
                                        break;
                                    case mDrawFlag_Custom_rect:
                                        var node = $("#" + obj.getAttribute("id") + "_r")[0];
                                        node.setAttribute("x", Number(node.getAttribute("x")) + Number(offsetX));
                                        node.setAttribute("y", Number(node.getAttribute("y")) + Number(offsetY));
                                        break;
                                    case mDrawFlag_Custom_polygon:
                                        var node = $("#" + obj.getAttribute("id") + "_p")[0];
                                        var points = node.getAttribute("points");
                                        var Arr = points.split(" ");
                                        var subArr;
                                        subArr = Arr[0].split(",");
                                        x1 = subArr[0];
                                        y1 = subArr[1];
                                        subArr = Arr[1].split(",");
                                        x2 = subArr[0];
                                        y2 = subArr[1];
                                        subArr = Arr[2].split(",");
                                        x3 = subArr[0];
                                        y3 = subArr[1];
                                        subArr = Arr[3].split(",");
                                        x4 = subArr[0];
                                        y4 = subArr[1];
                                        x1 = Number(x1) + Number(offsetX);
                                        y1 = Number(y1) + Number(offsetY);
                                        x2 = Number(x2) + Number(offsetX);
                                        y2 = Number(y2) + Number(offsetY);
                                        x3 = Number(x3) + Number(offsetX);
                                        y3 = Number(y3) + Number(offsetY);
                                        x4 = Number(x4) + Number(offsetX);
                                        y4 = Number(y4) + Number(offsetY);
                                        node.setAttribute("points", x1 + "," + y1 + " " + x2 + "," + y2 + " " + x3 + "," + y3 + " " + x4 + "," + y4);
                                        break;
                                    case mDrawFlag_Custom_circle:
                                        var node = $("#" + obj.getAttribute("id") + "_c")[0];
                                        node.setAttribute("cx", Number(node.getAttribute("cx")) + Number(offsetX));
                                        node.setAttribute("cy", Number(node.getAttribute("cy")) + Number(offsetY));
                                        break;
                                    case mDrawFlag_Custom_ruler:
                                        var node = $("#" + obj.getAttribute("id") + "_l1")[0];
                                        node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                        node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                        node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                        node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY));
                                        var node = $("#" + obj.getAttribute("id") + "_l2")[0];
                                        node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                        node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                        node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                        node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY));
                                        var node = $("#" + obj.getAttribute("id") + "_l3")[0];
                                        node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                        node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                        node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                        node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY));
                                        var node = $("#" + obj.getAttribute("id") + "_t")[0];
                                        node.setAttribute("x", Number(node.getAttribute("x")) + Number(offsetX));
                                        node.setAttribute("y", Number(node.getAttribute("y")) + Number(offsetY));
                                        break;
                                    case mDrawFlag_Custom_arc:
                                        var node = $("#" + obj.getAttribute("id") + "_p1")[0];
                                        var d = node.getAttribute("d");
                                        d = replaceAll(d, "M", "");
                                        d = replaceAll(d, " A ", ",");
                                        d = replaceAll(d, " ", ",");
                                        var x1, y1, x2, y2;
                                        var Arr = d.split(",");
                                        x1 = Arr[0];
                                        y1 = Arr[1];
                                        x2 = Arr[7];
                                        y2 = Arr[8];
                                        x1 = Number(x1) + Number(offsetX);
                                        y1 = Number(y1) + Number(offsetY);
                                        x2 = Number(x2) + Number(offsetX);
                                        y2 = Number(y2) + Number(offsetY);
                                        Arr[0] = x1;
                                        Arr[1] = y1;
                                        Arr[7] = x2;
                                        Arr[8] = y2;
                                        node.setAttribute("d", "M" + Arr[0].toString() + " " + Arr[1].toString() + " A " + Arr[2].toString() + " " + Arr[3].toString() + "," + Arr[4].toString() + "," + Arr[5].toString() + "," + Arr[6].toString() + "," + Arr[7].toString() + " " + Arr[8].toString() + "");
                                        var node = $("#" + obj.getAttribute("id") + "_p2")[0];
                                        var d = node.getAttribute("d");
                                        d = replaceAll(d, "M", "");
                                        d = replaceAll(d, " A ", ",");
                                        d = replaceAll(d, " ", ",");
                                        var x1, y1, x2, y2;
                                        var Arr = d.split(",");
                                        x1 = Arr[0];
                                        y1 = Arr[1];
                                        x2 = Arr[7];
                                        y2 = Arr[8];
                                        x1 = Number(x1) + Number(offsetX);
                                        y1 = Number(y1) + Number(offsetY);
                                        x2 = Number(x2) + Number(offsetX);
                                        y2 = Number(y2) + Number(offsetY);
                                        Arr[0] = x1;
                                        Arr[1] = y1;
                                        Arr[7] = x2;
                                        Arr[8] = y2;
                                        node.setAttribute("d", "M" + Arr[0].toString() + " " + Arr[1].toString() + " A " + Arr[2].toString() + " " + Arr[3].toString() + "," + Arr[4].toString() + "," + Arr[5].toString() + "," + Arr[6].toString() + "," + Arr[7].toString() + " " + Arr[8].toString() + "");
                                        break;
                                    case mDrawFlag_Custom_wall:
                                        $.each($("#" + obj.id + " line"),
                                        function(i, o) {
                                            var node = $(o)[0];
                                            node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                            node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                            node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                            node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY))
                                        });
                                        $.each($("#" + obj.id + " rect"),
                                        function(i, o) {
                                            var node = $(o)[0];
                                            node.setAttribute("x", Number(node.getAttribute("x")) + Number(offsetX));
                                            node.setAttribute("y", Number(node.getAttribute("y")) + Number(offsetY))
                                        });
                                        break
                                    }
                                })
                            }
                        } else {
                            if (mtype == mDrawFlag_Custom_wall) {
                                var dropTargetId = mDrawDropDragTarget.getAttribute("id");
                                if (dropTargetId.indexOf("_r") >= 0) {
                                    $("#" + mDrawDropDragTarget.parentNode.parentNode.getAttribute("id") + "_g2").removeAttr("transform");
                                    $.each($("#" + mDrawDropDragTarget.parentNode.parentNode.getAttribute("id") + "_g2 line"),
                                    function(i, obj) {
                                        var node = $("#" + obj.getAttribute("id"))[0];
                                        node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                        node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                        node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                        node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY))
                                    })
                                } else {
                                    $.each($("#" + mDrawDropDragTarget.getAttribute("id")).siblings(),
                                    function(i, obj) {
                                        var node = $("#" + obj.getAttribute("id"))[0];
                                        $(node).removeAttr("transform");
                                        node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                        node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                        node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                        node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY))
                                    });
                                    $("#" + mDrawDropDragTarget.parentNode.parentNode.getAttribute("id") + "_g1").removeAttr("transform");
                                    node = $("#" + mDrawDropDragTarget.parentNode.parentNode.getAttribute("id") + "_r")[0];
                                    node.setAttribute("x", Number(node.getAttribute("x")) + Number(offsetX));
                                    node.setAttribute("y", Number(node.getAttribute("y")) + Number(offsetY))
                                }
                                var mtype = mDrawDropDragTarget.parentNode.parentNode.parentNode.getAttribute("mtype");
                                if (mtype == mDrawFlag_Custom_g) {
                                    $.each($("#" + mDrawDropDragTarget.parentNode.parentNode.getAttribute("id")).siblings(),
                                    function(i, obj) {
                                        $(obj).removeAttr("transform");
                                        switch (obj.getAttribute("mtype")) {
                                        case mDrawFlag_Custom_text:
                                            var node = $("#" + obj.getAttribute("id") + "_t")[0];
                                            node.setAttribute("x", Number(node.getAttribute("x")) + Number(offsetX));
                                            node.setAttribute("y", Number(node.getAttribute("y")) + Number(offsetY));
                                            break;
                                        case mDrawFlag_Custom_line:
                                            var node = $("#" + obj.getAttribute("id") + "_l")[0];
                                            node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                            node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                            node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                            node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY));
                                            break;
                                        case mDrawFlag_Custom_rect:
                                            var node = $("#" + obj.getAttribute("id") + "_r")[0];
                                            node.setAttribute("x", Number(node.getAttribute("x")) + Number(offsetX));
                                            node.setAttribute("y", Number(node.getAttribute("y")) + Number(offsetY));
                                            break;
                                        case mDrawFlag_Custom_polygon:
                                            var node = $("#" + obj.getAttribute("id") + "_p")[0];
                                            var points = node.getAttribute("points");
                                            var Arr = points.split(" ");
                                            var subArr;
                                            subArr = Arr[0].split(",");
                                            x1 = subArr[0];
                                            y1 = subArr[1];
                                            subArr = Arr[1].split(",");
                                            x2 = subArr[0];
                                            y2 = subArr[1];
                                            subArr = Arr[2].split(",");
                                            x3 = subArr[0];
                                            y3 = subArr[1];
                                            subArr = Arr[3].split(",");
                                            x4 = subArr[0];
                                            y4 = subArr[1];
                                            x1 = Number(x1) + Number(offsetX);
                                            y1 = Number(y1) + Number(offsetY);
                                            x2 = Number(x2) + Number(offsetX);
                                            y2 = Number(y2) + Number(offsetY);
                                            x3 = Number(x3) + Number(offsetX);
                                            y3 = Number(y3) + Number(offsetY);
                                            x4 = Number(x4) + Number(offsetX);
                                            y4 = Number(y4) + Number(offsetY);
                                            node.setAttribute("points", x1 + "," + y1 + " " + x2 + "," + y2 + " " + x3 + "," + y3 + " " + x4 + "," + y4);
                                            break;
                                        case mDrawFlag_Custom_circle:
                                            var node = $("#" + obj.getAttribute("id") + "_c")[0];
                                            node.setAttribute("cx", Number(node.getAttribute("cx")) + Number(offsetX));
                                            node.setAttribute("cy", Number(node.getAttribute("cy")) + Number(offsetY));
                                            break;
                                        case mDrawFlag_Custom_ruler:
                                            var node = $("#" + obj.getAttribute("id") + "_l1")[0];
                                            node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                            node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                            node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                            node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY));
                                            var node = $("#" + obj.getAttribute("id") + "_l2")[0];
                                            node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                            node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                            node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                            node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY));
                                            var node = $("#" + obj.getAttribute("id") + "_l3")[0];
                                            node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                            node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                            node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                            node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY));
                                            var node = $("#" + obj.getAttribute("id") + "_t")[0];
                                            node.setAttribute("x", Number(node.getAttribute("x")) + Number(offsetX));
                                            node.setAttribute("y", Number(node.getAttribute("y")) + Number(offsetY));
                                            break;
                                        case mDrawFlag_Custom_arc:
                                            var node = $("#" + obj.getAttribute("id") + "_p1")[0];
                                            var d = node.getAttribute("d");
                                            d = replaceAll(d, "M", "");
                                            d = replaceAll(d, " A ", ",");
                                            d = replaceAll(d, " ", ",");
                                            var x1, y1, x2, y2;
                                            var Arr = d.split(",");
                                            x1 = Arr[0];
                                            y1 = Arr[1];
                                            x2 = Arr[7];
                                            y2 = Arr[8];
                                            x1 = Number(x1) + Number(offsetX);
                                            y1 = Number(y1) + Number(offsetY);
                                            x2 = Number(x2) + Number(offsetX);
                                            y2 = Number(y2) + Number(offsetY);
                                            Arr[0] = x1;
                                            Arr[1] = y1;
                                            Arr[7] = x2;
                                            Arr[8] = y2;
                                            node.setAttribute("d", "M" + Arr[0].toString() + " " + Arr[1].toString() + " A " + Arr[2].toString() + " " + Arr[3].toString() + "," + Arr[4].toString() + "," + Arr[5].toString() + "," + Arr[6].toString() + "," + Arr[7].toString() + " " + Arr[8].toString() + "");
                                            var node = $("#" + obj.getAttribute("id") + "_p2")[0];
                                            var d = node.getAttribute("d");
                                            d = replaceAll(d, "M", "");
                                            d = replaceAll(d, " A ", ",");
                                            d = replaceAll(d, " ", ",");
                                            var x1, y1, x2, y2;
                                            var Arr = d.split(",");
                                            x1 = Arr[0];
                                            y1 = Arr[1];
                                            x2 = Arr[7];
                                            y2 = Arr[8];
                                            x1 = Number(x1) + Number(offsetX);
                                            y1 = Number(y1) + Number(offsetY);
                                            x2 = Number(x2) + Number(offsetX);
                                            y2 = Number(y2) + Number(offsetY);
                                            Arr[0] = x1;
                                            Arr[1] = y1;
                                            Arr[7] = x2;
                                            Arr[8] = y2;
                                            node.setAttribute("d", "M" + Arr[0].toString() + " " + Arr[1].toString() + " A " + Arr[2].toString() + " " + Arr[3].toString() + "," + Arr[4].toString() + "," + Arr[5].toString() + "," + Arr[6].toString() + "," + Arr[7].toString() + " " + Arr[8].toString() + "");
                                            break;
                                        case mDrawFlag_Custom_wall:
                                            $.each($("#" + obj.id + " line"),
                                            function(i, o) {
                                                var node = $(o)[0];
                                                node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                                node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                                node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                                node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY))
                                            });
                                            $.each($("#" + obj.id + " rect"),
                                            function(i, o) {
                                                var node = $(o)[0];
                                                node.setAttribute("x", Number(node.getAttribute("x")) + Number(offsetX));
                                                node.setAttribute("y", Number(node.getAttribute("y")) + Number(offsetY))
                                            });
                                            break
                                        }
                                    })
                                }
                            }
                        }
                    }
                }
                var mtype = mDrawDropDragTarget.parentNode.getAttribute("mtype");
                if (mtype == mDrawFlag_Custom_ruler) {
                    $.each($("#" + mDrawDropDragTarget.getAttribute("id")).siblings(),
                    function(i, obj) {
                        $(obj).removeAttr("transform");
                        if ($(obj).is("text")) {
                            var node = $("#" + obj.getAttribute("id"))[0];
                            node.setAttribute("x", Number(node.getAttribute("x")) + Number(offsetX));
                            node.setAttribute("y", Number(node.getAttribute("y")) + Number(offsetY))
                        } else {
                            var node = $("#" + obj.getAttribute("id"))[0];
                            node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                            node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                            node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                            node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY))
                        }
                    })
                }
                var mtype = mDrawDropDragTarget.parentNode.getAttribute("mtype");
                if (mtype == mDrawFlag_Glass) {
                    $.each($("#" + mDrawDropDragTarget.getAttribute("id")).siblings(),
                    function(i, obj) {
                        $(obj).removeAttr("transform");
                        if ($(obj).is("rect")) {
                            var node = $("#" + obj.getAttribute("id"))[0];
                            node.setAttribute("x", Number(node.getAttribute("x")) + Number(offsetX));
                            node.setAttribute("y", Number(node.getAttribute("y")) + Number(offsetY))
                        } else {
                            if ($(obj).is("line")) {
                                var node = $("#" + obj.getAttribute("id"))[0];
                                node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY))
                            } else {
                                if ($(obj).is("text")) {
                                    var node = $("#" + obj.getAttribute("id"))[0];
                                    node.setAttribute("x", Number(node.getAttribute("x")) + Number(offsetX));
                                    node.setAttribute("y", Number(node.getAttribute("y")) + Number(offsetY))
                                }
                            }
                        }
                    })
                }
                var mtype = mDrawDropDragTarget.parentNode.getAttribute("mtype");
                if (mtype == mDrawFlag_Pkc) {
                    $.each($("#" + mDrawDropDragTarget.getAttribute("id")).siblings(),
                    function(i, obj) {
                        $(obj).removeAttr("transform");
                        if ($(obj).is("rect")) {
                            var node = $("#" + obj.getAttribute("id"))[0];
                            node.setAttribute("x", Number(node.getAttribute("x")) + Number(offsetX));
                            node.setAttribute("y", Number(node.getAttribute("y")) + Number(offsetY))
                        } else {
                            if ($(obj).is("line")) {
                                var node = $("#" + obj.getAttribute("id"))[0];
                                node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY))
                            } else {
                                if ($(obj).is("text")) {
                                    var node = $("#" + obj.getAttribute("id"))[0];
                                    node.setAttribute("x", Number(node.getAttribute("x")) + Number(offsetX));
                                    node.setAttribute("y", Number(node.getAttribute("y")) + Number(offsetY))
                                }
                            }
                        }
                    })
                }
                if (!isEmptyOrNull(mDrawDropDragTarget.parentNode.parentNode)) {
                    var mtype = mDrawDropDragTarget.parentNode.parentNode.getAttribute("mtype");
                    if (!isEmptyOrNull(mtype)) {
                        if (mtype.substring(0, 3) == mDrawFlag_Tlc || mtype == mDrawFlag_Dkc || mtype.substring(0, 3) == mDrawFlag_Zdm) {
                            $.each($("#" + mDrawDropDragTarget.parentNode.parentNode.getAttribute("id") + " rect"),
                            function(i, obj) {
                                if (obj.id != mDrawDropDragTarget.getAttribute("id")) {
                                    $(obj).removeAttr("transform");
                                    var node = $("#" + obj.getAttribute("id"))[0];
                                    node.setAttribute("x", Number(node.getAttribute("x")) + Number(offsetX));
                                    node.setAttribute("y", Number(node.getAttribute("y")) + Number(offsetY))
                                }
                            });
                            $.each($("#" + mDrawDropDragTarget.parentNode.parentNode.getAttribute("id") + " line"),
                            function(i, obj) {
                                if (obj.id != mDrawDropDragTarget.getAttribute("id")) {
                                    $(obj).removeAttr("transform");
                                    var node = $("#" + obj.getAttribute("id"))[0];
                                    node.setAttribute("x1", Number(node.getAttribute("x1")) + Number(offsetX));
                                    node.setAttribute("y1", Number(node.getAttribute("y1")) + Number(offsetY));
                                    node.setAttribute("x2", Number(node.getAttribute("x2")) + Number(offsetX));
                                    node.setAttribute("y2", Number(node.getAttribute("y2")) + Number(offsetY))
                                }
                            });
                            $.each($("#" + mDrawDropDragTarget.parentNode.parentNode.getAttribute("id") + " text"),
                            function(i, obj) {
                                if (obj.id != mDrawDropDragTarget.getAttribute("id")) {
                                    $(obj).removeAttr("transform");
                                    var node = $("#" + obj.getAttribute("id"))[0];
                                    node.setAttribute("x", Number(node.getAttribute("x")) + Number(offsetX));
                                    node.setAttribute("y", Number(node.getAttribute("y")) + Number(offsetY))
                                }
                            })
                        }
                    }
                }
                $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_arc + "']").each(function(i, o) {
                    MicroDraw_Redraw(o.id);
                    var arc_pObj = $("#" + o.id + "_g1");
                    with(arc_pObj.find("path")) {
                        attr("mselect", "1");
                        attr("mselected", "1");
                        attr("fill", mDrawSvgFocusColor)
                    }
                    $("#" + o.id + " [mtype=" + mDrawFlag_Custom_arc_bf + "] path").attr("fill", mDrawSvgFocusColor)
                });
                var mtype = mDrawDropDragTarget.parentNode.getAttribute("mtype");
                if (mtype == mDrawFlag_Custom_impSvg) {
                    var pNodeId = mDrawDropDragTarget.parentNode.getAttribute("id");
                    var mrotate = $("#" + pNodeId)[0].getAttribute("mrotate");
                    var impSvgId = mDrawDropDragTarget.parentNode.getAttribute("id") + "_mImpSvgId";
                    var svgRectoffsetX = "";
                    var svgRectoffsetY = "";
                    if (mrotate == "0") {
                        svgRectoffsetX = offsetX;
                        svgRectoffsetY = offsetY
                    } else {
                        if (mrotate == "90") {
                            svgRectoffsetX = offsetX;
                            svgRectoffsetY = offsetY
                        } else {
                            if (mrotate == "-90") {
                                svgRectoffsetX = offsetX;
                                svgRectoffsetY = offsetY
                            }
                        }
                    }
                    mDrawDropDragTarget.setAttribute("x", Number(mDrawDropDragTarget.getAttribute("x")) + Number(svgRectoffsetX));
                    mDrawDropDragTarget.setAttribute("y", Number(mDrawDropDragTarget.getAttribute("y")) + Number(svgRectoffsetY));
                    $("#" + pNodeId)[0].setAttribute("moffsetx", Number($("#" + pNodeId)[0].getAttribute("moffsetx")) + Number(svgRectoffsetX));
                    $("#" + pNodeId)[0].setAttribute("moffsety", Number($("#" + pNodeId)[0].getAttribute("moffsety")) + Number(svgRectoffsetY));
                    MicroBudget_calcOutlookArea()
                }
                var mtype = mDrawDropDragTarget.parentNode.getAttribute("mtype");
                if (mtype != mDrawFlag_Custom_controlPoint) {
                    if (!isEmptyOrNull(mDrawCustomObjList)) {
                        MicroDraw_AddCustomControlPoint(mDrawCustomObjList)
                    }
                }
            }
            var WinArcs = $(mDrawDropDragTarget).parents("[mtype=" + mDrawFlag_WinArcs + "]");
            var ArcsCoorX = $(mDrawDropDragTarget).parents("[mtype=" + mDrawFlag_ArcsCoorX + "]");
            var ArcsCoorY = $(mDrawDropDragTarget).parents("[mtype=" + mDrawFlag_ArcsCoorY + "]");
            if (WinArcs.length > 0) {
                var moveFun = function(tobj) {
                    if (tobj.length == 0) {
                        return
                    }
                    transform = tobj.attr("transform");
                    var offsetX;
                    var offsetY;
                    if (isEmptyOrNull(transform)) {
                        offsetX = 0;
                        offsetY = 0;
                        return
                    } else {
                        var idx = transform.indexOf("(");
                        xyArr = transform.substring(idx).replace("(", "").replace(")", "").split(",");
                        offsetX = xyArr[0];
                        offsetY = xyArr[1]
                    }
                    MicroDraw_MoveFrameWinPostion([{
                        win: tobj,
                        x_dev: offsetX,
                        y_dev: offsetY
                    }]);
                    tobj.removeAttr("transform");
                    $.each(WinArcs.find("[mtype=" + mDrawFlag_ArcsCoorY + "] [mtextkind][mtextkind!=Harc]"),
                    function() {
                        $(this).attr("transform", ["rotate(", -90, $(this).attr("x"), $(this).attr("y"), ")"].join(" "))
                    });
                    var tFrame = WinArcs.find("[mtype=" + mDrawFlag_FrameArcs + "]");
                    var fSize = $.MicroSVG.getSVGRect(tFrame);
                    var win_minY = fSize.y1;
                    var win_maxY = fSize.y2;
                    var win_minX = fSize.x1;
                    var win_maxX = fSize.x2;
                    var mcoorxoffset, mcoorxoffsetval, mcooryoffset, mcooryoffsetval;
                    switch (tobj.attr("mtype")) {
                    case mDrawFlag_ArcsCoorX:
                        var _size = $.MicroSVG.getSVGRect(tobj.find("[tag=W]"));
                        if (_size.y1 > win_maxY) {
                            mcoorxoffset = "Y + H";
                            mcoorxoffsetval = (_size.y1 - win_maxY)
                        } else {
                            mcoorxoffset = "Y";
                            mcoorxoffsetval = (_size.y1 - win_minY)
                        }
                        WinArcs.attr("mcoorxoffset", mcoorxoffset).attr("mcoorxoffsetval", mcoorxoffsetval);
                        break;
                    case mDrawFlag_ArcsCoorY:
                        var _size = $.MicroSVG.getSVGRect(tobj.find("[tag=t]"));
                        if (_size.x1 > win_maxX) {
                            mcooryoffset = "X + W";
                            mcooryoffsetval = (_size.x1 - win_maxX)
                        } else {
                            mcooryoffset = "X";
                            mcooryoffsetval = (_size.x1 - win_minX)
                        }
                        WinArcs.attr("mcooryoffset", mcooryoffset).attr("mcooryoffsetval", mcooryoffsetval);
                        break
                    }
                };
                if (ArcsCoorX.length > 0) {
                    moveFun(ArcsCoorX);
                    MicroDraw_WinArcsGdPic(WinArcs)
                } else {
                    if (ArcsCoorY.length > 0) {
                        moveFun(ArcsCoorY)
                    } else {
                        moveFun(WinArcs)
                    }
                }
            }
            mDrawDropDragTarget.setAttributeNS(null, "pointer-events", "all");
            mDrawDropDragTarget = null;
            MicroDraw_definedgdShow();
            MicroDraw_3DShowcombwins(true)
        }
        with($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_combCoorX + '"]')) {
            if (length > 0) {
                removeAttr("transform")
            }
        }
        with($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_combCoorY + '"]')) {
            if (length > 0) {
                removeAttr("transform")
            }
        }
        if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
            MobileFrame_delScaleG(mDrawFlag_SvgId);
            MobileFrame_addScaleG(mDrawFlag_SvgId, MobileFrame_getMobileViewScale(mDrawFlag_SvgId))
        }
    } catch(e) {
        console.log(e.name + ":" + e.message)
    }
}
function MicroDraw_GetTrueCoords(B) {
    var C = mDrawDropSVGRoot.currentScale;
    var A = mDrawDropSVGRoot.currentTranslate;
    mDrawDropTrueCoords.x = (B.clientX - A.x) / C;
    mDrawDropTrueCoords.y = (B.clientY - A.y) / C
}
function MicroDraw_WinObjClick(objId) {
    mDrawSelectObjId = "";
    MicroDraw_UnselectObj();
    var e = $("#" + objId)[0] || mDrawDropDragTarget;
    if (e.getAttribute("id") == "mBackGround") {
        e.setAttribute("mselected", "0");
        var rows = $("#" + mDrawObjProperty).propertygrid("getRows");
        for (i = rows.length - 1; i >= 0; i--) {
            var idx = $("#" + mDrawObjProperty).propertygrid("getRowIndex", rows[i]);
            $("#" + mDrawObjProperty).propertygrid("deleteRow", idx)
        }
        MicroDraw_closeEditor()
    } else {
        MicroDraw_closeEditor();
        if ($(e).is("text")) {} else {
            if ($(e).is("rect") && e.getAttribute("fill") == "#000000") {} else {
                if ($(e).is("rect") && $(e).parents("g[id*='_louver']").length > 0) {} else {
                    if ($(e).parents("[mtype=" + mDrawFlag_WinArcs + "]").length > 0) {
                        $(e).parents("[mtype=" + mDrawFlag_FrameArcs + "]").find("[tag=tF],[tag=bF],[tag=lF],[tag=rF]").attr("fill", mDrawSvgFocusColor).attr("mselected", "1");
                        $(e).parents("[mtype=" + mDrawFlag_FrameArcsTingH + "],[mtype=" + mDrawFlag_FrameArcsTingV + "]").find("[tag=ting]").attr("fill", mDrawSvgFocusColor).attr("mselected", "1");
                        $(e).parents("[mtype=" + mDrawFlag_ArcsGlass + "]").find("[tag=glass],[tag=yt] path").attr("fill", mDrawSvgFocusColor).attr("mselected", "1");
                        $(e).parents("[mtype=" + mDrawFlag_ArcsPkc + "],[mtype=" + mDrawFlag_ArcsDkc + "]").find("[tag=fan] path[fill!=none],[tag=glass],[tag=yt] path").attr("fill", mDrawSvgFocusColor).attr("mselected", "1")
                    } else {
                        e.setAttribute("fill", mDrawSvgFocusColor);
                        e.setAttribute("mselected", "1")
                    }
                }
            }
        }
        var pNode = e.parentNode;
        var pId = pNode.getAttribute("id");
        if (typeof($(pNode).attr("mtype")) == "undefined") {
            pNode = pNode.parentNode;
            pId = pNode.getAttribute("id")
        }
        MicroDraw_showObjProperty(pId);
        $("#" + pId + " rect").each(function(i, o) {
            if (o.getAttribute("mselect") == "1") {
                o.setAttribute("fill", mDrawSvgFocusColor);
                o.setAttribute("mselected", "1")
            }
            if (!mDraw_GlassFlagRectBorder && o.getAttribute("id")) {
                if (o.getAttribute("id").indexOf("_txtr") >= 0) {
                    o.setAttribute("stroke", mDrawSvgFocusColor)
                }
            }
        });
        var pId_mtype = $("#" + pId).attr("mtype");
        if (pId_mtype == mDrawFlag_FrameRect) {
            var frameArc = $("#" + pId).parents("[mtype=" + mDrawFlag_Win + "]").find("[mtype=" + mDrawFlag_FrameArc + "]");
            $.each(frameArc,
            function(i, o) {
                var frameArcID = $(o).attr("id");
                with($("#" + frameArcID + "_g1 path")) {
                    attr("mselect", "1");
                    attr("mselected", "1");
                    attr("fill", mDrawSvgFocusColor)
                }
            })
        }
        mDrawSelectObjId = pId
    }
    switch (mVersion) {
    case "DRAW":
    case "DRAW_M":
    case "DRAW_JX":
        break;
    default:
        MicroDraw_selectObjPrGl(pId)
    }
}
function MicroDraw_getScale(G, C, O, L, H, E, M) {
    var Q = Number(O) - Number(C) - Number(M) * Number(mDrawSvgViewBox);
    var P = Number(H) - Number(L) - Number(M) * Number(mDrawSvgViewBox);
    var I = document.getElementById(G);
    var N = I.getAttribute("viewBox");
    var F = N.split(" ");
    var A = Number(F[3]) / Number(E);
    var B = Number(E) / (Number(Q) / Number(A));
    var K = Number(E) / (Number(P) / Number(A));
    var D = B;
    if (Number(D) > Number(K)) {
        D = K
    }
    var J = 0;
    while (Number(J) < Number(D)) {
        J = Number(J) + 0.25
    }
    J = Number(J) - 0.25;
    return J
}
function MicroDraw_getSvgEdge(E) {
    var D = 1000000;
    var C = 1000000;
    var B = 0;
    var A = 0;
    $("#" + E + " [mtype='" + mDrawFlag_FrameRect + "']").each(function(F, G) {
        var H = $("#" + G.id + "_r1")[0];
        if (D == 0 && C == 0 && B == 0 && A == 0) {
            D = Number(H.getAttribute("x"));
            C = Number(H.getAttribute("y"));
            B = Number(H.getAttribute("x")) + Number(H.getAttribute("width"));
            A = Number(H.getAttribute("y")) + Number(H.getAttribute("height"))
        }
        if (D > Number(H.getAttribute("x"))) {
            D = Number(H.getAttribute("x"))
        }
        if (C > Number(H.getAttribute("y"))) {
            C = Number(H.getAttribute("y"))
        }
        if (B < (Number(H.getAttribute("x")) + Number(H.getAttribute("width")))) {
            B = (Number(H.getAttribute("x")) + Number(H.getAttribute("width")))
        }
        if (A < (Number(H.getAttribute("y")) + Number(H.getAttribute("height")))) {
            A = (Number(H.getAttribute("y")) + Number(H.getAttribute("height")))
        }
    });
    $("#" + E + " line").each(function(F, G) {
        var H = G.getAttribute("style");
        if (!isEmptyOrNull(H)) {
            if (! (H.indexOf("display:none") >= 0)) {
                if (D > Number(G.getAttribute("x1"))) {
                    D = Number(G.getAttribute("x1"))
                }
                if (D > Number(G.getAttribute("x2"))) {
                    D = Number(G.getAttribute("x2"))
                }
                if (B < Number(G.getAttribute("x1"))) {
                    B = Number(G.getAttribute("x1"))
                }
                if (B < Number(G.getAttribute("x2"))) {
                    B = Number(G.getAttribute("x2"))
                }
                if (C > Number(G.getAttribute("y1"))) {
                    C = Number(G.getAttribute("y1"))
                }
                if (C > Number(G.getAttribute("y2"))) {
                    C = Number(G.getAttribute("y2"))
                }
                if (A < Number(G.getAttribute("y1"))) {
                    A = Number(G.getAttribute("y1"))
                }
                if (A < Number(G.getAttribute("y2"))) {
                    A = Number(G.getAttribute("y2"))
                }
            }
        }
    });
    $("#" + E + " [mtype='" + mDrawFlag_Custom_text + "'] text").each(function(F, G) {
        var H = G;
        if (Number(H.getAttribute("x")) < Number(D)) {
            D = Number(H.getAttribute("x"))
        }
        if (Number(H.getAttribute("x")) > Number(B)) {
            B = Number(H.getAttribute("x"))
        }
        if (Number(H.getAttribute("y")) < Number(C)) {
            C = Number(H.getAttribute("y"))
        }
        if (Number(H.getAttribute("y")) > Number(A)) {
            A = Number(H.getAttribute("y"))
        }
    });
    $("#" + E + " [mtype='" + mDrawFlag_Custom_rect + "'] rect").each(function(F, G) {
        var H = $("#" + G.id)[0];
        if (D == 0 && C == 0 && B == 0 && A == 0) {
            D = Number(H.getAttribute("x"));
            C = Number(H.getAttribute("y"));
            B = Number(H.getAttribute("x")) + Number(H.getAttribute("width"));
            A = Number(H.getAttribute("y")) + Number(H.getAttribute("height"))
        }
        if (D > Number(H.getAttribute("x"))) {
            D = Number(H.getAttribute("x"))
        }
        if (C > Number(H.getAttribute("y"))) {
            C = Number(H.getAttribute("y"))
        }
        if (B < (Number(H.getAttribute("x")) + Number(H.getAttribute("width")))) {
            B = (Number(H.getAttribute("x")) + Number(H.getAttribute("width")))
        }
        if (A < (Number(H.getAttribute("y")) + Number(H.getAttribute("height")))) {
            A = (Number(H.getAttribute("y")) + Number(H.getAttribute("height")))
        }
    });
    $("#" + E + " [mtype='" + mDrawFlag_Custom_polygon + "'] polygon").each(function(M, O) {
        var N = $("#" + O.id)[0];
        points = N.getAttribute("points");
        var I, J, K, L, Q, R, G, H;
        var P = points.split(" ");
        var F;
        F = P[0].split(",");
        I = F[0];
        J = F[1];
        F = P[1].split(",");
        K = F[0];
        L = F[1];
        F = P[2].split(",");
        Q = F[0];
        R = F[1];
        F = P[3].split(",");
        G = F[0];
        H = F[1];
        if (D == 0 && C == 0 && B == 0 && A == 0) {
            D = 100000000;
            C = 100000000;
            B = 0;
            A = 0
        }
        if (D > Number(I)) {
            D = Number(I)
        }
        if (C > Number(J)) {
            C = Number(J)
        }
        if (D > Number(K)) {
            D = Number(K)
        }
        if (C > Number(L)) {
            C = Number(L)
        }
        if (D > Number(Q)) {
            D = Number(Q)
        }
        if (C > Number(R)) {
            C = Number(R)
        }
        if (D > Number(G)) {
            D = Number(G)
        }
        if (C > Number(H)) {
            C = Number(H)
        }
        if (B < Number(I)) {
            B = Number(I)
        }
        if (A < Number(J)) {
            A = Number(J)
        }
        if (B < Number(K)) {
            B = Number(K)
        }
        if (A < Number(L)) {
            A = Number(L)
        }
        if (B < Number(Q)) {
            B = Number(Q)
        }
        if (A < Number(R)) {
            A = Number(R)
        }
        if (B < Number(G)) {
            B = Number(G)
        }
        if (A < Number(H)) {
            A = Number(H)
        }
    });
    $("#" + E + " [mtype='" + mDrawFlag_Custom_arc + "'] path").each(function(J, L) {
        var M = $("#" + L.id)[0].parentNode.parentNode;
        var P = $("#" + L.id)[0];
        var Q = P.getAttribute("d");
        Q = replaceAll(Q, "M", "");
        Q = replaceAll(Q, " A ", ",");
        Q = replaceAll(Q, " ", ",");
        Arr = Q.split(",");
        var F, G, H, I, O, K;
        var N = M.getAttribute("mheight");
        F = Arr[0];
        G = Arr[1];
        H = Number(Arr[0]) + (Number(Arr[7]) - Number(Arr[0])) / 2;
        I = Number(Arr[1]) - ((Number(N) / 1000) * Number(mDrawPixelPerM));
        O = Arr[7];
        K = Arr[8];
        if (D == 0 && C == 0 && B == 0 && A == 0) {
            D = 100000000;
            C = 100000000;
            B = 0;
            A = 0
        }
        if (D > Number(F)) {
            D = Number(F)
        }
        if (C > Number(G)) {
            C = Number(G)
        }
        if (D > Number(H)) {
            D = Number(H)
        }
        if (C > Number(I)) {
            C = Number(I)
        }
        if (D > Number(O)) {
            D = Number(O)
        }
        if (C > Number(K)) {
            C = Number(K)
        }
        if (B < Number(F)) {
            B = Number(F)
        }
        if (A < Number(G)) {
            A = Number(G)
        }
        if (B < Number(H)) {
            B = Number(H)
        }
        if (A < Number(I)) {
            A = Number(I)
        }
        if (B < Number(O)) {
            B = Number(O)
        }
        if (A < Number(K)) {
            A = Number(K)
        }
    });
    $("#" + E + " [mtype='" + mDrawFlag_Custom_ruler + "'] line").each(function(F, G) {
        if (D > Number(G.getAttribute("x1"))) {
            D = Number(G.getAttribute("x1"))
        }
        if (D > Number(G.getAttribute("x2"))) {
            D = Number(G.getAttribute("x2"))
        }
        if (B < Number(G.getAttribute("x1"))) {
            B = Number(G.getAttribute("x1"))
        }
        if (B < Number(G.getAttribute("x2"))) {
            B = Number(G.getAttribute("x2"))
        }
        if (C > Number(G.getAttribute("y1"))) {
            C = Number(G.getAttribute("y1"))
        }
        if (C > Number(G.getAttribute("y2"))) {
            C = Number(G.getAttribute("y2"))
        }
        if (A < Number(G.getAttribute("y1"))) {
            A = Number(G.getAttribute("y1"))
        }
        if (A < Number(G.getAttribute("y2"))) {
            A = Number(G.getAttribute("y2"))
        }
    });
    $("#" + E + " [mtype='" + mDrawFlag_Custom_ruler + "'] text").each(function(F, G) {
        var H = G;
        if (Number(H.getAttribute("x")) < Number(D)) {
            D = Number(H.getAttribute("x"))
        }
        if (Number(H.getAttribute("x")) > Number(B)) {
            B = Number(H.getAttribute("x"))
        }
        if (Number(H.getAttribute("y")) < Number(C)) {
            C = Number(H.getAttribute("y"))
        }
        if (Number(H.getAttribute("y")) > Number(A)) {
            A = Number(H.getAttribute("y"))
        }
        C = C - 10;
        B = B + 20
    });
    $("#" + E + " [mtype='" + mDrawFlag_Custom_line + "'] line").each(function(F, G) {
        if (D > Number(G.getAttribute("x1"))) {
            D = Number(G.getAttribute("x1"))
        }
        if (D > Number(G.getAttribute("x2"))) {
            D = Number(G.getAttribute("x2"))
        }
        if (B < Number(G.getAttribute("x1"))) {
            B = Number(G.getAttribute("x1"))
        }
        if (B < Number(G.getAttribute("x2"))) {
            B = Number(G.getAttribute("x2"))
        }
        if (C > Number(G.getAttribute("y1"))) {
            C = Number(G.getAttribute("y1"))
        }
        if (C > Number(G.getAttribute("y2"))) {
            C = Number(G.getAttribute("y2"))
        }
        if (A < Number(G.getAttribute("y1"))) {
            A = Number(G.getAttribute("y1"))
        }
        if (A < Number(G.getAttribute("y2"))) {
            A = Number(G.getAttribute("y2"))
        }
    });
    $("#" + E + " [mtype='" + mDrawFlag_Custom_circle + "'] circle").each(function(F, G) {
        var H = G;
        if ((Number(H.getAttribute("cx")) - Number(H.getAttribute("r"))) < Number(D)) {
            D = (Number(H.getAttribute("cx")) - Number(H.getAttribute("r")))
        }
        if ((Number(H.getAttribute("cx")) + Number(H.getAttribute("r"))) > Number(B)) {
            B = (Number(H.getAttribute("cx")) + Number(H.getAttribute("r")))
        }
        if ((Number(H.getAttribute("cy")) - Number(H.getAttribute("r"))) < Number(C)) {
            C = (Number(H.getAttribute("cy")) - Number(H.getAttribute("r")))
        }
        if ((Number(H.getAttribute("cy")) + Number(H.getAttribute("r"))) > Number(A)) {
            A = (Number(H.getAttribute("cy")) + Number(H.getAttribute("r")))
        }
    });
    $("#" + E + " [mtype='" + mDrawFlag_Custom_wall + "'] rect").each(function(F, G) {
        var H = $("#" + G.id)[0];
        if (D == 0 && C == 0 && B == 0 && A == 0) {
            D = Number(H.getAttribute("x"));
            C = Number(H.getAttribute("y"));
            B = Number(H.getAttribute("x")) + Number(H.getAttribute("width"));
            A = Number(H.getAttribute("y")) + Number(H.getAttribute("height"))
        }
        if (D > Number(H.getAttribute("x"))) {
            D = Number(H.getAttribute("x"))
        }
        if (C > Number(H.getAttribute("y"))) {
            C = Number(H.getAttribute("y"))
        }
        if (B < (Number(H.getAttribute("x")) + Number(H.getAttribute("width")))) {
            B = (Number(H.getAttribute("x")) + Number(H.getAttribute("width")))
        }
        if (A < (Number(H.getAttribute("y")) + Number(H.getAttribute("height")))) {
            A = (Number(H.getAttribute("y")) + Number(H.getAttribute("height")))
        }
    });
    $("#" + E + " [mtype='" + mDrawFlag_Custom_impSvg + "']").each(function(F, G) {
        var H = $("#" + G.id + "_mImpSvgBackGround")[0];
        if (D == 0 && C == 0 && B == 0 && A == 0) {
            D = Number(H.getAttribute("x"));
            C = Number(H.getAttribute("y"));
            B = Number(H.getAttribute("x")) + Number(H.getAttribute("width"));
            A = Number(H.getAttribute("y")) + Number(H.getAttribute("height"))
        }
        if (D > Number(H.getAttribute("x"))) {
            D = Number(H.getAttribute("x"))
        }
        if (C > Number(H.getAttribute("y"))) {
            C = Number(H.getAttribute("y"))
        }
        if (B < (Number(H.getAttribute("x")) + Number(H.getAttribute("width")))) {
            B = (Number(H.getAttribute("x")) + Number(H.getAttribute("width")))
        }
        if (A < (Number(H.getAttribute("y")) + Number(H.getAttribute("height")))) {
            A = (Number(H.getAttribute("y")) + Number(H.getAttribute("height")))
        }
    });
    $("#" + E + " [mtype='" + mDrawFlag_CoorY + "'] line").each(function(F, G) {
        if (D > Number(G.getAttribute("x1"))) {
            D = Number(G.getAttribute("x1"))
        }
        if (D > Number(G.getAttribute("x2"))) {
            D = Number(G.getAttribute("x2"))
        }
        if (B < Number(G.getAttribute("x1"))) {
            B = Number(G.getAttribute("x1"))
        }
        if (B < Number(G.getAttribute("x2"))) {
            B = Number(G.getAttribute("x2"))
        }
        if (C > Number(G.getAttribute("y1"))) {
            C = Number(G.getAttribute("y1"))
        }
        if (C > Number(G.getAttribute("y2"))) {
            C = Number(G.getAttribute("y2"))
        }
        if (A < Number(G.getAttribute("y1"))) {
            A = Number(G.getAttribute("y1"))
        }
        if (A < Number(G.getAttribute("y2"))) {
            A = Number(G.getAttribute("y2"))
        }
    });
    $("#" + E + " [mtype='" + mDrawFlag_CoorX + "'] line").each(function(F, G) {
        if (D > Number(G.getAttribute("x1"))) {
            D = Number(G.getAttribute("x1"))
        }
        if (D > Number(G.getAttribute("x2"))) {
            D = Number(G.getAttribute("x2"))
        }
        if (B < Number(G.getAttribute("x1"))) {
            B = Number(G.getAttribute("x1"))
        }
        if (B < Number(G.getAttribute("x2"))) {
            B = Number(G.getAttribute("x2"))
        }
        if (C > Number(G.getAttribute("y1"))) {
            C = Number(G.getAttribute("y1"))
        }
        if (C > Number(G.getAttribute("y2"))) {
            C = Number(G.getAttribute("y2"))
        }
        if (A < Number(G.getAttribute("y1"))) {
            A = Number(G.getAttribute("y1"))
        }
        if (A < Number(G.getAttribute("y2"))) {
            A = Number(G.getAttribute("y2"))
        }
    });
    $.each($("#" + E + ' [mtype="' + mDrawFlag_combCoorX + '"]'),
    function(J, M) {
        var L = $.MicroSVG.getSVGRect($(M));
        var N = $.MicroSVG.ToCanvasPoint($("#" + E), L.x, L.y);
        var I = N.x;
        var G = N.y;
        var K = L.width;
        var H = L.height;
        var F = I + K;
        var O = G + H;
        if (D > I) {
            D = I
        }
        if (B < F) {
            B = F
        }
        if (C > G) {
            C = G
        }
        if (A < O) {
            A = O
        }
    });
    $.each($("#" + E + ' [mtype="' + mDrawFlag_combCoorY + '"]'),
    function(J, M) {
        var L = $.MicroSVG.getSVGRect($(M));
        var N = $.MicroSVG.ToCanvasPoint($("#" + E), L.x, L.y);
        var I = N.x;
        var G = N.y;
        var K = L.width;
        var H = L.height;
        var F = I + K;
        var O = G + H;
        if (D > I) {
            D = I
        }
        if (B < F) {
            B = F
        }
        if (C > G) {
            C = G
        }
        if (A < O) {
            A = O
        }
    });
    $.each($("#" + E + ' [mtype="' + mDrawFlag_WinArcs + '"]'),
    function(J, M) {
        var L = $.MicroSVG.getSVGRect($(M));
        var N = $.MicroSVG.ToCanvasPoint($("#" + E), L.x, L.y);
        var I = N.x;
        var G = N.y;
        var K = L.width;
        var H = L.height;
        var F = I + K;
        var O = G + H;
        if (D > I) {
            D = I
        }
        if (B < F) {
            B = F
        }
        if (C > G) {
            C = G
        }
        if (A < O) {
            A = O
        }
    });
    A = Number(A) + 20;
    return D + "," + C + "," + B + "," + A
}
function MicroDraw_translateObj(C, B, A) {
    B = 0 - Number(B);
    A = 0 - Number(A);
    $("#" + C + " [mtype='" + mDrawFlag_Win + "']").each(function(D, E) {
        E.setAttribute("transform", "translate(" + B.toString() + " " + A.toString() + ")")
    });
    $("#" + C + " [mtype='" + mDrawFlag_Glass + "']").each(function(D, E) {
        var F = E.parentNode.getAttribute("mtype");
        if (isEmptyOrNull(F)) {
            F = ""
        }
        if (F != mDrawFlag_Win) {
            E.setAttribute("transform", "translate(" + B.toString() + " " + A.toString() + ")")
        }
    });
    $("#" + C + " [mtype='" + mDrawFlag_Pkc + "']").each(function(D, E) {
        var F = E.parentNode.getAttribute("mtype");
        if (isEmptyOrNull(F)) {
            F = ""
        }
        if (F != mDrawFlag_Win) {
            E.setAttribute("transform", "translate(" + B.toString() + " " + A.toString() + ")")
        }
    });
    $("#" + C + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(D, E) {
        var F = E.parentNode.getAttribute("mtype");
        if (isEmptyOrNull(F)) {
            F = ""
        }
        if (F != mDrawFlag_Win) {
            E.setAttribute("transform", "translate(" + B.toString() + " " + A.toString() + ")")
        }
    });
    $("#" + C + " [mtype='" + mDrawFlag_CoorX + "']").each(function(D, E) {
        E.setAttribute("transform", "translate(" + B.toString() + " " + A.toString() + ")")
    });
    $("#" + C + " [mtype='" + mDrawFlag_CoorY + "']").each(function(D, E) {
        E.setAttribute("transform", "translate(" + B.toString() + " " + A.toString() + ")")
    });
    $("#" + C + " [mtype='" + mDrawFlag_Custom_text + "']").each(function(D, E) {
        E.setAttribute("transform", "translate(" + B.toString() + " " + A.toString() + ")")
    });
    $("#" + C + " [mtype='" + mDrawFlag_Custom_rect + "']").each(function(D, E) {
        E.setAttribute("transform", "translate(" + B.toString() + " " + A.toString() + ")")
    });
    $("#" + C + " [mtype='" + mDrawFlag_Custom_polygon + "']").each(function(D, E) {
        E.setAttribute("transform", "translate(" + B.toString() + " " + A.toString() + ")")
    });
    $("#" + C + " [mtype='" + mDrawFlag_Custom_arc + "']").each(function(D, E) {
        E.setAttribute("transform", "translate(" + B.toString() + " " + A.toString() + ")")
    });
    $("#" + C + " [mtype='" + mDrawFlag_Custom_ruler + "']").each(function(D, E) {
        E.setAttribute("transform", "translate(" + B.toString() + " " + A.toString() + ")")
    });
    $("#" + C + " [mtype='" + mDrawFlag_Custom_line + "']").each(function(D, E) {
        E.setAttribute("transform", "translate(" + B.toString() + " " + A.toString() + ")")
    });
    $("#" + C + " [mtype='" + mDrawFlag_Custom_circle + "']").each(function(D, E) {
        E.setAttribute("transform", "translate(" + B.toString() + " " + A.toString() + ")")
    });
    $("#" + C + " [mtype='" + mDrawFlag_Custom_wall + "']").each(function(D, E) {
        E.setAttribute("transform", "translate(" + B.toString() + " " + A.toString() + ")")
    });
    $("#" + C + " [mtype='" + mDrawFlag_Custom_impSvg + "']").each(function(D, E) {
        E.setAttribute("transform", "translate(" + B.toString() + " " + A.toString() + ")")
    });
    $("#" + C + " [mtype='" + mDrawFlag_WinArcs + "']").each(function(D, E) {
        E.setAttribute("transform", "translate(" + B.toString() + " " + A.toString() + ")")
    })
}
var MicroDraw_hiddenEasyUIRow = function(tableID, tag, value) {
    var rows = $("#" + tableID).propertygrid("getRows");
    $.each(rows,
    function(_rowI, _row) {
        eval("var _hidden=_row." + tag);
        if (!$.Micro.IsEmpty(_hidden) && _hidden == value) {
            $("#" + tableID).datagrid("hideRow", _rowI);
            _row.hidden = true
        }
    })
};
var MicroDraw_showhiddenEasyUIRow = function(tableID, tag, value) {
    var rows = $("#" + tableID).propertygrid("getRows");
    $.each(rows,
    function(_rowI, _row) {
        eval("var _hidden=_row." + tag);
        if (!$.Micro.IsEmpty(_hidden) && _hidden == value) {
            $("#" + tableID).datagrid("hideRow", _rowI);
            _row.hidden = true
        } else {
            $("#" + tableID).datagrid("showRow", _rowI)
        }
    })
};
function MicroDraw_showObjProperty(objId) {
    with($("#mMobileDrawFrame_orderPanel_obj")) {
        if (length > 0) {
            attr("currEditObjId", objId)
        }
    }
    var rows = $("#" + mDrawObjProperty).propertygrid("getRows");
    for (i = rows.length - 1; i >= 0; i--) {
        var idx = $("#" + mDrawObjProperty).propertygrid("getRowIndex", rows[i]);
        $("#" + mDrawObjProperty).propertygrid("deleteRow", idx)
    }
    var mtype = MicroDraw_GetObjProperty(objId, "mtype");
    switch (mtype) {
    case mDrawFlag_FrameRect:
    case mDrawFlag_FrameArcs:
        var data = [];
        for (var i = 0; i < mDrawPrColors.length; i++) {
            data.push({
                id: mDrawPrColors[i].text,
                text: mDrawPrColors[i].text
            })
        }
        var defaultVal = MicroDraw_GetObjProperty(objId, "prcolor");
        defaultVal = $.Micro.IsEmpty(defaultVal) ? mDrawPrColors[0].text: defaultVal;
        var row = {
            name: "型材颜色",
            value: defaultVal,
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: data,
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && oldValue.length > 0) {
                            $("#" + objId)[0].setAttribute("prcolor", newValue);
                            MicroDraw_setWinColor(mDrawFlag_SvgId, MicroDraw_ReturnColor(newValue), mDrawGlassColor, mDrawWallColor);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "prcolor"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        if (mtype != mDrawFlag_FrameArcs) {
            var row = {
                name: "拼接方式",
                value: MicroDraw_GetObjProperty(objId, "mpjstyle"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "45",
                            text: "45"
                        },
                        {
                            id: "V",
                            text: "竖向通长"
                        },
                        {
                            id: "H",
                            text: "横向通长"
                        },
                        {
                            id: "45V",
                            text: "上45下90"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mpjstyle", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mpjstyle"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            switch (mVersion) {
            case "DRAW":
            case "DRAW_M":
            case "DRAW_JX":
                break;
            default:
                if ($("#" + objId).parents("[mtype=" + mDrawFlag_Win + "]").find("[mtype=" + mDrawFlag_FrameArc + "]").length > 0) {
                    break
                }
                var mPublicXcxlIDs = [];
                for (var i = 0; i < mPublicXcxlList.length; i++) {
                    mPublicXcxlIDs.push(mPublicXcxlList[i].id)
                }
                var mxcxlidEdit = true;
                if (!isPcUserAgent()) {
                    mxcxlidEdit = false
                }
                var row = {
                    name: "系列结构",
                    value: MicroDraw_GetObjProperty(objId, "mxcxlid"),
                    group: "",
                    editor: {
                        type: "combobox",
                        options: {
                            required: false,
                            editable: mxcxlidEdit,
                            data: mPublicXcxlList,
                            valueField: "id",
                            textField: "name",
                            onChange: function(newValue, oldValue) {
                                if ($.Micro.isInArray(newValue, mPublicXcxlIDs) && !$.Micro.IsEmpty(newValue)) {
                                    $("#" + objId)[0].setAttribute("mxcxlid", newValue);
                                    MicroDraw_changeXcxl(objId, newValue);
                                    MicroDraw_GraphXljgDefault($("#" + objId).parents("[mwin]"));
                                    MicroDraw_RedrawAll(mDrawFlag_SvgId);
                                    MicroDraw_ChangeAllTingsPos($("#" + objId).parents("[mtype=" + mDrawFlag_Win + "]"))
                                } else {
                                    newValue = ""
                                }
                                if ($.Micro.IsEmpty(newValue)) {
                                    $("#" + objId).attr("mxcxlid", "");
                                    MicroDraw_RedrawAll(mDrawFlag_SvgId)
                                }
                                MicroBudget_autoChangeProductid(newValue)
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mxcxlid"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row)
            }
            var row = {
                name: "墙体",
                value: MicroDraw_GetObjProperty(objId, "mwall"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "Y",
                            text: "带墙体"
                        },
                        {
                            id: "N",
                            text: "不带墙体"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                var getCombWinIDs = MicroDraw_getCombWinIDs("all");
                                var Wins = getCombWinIDs.Wins;
                                var CMs = getCombWinIDs.CMs;
                                var objWinID = $("#" + mDrawFlag_SvgId + " #" + objId).parents("[mtype=" + mDrawFlag_Win + "]").attr("id");
                                if (CMs.length > 0 && $.Micro.isInArray(objWinID, Wins)) {
                                    for (var i = 0; i < Wins.length; i++) {
                                        var tframe = $("#" + mDrawFlag_SvgId + " #" + Wins[i] + " [mtype=" + mDrawFlag_FrameRect + "]");
                                        tframe.attr("mwall", newValue);
                                        MicroDraw_Redraw_FrameWall(tframe.attr("id"))
                                    }
                                } else {
                                    $("#" + objId)[0].setAttribute("mwall", newValue);
                                    MicroDraw_Redraw_FrameWall(objId)
                                }
                                MicroDraw_reflashHandleCoorY();
                                MicroDraw_autoGdPic();
                                MicroDraw_ShowCoordinate();
                                $("#" + mDrawFlag_SvgId + " [mqjbelongtoframeid]").each(function(i, o) {
                                    MicroDraw_Redraw(o.id)
                                })
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mwall"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "俯视图",
                value: MicroDraw_GetObjProperty(objId, "mgdpic"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "Y",
                            text: "带俯视图"
                        },
                        {
                            id: "N",
                            text: "不带俯视图"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                var getCombWinIDs = MicroDraw_getCombWinIDs("all");
                                var Wins = getCombWinIDs.Wins;
                                var CMs = getCombWinIDs.CMs;
                                var objWinID = $("#" + mDrawFlag_SvgId + " #" + objId).parents("[mtype=" + mDrawFlag_Win + "]").attr("id");
                                if (CMs.length > 0 && $.Micro.isInArray(objWinID, Wins)) {
                                    $("#" + mDrawFlag_SvgId + " #" + objId)[0].setAttribute("mgdpic", newValue);
                                    for (var i = 0; i < Wins.length; i++) {
                                        $("#" + mDrawFlag_SvgId + " #" + Wins[i] + " [mtype=" + mDrawFlag_FrameRect + "]").attr("mgdpic", newValue)
                                    }
                                } else {
                                    $("#" + objId)[0].setAttribute("mgdpic", newValue)
                                }
                                MicroDraw_autoGdPic()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mgdpic"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "俯视图上文字",
                value: MicroDraw_GetObjProperty(objId, "mgduptxt"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: true,
                        data: [{
                            id: "室内",
                            text: "室内"
                        },
                        {
                            id: "室外",
                            text: "室外"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mgduptxt", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_autoGdPic()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mgduptxt"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "俯视图下文字",
                value: MicroDraw_GetObjProperty(objId, "mgddowntxt"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: true,
                        data: [{
                            id: "室内",
                            text: "室内"
                        },
                        {
                            id: "室外",
                            text: "室外"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mgddowntxt", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_autoGdPic()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mgddowntxt"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row)
        }
        var defaultVal = MicroDraw_GetObjProperty(objId, "coorxshow");
        defaultVal = $.Micro.IsEmpty(defaultVal) ? "Y": defaultVal;
        var row = {
            name: "横向标尺",
            value: defaultVal,
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "Y",
                        text: "显示"
                    },
                    {
                        id: "N",
                        text: "隐藏"
                    }],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("coorxshow", newValue);
                            MicroDraw_ShowCoordinate();
                            MicroDraw_autoGdPic()
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "coorxshow"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var defaultVal = MicroDraw_GetObjProperty(objId, "cooryshow");
        defaultVal = $.Micro.IsEmpty(defaultVal) ? "Y": defaultVal;
        var row = {
            name: "纵向标尺",
            value: defaultVal,
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "Y",
                        text: "显示"
                    },
                    {
                        id: "N",
                        text: "隐藏"
                    }],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("cooryshow", newValue);
                            MicroDraw_ShowCoordinate()
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "cooryshow"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        if (mtype == mDrawFlag_FrameArcs) {
            var defaultVal = MicroDraw_GetObjProperty(objId, "arclenshow");
            defaultVal = $.Micro.IsEmpty(defaultVal) ? "Y": defaultVal;
            var row = {
                name: "弧长",
                value: defaultVal,
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "Y",
                            text: "显示"
                        },
                        {
                            id: "N",
                            text: "隐藏"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("arclenshow", newValue);
                                MicroDraw_ShowCoordinate()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "arclenshow"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row)
        }
        if (mtype != mDrawFlag_FrameArcs) {
            var defaultVal = MicroDraw_GetObjProperty(objId, "coorinshow");
            defaultVal = $.Micro.IsEmpty(defaultVal) ? "N": defaultVal;
            var row = {
                name: "内尺标尺",
                value: defaultVal,
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "Y",
                            text: "显示"
                        },
                        {
                            id: "N",
                            text: "隐藏"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("coorinshow", newValue);
                                MicroDraw_ShowCoordinate();
                                MicroDraw_autoGdPic()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "coorinshow"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "隐藏下边框",
                value: MicroDraw_GetObjProperty(objId, "mhideframe"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "Y",
                            text: "是"
                        },
                        {
                            id: "N",
                            text: "否"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mhideframe", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mhideframe"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "隐藏左边框",
                value: MicroDraw_GetObjProperty(objId, "mhidelframe"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "Y",
                            text: "是"
                        },
                        {
                            id: "N",
                            text: "否"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mhidelframe", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mhidelframe"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "隐藏右边框",
                value: MicroDraw_GetObjProperty(objId, "mhiderframe"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "Y",
                            text: "是"
                        },
                        {
                            id: "N",
                            text: "否"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mhiderframe", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mhiderframe"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var defaultVal = MicroDraw_GetObjProperty(objId, "mgdpicwj");
            defaultVal = $.Micro.IsEmpty(defaultVal) ? "Y": defaultVal;
            $("#" + objId)[0].setAttribute("mgdpicwj", defaultVal);
            var row = {
                mgdshow_hidden: "1",
                name: "俯视图配件",
                value: defaultVal,
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "Y",
                            text: "显示"
                        },
                        {
                            id: "N",
                            text: "隐藏"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mgdpicwj", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_autoGdPic()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mgdpicwj"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row)
        }
        var defaultVal = MicroDraw_GetObjProperty(objId, "mshowglassfan");
        defaultVal = $.Micro.IsEmpty(defaultVal) ? "Y": defaultVal;
        $("#" + objId)[0].setAttribute("mshowglassfan", defaultVal);
        var row = {
            name: "玻扇标识",
            value: defaultVal,
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "Y",
                        text: "显示"
                    },
                    {
                        id: "N",
                        text: "隐藏"
                    }],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mshowglassfan", newValue);
                            MicroDraw_ShowGlassFan(objId);
                            MicroDraw_autoGdPic()
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mshowglassfan"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        break;
    case mDrawFlag_FrameArc:
        var row = {
            name: "高度",
            value: MicroDraw_GetObjProperty(objId, "mheight"),
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mheight", newValue);
                            MicroDraw_Redraw(objId);
                            MicroDraw_AutoRuler(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mheight"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "拼接角度",
            value: MicroDraw_GetObjProperty(objId, "mpjstyle"),
            group: "",
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mpjstyle"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var cooryshow = MicroDraw_GetObjProperty(objId, "cooryshow");
        var row = {
            name: "显示纵标尺",
            value: cooryshow,
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "Y",
                        text: "是"
                    },
                    {
                        id: "N",
                        text: "否"
                    }],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("cooryshow", newValue);
                            MicroDraw_Redraw(objId);
                            MicroDraw_AutoRuler(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "cooryshow"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "中挺数量",
            value: MicroDraw_GetObjProperty(objId, "mtingcnt"),
            dbCol: "mtingcnt",
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "0根",
                        text: "0根"
                    },
                    {
                        id: "1根",
                        text: "1根"
                    },
                    {
                        id: "2根",
                        text: "2根"
                    },
                    {
                        id: "3根",
                        text: "3根"
                    }],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mtingcnt", newValue);
                            MicroDraw_Redraw(objId);
                            MicroDraw_AutoRuler(objId);
                            var mtingcnt = MicroDraw_GetObjProperty(objId, "mtingcnt");
                            var mdivstyle = MicroDraw_GetObjProperty(objId, "mdivstyle");
                            var editable = ($.Micro.ConvToNum(mtingcnt) > 1) ? true: false;
                            editable = editable && (mdivstyle == "angleDIV" ? true: false);
                            MicroDraw_EditAbleEasyUIRow(mDrawObjProperty, "dbCol", "mtingtilt", editable);
                            MicroDraw_EditAbleEasyUIRow(mWEB_ORDER_DrawObjProperty, "dbCol", "mtingtilt", editable)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mtingcnt"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var myt = MicroDraw_GetObjProperty(objId, "myt");
        if ($.Micro.IsEmpty(myt)) {
            myt = "Y";
            $("#" + objId).attr("myt", myt)
        }
        var row = {
            name: "是否有压线",
            value: myt,
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "Y",
                        text: "是"
                    },
                    {
                        id: "N",
                        text: "否"
                    }],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("myt", newValue);
                            MicroDraw_Redraw(objId);
                            MicroDraw_FrameArc_SyncSetting($("#" + objId), "myt")
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "myt"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var mytpjstyle = MicroDraw_GetObjProperty(objId, "mytpjstyle");
        if ($.Micro.IsEmpty(mytpjstyle)) {
            mytpjstyle = "V";
            $("#" + objId).attr("mytpjstyle", mytpjstyle)
        }
        var row = {
            name: "压线拼接方式",
            value: mytpjstyle,
            dbCol: "mytpjstyle",
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "V",
                        text: "竖通长"
                    },
                    {
                        id: "H",
                        text: "横通长"
                    },
                    {
                        id: "A",
                        text: "斜角拼接"
                    }],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mytpjstyle", newValue);
                            MicroDraw_Redraw(objId);
                            MicroDraw_FrameArc_SyncSetting($("#" + objId), "mytpjstyle")
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mytpjstyle"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var mdivstyle = MicroDraw_GetObjProperty(objId, "mdivstyle");
        if ($.Micro.IsEmpty(mdivstyle)) {
            mdivstyle = "equalDIV";
            $("#" + objId).attr("mdivstyle", mdivstyle)
        }
        var row = {
            name: "弧划分方式",
            value: mdivstyle,
            dbCol: "mdivstyle",
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "equalDIV",
                        text: "弧长等分"
                    },
                    {
                        id: "angleDIV",
                        text: "中挺倾角划分"
                    }],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mdivstyle", newValue);
                            MicroDraw_Redraw(objId);
                            MicroDraw_AutoRuler(objId);
                            var mtingcnt = MicroDraw_GetObjProperty(objId, "mtingcnt");
                            var mdivstyle = MicroDraw_GetObjProperty(objId, "mdivstyle");
                            var editable = ($.Micro.ConvToNum(mtingcnt) > 1) ? true: false;
                            editable = editable && (mdivstyle == "angleDIV" ? true: false);
                            MicroDraw_EditAbleEasyUIRow(mDrawObjProperty, "dbCol", "mtingtilt", editable);
                            MicroDraw_EditAbleEasyUIRow(mWEB_ORDER_DrawObjProperty, "dbCol", "mtingtilt", editable)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mdivstyle"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "斜中挺倾角",
            value: MicroDraw_GetObjProperty(objId, "mtingtilt"),
            dbCol: "mtingtilt",
            group: "",
            "mtingtilt_hidden": 0,
            editor: {
                type: "numberbox",
                options: {
                    required: false,
                    editable: true,
                    precision: 1,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mtingtilt", newValue);
                            MicroDraw_Redraw(objId);
                            MicroDraw_AutoRuler(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mtingtilt"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var mtingcnt = MicroDraw_GetObjProperty(objId, "mtingcnt");
        var mdivstyle = MicroDraw_GetObjProperty(objId, "mdivstyle");
        var editable = ($.Micro.ConvToNum(mtingcnt) > 1) ? true: false;
        editable = editable && (mdivstyle == "angleDIV" ? true: false);
        MicroDraw_EditAbleEasyUIRow(mDrawObjProperty, "dbCol", "mtingtilt", editable);
        MicroDraw_EditAbleEasyUIRow(mWEB_ORDER_DrawObjProperty, "dbCol", "mtingtilt", editable);
        break;
    case mDrawFlag_Area:
        break;
    case mDrawFlag_Glass:
    case mDrawFlag_ArcsGlass:
        var row = {
            name: "是否有压线",
            value: MicroDraw_GetObjProperty(objId, "myt"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "Y",
                        text: "是"
                    },
                    {
                        id: "N",
                        text: "否"
                    }],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("myt", newValue);
                            MicroDraw_Redraw(objId);
                            MicroDraw_FrameArc_SyncSetting($("#" + objId), "myt")
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "myt"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        if (mtype != mDrawFlag_ArcsGlass) {
            var row = {
                name: "压线拼接方式",
                value: MicroDraw_GetObjProperty(objId, "mytpjstyle"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "45",
                            text: "45"
                        },
                        {
                            id: "H",
                            text: "横向通长"
                        },
                        {
                            id: "V",
                            text: "竖向通长"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mytpjstyle", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_FrameArc_SyncSetting($("#" + objId), "mytpjstyle")
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mytpjstyle"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            switch (mVersion) {
            case "DRAW":
            case "DRAW_M":
            case "DRAW_JX":
                break;
            default:
                var row = {
                    name: "玻璃规格",
                    value: MicroDraw_GetObjProperty(objId, "mglass"),
                    group: "",
                    editor: {
                        type: "combobox",
                        options: {
                            required: false,
                            editable: true,
                            data: mPublicGlList,
                            valueField: "glass",
                            textField: "glass",
                            onChange: function(newValue, oldValue) {
                                oldValue = $("#" + objId).attr("mglass");
                                if (newValue != oldValue) {
                                    $("#" + objId)[0].setAttribute("mglass", newValue);
                                    MicroDraw_RedrawAll(mDrawFlag_SvgId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mglass"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                var row = {
                    name: "玻璃工艺",
                    value: MicroDraw_GetObjProperty(objId, "mtech"),
                    group: "",
                    editor: {
                        type: "combobox",
                        options: {
                            required: false,
                            editable: true,
                            data: mPublicGlassTech,
                            valueField: "GlassTech",
                            textField: "GlassTech",
                            onChange: function(newValue, oldValue) {
                                oldValue = $("#" + objId).attr("mtech");
                                if (newValue != oldValue) {
                                    $("#" + objId)[0].setAttribute("mtech", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mtech"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                var row = {
                    name: "底玻",
                    value: MicroDraw_GetObjProperty(objId, "mdb"),
                    group: "",
                    editor: {
                        type: "combobox",
                        options: {
                            required: false,
                            editable: true,
                            data: mPublicGlassTexture,
                            valueField: "GlassTexture",
                            textField: "GlassTexture",
                            onChange: function(newValue, oldValue) {
                                oldValue = $("#" + objId).attr("mdb");
                                if (newValue != oldValue) {
                                    $("#" + objId)[0].setAttribute("mdb", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mdb"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                var row = {
                    name: "面玻",
                    value: MicroDraw_GetObjProperty(objId, "mmb"),
                    group: "",
                    editor: {
                        type: "combobox",
                        options: {
                            required: false,
                            editable: true,
                            data: mPublicGlassTexture,
                            valueField: "GlassTexture",
                            textField: "GlassTexture",
                            onChange: function(newValue, oldValue) {
                                oldValue = $("#" + objId).attr("mmb");
                                if (newValue != oldValue) {
                                    $("#" + objId)[0].setAttribute("mmb", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mmb"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                var row = {
                    name: "是否带转换料",
                    value: MicroDraw_GetObjProperty(objId, "mchange"),
                    group: "",
                    editor: {
                        type: "combobox",
                        options: {
                            required: true,
                            editable: false,
                            data: [{
                                id: "Y",
                                text: "是"
                            },
                            {
                                id: "N",
                                text: "否"
                            }],
                            valueField: "id",
                            textField: "text",
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && newValue.length > 0) {
                                    $("#" + objId)[0].setAttribute("mchange", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mchange"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                var row = {
                    name: "上文字标识",
                    value: MicroDraw_GetObjProperty(objId, "mutext"),
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: false,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue) {
                                    $("#" + objId)[0].setAttribute("mutext", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mutext"),
                    mPropertyName: "mutext"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                var row = {
                    name: "下文字标识",
                    value: MicroDraw_GetObjProperty(objId, "mdtext"),
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: false,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue) {
                                    $("#" + objId)[0].setAttribute("mdtext", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mdtext"),
                    mPropertyName: "mdtext"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                var row = {
                    name: "左文字标识",
                    value: MicroDraw_GetObjProperty(objId, "mltext"),
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: false,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue) {
                                    $("#" + objId)[0].setAttribute("mltext", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mltext"),
                    mPropertyName: "mltext"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                var row = {
                    name: "右文字标识",
                    value: MicroDraw_GetObjProperty(objId, "mrtext"),
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: false,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue) {
                                    $("#" + objId)[0].setAttribute("mrtext", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mrtext"),
                    mPropertyName: "mrtext"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row)
            }
            var mfhl = MicroDraw_GetObjProperty(objId, "mfhl");
            if ($.Micro.IsEmpty(mfhl)) {
                mfhl = "N";
                $("#" + objId).attr("mfhl", mfhl)
            }
            var row = {
                name: "是否有防护栏",
                value: MicroDraw_GetObjProperty(objId, "mfhl"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "Y",
                            text: "是"
                        },
                        {
                            id: "N",
                            text: "否"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mfhl", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mfhl"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            if ($("#" + objId).parents('[mtype="' + mDrawFlag_Win + '"]').length <= 0) {
                mcx = MicroDraw_GetObjProperty(objId, "mcx");
                if (isEmptyOrNull(mcx)) {
                    if ($("#" + objId + "_r1").length > 0) {
                        var x = $("#" + objId + "_r1")[0].getAttribute("x");
                        mcx = ((Number(x) / mDrawPixelPerM) * 1000).toFixed(2)
                    }
                }
                var row = {
                    name: "X座标",
                    value: mcx,
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: true,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                                    $("#" + objId)[0].setAttribute("mcx", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mcx"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                mcy = MicroDraw_GetObjProperty(objId, "mcy");
                if (isEmptyOrNull(mcy)) {
                    if ($("#" + objId + "_r1").length > 0) {
                        var y = $("#" + objId + "_r1")[0].getAttribute("y");
                        mcy = ((Number(y) / mDrawPixelPerM) * 1000).toFixed(2)
                    }
                }
                var row = {
                    name: "Y座标",
                    value: mcy,
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: true,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                                    $("#" + objId)[0].setAttribute("mcy", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mcy"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                mcwidth = MicroDraw_GetObjProperty(objId, "mcwidth");
                if (isEmptyOrNull(mcwidth)) {
                    if ($("#" + objId + "_r1").length > 0) {
                        var width = $("#" + objId + "_r1")[0].getAttribute("width");
                        mcwidth = ((Number(width) / mDrawPixelPerM) * 1000).toFixed(2)
                    }
                }
                var row = {
                    name: "宽度",
                    value: mcwidth,
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: true,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                                    $("#" + objId)[0].setAttribute("mcwidth", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mcwidth"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                mcheight = MicroDraw_GetObjProperty(objId, "mcheight");
                if (isEmptyOrNull(mcheight)) {
                    if ($("#" + objId + "_r1").length > 0) {
                        var height = $("#" + objId + "_r1")[0].getAttribute("height");
                        mcheight = ((Number(height) / mDrawPixelPerM) * 1000).toFixed(2)
                    }
                }
                var row = {
                    name: "高度",
                    value: mcheight,
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: true,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                                    $("#" + objId)[0].setAttribute("mcheight", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mcheight"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row)
            }
        }
        break;
    case mDrawFlag_TingV:
    case mDrawFlag_FrameArcsTingV:
        var mtid = $("#" + objId)[0].getAttribute("mtid");
        var mbid = $("#" + objId)[0].getAttribute("mbid");
        if (mtid.length > 0 || mbid.length > 0) {
            var row = {
                name: "竖向通长",
                value: MicroDraw_GetObjProperty(objId, "mtotallen"),
                group: "",
                editor: "",
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mtotallen"
            }
        } else {
            var row = {
                name: "竖向通长",
                value: MicroDraw_GetObjProperty(objId, "mtotallen"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "Y",
                            text: "是"
                        },
                        {
                            id: "N",
                            text: "否"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mtotallen", newValue);
                                MicroDraw_RedrawAll(mDrawFlag_SvgId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mtotallen"
            }
        }
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        if (mtype != mDrawFlag_FrameArcsTingV) {
            switch (mVersion) {
            case "DRAW":
            case "DRAW_M":
            case "DRAW_JX":
                var row = {
                    name: "位置公式",
                    value: MicroDraw_GetObjProperty(objId, "mexp"),
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: false,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                if (newValue != MicroDraw_GetObjProperty(objId, "mexp")) {
                                    $("#" + objId)[0].setAttribute("mexp", newValue);
                                    if ($.Micro.IsEmpty($("#" + objId).attr("mting"))) {
                                        var twin = $("#" + objId).parents("[mtype=" + mDrawFlag_Win + "]");
                                        var mting = MicroDraw_getTagMaxVal(twin, "mting", "ting") + 1;
                                        $("#" + mDrawFlag_SvgId + " #" + objId).attr("mting", mting)
                                    }
                                    MicroDraw_ChangeAllTingsPos($("#" + mDrawFlag_SvgId + " #" + objId).parents("[mtype=" + mDrawFlag_Win + "]"))
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mexp"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                break;
            default:
                var defaultVal = MicroDraw_GetObjProperty(objId, "mbreakframe");
                defaultVal = $.Micro.IsEmpty(defaultVal) ? "N": defaultVal;
                var row = {
                    name: "通长断开框料",
                    value: defaultVal,
                    group: "",
                    editor: {
                        type: "combobox",
                        options: {
                            required: true,
                            editable: false,
                            data: [{
                                id: "Y",
                                text: "是"
                            },
                            {
                                id: "N",
                                text: "否"
                            }],
                            valueField: "id",
                            textField: "text",
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && newValue.length > 0) {
                                    $("#" + objId)[0].setAttribute("mbreakframe", newValue);
                                    MicroDraw_RedrawAll(mDrawFlag_SvgId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mbreakframe"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                var row = {
                    name: "位置公式",
                    value: MicroDraw_GetObjProperty(objId, "mexp"),
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: false,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                if (newValue != MicroDraw_GetObjProperty(objId, "mexp")) {
                                    $("#" + objId)[0].setAttribute("mexp", newValue);
                                    if ($.Micro.IsEmpty($("#" + objId).attr("mting"))) {
                                        var twin = $("#" + objId).parents("[mtype=" + mDrawFlag_Win + "]");
                                        var mting = MicroDraw_getTagMaxVal(twin, "mting", "ting") + 1;
                                        $("#" + mDrawFlag_SvgId + " #" + objId).attr("mting", mting)
                                    }
                                    MicroDraw_ChangeAllTingsPos($("#" + mDrawFlag_SvgId + " #" + objId).parents("[mtype=" + mDrawFlag_Win + "]"))
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mexp"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                winNode = $("#" + objId).parents('[mtype="' + mDrawFlag_Win + '"]')[0];
                var winId = winNode.getAttribute("id");
                var nodeFrame = $("#" + winId + " [mtype='" + mDrawFlag_FrameRect + "']")[0];
                var xcxlId = nodeFrame.getAttribute("mxcxlid");
                var mcflId = 0;
                if (Number(xcxlId) > 0) {
                    mcflId = MicroDraw_genData_getMcflIdByXcxlid(xcxlId)
                }
                switch (mcflId) {
                case "1":
                    var row = {
                        name: "中挺类型",
                        value: MicroDraw_GetObjProperty(objId, "mkind"),
                        group: "",
                        editor: {
                            type: "combobox",
                            options: {
                                required: true,
                                editable: false,
                                data: [{
                                    id: "N",
                                    text: "普通中挺"
                                },
                                {
                                    id: "Y",
                                    text: "加强中挺"
                                },
                                {
                                    id: "Z",
                                    text: "Z中挺"
                                },
                                {
                                    id: "L",
                                    text: "转角料"
                                }],
                                valueField: "id",
                                textField: "text",
                                onChange: function(newValue, oldValue) {
                                    if (newValue != oldValue && newValue.length > 0) {
                                        $("#" + objId)[0].setAttribute("mkind", newValue);
                                        MicroDraw_RedrawAll(mDrawFlag_SvgId)
                                    }
                                }
                            }
                        },
                        mObjId: objId,
                        mType: MicroDraw_GetObjProperty(objId, "mtype"),
                        mPropertyName: "mkind"
                    };
                    $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                    break;
                case "2":
                    var row = {
                        name: "中挺类型",
                        value: MicroDraw_GetObjProperty(objId, "mkind"),
                        group: "",
                        editor: {
                            type: "combobox",
                            options: {
                                required: true,
                                editable: false,
                                data: [{
                                    id: "N",
                                    text: "普通中挺"
                                },
                                {
                                    id: "BB",
                                    text: "双边封"
                                },
                                {
                                    id: "LB",
                                    text: "转角双边封"
                                },
                                {
                                    id: "BG",
                                    text: "边封固定"
                                },
                                {
                                    id: "LG",
                                    text: "转角边封固定"
                                },
                                {
                                    id: "GG",
                                    text: "转角双固定"
                                }],
                                valueField: "id",
                                textField: "text",
                                onChange: function(newValue, oldValue) {
                                    if (newValue != oldValue && newValue.length > 0) {
                                        $("#" + objId)[0].setAttribute("mkind", newValue);
                                        MicroDraw_RedrawAll(mDrawFlag_SvgId)
                                    }
                                }
                            }
                        },
                        mObjId: objId,
                        mType: MicroDraw_GetObjProperty(objId, "mtype"),
                        mPropertyName: "mkind"
                    };
                    $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                    break
                }
                var row = {
                    name: "中挺型号",
                    value: MicroDraw_GetObjProperty(objId, "mprid"),
                    group: "",
                    editor: {
                        type: "combobox",
                        options: {
                            required: false,
                            editable: true,
                            data: mPublicPrList,
                            valueField: "productid",
                            textField: "productid",
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && newValue.length > 0) {
                                    $("#" + objId)[0].setAttribute("mprid", newValue);
                                    MicroDraw_RedrawAll(mDrawFlag_SvgId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mprid"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                var row = {
                    name: "挺左半边宽度",
                    value: MicroDraw_GetObjProperty(objId, "mtl"),
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: true,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                $("#" + objId)[0].setAttribute("mtl", newValue);
                                MicroDraw_ChangeAllTingsPos($("#" + mDrawFlag_SvgId + " #" + objId).parents("[mtype=" + mDrawFlag_Win + "]"))
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mtl"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                var row = {
                    name: "挺右半边宽度",
                    value: MicroDraw_GetObjProperty(objId, "mtr"),
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: true,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                $("#" + objId)[0].setAttribute("mtr", newValue);
                                MicroDraw_ChangeAllTingsPos($("#" + mDrawFlag_SvgId + " #" + objId).parents("[mtype=" + mDrawFlag_Win + "]"))
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mtr"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row)
            }
            $("#" + mDrawSizeProperty).propertygrid("clearSelections");
            var rows = $("#" + mDrawSizeProperty).propertygrid("getRows");
            for (i = rows.length - 1; i >= 0; i--) {
                var idx = $("#" + mDrawSizeProperty).propertygrid("getRowIndex", rows[i]);
                $("#" + mDrawSizeProperty).propertygrid("endEdit", idx)
            }
            for (i = rows.length - 1; i >= 0; i--) {
                var idx = $("#" + mDrawSizeProperty).propertygrid("getRowIndex", rows[i]);
                if (rows[i].mObjId == objId) {
                    $("#" + mDrawSizeProperty).propertygrid("selectRow", idx);
                    var eds_new = $("#" + mDrawSizeProperty).propertygrid("getEditors", idx);
                    if (eds_new.length == 0) {
                        $("#" + mDrawSizeProperty).propertygrid("beginEdit", idx);
                        eds_new = $("#" + mDrawSizeProperty).propertygrid("getEditors", idx)
                    }
                    if ($(eds_new[0].target).hasClass("textbox-f")) {
                        $(eds_new[0].target).textbox("textbox").focus();
                        $(eds_new[0].target).textbox("textbox").select()
                    } else {
                        $(eds_new[0].target).focus();
                        $(eds_new[0].target).select()
                    }
                }
            }
        }
        break;
    case mDrawFlag_TingH:
    case mDrawFlag_FrameArcsTingH:
        var mlid = $("#" + objId)[0].getAttribute("mlid");
        var mrid = $("#" + objId)[0].getAttribute("mrid");
        var defaultVal = MicroDraw_GetObjProperty(objId, "mtotallen");
        defaultVal = $.Micro.IsEmpty(defaultVal) ? "N": defaultVal;
        if (mlid.length > 0 || mrid.length > 0) {
            var row = {
                name: "横向通长",
                value: defaultVal,
                group: "",
                editor: "",
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mtotallen"
            }
        } else {
            var row = {
                name: "横向通长",
                value: defaultVal,
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "Y",
                            text: "是"
                        },
                        {
                            id: "N",
                            text: "否"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mtotallen", newValue);
                                MicroDraw_RedrawAll(mDrawFlag_SvgId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mtotallen"
            }
        }
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        if (mtype != mDrawFlag_FrameArcsTingH) {
            switch (mVersion) {
            case "DRAW":
            case "DRAW_M":
            case "DRAW_JX":
                var row = {
                    name: "位置公式",
                    value: MicroDraw_GetObjProperty(objId, "mexp"),
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: false,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                if (newValue != MicroDraw_GetObjProperty(objId, "mexp")) {
                                    $("#" + objId)[0].setAttribute("mexp", newValue);
                                    if ($.Micro.IsEmpty($("#" + objId).attr("mting"))) {
                                        var twin = $("#" + objId).parents("[mtype=" + mDrawFlag_Win + "]");
                                        var mting = MicroDraw_getTagMaxVal(twin, "mting", "ting") + 1;
                                        $("#" + mDrawFlag_SvgId + " #" + objId).attr("mting", mting)
                                    }
                                    MicroDraw_ChangeAllTingsPos($("#" + mDrawFlag_SvgId + " #" + objId).parents("[mtype=" + mDrawFlag_Win + "]"))
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mexp"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                break;
            default:
                var defaultVal = MicroDraw_GetObjProperty(objId, "mbreakframe");
                defaultVal = $.Micro.IsEmpty(defaultVal) ? "N": defaultVal;
                var row = {
                    name: "通长断开框料",
                    value: defaultVal,
                    group: "",
                    editor: {
                        type: "combobox",
                        options: {
                            required: true,
                            editable: false,
                            data: [{
                                id: "Y",
                                text: "是"
                            },
                            {
                                id: "N",
                                text: "否"
                            }],
                            valueField: "id",
                            textField: "text",
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && newValue.length > 0) {
                                    $("#" + objId)[0].setAttribute("mbreakframe", newValue)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mbreakframe"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                var row = {
                    name: "位置公式",
                    value: MicroDraw_GetObjProperty(objId, "mexp"),
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: false,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                if (newValue != MicroDraw_GetObjProperty(objId, "mexp")) {
                                    $("#" + objId)[0].setAttribute("mexp", newValue);
                                    if ($.Micro.IsEmpty($("#" + objId).attr("mting"))) {
                                        var twin = $("#" + objId).parents("[mtype=" + mDrawFlag_Win + "]");
                                        var mting = MicroDraw_getTagMaxVal(twin, "mting", "ting") + 1;
                                        $("#" + mDrawFlag_SvgId + " #" + objId).attr("mting", mting)
                                    }
                                    MicroDraw_ChangeAllTingsPos($("#" + mDrawFlag_SvgId + " #" + objId).parents("[mtype=" + mDrawFlag_Win + "]"))
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mexp"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                winNode = $("#" + objId).parents('[mtype="' + mDrawFlag_Win + '"]')[0];
                var winId = winNode.getAttribute("id");
                var nodeFrame = $("#" + winId + " [mtype='" + mDrawFlag_FrameRect + "']")[0];
                var xcxlId = nodeFrame.getAttribute("mxcxlid");
                var mcflId = 0;
                if (Number(xcxlId) > 0) {
                    mcflId = MicroDraw_genData_getMcflIdByXcxlid(xcxlId)
                }
                switch (mcflId) {
                case "1":
                    var row = {
                        name: "中挺类型",
                        value: MicroDraw_GetObjProperty(objId, "mkind"),
                        group: "",
                        editor: {
                            type: "combobox",
                            options: {
                                required: true,
                                editable: false,
                                data: [{
                                    id: "N",
                                    text: "普通中挺"
                                },
                                {
                                    id: "Y",
                                    text: "加强中挺"
                                },
                                {
                                    id: "Z",
                                    text: "Z中挺"
                                },
                                {
                                    id: "L",
                                    text: "转角料"
                                }],
                                valueField: "id",
                                textField: "text",
                                onChange: function(newValue, oldValue) {
                                    if (newValue != oldValue && newValue.length > 0) {
                                        $("#" + objId)[0].setAttribute("mkind", newValue);
                                        MicroDraw_RedrawAll(mDrawFlag_SvgId)
                                    }
                                }
                            }
                        },
                        mObjId: objId,
                        mType: MicroDraw_GetObjProperty(objId, "mtype"),
                        mPropertyName: "mkind"
                    };
                    $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                    break;
                case "2":
                    var row = {
                        name: "中挺类型",
                        value: MicroDraw_GetObjProperty(objId, "mkind"),
                        group: "",
                        editor: {
                            type: "combobox",
                            options: {
                                required: true,
                                editable: false,
                                data: [{
                                    id: "N",
                                    text: "普通中挺"
                                },
                                {
                                    id: "SG",
                                    text: "上滑上固"
                                },
                                {
                                    id: "XG",
                                    text: "下滑下固"
                                },
                                {
                                    id: "SX",
                                    text: "上下滑"
                                }],
                                valueField: "id",
                                textField: "text",
                                onChange: function(newValue, oldValue) {
                                    if (newValue != oldValue && newValue.length > 0) {
                                        $("#" + objId)[0].setAttribute("mkind", newValue);
                                        MicroDraw_RedrawAll(mDrawFlag_SvgId)
                                    }
                                }
                            }
                        },
                        mObjId: objId,
                        mType: MicroDraw_GetObjProperty(objId, "mtype"),
                        mPropertyName: "mkind"
                    };
                    $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                    break
                }
                var row = {
                    name: "中挺型号",
                    value: MicroDraw_GetObjProperty(objId, "mprid"),
                    group: "",
                    editor: {
                        type: "combobox",
                        options: {
                            required: false,
                            editable: true,
                            data: mPublicPrList,
                            valueField: "productid",
                            textField: "productid",
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && newValue.length > 0) {
                                    $("#" + objId)[0].setAttribute("mprid", newValue);
                                    MicroDraw_RedrawAll(mDrawFlag_SvgId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mprid"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                var row = {
                    name: "挺上半边宽度",
                    value: MicroDraw_GetObjProperty(objId, "mtl"),
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: true,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                $("#" + objId)[0].setAttribute("mtl", newValue);
                                MicroDraw_ChangeAllTingsPos($("#" + mDrawFlag_SvgId + " #" + objId).parents("[mtype=" + mDrawFlag_Win + "]"))
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mtl"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                var row = {
                    name: "挺下半边宽度",
                    value: MicroDraw_GetObjProperty(objId, "mtr"),
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: true,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                $("#" + objId)[0].setAttribute("mtr", newValue);
                                MicroDraw_ChangeAllTingsPos($("#" + mDrawFlag_SvgId + " #" + objId).parents("[mtype=" + mDrawFlag_Win + "]"))
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mtr"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row)
            }
            $("#" + mDrawSizeProperty).propertygrid("clearSelections");
            var rows = $("#" + mDrawSizeProperty).propertygrid("getRows");
            for (i = rows.length - 1; i >= 0; i--) {
                var idx = $("#" + mDrawSizeProperty).propertygrid("getRowIndex", rows[i]);
                $("#" + mDrawSizeProperty).propertygrid("endEdit", idx)
            }
            for (i = rows.length - 1; i >= 0; i--) {
                var idx = $("#" + mDrawSizeProperty).propertygrid("getRowIndex", rows[i]);
                if (rows[i].mObjId == objId) {
                    $("#" + mDrawSizeProperty).propertygrid("selectRow", idx);
                    var eds_new = $("#" + mDrawSizeProperty).propertygrid("getEditors", idx);
                    if (eds_new.length == 0) {
                        $("#" + mDrawSizeProperty).propertygrid("beginEdit", idx);
                        eds_new = $("#" + mDrawSizeProperty).propertygrid("getEditors", idx)
                    }
                    if ($(eds_new[0].target).hasClass("textbox-f")) {
                        $(eds_new[0].target).textbox("textbox").focus();
                        $(eds_new[0].target).textbox("textbox").select()
                    } else {
                        $(eds_new[0].target).focus();
                        $(eds_new[0].target).select()
                    }
                }
            }
        }
        break;
    case mDrawFlag_Pkc:
    case mDrawFlag_ArcsPkc:
        switch (mVersion) {
        case "DRAW":
        case "DRAW_M":
        case "DRAW_JX":
            break;
        default:
            var row = {
                name: "玻璃规格",
                value: MicroDraw_GetObjProperty(objId, "mglass"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: false,
                        editable: true,
                        data: mPublicGlList,
                        valueField: "glass",
                        textField: "glass",
                        onChange: function(newValue, oldValue) {
                            oldValue = $("#" + objId).attr("mglass");
                            if (newValue != oldValue) {
                                $("#" + objId)[0].setAttribute("mglass", newValue);
                                MicroDraw_RedrawAll(mDrawFlag_SvgId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mglass"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "玻璃工艺",
                value: MicroDraw_GetObjProperty(objId, "mtech"),
                group: "",
                editor: {
                    type: "combogrid",
                    options: {
                        panelWidth: 260,
                        required: true,
                        editable: true,
                        data: mPublicGlassTech,
                        idField: "GlassTech",
                        textField: "GlassTech",
                        columns: [[{
                            field: "GlassTech",
                            title: "玻璃工艺",
                            width: 80
                        },
                        {
                            field: "Memo",
                            title: "备注",
                            width: 120
                        }]],
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue) {
                                $("#" + objId)[0].setAttribute("mtech", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mtech"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "底玻",
                value: MicroDraw_GetObjProperty(objId, "mdb"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: false,
                        editable: true,
                        data: mPublicGlassTexture,
                        valueField: "GlassTexture",
                        textField: "GlassTexture",
                        onChange: function(newValue, oldValue) {
                            oldValue = $("#" + objId).attr("mdb");
                            if (newValue != oldValue) {
                                $("#" + objId)[0].setAttribute("mdb", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mdb"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "面玻",
                value: MicroDraw_GetObjProperty(objId, "mmb"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: false,
                        editable: true,
                        data: mPublicGlassTexture,
                        valueField: "GlassTexture",
                        textField: "GlassTexture",
                        onChange: function(newValue, oldValue) {
                            oldValue = $("#" + objId).attr("mmb");
                            if (newValue != oldValue) {
                                $("#" + objId)[0].setAttribute("mmb", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mmb"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row)
        }
        var row = {
            name: "玻扇开启方向",
            value: MicroDraw_GetObjProperty(objId, "mopendir"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "L",
                        text: "左"
                    },
                    {
                        id: "R",
                        text: "右"
                    },
                    {
                        id: "T",
                        text: "上"
                    },
                    {
                        id: "B",
                        text: "下"
                    },
                    {
                        id: "LT",
                        text: "左上"
                    },
                    {
                        id: "LB",
                        text: "左下"
                    },
                    {
                        id: "RT",
                        text: "右上"
                    },
                    {
                        id: "RB",
                        text: "右下"
                    },
                    {
                        id: "PT",
                        text: "平推"
                    }],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mopendir", newValue);
                            var mopendir = $("#" + objId).attr("mopendir");
                            var editable;
                            if (($.inArray(mopendir, ["L", "R"]) > -1)) {
                                editable = true
                            } else {
                                editable = false;
                                $("#" + objId).attr("mzsstyle", mDrawFlag_PK_zsStyle[0].id)
                            }
                            var disabled = !editable;
                            MicroDraw_EditAbleEasyUIRow(mDrawObjProperty, "dbCol", "mzsstyle", editable, disabled);
                            MicroDraw_Redraw(objId);
                            MicroDraw_autoGdPic()
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mopendir"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var mswopendirVal = MicroDraw_GetObjProperty(objId, "mswopendir");
        var oriIsNull = false;
        if ($.Micro.IsEmpty(mswopendirVal)) {
            mswopendirVal = MicroDraw_GetObjProperty(objId, "mopendir");
            oriIsNull = true
        }
        if (mswopendirVal.indexOf("L") > -1) {
            mswopendirVal = "L"
        } else {
            mswopendirVal = "R"
        }
        if (oriIsNull) {
            $("#" + objId)[0].setAttribute("mswopendir", mswopendirVal)
        }
        if (mtype != mDrawFlag_ArcsPkc) {
            var row = {
                name: "纱扇开启方向",
                value: mswopendirVal,
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "L",
                            text: "左"
                        },
                        {
                            id: "R",
                            text: "右"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mswopendir", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_autoGdPic()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mswopendir"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "扇拼接方式",
                value: MicroDraw_GetObjProperty(objId, "mfanpjstyle"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "45",
                            text: "45"
                        },
                        {
                            id: "V",
                            text: "竖向通长"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mfanpjstyle", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mfanpjstyle"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row)
        }
        var row = {
            name: "是否有压线",
            value: MicroDraw_GetObjProperty(objId, "myt"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "Y",
                        text: "是"
                    },
                    {
                        id: "N",
                        text: "否"
                    }],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("myt", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "myt"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        if (mtype != mDrawFlag_ArcsPkc) {
            var row = {
                name: "压线拼接方式",
                value: MicroDraw_GetObjProperty(objId, "mytpjstyle"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "45",
                            text: "45"
                        },
                        {
                            id: "V",
                            text: "竖向通长"
                        },
                        {
                            id: "H",
                            text: "横向通长"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mytpjstyle", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mytpjstyle"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "纱扇",
                value: MicroDraw_GetObjProperty(objId, "msw"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "Y",
                            text: "是"
                        },
                        {
                            id: "N",
                            text: "否"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("msw", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_autoGdPic()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "msw"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            switch (mVersion) {
            case "DRAW":
            case "DRAW_M":
            case "DRAW_JX":
                break;
            default:
                var row = {
                    name: "纱网规格",
                    value: MicroDraw_GetObjProperty(objId, "msa"),
                    group: "",
                    editor: {
                        type: "combobox",
                        options: {
                            required: false,
                            editable: true,
                            data: mPublicGlList,
                            valueField: "glass",
                            textField: "glass",
                            onChange: function(newValue, oldValue) {
                                oldValue = $("#" + objId).attr("msa");
                                if (newValue != oldValue) {
                                    $("#" + objId)[0].setAttribute("msa", newValue);
                                    MicroDraw_RedrawAll(mDrawFlag_SvgId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "msa"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row)
            }
            var row = {
                name: "防盗条",
                value: MicroDraw_GetObjProperty(objId, "mfdt"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "Y",
                            text: "是"
                        },
                        {
                            id: "N",
                            text: "否"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mfdt", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mfdt"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var mfdtstyle = MicroDraw_GetObjProperty(objId, "mfdtstyle");
            if ($.Micro.IsEmpty(mfdtstyle)) {
                mfdtstyle = 1;
                $("#" + objId).attr("mfdtstyle", mfdtstyle)
            }
            var row = {
                name: "防盗条款式",
                value: mfdtstyle,
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "1",
                            text: "款式1"
                        },
                        {
                            id: "2",
                            text: "款式2"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mfdtstyle", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mfdtstyle"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "玻璃防护栏",
                value: MicroDraw_GetObjProperty(objId, "mglassfhl"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "Y",
                            text: "是"
                        },
                        {
                            id: "N",
                            text: "否"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mglassfhl", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mglassfhl"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "玻璃防护栏高度",
                value: MicroDraw_GetObjProperty(objId, "mglassfhlheight"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: true,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mglassfhlheight", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mglassfhlheight"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            switch (mVersion) {
            case "DRAW":
            case "DRAW_M":
            case "DRAW_JX":
                break;
            default:
                var row = {
                    name: "是否带转换料",
                    value: MicroDraw_GetObjProperty(objId, "mchange"),
                    group: "",
                    editor: {
                        type: "combobox",
                        options: {
                            required: true,
                            editable: false,
                            data: [{
                                id: "Y",
                                text: "是"
                            },
                            {
                                id: "N",
                                text: "否"
                            }],
                            valueField: "id",
                            textField: "text",
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && newValue.length > 0) {
                                    $("#" + objId)[0].setAttribute("mchange", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mchange"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row)
            }
            var row = {
                name: "上文字标识",
                value: MicroDraw_GetObjProperty(objId, "mutext"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: false,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue) {
                                $("#" + objId)[0].setAttribute("mutext", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mutext"),
                mPropertyName: "mutext"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "下文字标识",
                value: MicroDraw_GetObjProperty(objId, "mdtext"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: false,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue) {
                                $("#" + objId)[0].setAttribute("mdtext", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mdtext"),
                mPropertyName: "mdtext"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "左文字标识",
                value: MicroDraw_GetObjProperty(objId, "mltext"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: false,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue) {
                                $("#" + objId)[0].setAttribute("mltext", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mltext"),
                mPropertyName: "mltext"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "右文字标识",
                value: MicroDraw_GetObjProperty(objId, "mrtext"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: false,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue) {
                                $("#" + objId)[0].setAttribute("mrtext", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mrtext"),
                mPropertyName: "mrtext"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row)
        }
        var mjs = $("#" + objId).attr("mjs");
        if ($.Micro.IsEmpty(mjs)) {
            mjs = "Y";
            $("#" + objId).attr("mjs", mjs)
        }
        var row = {
            name: "执手",
            value: MicroDraw_GetObjProperty(objId, "mjs"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "Y",
                        text: "是"
                    },
                    {
                        id: "N",
                        text: "否"
                    }],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mjs", newValue);
                            MicroDraw_reflashHandle($("#" + objId))
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mjs"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        if (mtype != mDrawFlag_ArcsPkc) {
            var mzsstyle = $("#" + objId).attr("mzsstyle");
            if ($.Micro.IsEmpty(mzsstyle)) {
                mzsstyle = mDrawFlag_PK_zsStyle[0].id;
                $("#" + objId).attr("mzsstyle", mzsstyle)
            }
            var row = {
                name: "执手款式",
                value: mzsstyle,
                group: "",
                dbCol: "mzsstyle",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: mDrawFlag_PK_zsStyle,
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mzsstyle", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mzsstyle"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var mopendir = $("#" + objId).attr("mopendir");
            var editable;
            if (($.inArray(mopendir, ["L", "R"]) > -1)) {
                editable = true
            } else {
                editable = false;
                $("#" + objId).attr("mzsstyle", mDrawFlag_PK_zsStyle[0].id)
            }
            var disabled = !editable;
            MicroDraw_EditAbleEasyUIRow(mDrawObjProperty, "dbCol", "mzsstyle", editable, disabled);
            var row = {
                name: "执手标尺",
                value: MicroDraw_GetObjProperty(objId, "mjscoor"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "Y",
                            text: "是"
                        },
                        {
                            id: "N",
                            text: "否"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mjscoor", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_reflashHandleCoorY()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mjscoor"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "执手标尺偏移量",
                value: MicroDraw_GetObjProperty(objId, "mjscooroffset"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: true,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mjscooroffset", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_reflashHandleCoorY()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mjscooroffset"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "执手离地高度",
                value: MicroDraw_GetObjProperty(objId, "mjsldheight"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: true,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mjsldheight", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_reflashHandleCoorY()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mjsldheight"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "窗台高度",
                value: MicroDraw_GetObjProperty(objId, "mjsctheight"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: true,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                var tWin = $("#" + objId).parents("[mtype=" + mDrawFlag_Win + "]");
                                var getCombObjIDs = MicroDraw_getCombWinIDs("all");
                                var Wins = getCombObjIDs.Wins;
                                if ($.Micro.isInArray(tWin.attr("id"), Wins)) {
                                    for (var i = 0; i < Wins.length; i++) {
                                        $("#" + mDrawFlag_SvgId + " #" + Wins[i]).find("[mjsctheight]").attr("mjsctheight", newValue)
                                    }
                                } else {
                                    $("#" + objId)[0].setAttribute("mjsctheight", newValue)
                                }
                                MicroDraw_Redraw(objId);
                                MicroDraw_reflashHandleCoorY()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mjsctheight"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var oriVal = MicroDraw_GetObjProperty(objId, "mgdshowstyle");
            if ($.Micro.IsEmpty(oriVal)) {
                oriVal = 0
            }
            var row = {
                name: "轨道显示方式",
                value: oriVal,
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "0",
                            text: "系统默认"
                        },
                        {
                            id: "1",
                            text: "自定义"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                MicroDraw_showhiddenEasyUIRow(mDrawObjProperty, "mgdshow_hidden", newValue);
                                $("#" + objId)[0].setAttribute("mgdshowstyle", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_autoGdPic()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mgdshowstyle"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var oriVal = MicroDraw_GetObjProperty(objId, "mgdid");
            if ($.Micro.IsEmpty(oriVal)) {
                oriVal = ""
            }
            var row = {
                mgdshow_hidden: "0",
                name: "轨道编号",
                value: oriVal,
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: false,
                        editable: true,
                        data: [{
                            id: oriVal,
                            text: oriVal
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue) {
                                $("#" + objId)[0].setAttribute("mgdid", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mgdid"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var oriVal = MicroDraw_GetObjProperty(objId, "mgdscale");
            var defScale = mDrawFlag_DefinedgdScale;
            if ($.Micro.IsEmpty(oriVal)) {
                oriVal = defScale
            }
            if (isNaN(oriVal)) {
                oriVal = defScale
            }
            if (Number(oriVal) < 0) {
                oriVal = defScale
            }
            var datas = [];
            for (var i = 1; i < 2.1; i += 0.1) {
                var _val = $.Micro.MRound(0.5 * i, 2);
                datas.push({
                    id: _val,
                    text: _val
                })
            }
            var row = {
                mgdshow_hidden: "0",
                name: "轨道缩放比例",
                value: oriVal,
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: false,
                        editable: true,
                        data: datas,
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue) {
                                if ($.Micro.IsEmpty(newValue)) {
                                    newValue = defScale
                                }
                                if (isNaN(newValue)) {
                                    newValue = defScale
                                }
                                if (Number(newValue) < 0) {
                                    newValue = defScale
                                }
                                if (String(newValue) == "0.") {
                                    return true
                                }
                                $("#" + objId)[0].setAttribute("mgdscale", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mgdscale"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                mgdshow_hidden: "1",
                name: "俯视图开启方向",
                value: MicroDraw_GetObjProperty(objId, "mgdopendir"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "上",
                            text: "上"
                        },
                        {
                            id: "下",
                            text: "下"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mgdopendir", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_autoGdPic()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mgdopendir"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                mgdshow_hidden: "1",
                name: "俯视图纱扇开启方向",
                value: MicroDraw_GetObjProperty(objId, "mswgdopendir"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "系统默认",
                            text: "系统默认"
                        },
                        {
                            id: "上",
                            text: "上"
                        },
                        {
                            id: "下",
                            text: "下"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mswgdopendir", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_autoGdPic()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mswgdopendir"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                mgdshow_hidden: "1",
                name: "俯视图玻扇文字",
                value: MicroDraw_GetObjProperty(objId, "mgdglasstxt"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: true,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mgdglasstxt", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_autoGdPic()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mgdglasstxt"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                mgdshow_hidden: "1",
                name: "俯视图纱扇文字",
                value: MicroDraw_GetObjProperty(objId, "mgdswtxt"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: true,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mgdswtxt", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_autoGdPic()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mgdswtxt"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "扇中横",
                value: MicroDraw_GetObjProperty(objId, "mzhtype"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "无",
                            text: "无"
                        },
                        {
                            id: "1根",
                            text: "1根"
                        },
                        {
                            id: "2根",
                            text: "2根"
                        },
                        {
                            id: "3根",
                            text: "3根"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mzhtype", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_autoGdPic()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mzhtype"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "2根扇中横间距",
                value: MicroDraw_GetObjProperty(objId, "mzhgap"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: true,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mzhgap", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_autoGdPic()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mzhgap"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var mgdshowstyle = MicroDraw_GetObjProperty(objId, "mgdshowstyle");
            if ($.Micro.IsEmpty(mgdshowstyle)) {
                mgdshowstyle = 0
            }
            MicroDraw_showhiddenEasyUIRow(mDrawObjProperty, "mgdshow_hidden", mgdshowstyle);
            if ($("#" + objId).parents('[mtype="' + mDrawFlag_Win + '"]').length <= 0) {
                mcx = MicroDraw_GetObjProperty(objId, "mcx");
                if (isEmptyOrNull(mcx)) {
                    var x = $("#" + objId + "_r1")[0].getAttribute("x");
                    mcx = ((Number(x) / mDrawPixelPerM) * 1000).toFixed(2)
                }
                var row = {
                    name: "X座标",
                    value: mcx,
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: true,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                                    $("#" + objId)[0].setAttribute("mcx", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mcx"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                mcy = MicroDraw_GetObjProperty(objId, "mcy");
                if (isEmptyOrNull(mcy)) {
                    var y = $("#" + objId + "_r1")[0].getAttribute("y");
                    mcy = ((Number(y) / mDrawPixelPerM) * 1000).toFixed(2)
                }
                var row = {
                    name: "Y座标",
                    value: mcy,
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: true,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                                    $("#" + objId)[0].setAttribute("mcy", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mcy"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                mcwidth = MicroDraw_GetObjProperty(objId, "mcwidth");
                if (isEmptyOrNull(mcwidth)) {
                    var width = $("#" + objId + "_r1")[0].getAttribute("width");
                    mcwidth = ((Number(width) / mDrawPixelPerM) * 1000).toFixed(2)
                }
                var row = {
                    name: "宽度",
                    value: mcwidth,
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: true,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                                    $("#" + objId)[0].setAttribute("mcwidth", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mcwidth"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                mcheight = MicroDraw_GetObjProperty(objId, "mcheight");
                if (isEmptyOrNull(mcheight)) {
                    var height = $("#" + objId + "_r1")[0].getAttribute("height");
                    mcheight = ((Number(height) / mDrawPixelPerM) * 1000).toFixed(2)
                }
                var row = {
                    name: "高度",
                    value: mcheight,
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: true,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                                    $("#" + objId)[0].setAttribute("mcheight", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mcheight"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row)
            }
        }
        break;
    case mDrawFlag_Custom_text:
        var row = {
            name: "字体内容",
            value: MicroDraw_GetObjProperty(objId, "mtext"),
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mtext", newValue);
                            MicroDraw_Redraw(objId);
                            var mgdtxtbelongto = $("#" + objId)[0].getAttribute("mgdtxtbelongto");
                            if (!isEmptyOrNull(mgdtxtbelongto)) {
                                var mgdtxtbelongtoproperty = $("#" + objId)[0].getAttribute("mgdtxtbelongtoproperty");
                                $("#" + mgdtxtbelongto)[0].setAttribute(mgdtxtbelongtoproperty, newValue)
                            }
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtext"),
            mPropertyName: "mtext"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "字体大小",
            value: MicroDraw_GetObjProperty(objId, "mfontsize"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: mDrawFontSize,
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mfontsize", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mfontsize"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "字体加粗",
            value: MicroDraw_GetObjProperty(objId, "mfontweight"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "400",
                        text: "普通"
                    },
                    {
                        id: "700",
                        text: "加粗"
                    }],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mfontweight", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mfontweight"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "字体颜色",
            value: MicroDraw_GetObjProperty(objId, "mfill"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: mDrawFontColor,
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mfill", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mfill"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "文字方向",
            value: MicroDraw_GetObjProperty(objId, "mdir"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "tb",
                        text: "竖向文字"
                    },
                    {
                        id: "lr",
                        text: "横向文字"
                    }],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mdir", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mdir"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        mx = MicroDraw_GetObjProperty(objId, "mx");
        if (isEmptyOrNull(mx)) {
            var x = $("#" + objId + "_t")[0].getAttribute("x");
            mx = ((Number(x) / mDrawPixelPerM) * 1000).toFixed(2)
        }
        var row = {
            name: "X座标",
            value: mx,
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            $("#" + objId)[0].setAttribute("mx", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mx"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        my = MicroDraw_GetObjProperty(objId, "my");
        if (isEmptyOrNull(my)) {
            var y = $("#" + objId + "_t")[0].getAttribute("y");
            my = ((Number(y) / mDrawPixelPerM) * 1000).toFixed(2)
        }
        var row = {
            name: "Y座标",
            value: my,
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            $("#" + objId)[0].setAttribute("my", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "my"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        break;
    case mDrawFlag_Custom_line:
        var row = {
            name: "线条粗细",
            value: MicroDraw_GetObjProperty(objId, "mstrokewidth"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "1px",
                        text: "1px"
                    },
                    {
                        id: "2px",
                        text: "2px"
                    },
                    {
                        id: "3px",
                        text: "3px"
                    },
                    {
                        id: "4px",
                        text: "4px"
                    },
                    {
                        id: "5px",
                        text: "5px"
                    },
                    ],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mstrokewidth", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mstrokewidth"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "线条颜色",
            value: MicroDraw_GetObjProperty(objId, "mstroke"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: mDrawFontColor,
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mstroke", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mstroke"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        mx1 = MicroDraw_GetObjProperty(objId, "mx1");
        if (isEmptyOrNull(mx1)) {
            var x1 = $("#" + objId + "_l")[0].getAttribute("x1");
            mx1 = ((Number(x1) / mDrawPixelPerM) * 1000).toFixed(2)
        }
        var row = {
            name: "X1座标",
            value: mx1,
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            $("#" + objId)[0].setAttribute("mx1", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mx1"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        my1 = MicroDraw_GetObjProperty(objId, "my1");
        if (isEmptyOrNull(my1)) {
            var y1 = $("#" + objId + "_l")[0].getAttribute("y1");
            my1 = ((Number(y1) / mDrawPixelPerM) * 1000).toFixed(2)
        }
        var row = {
            name: "Y1座标",
            value: my1,
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            $("#" + objId)[0].setAttribute("my1", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "my1"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        mx2 = MicroDraw_GetObjProperty(objId, "mx2");
        if (isEmptyOrNull(mx2)) {
            var x2 = $("#" + objId + "_l")[0].getAttribute("x2");
            mx2 = ((Number(x2) / mDrawPixelPerM) * 1000).toFixed(2)
        }
        var row = {
            name: "X2座标",
            value: mx2,
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            $("#" + objId)[0].setAttribute("mx2", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mx2"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        my2 = MicroDraw_GetObjProperty(objId, "my2");
        if (isEmptyOrNull(my2)) {
            var y2 = $("#" + objId + "_l")[0].getAttribute("y2");
            my2 = ((Number(y2) / mDrawPixelPerM) * 1000).toFixed(2)
        }
        var row = {
            name: "Y2座标",
            value: my2,
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            $("#" + objId)[0].setAttribute("my2", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "my2"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        break;
    case mDrawFlag_Custom_rect:
        var row = {
            name: "边框粗细",
            value: MicroDraw_GetObjProperty(objId, "mstrokewidth"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "1px",
                        text: "1px"
                    },
                    {
                        id: "2px",
                        text: "2px"
                    },
                    {
                        id: "3px",
                        text: "3px"
                    },
                    {
                        id: "4px",
                        text: "4px"
                    },
                    {
                        id: "5px",
                        text: "5px"
                    },
                    ],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mstrokewidth", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mstrokewidth"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "边框颜色",
            value: MicroDraw_GetObjProperty(objId, "mstroke"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: mDrawFontColor,
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mstroke", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mstroke"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "填充颜色",
            value: MicroDraw_GetObjProperty(objId, "mfill"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: mDrawFillColor,
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mfill", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mfill"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        mx = MicroDraw_GetObjProperty(objId, "mx");
        if (isEmptyOrNull(mx)) {
            var x = $("#" + objId + "_r")[0].getAttribute("x");
            mx = ((Number(x) / mDrawPixelPerM) * 1000).toFixed(2)
        }
        var row = {
            name: "X座标",
            value: mx,
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            $("#" + objId)[0].setAttribute("mx", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mx"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        my = MicroDraw_GetObjProperty(objId, "my");
        if (isEmptyOrNull(my)) {
            var y = $("#" + objId + "_r")[0].getAttribute("y");
            my = ((Number(y) / mDrawPixelPerM) * 1000).toFixed(2)
        }
        var row = {
            name: "Y座标",
            value: my,
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            $("#" + objId)[0].setAttribute("my", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "my"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        mwidth = MicroDraw_GetObjProperty(objId, "mwidth");
        if (isEmptyOrNull(mwidth)) {
            var width = $("#" + objId + "_r")[0].getAttribute("width");
            mwidth = ((Number(width) / mDrawPixelPerM) * 1000).toFixed(2)
        }
        var row = {
            name: "宽度",
            value: mwidth,
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            $("#" + objId)[0].setAttribute("mwidth", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mwidth"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        mheight = MicroDraw_GetObjProperty(objId, "mheight");
        if (isEmptyOrNull(mheight)) {
            var height = $("#" + objId + "_r")[0].getAttribute("height");
            mheight = ((Number(height) / mDrawPixelPerM) * 1000).toFixed(2)
        }
        var row = {
            name: "高度",
            value: mheight,
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            $("#" + objId)[0].setAttribute("mheight", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mheight"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        break;
    case mDrawFlag_Custom_polygon:
        if ($("#" + mDrawFlag_SvgId + " #" + objId).parents('[mtype = "' + mDrawFlag_Cornergdpic + '"]').length == 0) {
            var row = {
                name: "边框粗细",
                value: MicroDraw_GetObjProperty(objId, "mstrokewidth"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "1px",
                            text: "1px"
                        },
                        {
                            id: "2px",
                            text: "2px"
                        },
                        {
                            id: "3px",
                            text: "3px"
                        },
                        {
                            id: "4px",
                            text: "4px"
                        },
                        {
                            id: "5px",
                            text: "5px"
                        },
                        ],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mstrokewidth", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mstrokewidth"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "边框颜色",
                value: MicroDraw_GetObjProperty(objId, "mstroke"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: mDrawFontColor,
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mstroke", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mstroke"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "填充颜色",
                value: MicroDraw_GetObjProperty(objId, "mfill"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: mDrawFillColor,
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mfill", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mfill"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            mx = MicroDraw_GetObjProperty(objId, "mx");
            if (isEmptyOrNull(mx)) {
                var mpoints = $("#" + objId + "_p")[0].getAttribute("points");
                var mArr = mpoints.split(" ");
                var mSubArr = mArr[0].split(",");
                mx = ((Number(mSubArr[0]) / mDrawPixelPerM) * 1000).toFixed(2)
            }
            var row = {
                name: "X座标",
                value: mx,
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: true,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                                $("#" + objId)[0].setAttribute("mx", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_AutoRuler(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mx"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            my = MicroDraw_GetObjProperty(objId, "my");
            if (isEmptyOrNull(my)) {
                var mpoints = $("#" + objId + "_p")[0].getAttribute("points");
                var mArr = mpoints.split(" ");
                var mSubArr = mArr[0].split(",");
                my = ((Number(mSubArr[1]) / mDrawPixelPerM) * 1000).toFixed(2)
            }
            var row = {
                name: "Y座标",
                value: my,
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: true,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                                $("#" + objId)[0].setAttribute("my", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_AutoRuler(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "my"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "宽度",
                value: MicroDraw_GetObjProperty(objId, "mwidth"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: true,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                                $("#" + objId)[0].setAttribute("mwidth", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_AutoRuler(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mwidth"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "高度",
                value: MicroDraw_GetObjProperty(objId, "mheight"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: true,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                                $("#" + objId)[0].setAttribute("mheight", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_AutoRuler(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mheight"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var customruler = MicroDraw_GetObjProperty(objId, "customruler");
            if ($.Micro.IsEmpty(customruler)) {
                customruler = 0;
                $("#" + objId)[0].setAttribute("customruler", 0)
            }
            var row = {
                name: "显示标尺",
                value: customruler,
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "1",
                            text: "是"
                        },
                        {
                            id: "0",
                            text: "否"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                                $("#" + objId)[0].setAttribute("customruler", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_AutoRuler(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "customruler"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "顷斜方向",
                value: MicroDraw_GetObjProperty(objId, "mlr"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "L",
                            text: "左顷"
                        },
                        {
                            id: "R",
                            text: "右顷"
                        },
                        {
                            id: "N",
                            text: "无顷斜"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                                $("#" + objId)[0].setAttribute("mlr", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mlr"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row)
        }
        break;
    case mDrawFlag_Custom_arc:
        switch (mVersion) {
        case "DRAW":
        case "DRAW_M":
        case "DRAW_JX":
            break;
        default:
            var mPublicXcxlIDs = [];
            for (var i = 0; i < mPublicXcxlList.length; i++) {
                mPublicXcxlIDs.push(mPublicXcxlList[i].id)
            }
            var mxcxlidEdit = true;
            if (!isPcUserAgent()) {
                mxcxlidEdit = false
            }
            var row = {
                name: "系列结构",
                value: MicroDraw_GetObjProperty(objId, "mxcxlid"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: false,
                        editable: mxcxlidEdit,
                        data: mPublicXcxlList,
                        valueField: "id",
                        textField: "name",
                        onChange: function(newValue, oldValue) {
                            if ($.Micro.isInArray(newValue, mPublicXcxlIDs)) {
                                $("#" + mDrawFlag_SvgId + " #" + objId)[0].setAttribute("mxcxlid", newValue);
                                MicroDraw_changeXcxl(objId, newValue)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mxcxlid"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row)
        }
        var row = {
            name: "边框粗细",
            value: MicroDraw_GetObjProperty(objId, "mstrokewidth"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "1px",
                        text: "1px"
                    },
                    {
                        id: "2px",
                        text: "2px"
                    },
                    {
                        id: "3px",
                        text: "3px"
                    },
                    {
                        id: "4px",
                        text: "4px"
                    },
                    {
                        id: "5px",
                        text: "5px"
                    },
                    ],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mstrokewidth", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mstrokewidth"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "边框颜色",
            value: MicroDraw_GetObjProperty(objId, "mstroke"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: mDrawFontColor,
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mstroke", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mstroke"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "填充颜色",
            value: MicroDraw_GetObjProperty(objId, "mfill"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: mDrawFillColor,
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mfill", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mfill"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        mx = MicroDraw_GetObjProperty(objId, "mx");
        if (isEmptyOrNull(mx)) {
            var d = $("#" + objId + "_p1")[0].getAttribute("d");
            d = d.substr(0, d.indexOf("A") - 1);
            d = replaceAll(d, "M", "");
            var mArr = d.split(" ");
            mx = ((Number(mArr[0]) / mDrawPixelPerM) * 1000).toFixed(2)
        }
        var row = {
            name: "X座标",
            value: mx,
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            $("#" + objId)[0].setAttribute("mx", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mx"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        my = MicroDraw_GetObjProperty(objId, "my");
        if (isEmptyOrNull(my)) {
            var d = $("#" + objId + "_p1")[0].getAttribute("d");
            d = d.substr(0, d.indexOf("A") - 1);
            d = replaceAll(d, "M", "");
            var mArr = d.split(" ");
            my = ((Number(mArr[1]) / mDrawPixelPerM) * 1000).toFixed(2)
        }
        var row = {
            name: "Y座标",
            value: my,
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            $("#" + objId)[0].setAttribute("my", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "my"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "宽度",
            value: MicroDraw_GetObjProperty(objId, "mwidth"),
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    validType: "validARCL['" + objId + "']",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mwidth", newValue);
                            MicroDraw_Redraw(objId);
                            MicroDraw_AutoRuler(objId);
                            MicroDraw_ExpChangeCustom("size");
                            MicroDraw_ExpChangeCustom("pos")
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mwidth"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "高度",
            value: MicroDraw_GetObjProperty(objId, "mheight"),
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    validType: "validArcH['" + objId + "']",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mheight", newValue);
                            MicroDraw_Redraw(objId);
                            MicroDraw_AutoRuler(objId);
                            MicroDraw_ExpChangeCustom("size");
                            MicroDraw_ExpChangeCustom("pos")
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mheight"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        if ($.Micro.IsEmpty(MicroDraw_GetObjProperty(objId, "showarclen"))) {
            $("#" + objId)[0].setAttribute("showarclen", "N")
        }
        var row = {
            name: "显示弧长",
            value: MicroDraw_GetObjProperty(objId, "showarclen"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "Y",
                        text: "是"
                    },
                    {
                        id: "N",
                        text: "否"
                    }],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("showarclen", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "showarclen"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "显示标尺",
            value: MicroDraw_GetObjProperty(objId, "customruler"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "1",
                        text: "是"
                    },
                    {
                        id: "0",
                        text: "否"
                    }],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("customruler", newValue);
                            MicroDraw_Redraw(objId);
                            MicroDraw_AutoRuler(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "customruler"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "增加两倍框宽",
            value: MicroDraw_GetObjProperty(objId, "maddthickwidth"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "Y",
                        text: "是"
                    },
                    {
                        id: "N",
                        text: "否"
                    }],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("maddthickwidth", newValue);
                            MicroDraw_Redraw(objId);
                            MicroDraw_AutoRuler(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "maddthickwidth"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "中挺数量",
            value: MicroDraw_GetObjProperty(objId, "mtingcnt"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "0根",
                        text: "0根"
                    },
                    {
                        id: "1根",
                        text: "1根"
                    },
                    {
                        id: "2根",
                        text: "2根"
                    },
                    {
                        id: "3根",
                        text: "3根"
                    }],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mtingcnt", newValue);
                            MicroDraw_Redraw(objId);
                            MicroDraw_AutoRuler(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mtingcnt"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var mbframeShow = [{
            id: "Y",
            text: "是"
        },
        {
            id: "N",
            text: "否"
        }];
        var oriVal = MicroDraw_GetObjProperty(objId, "mbframe");
        if ($.Micro.IsEmpty(oriVal)) {
            oriVal = "N"
        }
        var row = {
            name: "显示下边框",
            value: oriVal,
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: mbframeShow,
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + mDrawFlag_SvgId + " #" + objId)[0].setAttribute("mbframe", newValue);
                            MicroDraw_Redraw(objId);
                            MicroDraw_AutoRuler(objId);
                            MicroDraw_ExpChangeCustom("pos")
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mbframe"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var mtotallenShow = [{
            id: "Y",
            text: "是"
        },
        {
            id: "N",
            text: "否"
        }];
        var oriVal = MicroDraw_GetObjProperty(objId, "mtotallen");
        if ($.Micro.IsEmpty(oriVal)) {
            oriVal = "N"
        }
        var row = {
            name: "下边框通长",
            value: oriVal,
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: mtotallenShow,
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mtotallen", newValue);
                            MicroDraw_Redraw(objId);
                            MicroDraw_AutoRuler(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mtotallen"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        break;
    case mDrawFlag_Custom_ruler:
        var row = {
            name: "线条粗细",
            value: MicroDraw_GetObjProperty(objId, "mstrokewidth"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "1px",
                        text: "1px"
                    },
                    {
                        id: "2px",
                        text: "2px"
                    },
                    {
                        id: "3px",
                        text: "3px"
                    },
                    {
                        id: "4px",
                        text: "4px"
                    },
                    {
                        id: "5px",
                        text: "5px"
                    },
                    ],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mstrokewidth", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mstrokewidth"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "线条颜色",
            value: MicroDraw_GetObjProperty(objId, "mstroke"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: mDrawFontColor,
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mstroke", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mstroke"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "标尺内容",
            value: MicroDraw_GetObjProperty(objId, "mtext"),
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mtext", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mtext"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "同步参数编号",
            value: MicroDraw_GetObjProperty(objId, "moptid"),
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: false,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (isEmptyOrNull(newValue)) {
                            newValue = "";
                            $("#" + objId)[0].setAttribute("moptid", newValue)
                        }
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("moptid", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "moptid"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "同步参数值公式",
            value: MicroDraw_GetObjProperty(objId, "moptvalexp"),
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: false,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (isEmptyOrNull(newValue)) {
                            newValue = "";
                            $("#" + objId)[0].setAttribute("moptvalexp", newValue)
                        }
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("moptvalexp", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "moptvalexp"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        mx1 = MicroDraw_GetObjProperty(objId, "mx1");
        if (isEmptyOrNull(mx1)) {
            mx1 = ((Number($("#" + objId + "_l2")[0].getAttribute("x1")) / mDrawPixelPerM) * 1000).toFixed(2)
        }
        var row = {
            name: "X1",
            value: mx1,
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            $("#" + objId)[0].setAttribute("mx1", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mx1"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        my1 = MicroDraw_GetObjProperty(objId, "my1");
        if (isEmptyOrNull(my1)) {
            my1 = ((Number($("#" + objId + "_l2")[0].getAttribute("y1")) / mDrawPixelPerM) * 1000).toFixed(2)
        }
        var row = {
            name: "Y1",
            value: my1,
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            $("#" + objId)[0].setAttribute("my1", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "my1"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        mx2 = MicroDraw_GetObjProperty(objId, "mx2");
        if (isEmptyOrNull(mx2)) {
            mx2 = ((Number($("#" + objId + "_l2")[0].getAttribute("x2")) / mDrawPixelPerM) * 1000).toFixed(2)
        }
        var row = {
            name: "X2",
            value: mx2,
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            $("#" + objId)[0].setAttribute("mx2", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mx2"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        my2 = MicroDraw_GetObjProperty(objId, "my2");
        if (isEmptyOrNull(my2)) {
            my2 = ((Number($("#" + objId + "_l2")[0].getAttribute("y2")) / mDrawPixelPerM) * 1000).toFixed(2)
        }
        var row = {
            name: "Y2",
            value: my2,
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            $("#" + objId)[0].setAttribute("my2", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "my2"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        break;
    case mDrawFlag_Custom_circle:
        var row = {
            name: "边框粗细",
            value: MicroDraw_GetObjProperty(objId, "mstrokewidth"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "1px",
                        text: "1px"
                    },
                    {
                        id: "2px",
                        text: "2px"
                    },
                    {
                        id: "3px",
                        text: "3px"
                    },
                    {
                        id: "4px",
                        text: "4px"
                    },
                    {
                        id: "5px",
                        text: "5px"
                    },
                    ],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mstrokewidth", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mstrokewidth"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "边框颜色",
            value: MicroDraw_GetObjProperty(objId, "mstroke"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: mDrawFontColor,
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mstroke", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mstroke"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "填充颜色",
            value: MicroDraw_GetObjProperty(objId, "mfill"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: mDrawFillColor,
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mfill", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mfill"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        mx = MicroDraw_GetObjProperty(objId, "mx");
        if (isEmptyOrNull(mx)) {
            var x = $("#" + objId + "_c")[0].getAttribute("cx");
            mx = ((Number(x) / mDrawPixelPerM) * 1000).toFixed(2)
        }
        var row = {
            name: "X座标",
            value: mx,
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            $("#" + objId)[0].setAttribute("mx", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mx"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        my = MicroDraw_GetObjProperty(objId, "my");
        if (isEmptyOrNull(my)) {
            var y = $("#" + objId + "_c")[0].getAttribute("cy");
            my = ((Number(y) / mDrawPixelPerM) * 1000).toFixed(2)
        }
        var row = {
            name: "Y座标",
            value: my,
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            $("#" + objId)[0].setAttribute("my", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "my"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        mr = MicroDraw_GetObjProperty(objId, "mr");
        if (isEmptyOrNull(mr)) {
            var r = $("#" + objId + "_c")[0].getAttribute("r");
            mr = ((Number(r) / mDrawPixelPerM) * 1000).toFixed(2)
        }
        var row = {
            name: "半径",
            value: mr,
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            $("#" + objId)[0].setAttribute("mr", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mr"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        break;
    case mDrawFlag_Custom_wall:
        var row = {
            name: "边框粗细",
            value: MicroDraw_GetObjProperty(objId, "mstrokewidth"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "1px",
                        text: "1px"
                    },
                    {
                        id: "2px",
                        text: "2px"
                    },
                    {
                        id: "3px",
                        text: "3px"
                    },
                    {
                        id: "4px",
                        text: "4px"
                    },
                    {
                        id: "5px",
                        text: "5px"
                    },
                    ],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mstrokewidth", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mstrokewidth"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "边框颜色",
            value: MicroDraw_GetObjProperty(objId, "mstroke"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: mDrawFontColor,
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mstroke", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mstroke"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "填充颜色",
            value: MicroDraw_GetObjProperty(objId, "mfill"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: mDrawFillColor,
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mfill", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mfill"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "砖宽像素",
            value: MicroDraw_GetObjProperty(objId, "mwallwidth"),
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mwallwidth", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mwallwidth"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "砖高像素",
            value: MicroDraw_GetObjProperty(objId, "mwallheight"),
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mwallheight", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mwallheight"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "墙砖行数",
            value: MicroDraw_GetObjProperty(objId, "mwallrow"),
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mwallrow", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mwallrow"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "墙体宽度",
            value: MicroDraw_GetObjProperty(objId, "mwallrealwidth"),
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mwallrealwidth", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mwallrealwidth"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        break;
    case mDrawFlag_Custom_impSvg:
        var row = {
            name: "缩放因子",
            value: MicroDraw_GetObjProperty(objId, "mscale"),
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if ($.Micro.IsEmpty(newValue)) {
                            return true
                        }
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mscale", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mscale"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        break;
    case mDrawFlag_Dkc:
    case mDrawFlag_ArcsDkc:
        switch (mVersion) {
        case "DRAW":
        case "DRAW_M":
        case "DRAW_JX":
            break;
        default:
            var row = {
                name: "玻璃规格",
                value: MicroDraw_GetObjProperty(objId, "mglass"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: false,
                        editable: true,
                        data: mPublicGlList,
                        valueField: "glass",
                        textField: "glass",
                        onChange: function(newValue, oldValue) {
                            oldValue = $("#" + objId).attr("mglass");
                            if (newValue != oldValue) {
                                $("#" + objId)[0].setAttribute("mglass", newValue);
                                MicroDraw_RedrawAll(mDrawFlag_SvgId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mglass"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "玻璃工艺",
                value: MicroDraw_GetObjProperty(objId, "mtech"),
                group: "",
                editor: {
                    type: "combogrid",
                    options: {
                        panelWidth: 260,
                        required: true,
                        editable: false,
                        data: mPublicGlassTech,
                        idField: "GlassTech",
                        textField: "GlassTech",
                        columns: [[{
                            field: "GlassTech",
                            title: "玻璃工艺",
                            width: 80
                        },
                        {
                            field: "Memo",
                            title: "备注",
                            width: 120
                        }]],
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mtech", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mtech"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "底玻",
                value: MicroDraw_GetObjProperty(objId, "mdb"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: false,
                        editable: true,
                        data: mPublicGlassTexture,
                        valueField: "GlassTexture",
                        textField: "GlassTexture",
                        onChange: function(newValue, oldValue) {
                            oldValue = $("#" + objId).attr("mdb");
                            if (newValue != oldValue) {
                                $("#" + objId)[0].setAttribute("mdb", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mdb"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "面玻",
                value: MicroDraw_GetObjProperty(objId, "mmb"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: false,
                        editable: true,
                        data: mPublicGlassTexture,
                        valueField: "GlassTexture",
                        textField: "GlassTexture",
                        onChange: function(newValue, oldValue) {
                            oldValue = $("#" + objId).attr("mmb");
                            if (newValue != oldValue) {
                                $("#" + objId)[0].setAttribute("mmb", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mmb"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row)
        }
        if (mtype != mDrawFlag_ArcsDkc) {
            var row = {
                name: "扇拼接方式",
                value: MicroDraw_GetObjProperty(objId, "mfanpjstyle"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "45",
                            text: "45"
                        },
                        {
                            id: "V",
                            text: "竖向通长"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mfanpjstyle", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mfanpjstyle"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row)
        }
        var row = {
            name: "是否有压线",
            value: MicroDraw_GetObjProperty(objId, "mfanhasyt"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "Y",
                        text: "是"
                    },
                    {
                        id: "N",
                        text: "否"
                    }],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mfanhasyt", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mfanhasyt"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        if (mtype != mDrawFlag_ArcsDkc) {
            var row = {
                name: "压线拼接方式",
                value: MicroDraw_GetObjProperty(objId, "mfanytpjstyle"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "45",
                            text: "45"
                        },
                        {
                            id: "V",
                            text: "竖向通长"
                        },
                        {
                            id: "H",
                            text: "横向通长"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mfanytpjstyle", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mfanytpjstyle"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "纱扇",
                value: MicroDraw_GetObjProperty(objId, "mfanswflag"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "1,1",
                            text: "是"
                        },
                        {
                            id: "0,0",
                            text: "否"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mfanswflag", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_autoGdPic()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mfanswflag"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            switch (mVersion) {
            case "DRAW":
            case "DRAW_M":
            case "DRAW_JX":
                break;
            default:
                var row = {
                    name: "纱网规格",
                    value: MicroDraw_GetObjProperty(objId, "msa"),
                    group: "",
                    editor: {
                        type: "combobox",
                        options: {
                            required: false,
                            editable: true,
                            data: mPublicGlList,
                            valueField: "glass",
                            textField: "glass",
                            onChange: function(newValue, oldValue) {
                                oldValue = $("#" + objId).attr("msa");
                                if (newValue != oldValue) {
                                    $("#" + objId)[0].setAttribute("msa", newValue);
                                    MicroDraw_RedrawAll(mDrawFlag_SvgId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "msa"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row)
            }
            var row = {
                name: "防盗条",
                value: MicroDraw_GetObjProperty(objId, "mfdt"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "Y",
                            text: "是"
                        },
                        {
                            id: "N",
                            text: "否"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mfdt", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mfdt"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var mfdtstyle = MicroDraw_GetObjProperty(objId, "mfdtstyle");
            if ($.Micro.IsEmpty(mfdtstyle)) {
                mfdtstyle = 1;
                $("#" + objId).attr("mfdtstyle", mfdtstyle)
            }
            var row = {
                name: "防盗条款式",
                value: mfdtstyle,
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "1",
                            text: "款式1"
                        },
                        {
                            id: "2",
                            text: "款式2"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mfdtstyle", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mfdtstyle"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "玻璃防护栏",
                value: MicroDraw_GetObjProperty(objId, "mglassfhl"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "Y",
                            text: "是"
                        },
                        {
                            id: "N",
                            text: "否"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mglassfhl", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mglassfhl"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "玻璃防护栏高度",
                value: MicroDraw_GetObjProperty(objId, "mglassfhlheight"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: true,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mglassfhlheight", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mglassfhlheight"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            switch (mVersion) {
            case "DRAW":
            case "DRAW_M":
            case "DRAW_JX":
                break;
            default:
                var row = {
                    name: "是否带转换料",
                    value: MicroDraw_GetObjProperty(objId, "mchange"),
                    group: "",
                    editor: {
                        type: "combobox",
                        options: {
                            required: true,
                            editable: false,
                            data: [{
                                id: "Y",
                                text: "是"
                            },
                            {
                                id: "N",
                                text: "否"
                            }],
                            valueField: "id",
                            textField: "text",
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && newValue.length > 0) {
                                    $("#" + objId)[0].setAttribute("mchange", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mchange"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row)
            }
            var row = {
                name: "上文字标识",
                value: MicroDraw_GetObjProperty(objId, "mutext"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: false,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue) {
                                $("#" + objId)[0].setAttribute("mutext", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mutext"),
                mPropertyName: "mutext"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "下文字标识",
                value: MicroDraw_GetObjProperty(objId, "mdtext"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: false,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue) {
                                $("#" + objId)[0].setAttribute("mdtext", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mdtext"),
                mPropertyName: "mdtext"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "左文字标识",
                value: MicroDraw_GetObjProperty(objId, "mltext"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: false,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue) {
                                $("#" + objId)[0].setAttribute("mltext", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mltext"),
                mPropertyName: "mltext"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "右文字标识",
                value: MicroDraw_GetObjProperty(objId, "mrtext"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: false,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue) {
                                $("#" + objId)[0].setAttribute("mrtext", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mrtext"),
                mPropertyName: "mrtext"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row)
        }
        var mjs = $("#" + objId).attr("mjs");
        if ($.Micro.IsEmpty(mjs)) {
            mjs = "Y";
            $("#" + objId).attr("mjs", mjs)
        }
        var row = {
            name: "执手",
            value: MicroDraw_GetObjProperty(objId, "mjs"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "Y",
                        text: "是"
                    },
                    {
                        id: "N",
                        text: "否"
                    }],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mjs", newValue);
                            MicroDraw_reflashHandle($("#" + objId))
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mjs"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        if (mtype != mDrawFlag_ArcsDkc) {
            var mzsstyle = $("#" + objId).attr("mzsstyle");
            if ($.Micro.IsEmpty(mzsstyle)) {
                mzsstyle = mDrawFlag_PK_zsStyle[0].id;
                $("#" + objId).attr("mzsstyle", mzsstyle)
            }
            var row = {
                name: "执手款式",
                value: mzsstyle,
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: mDrawFlag_PK_zsStyle,
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mzsstyle", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mzsstyle"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "执手标尺",
                value: MicroDraw_GetObjProperty(objId, "mjscoor"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "Y",
                            text: "是"
                        },
                        {
                            id: "N",
                            text: "否"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mjscoor", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_reflashHandleCoorY()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mjscoor"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "执手标尺偏移量",
                value: MicroDraw_GetObjProperty(objId, "mjscooroffset"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: true,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mjscooroffset", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_reflashHandleCoorY()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mjscooroffset"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "执手离地高度",
                value: MicroDraw_GetObjProperty(objId, "mjsldheight"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: true,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mjsldheight", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_reflashHandleCoorY()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mjsldheight"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "窗台高度",
                value: MicroDraw_GetObjProperty(objId, "mjsctheight"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: true,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mjsctheight", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_reflashHandleCoorY()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mjsctheight"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var oriVal = MicroDraw_GetObjProperty(objId, "mgdshowstyle");
            if ($.Micro.IsEmpty(oriVal)) {
                oriVal = 0
            }
            var row = {
                name: "轨道显示方式",
                value: oriVal,
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "0",
                            text: "系统默认"
                        },
                        {
                            id: "1",
                            text: "自定义"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                MicroDraw_showhiddenEasyUIRow(mDrawObjProperty, "mgdshow_hidden", newValue);
                                $("#" + objId)[0].setAttribute("mgdshowstyle", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_autoGdPic()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mgdshowstyle"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var oriVal = MicroDraw_GetObjProperty(objId, "mgdid");
            if ($.Micro.IsEmpty(oriVal)) {
                oriVal = ""
            }
            var row = {
                mgdshow_hidden: "0",
                name: "轨道编号",
                value: oriVal,
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: false,
                        editable: true,
                        data: [{
                            id: oriVal,
                            text: oriVal
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue) {
                                $("#" + objId)[0].setAttribute("mgdid", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mgdid"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var oriVal = MicroDraw_GetObjProperty(objId, "mgdscale");
            var defScale = mDrawFlag_DefinedgdScale;
            if ($.Micro.IsEmpty(oriVal)) {
                oriVal = defScale
            }
            if (isNaN(oriVal)) {
                oriVal = defScale
            }
            if (Number(oriVal) < 0) {
                oriVal = defScale
            }
            var datas = [];
            for (var i = 1; i < 2.1; i += 0.1) {
                var _val = $.Micro.MRound(0.5 * i, 2);
                datas.push({
                    id: _val,
                    text: _val
                })
            }
            var row = {
                mgdshow_hidden: "0",
                name: "轨道缩放比例",
                value: oriVal,
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: false,
                        editable: true,
                        data: datas,
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue) {
                                if ($.Micro.IsEmpty(newValue)) {
                                    newValue = defScale
                                }
                                if (isNaN(newValue)) {
                                    newValue = defScale
                                }
                                if (Number(newValue) < 0) {
                                    newValue = defScale
                                }
                                if (String(newValue) == "0.") {
                                    return true
                                }
                                $("#" + objId)[0].setAttribute("mgdscale", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mgdscale"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                mgdshow_hidden: "1",
                name: "俯视图开启方向",
                value: MicroDraw_GetObjProperty(objId, "mgdopendir"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "上",
                            text: "上"
                        },
                        {
                            id: "下",
                            text: "下"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mgdopendir", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_autoGdPic()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mgdopendir"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                mgdshow_hidden: "1",
                name: "俯视图玻扇文字",
                value: MicroDraw_GetObjProperty(objId, "mgdglasstxt"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: true,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mgdglasstxt", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_autoGdPic()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mgdglasstxt"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                mgdshow_hidden: "1",
                name: "俯视图纱扇文字",
                value: MicroDraw_GetObjProperty(objId, "mgdswtxt"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: true,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mgdswtxt", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_autoGdPic()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mgdswtxt"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "扇中横",
                value: MicroDraw_GetObjProperty(objId, "mzhtype"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "无",
                            text: "无"
                        },
                        {
                            id: "1根",
                            text: "1根"
                        },
                        {
                            id: "2根",
                            text: "2根"
                        },
                        {
                            id: "3根",
                            text: "3根"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mzhtype", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_autoGdPic()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mzhtype"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "2根扇中横间距",
                value: MicroDraw_GetObjProperty(objId, "mzhgap"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: true,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mzhgap", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_autoGdPic()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mzhgap"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "左扇标尺",
                value: MicroDraw_GetObjProperty(objId, "mleftcoor"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "Y",
                            text: "是"
                        },
                        {
                            id: "N",
                            text: "否"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mleftcoor", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_ShowCoordinate()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mleftcoor"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "左扇宽度",
                value: MicroDraw_GetObjProperty(objId, "mleftwidth"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: true,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mleftwidth", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_ShowCoordinate()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mleftwidth"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var mgdshowstyle = MicroDraw_GetObjProperty(objId, "mgdshowstyle");
            if ($.Micro.IsEmpty(mgdshowstyle)) {
                mgdshowstyle = 0
            }
            MicroDraw_showhiddenEasyUIRow(mDrawObjProperty, "mgdshow_hidden", mgdshowstyle);
            if ($("#" + objId).parents('[mtype="' + mDrawFlag_Win + '"]').length <= 0) {
                mcx = MicroDraw_GetObjProperty(objId, "mcx");
                if (isEmptyOrNull(mcx)) {
                    var x = $("#" + objId + "_bg")[0].getAttribute("x");
                    mcx = ((Number(x) / mDrawPixelPerM) * 1000).toFixed(2)
                }
                var row = {
                    name: "X座标",
                    value: mcx,
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: true,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                                    $("#" + objId)[0].setAttribute("mcx", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mcx"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                mcy = MicroDraw_GetObjProperty(objId, "mcy");
                if (isEmptyOrNull(mcy)) {
                    var y = $("#" + objId + "_bg")[0].getAttribute("y");
                    mcy = ((Number(y) / mDrawPixelPerM) * 1000).toFixed(2)
                }
                var row = {
                    name: "Y座标",
                    value: mcy,
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: true,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                                    $("#" + objId)[0].setAttribute("mcy", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mcy"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                mcwidth = MicroDraw_GetObjProperty(objId, "mcwidth");
                if (isEmptyOrNull(mcwidth)) {
                    var width = $("#" + objId + "_bg")[0].getAttribute("width");
                    mcwidth = ((Number(width) / mDrawPixelPerM) * 1000).toFixed(2)
                }
                var row = {
                    name: "宽度",
                    value: mcwidth,
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: true,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                                    $("#" + objId)[0].setAttribute("mcwidth", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mcwidth"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                mcheight = MicroDraw_GetObjProperty(objId, "mcheight");
                if (isEmptyOrNull(mcheight)) {
                    var height = $("#" + objId + "_bg")[0].getAttribute("height");
                    mcheight = ((Number(height) / mDrawPixelPerM) * 1000).toFixed(2)
                }
                var row = {
                    name: "高度",
                    value: mcheight,
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: true,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                                    $("#" + objId)[0].setAttribute("mcheight", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mcheight"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row)
            }
        }
        break;
    case mDrawFlag_Custom_controlPoint:
        var polygonPointMoveInfo = mDrawPolygonPointMoveInfo.split(",");
        var mbelongid = polygonPointMoveInfo[0];
        var mmoving = polygonPointMoveInfo[1];
        var mbelongidMtype = MicroDraw_GetObjProperty(mbelongid, "mtype");
        if (mbelongidMtype == mDrawFlag_Custom_polygon) {
            var row = {
                name: "端点偏移量",
                value: MicroDraw_GetObjProperty(mbelongid, "m" + mmoving + "offset"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: true,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if ($.Micro.IsEmpty(newValue)) {
                                return true
                            }
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + mbelongid)[0].setAttribute("m" + mmoving + "offset", newValue);
                                MicroDraw_Redraw(mbelongid)
                            }
                        }
                    }
                },
                mObjId: mbelongid,
                mType: MicroDraw_GetObjProperty(mbelongid, "mtype"),
                mPropertyName: "m" + mmoving + "offset"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row)
        }
        break;
    case mDrawFlag_Custom_CornerMaterial:
    case mDrawFlag_Custom_CornerMaterial_h:
        var row = {
            name: "边框粗细",
            value: MicroDraw_GetObjProperty(objId, "mstrokewidth"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "1px",
                        text: "1px"
                    },
                    {
                        id: "2px",
                        text: "2px"
                    },
                    {
                        id: "3px",
                        text: "3px"
                    },
                    {
                        id: "4px",
                        text: "4px"
                    },
                    {
                        id: "5px",
                        text: "5px"
                    },
                    ],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mstrokewidth", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mstrokewidth"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "边框颜色",
            value: MicroDraw_GetObjProperty(objId, "mstroke"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: mDrawFontColor,
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mstroke", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mstroke"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "填充颜色",
            value: MicroDraw_GetObjProperty(objId, "mfill"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: mDrawFillColor,
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mfill", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mfill"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        if (mVersion != "DRAW" && mVersion != "DRAW_M" && mVersion != " DRAW_JX") {
            var oriVal = MicroDraw_GetObjProperty(objId, "mprid");
            if ($.Micro.IsEmpty(oriVal)) {
                oriVal = ""
            }
            var row = {
                name: "转角料型号",
                value: oriVal,
                group: "",
                dbCol: "mprid",
                editor: {
                    type: "combogrid",
                    options: {
                        required: false,
                        editable: true,
                        data: mPublicPrList,
                        idField: "productid",
                        textField: "productid",
                        columns: [[{
                            field: "productid",
                            title: "型号",
                            width: 80
                        },
                        {
                            field: "productname",
                            title: "名称",
                            width: 80
                        }]],
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mprid", newValue);
                                MicroDraw_ChangeCMAttrToDatas(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mprid"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row)
        }
        var mcx = MicroDraw_GetObjProperty(objId, "mcx");
        if (isEmptyOrNull(mcx)) {
            var x = $("#" + objId + "_rect")[0].getAttribute("x");
            mcx = ((Number(x) / mDrawPixelPerM) * 1000).toFixed(2)
        }
        var row = {
            name: "X座标",
            value: mcx,
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            $("#" + objId)[0].setAttribute("mcx", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mcx"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var mcy = MicroDraw_GetObjProperty(objId, "mcy");
        if (isEmptyOrNull(mcy)) {
            var y = $("#" + objId + "_rect")[0].getAttribute("y");
            mcy = ((Number(y) / mDrawPixelPerM) * 1000).toFixed(2)
        }
        var row = {
            name: "Y座标",
            value: mcy,
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            $("#" + objId)[0].setAttribute("mcy", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mcy"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var widthName = "mwidth";
        var lengthName = "mheight";
        if (mtype == mDrawFlag_Custom_CornerMaterial_h) {
            widthName = "mheight";
            lengthName = "mwidth"
        }
        var row = {
            name: "宽度",
            value: MicroDraw_GetObjProperty(objId, widthName),
            dbCol: widthName,
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            $("#" + objId)[0].setAttribute(widthName, newValue);
                            MicroDraw_Redraw(objId);
                            MicroDraw_ChangeCMAttrToDatas(objId);
                            MicroDraw_AutoRuler(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: widthName
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "长度",
            value: MicroDraw_GetObjProperty(objId, lengthName),
            dbCol: lengthName,
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            $("#" + objId)[0].setAttribute(lengthName, newValue);
                            MicroDraw_Redraw(objId);
                            MicroDraw_ChangeCMAttrToDatas(objId);
                            MicroDraw_AutoRuler(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: lengthName
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var mcnt = MicroDraw_GetObjProperty(objId, "mcnt") || 1;
        if (isNaN(mcnt)) {
            mcnt = 1
        }
        var row = {
            name: "数量",
            value: mcnt,
            dbCol: "mcnt",
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            if (isNaN(newValue)) {
                                newValue = 1
                            }
                            $("#" + objId)[0].setAttribute("mcnt", newValue);
                            MicroDraw_Redraw(objId);
                            MicroDraw_ChangeCMAttrToDatas(objId);
                            MicroDraw_AutoRuler(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mcnt"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "拼接角度",
            value: MicroDraw_GetObjProperty(objId, "mangle"),
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            if (isNaN(newValue)) {
                                newValue = 0
                            }
                            if (Number(newValue) < 0) {
                                newValue = Math.abs(newValue);
                                var madir = MicroDraw_GetObjProperty(objId, "madir");
                                var madir_index;
                                for (var i = 0; i < mDrawDirs.length; i++) {
                                    if (madir == mDrawDirs[i].tag) {
                                        madir = (i % 2 == 0) ? mDrawDirs[i + 1].tag: mDrawDirs[i - 1].tag;
                                        break
                                    }
                                }
                                $("#" + objId)[0].setAttribute("madir", madir)
                            } else {
                                if (Number(newValue) > 0) {
                                    $("#" + objId)[0].setAttribute("madir", "b")
                                }
                            }
                            $("#" + objId)[0].setAttribute("mangle", newValue);
                            MicroDraw_Redraw(objId);
                            MicroDraw_ChangeCMAttrToDatas(objId);
                            MicroDraw_AutoRuler(objId);
                            MicroDraw_autoGdPic()
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mangle"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "拼接方向",
            value: MicroDraw_GetObjProperty(objId, "madir"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: mDrawDirs,
                    valueField: "tag",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if ($.Micro.IsEmpty(oldValue)) {
                            return
                        }
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("madir", newValue);
                            MicroDraw_Redraw(objId);
                            MicroDraw_AutoRuler(objId);
                            MicroDraw_autoGdPic()
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "madir"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var mangleshow = MicroDraw_GetObjProperty(objId, "mangleshow");
        if ($.Micro.IsEmpty(mangleshow)) {
            mangleshow = "N";
            $("#" + objId).attr("mangleshow", mangleshow)
        }
        var row = {
            name: "角度显示",
            value: MicroDraw_GetObjProperty(objId, "mangleshow"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "Y",
                        text: "是"
                    },
                    {
                        id: "N",
                        text: "否"
                    }],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mangleshow", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mangleshow"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var mwidthshow = MicroDraw_GetObjProperty(objId, "mwidthshow");
        if ($.Micro.IsEmpty(mwidthshow)) {
            mwidthshow = "N";
            $("#" + objId).attr("mwidthshow", mwidthshow)
        }
        var row = {
            name: "宽度显示",
            value: MicroDraw_GetObjProperty(objId, "mwidthshow"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "Y",
                        text: "是"
                    },
                    {
                        id: "N",
                        text: "否"
                    }],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mwidthshow", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mwidthshow"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        break;
    case mDrawFlag_Custom_qj_lt:
    case mDrawFlag_Custom_qj_rt:
    case mDrawFlag_Custom_qj_rb:
    case mDrawFlag_Custom_qj_lb:
    case mDrawFlag_Custom_qj_tm:
    case mDrawFlag_Custom_qj_rm:
    case mDrawFlag_Custom_qj_bm:
    case mDrawFlag_Custom_qj_lm:
        var row = {
            name: "框拼接方式",
            value: MicroDraw_GetObjProperty(objId, "mframepjstyle"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "45",
                        text: "45"
                    },
                    {
                        id: "H",
                        text: "横向通长"
                    },
                    {
                        id: "V",
                        text: "竖向通长"
                    }],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mframepjstyle", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mframepjstyle"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "是否有压线",
            value: MicroDraw_GetObjProperty(objId, "myt"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "Y",
                        text: "是"
                    },
                    {
                        id: "N",
                        text: "否"
                    }],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("myt", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "myt"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "压线拼接方式",
            value: MicroDraw_GetObjProperty(objId, "mytpjstyle"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "45",
                        text: "45"
                    },
                    {
                        id: "H",
                        text: "横向通长"
                    },
                    {
                        id: "V",
                        text: "竖向通长"
                    }],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mytpjstyle", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mytpjstyle"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        mwidth = MicroDraw_GetObjProperty(objId, "mw");
        if (isEmptyOrNull(mwidth)) {
            var width = $("#" + objId + "_r")[0].getAttribute("width");
            mwidth = ((Number(width) / mDrawPixelPerM) * 1000).toFixed(2)
        }
        var row = {
            name: "宽度",
            value: mwidth,
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            $("#" + objId)[0].setAttribute("mw", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mw"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        mheight = MicroDraw_GetObjProperty(objId, "mh");
        if (isEmptyOrNull(mheight)) {
            var height = $("#" + objId + "_r")[0].getAttribute("height");
            mheight = ((Number(height) / mDrawPixelPerM) * 1000).toFixed(2)
        }
        var row = {
            name: "高度",
            value: mheight,
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            $("#" + objId)[0].setAttribute("mh", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mh"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        break;
    case mDrawFlag_Custom_qj_rx:
    case mDrawFlag_Custom_qj_lx:
    case mDrawFlag_Custom_qj_lrx:
        var row = {
            name: "框拼接方式",
            value: MicroDraw_GetObjProperty(objId, "mframepjstyle"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "45",
                        text: "45"
                    },
                    {
                        id: "H",
                        text: "横向通长"
                    },
                    {
                        id: "V",
                        text: "竖向通长"
                    }],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mframepjstyle", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mframepjstyle"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "是否有压线",
            value: MicroDraw_GetObjProperty(objId, "myt"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "Y",
                        text: "是"
                    },
                    {
                        id: "N",
                        text: "否"
                    }],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("myt", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "myt"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        var row = {
            name: "压线拼接方式",
            value: MicroDraw_GetObjProperty(objId, "mytpjstyle"),
            group: "",
            editor: {
                type: "combobox",
                options: {
                    required: true,
                    editable: false,
                    data: [{
                        id: "45",
                        text: "45"
                    }],
                    valueField: "id",
                    textField: "text",
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && newValue.length > 0) {
                            $("#" + objId)[0].setAttribute("mytpjstyle", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mytpjstyle"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        mwidth = MicroDraw_GetObjProperty(objId, "mw");
        if (isEmptyOrNull(mwidth)) {
            var width = $("#" + objId + "_r")[0].getAttribute("width");
            mwidth = ((Number(width) / mDrawPixelPerM) * 1000).toFixed(2)
        }
        var row = {
            name: "宽度",
            value: mwidth,
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            $("#" + objId)[0].setAttribute("mw", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mw"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        mheight = MicroDraw_GetObjProperty(objId, "mh");
        if (isEmptyOrNull(mheight)) {
            var height = $("#" + objId + "_r")[0].getAttribute("height");
            mheight = ((Number(height) / mDrawPixelPerM) * 1000).toFixed(2)
        }
        var row = {
            name: "高度",
            value: mheight,
            group: "",
            editor: {
                type: "textbox",
                options: {
                    required: true,
                    editable: true,
                    onChange: function(newValue, oldValue) {
                        if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                            $("#" + objId)[0].setAttribute("mh", newValue);
                            MicroDraw_Redraw(objId)
                        }
                    }
                }
            },
            mObjId: objId,
            mType: MicroDraw_GetObjProperty(objId, "mtype"),
            mPropertyName: "mh"
        };
        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
        break;
    default:
        if (mtype.substring(0, 3) == mDrawFlag_Tlc) {
            switch (mVersion) {
            case "DRAW":
            case "DRAW_M":
            case "DRAW_JX":
                break;
            default:
                var row = {
                    name: "玻璃规格",
                    value: MicroDraw_GetObjProperty(objId, "mglass"),
                    group: "",
                    editor: {
                        type: "combobox",
                        options: {
                            required: false,
                            editable: true,
                            data: mPublicGlList,
                            valueField: "glass",
                            textField: "glass",
                            onChange: function(newValue, oldValue) {
                                oldValue = $("#" + objId).attr("mglass");
                                if (newValue != oldValue) {
                                    $("#" + objId)[0].setAttribute("mglass", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mglass"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                var row = {
                    name: "玻璃工艺",
                    value: MicroDraw_GetObjProperty(objId, "mtech"),
                    group: "",
                    editor: {
                        type: "combogrid",
                        options: {
                            panelWidth: 260,
                            required: true,
                            editable: false,
                            data: mPublicGlassTech,
                            idField: "GlassTech",
                            textField: "GlassTech",
                            columns: [[{
                                field: "GlassTech",
                                title: "玻璃工艺",
                                width: 80
                            },
                            {
                                field: "Memo",
                                title: "备注",
                                width: 120
                            }]],
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && newValue.length > 0) {
                                    $("#" + objId)[0].setAttribute("mtech", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mtech"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                var row = {
                    name: "底玻",
                    value: MicroDraw_GetObjProperty(objId, "mdb"),
                    group: "",
                    editor: {
                        type: "combobox",
                        options: {
                            required: false,
                            editable: true,
                            data: mPublicGlassTexture,
                            valueField: "GlassTexture",
                            textField: "GlassTexture",
                            onChange: function(newValue, oldValue) {
                                oldValue = $("#" + objId).attr("mdb");
                                if (newValue != oldValue) {
                                    $("#" + objId)[0].setAttribute("mdb", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mdb"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                var row = {
                    name: "面玻",
                    value: MicroDraw_GetObjProperty(objId, "mmb"),
                    group: "",
                    editor: {
                        type: "combobox",
                        options: {
                            required: false,
                            editable: true,
                            data: mPublicGlassTexture,
                            valueField: "GlassTexture",
                            textField: "GlassTexture",
                            onChange: function(newValue, oldValue) {
                                oldValue = $("#" + objId).attr("mmb");
                                if (newValue != oldValue) {
                                    $("#" + objId)[0].setAttribute("mmb", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mmb"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row)
            }
            var mtypeArr = mtype.split("_");
            if (mtypeArr[1] == "2") {
                var row = {
                    name: "纱扇",
                    value: MicroDraw_GetObjProperty(objId, "mfanswflag"),
                    group: "",
                    editor: {
                        type: "combobox",
                        options: {
                            required: true,
                            editable: false,
                            data: [{
                                id: "0,0",
                                text: "无"
                            },
                            {
                                id: "1,0",
                                text: "左纱扇"
                            },
                            {
                                id: "0,1",
                                text: "右纱扇"
                            }],
                            valueField: "id",
                            textField: "text",
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && newValue.length > 0) {
                                    $("#" + objId)[0].setAttribute("mfanswflag", newValue);
                                    MicroDraw_Redraw(objId);
                                    MicroDraw_autoGdPic()
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mfanswflag"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                switch (mVersion) {
                case "DRAW":
                case "DRAW_M":
                case "DRAW_JX":
                    break;
                default:
                    var row = {
                        name: "纱网规格",
                        value: MicroDraw_GetObjProperty(objId, "msa"),
                        group: "",
                        editor: {
                            type: "combobox",
                            options: {
                                required: false,
                                editable: true,
                                data: mPublicGlList,
                                valueField: "glass",
                                textField: "glass",
                                onChange: function(newValue, oldValue) {
                                    oldValue = $("#" + objId).attr("msa");
                                    if (newValue != oldValue) {
                                        $("#" + objId)[0].setAttribute("msa", newValue);
                                        MicroDraw_Redraw(objId)
                                    }
                                }
                            }
                        },
                        mObjId: objId,
                        mType: MicroDraw_GetObjProperty(objId, "mtype"),
                        mPropertyName: "msa"
                    };
                    $("#" + mDrawObjProperty).propertygrid("appendRow", row)
                }
            } else {
                if (mtypeArr[1] == "4") {
                    var row = {
                        name: "纱扇",
                        value: MicroDraw_GetObjProperty(objId, "mfanswflag"),
                        group: "",
                        editor: {
                            type: "combobox",
                            options: {
                                required: true,
                                editable: false,
                                data: [{
                                    id: "0,0,0,0",
                                    text: "无"
                                },
                                {
                                    id: "0,1,1,0",
                                    text: "有"
                                }],
                                valueField: "id",
                                textField: "text",
                                onChange: function(newValue, oldValue) {
                                    if (newValue != oldValue && newValue.length > 0) {
                                        $("#" + objId)[0].setAttribute("mfanswflag", newValue);
                                        MicroDraw_Redraw(objId);
                                        MicroDraw_autoGdPic()
                                    }
                                }
                            }
                        },
                        mObjId: objId,
                        mType: MicroDraw_GetObjProperty(objId, "mtype"),
                        mPropertyName: "mfanswflag"
                    };
                    $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                    switch (mVersion) {
                    case "DRAW":
                    case "DRAW_M":
                    case "DRAW_JX":
                        break;
                    default:
                        var row = {
                            name: "纱网规格",
                            value: MicroDraw_GetObjProperty(objId, "msa"),
                            group: "",
                            editor: {
                                type: "combobox",
                                options: {
                                    required: false,
                                    editable: false,
                                    data: mPublicGlList,
                                    valueField: "glass",
                                    textField: "glass",
                                    onChange: function(newValue, oldValue) {
                                        if (newValue != oldValue && newValue.length > 0) {
                                            $("#" + objId)[0].setAttribute("msa", newValue);
                                            MicroDraw_Redraw(objId)
                                        }
                                    }
                                }
                            },
                            mObjId: objId,
                            mType: MicroDraw_GetObjProperty(objId, "mtype"),
                            mPropertyName: "msa"
                        };
                        $("#" + mDrawObjProperty).propertygrid("appendRow", row)
                    }
                } else {
                    if (mtypeArr[1] == "3" && (mtypeArr[3] == "011" || mtypeArr[3] == "100" || mtypeArr[3] == "001" || mtypeArr[3] == "110")) {
                        var row = {
                            name: "纱扇",
                            value: MicroDraw_GetObjProperty(objId, "mfanswflag"),
                            group: "",
                            editor: {
                                type: "combobox",
                                options: {
                                    required: true,
                                    editable: false,
                                    data: [{
                                        id: "0,0,0",
                                        text: "无"
                                    },
                                    {
                                        id: "1,0,0",
                                        text: "有"
                                    }],
                                    valueField: "id",
                                    textField: "text",
                                    onChange: function(newValue, oldValue) {
                                        if (newValue != oldValue && newValue.length > 0) {
                                            $("#" + objId)[0].setAttribute("mfanswflag", newValue);
                                            MicroDraw_Redraw(objId);
                                            MicroDraw_autoGdPic()
                                        }
                                    }
                                }
                            },
                            mObjId: objId,
                            mType: MicroDraw_GetObjProperty(objId, "mtype"),
                            mPropertyName: "mfanswflag"
                        };
                        $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                        switch (mVersion) {
                        case "DRAW":
                        case "DRAW_M":
                        case "DRAW_JX":
                            break;
                        default:
                            var row = {
                                name: "纱网规格",
                                value: MicroDraw_GetObjProperty(objId, "msa"),
                                group: "",
                                editor: {
                                    type: "combobox",
                                    options: {
                                        required: false,
                                        editable: true,
                                        data: mPublicGlList,
                                        valueField: "glass",
                                        textField: "glass",
                                        onChange: function(newValue, oldValue) {
                                            oldValue = $("#" + objId).attr("msa");
                                            if (newValue != oldValue) {
                                                $("#" + objId)[0].setAttribute("msa", newValue);
                                                MicroDraw_Redraw(objId)
                                            }
                                        }
                                    }
                                },
                                mObjId: objId,
                                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                                mPropertyName: "msa"
                            };
                            $("#" + mDrawObjProperty).propertygrid("appendRow", row)
                        }
                    }
                }
            }
            var row = {
                name: "扇拼接方式",
                value: MicroDraw_GetObjProperty(objId, "mfanpjstyle"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "45",
                            text: "45"
                        },
                        {
                            id: "V",
                            text: "竖向通长"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mfanpjstyle", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mfanpjstyle"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "是否有压线",
                value: MicroDraw_GetObjProperty(objId, "mfanhasyt"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "Y",
                            text: "是"
                        },
                        {
                            id: "N",
                            text: "否"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mfanhasyt", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mfanhasyt"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "压线拼接方式",
                value: MicroDraw_GetObjProperty(objId, "mfanytpjstyle"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "45",
                            text: "45"
                        },
                        {
                            id: "V",
                            text: "竖向通长"
                        },
                        {
                            id: "H",
                            text: "横向通长"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mfanytpjstyle", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mfanytpjstyle"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "执手标尺",
                value: MicroDraw_GetObjProperty(objId, "mjscoor"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "Y",
                            text: "是"
                        },
                        {
                            id: "N",
                            text: "否"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mjscoor", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_reflashHandleCoorY()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mjscoor"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "执手标尺偏移量",
                value: MicroDraw_GetObjProperty(objId, "mjscooroffset"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: true,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mjscooroffset", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_reflashHandleCoorY()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mjscooroffset"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "执手离地高度",
                value: MicroDraw_GetObjProperty(objId, "mjsldheight"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: true,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mjsldheight", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_reflashHandleCoorY()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mjsldheight"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                name: "窗台高度",
                value: MicroDraw_GetObjProperty(objId, "mjsctheight"),
                group: "",
                editor: {
                    type: "textbox",
                    options: {
                        required: true,
                        editable: true,
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mjsctheight", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_reflashHandleCoorY()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mjsctheight"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var mArr = mtype.split("_");
            if (mArr[2] == "gf" || mArr[2] == "fg") {
                var oriVal = MicroDraw_GetObjProperty(objId, "mfantype");
                if ($.Micro.IsEmpty(oriVal)) {
                    oriVal = "g,f"
                }
                var row = {
                    name: "扇类型",
                    value: oriVal,
                    group: "",
                    editor: {
                        type: "combobox",
                        options: {
                            required: true,
                            editable: false,
                            data: [{
                                id: "g,f",
                                text: "左固右推"
                            },
                            {
                                id: "f,g",
                                text: "左推右固"
                            }],
                            valueField: "id",
                            textField: "text",
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && newValue.length > 0) {
                                    $("#" + objId)[0].setAttribute("mfantype", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mfantype"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row)
            }
            var oriVal = MicroDraw_GetObjProperty(objId, "mgdshowstyle");
            if ($.Micro.IsEmpty(oriVal)) {
                oriVal = 0
            }
            var row = {
                name: "轨道显示方式",
                value: oriVal,
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "0",
                            text: "系统默认"
                        },
                        {
                            id: "1",
                            text: "自定义"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                MicroDraw_showhiddenEasyUIRow(mDrawObjProperty, "mgdshow_hidden", newValue);
                                $("#" + objId)[0].setAttribute("mgdshowstyle", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_autoGdPic()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mgdshowstyle"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var oriVal = MicroDraw_GetObjProperty(objId, "mgdid");
            if ($.Micro.IsEmpty(oriVal)) {
                oriVal = ""
            }
            var row = {
                mgdshow_hidden: "0",
                name: "轨道编号",
                value: oriVal,
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: false,
                        editable: true,
                        data: [{
                            id: oriVal,
                            text: oriVal
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue) {
                                $("#" + objId)[0].setAttribute("mgdid", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mgdid"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var oriVal = MicroDraw_GetObjProperty(objId, "mgdscale");
            var defScale = mDrawFlag_DefinedgdScale;
            if ($.Micro.IsEmpty(oriVal)) {
                oriVal = defScale
            }
            if (isNaN(oriVal)) {
                oriVal = defScale
            }
            if (Number(oriVal) < 0) {
                oriVal = defScale
            }
            var datas = [];
            for (var i = 1; i < 2.1; i += 0.1) {
                var _val = $.Micro.MRound(0.5 * i, 2);
                datas.push({
                    id: _val,
                    text: _val
                })
            }
            var row = {
                mgdshow_hidden: "0",
                name: "轨道缩放比例",
                value: oriVal,
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: false,
                        editable: true,
                        data: datas,
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue) {
                                if ($.Micro.IsEmpty(newValue)) {
                                    newValue = defScale
                                }
                                if (isNaN(newValue)) {
                                    newValue = defScale
                                }
                                if (Number(newValue) < 0) {
                                    newValue = defScale
                                }
                                if (String(newValue) == "0.") {
                                    return true
                                }
                                $("#" + objId)[0].setAttribute("mgdscale", newValue);
                                MicroDraw_Redraw(objId)
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mgdscale"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var mArr = mtype.split("_");
            if (mArr[2] == "ff") {
                var row = {
                    name: "轨道类型",
                    value: MicroDraw_GetObjProperty(objId, "mfanlayer"),
                    group: "",
                    editor: {
                        type: "combogrid",
                        options: {
                            panelWidth: 260,
                            required: true,
                            editable: false,
                            data: mPublicGdList_mDraw_tlc_2_ff_01,
                            idField: "id",
                            textField: "name",
                            columns: [[{
                                field: "name",
                                title: "名称",
                                width: 80
                            },
                            {
                                field: "gdpic",
                                title: "轨道图",
                                width: 120
                            }]],
                            onChange: function(newValue, oldValue) {
                                if (oldValue.length > 0) {
                                    $("#" + objId)[0].setAttribute("mfanlayer", newValue);
                                    MicroDraw_Redraw(objId);
                                    MicroDraw_autoGdPic()
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mfanlayer"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row)
            } else {
                if (mArr[2] == "kf" || mArr[2] == "fk") {
                    var row = {
                        name: "轨道类型",
                        value: MicroDraw_GetObjProperty(objId, "mfantype"),
                        group: "",
                        editor: {
                            type: "combogrid",
                            options: {
                                panelWidth: 260,
                                required: true,
                                editable: false,
                                data: mPublicGdList_mDraw_tlc_2_kf_01,
                                idField: "id",
                                textField: "name",
                                columns: [[{
                                    field: "name",
                                    title: "名称",
                                    width: 80
                                },
                                {
                                    field: "gdpic",
                                    title: "轨道图",
                                    width: 120
                                }]],
                                onChange: function(newValue, oldValue) {
                                    if (oldValue.length > 0) {
                                        $("#" + objId)[0].setAttribute("mfantype", newValue);
                                        MicroDraw_Redraw(objId);
                                        MicroDraw_autoGdPic();
                                        MicroDraw_ShowCoordinate()
                                    }
                                }
                            }
                        },
                        mObjId: objId,
                        mType: MicroDraw_GetObjProperty(objId, "mtype"),
                        mPropertyName: "mfantype"
                    };
                    $("#" + mDrawObjProperty).propertygrid("appendRow", row)
                } else {
                    if (mArr[2] == "gf" || mArr[2] == "fg") {
                        var row = {
                            name: "轨道类型",
                            value: MicroDraw_GetObjProperty(objId, "mfanlayer"),
                            group: "",
                            editor: {
                                type: "combogrid",
                                options: {
                                    panelWidth: 260,
                                    required: true,
                                    editable: false,
                                    data: mPublicGdList_mDraw_tlc_2_gf_01,
                                    idField: "id",
                                    textField: "name",
                                    columns: [[{
                                        field: "name",
                                        title: "名称",
                                        width: 80
                                    },
                                    {
                                        field: "gdpic",
                                        title: "轨道图",
                                        width: 120
                                    }]],
                                    onChange: function(newValue, oldValue) {
                                        if (oldValue.length > 0) {
                                            $("#" + objId)[0].setAttribute("mfanlayer", newValue);
                                            MicroDraw_Redraw(objId);
                                            MicroDraw_autoGdPic()
                                        }
                                    }
                                }
                            },
                            mObjId: objId,
                            mType: MicroDraw_GetObjProperty(objId, "mtype"),
                            mPropertyName: "mfanlayer"
                        };
                        $("#" + mDrawObjProperty).propertygrid("appendRow", row)
                    }
                }
            }
            if (mArr[2] == "fff" && (mArr[3] == "010" || mArr[3] == "101")) {
                var row = {
                    name: "轨道类型",
                    value: MicroDraw_GetObjProperty(objId, "mfanlayer"),
                    group: "",
                    editor: {
                        type: "combogrid",
                        options: {
                            panelWidth: 260,
                            required: true,
                            editable: false,
                            data: mPublicGdList_mDraw_tlc_3_fff_010,
                            idField: "id",
                            textField: "name",
                            columns: [[{
                                field: "name",
                                title: "名称",
                                width: 80
                            },
                            {
                                field: "gdpic",
                                title: "轨道图",
                                width: 120
                            }]],
                            onChange: function(newValue, oldValue) {
                                if (oldValue.length > 0) {
                                    $("#" + objId)[0].setAttribute("mfanlayer", newValue);
                                    MicroDraw_Redraw(objId);
                                    MicroDraw_autoGdPic()
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mfanlayer"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row)
            }
            if (mArr[2] == "fff" && (mArr[3] == "011" || mArr[3] == "100" || mArr[3] == "110" || mArr[3] == "001")) {
                var row = {
                    name: "轨道类型",
                    value: MicroDraw_GetObjProperty(objId, "mfanlayer"),
                    group: "",
                    editor: {
                        type: "combogrid",
                        options: {
                            panelWidth: 260,
                            required: true,
                            editable: false,
                            data: mPublicGdList_mDraw_tlc_3_fff_011,
                            idField: "id",
                            textField: "name",
                            columns: [[{
                                field: "name",
                                title: "名称",
                                width: 80
                            },
                            {
                                field: "gdpic",
                                title: "轨道图",
                                width: 120
                            }]],
                            onChange: function(newValue, oldValue) {
                                if (oldValue.length > 0) {
                                    $("#" + objId)[0].setAttribute("mfanlayer", newValue);
                                    if (newValue == "1,1,0") {
                                        $("#" + objId)[0].setAttribute("mfanoffset", "0,0,1")
                                    } else {
                                        if (newValue == "0,1,1") {
                                            $("#" + objId)[0].setAttribute("mfanoffset", "0,1,0")
                                        } else {
                                            if (newValue == "1,0,0") {
                                                $("#" + objId)[0].setAttribute("mfanoffset", "0,1,0")
                                            } else {
                                                if (newValue == "0,0,1") {
                                                    $("#" + objId)[0].setAttribute("mfanoffset", "0,0,1")
                                                }
                                            }
                                        }
                                    }
                                    MicroDraw_Redraw(objId);
                                    MicroDraw_autoGdPic()
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mfanlayer"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row)
            }
            if (mArr[2] == "fff" && (mArr[3] == "012" || mArr[3] == "210")) {
                var row = {
                    name: "轨道类型",
                    value: MicroDraw_GetObjProperty(objId, "mfanlayer"),
                    group: "",
                    editor: {
                        type: "combogrid",
                        options: {
                            panelWidth: 260,
                            required: true,
                            editable: false,
                            data: mPublicGdList_mDraw_tlc_3_fff_012,
                            idField: "id",
                            textField: "name",
                            columns: [[{
                                field: "name",
                                title: "名称",
                                width: 80
                            },
                            {
                                field: "gdpic",
                                title: "轨道图",
                                width: 120
                            }]],
                            onChange: function(newValue, oldValue) {
                                if (oldValue.length > 0) {
                                    $("#" + objId)[0].setAttribute("mfanlayer", newValue);
                                    MicroDraw_Redraw(objId);
                                    MicroDraw_autoGdPic()
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mfanlayer"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row)
            }
            if (mArr[2] == "fgf" && (mArr[3] == "010" || mArr[3] == "101")) {
                var row = {
                    name: "轨道类型",
                    value: MicroDraw_GetObjProperty(objId, "mfanlayer"),
                    group: "",
                    editor: {
                        type: "combogrid",
                        options: {
                            panelWidth: 260,
                            required: true,
                            editable: false,
                            data: mPublicGdList_mDraw_tlc_3_fgf_010,
                            idField: "id",
                            textField: "name",
                            columns: [[{
                                field: "name",
                                title: "名称",
                                width: 80
                            },
                            {
                                field: "gdpic",
                                title: "轨道图",
                                width: 120
                            }]],
                            onChange: function(newValue, oldValue) {
                                if (oldValue.length > 0) {
                                    $("#" + objId)[0].setAttribute("mfanlayer", newValue);
                                    MicroDraw_Redraw(objId);
                                    MicroDraw_autoGdPic()
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mfanlayer"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row)
            }
            if (mArr[2] == "ffff") {
                var row = {
                    name: "轨道类型",
                    value: MicroDraw_GetObjProperty(objId, "mfanlayer"),
                    group: "",
                    editor: {
                        type: "combogrid",
                        options: {
                            panelWidth: 260,
                            required: true,
                            editable: false,
                            data: mPublicGdList_mDraw_tlc_4_ffff_0110,
                            idField: "id",
                            textField: "name",
                            columns: [[{
                                field: "name",
                                title: "名称",
                                width: 80
                            },
                            {
                                field: "gdpic",
                                title: "轨道图",
                                width: 120
                            }]],
                            onChange: function(newValue, oldValue) {
                                if (oldValue.length > 0) {
                                    $("#" + objId)[0].setAttribute("mfanlayer", newValue);
                                    MicroDraw_Redraw(objId);
                                    MicroDraw_autoGdPic()
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mfanlayer"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row)
            }
            if (mArr[2] == "kffk" || mArr[2] == "kkff" || mArr[2] == "ffkk") {
                var row = {
                    name: "轨道类型",
                    value: MicroDraw_GetObjProperty(objId, "mfanlayer"),
                    group: "",
                    editor: {
                        type: "combogrid",
                        options: {
                            panelWidth: 260,
                            required: true,
                            editable: false,
                            data: mPublicGdList_mDraw_tlc_4_kffk_0110,
                            idField: "id",
                            textField: "name",
                            columns: [[{
                                field: "name",
                                title: "名称",
                                width: 80
                            },
                            {
                                field: "gdpic",
                                title: "轨道图",
                                width: 120
                            }]],
                            onChange: function(newValue, oldValue) {
                                if (oldValue.length > 0) {
                                    $("#" + objId)[0].setAttribute("mfanlayer", newValue);
                                    if (newValue == "0,1,1,0") {
                                        $("#" + objId)[0].setAttribute("mfantype", "k,f,f,k")
                                    } else {
                                        if (newValue == "1,1,0,0") {
                                            $("#" + objId)[0].setAttribute("mfantype", "f,f,k,k")
                                        } else {
                                            if (newValue == "0,0,1,1") {
                                                $("#" + objId)[0].setAttribute("mfantype", "k,k,f,f")
                                            }
                                        }
                                    }
                                    MicroDraw_Redraw(objId);
                                    MicroDraw_autoGdPic();
                                    MicroDraw_ShowCoordinate()
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mfanlayer"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row)
            }
            if (mArr[2] == "gffg") {
                var row = {
                    name: "轨道类型",
                    value: MicroDraw_GetObjProperty(objId, "mfanlayer"),
                    group: "",
                    editor: {
                        type: "combogrid",
                        options: {
                            panelWidth: 260,
                            required: true,
                            editable: false,
                            data: mPublicGdList_mDraw_tlc_4_gffg_0110,
                            idField: "id",
                            textField: "name",
                            columns: [[{
                                field: "name",
                                title: "名称",
                                width: 80
                            },
                            {
                                field: "gdpic",
                                title: "轨道图",
                                width: 120
                            }]],
                            onChange: function(newValue, oldValue) {
                                if (oldValue.length > 0) {
                                    $("#" + objId)[0].setAttribute("mfanlayer", newValue);
                                    MicroDraw_Redraw(objId);
                                    MicroDraw_autoGdPic()
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mfanlayer"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row)
            }
            if (mArr[2] == "ffffff") {
                var row = {
                    name: "轨道类型",
                    value: MicroDraw_GetObjProperty(objId, "mfanlayer"),
                    group: "",
                    editor: {
                        type: "combogrid",
                        options: {
                            panelWidth: 260,
                            required: true,
                            editable: false,
                            data: mPublicGdList_mDraw_tlc_6_ffffff_012210,
                            idField: "id",
                            textField: "name",
                            columns: [[{
                                field: "name",
                                title: "名称",
                                width: 80
                            },
                            {
                                field: "gdpic",
                                title: "轨道图",
                                width: 120
                            }]],
                            onChange: function(newValue, oldValue) {
                                if (oldValue.length > 0) {
                                    $("#" + objId)[0].setAttribute("mfanlayer", newValue);
                                    MicroDraw_Redraw(objId);
                                    MicroDraw_autoGdPic()
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mfanlayer"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row)
            }
            var row = {
                mgdshow_hidden: "1",
                name: "轨道拉手类型",
                value: MicroDraw_GetObjProperty(objId, "mfanls"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "K",
                            text: "扣锁"
                        },
                        {
                            id: "Z",
                            text: "执手"
                        },
                        {
                            id: "L",
                            text: "大拉手"
                        }],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mfanls", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_autoGdPic()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mfanls"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var row = {
                mgdshow_hidden: "1",
                name: "轨道拉手状态",
                value: MicroDraw_GetObjProperty(objId, "mfanlsstate"),
                group: "",
                editor: {
                    type: "combobox",
                    options: {
                        required: true,
                        editable: false,
                        data: [{
                            id: "SA",
                            text: "显示全部"
                        },
                        {
                            id: "SD",
                            text: "只显示下方拉手"
                        },
                        {
                            id: "HA",
                            text: "隐藏全部"
                        },
                        ],
                        valueField: "id",
                        textField: "text",
                        onChange: function(newValue, oldValue) {
                            if (newValue != oldValue && newValue.length > 0) {
                                $("#" + objId)[0].setAttribute("mfanlsstate", newValue);
                                MicroDraw_Redraw(objId);
                                MicroDraw_autoGdPic()
                            }
                        }
                    }
                },
                mObjId: objId,
                mType: MicroDraw_GetObjProperty(objId, "mtype"),
                mPropertyName: "mfanlsstate"
            };
            $("#" + mDrawObjProperty).propertygrid("appendRow", row);
            var mgdshowstyle = MicroDraw_GetObjProperty(objId, "mgdshowstyle");
            if ($.Micro.IsEmpty(mgdshowstyle)) {
                mgdshowstyle = 0
            }
            MicroDraw_showhiddenEasyUIRow(mDrawObjProperty, "mgdshow_hidden", mgdshowstyle);
            var mArr = mtype.split("_");
            if (mArr[2] == "kf" || mArr[2] == "fk" || mArr[2] == "kffk" || mArr[2] == "kkff" || mArr[2] == "ffkk") {
                var row = {
                    name: "扇标尺",
                    value: MicroDraw_GetObjProperty(objId, "mfancoorshow"),
                    group: "",
                    editor: {
                        type: "combobox",
                        options: {
                            required: false,
                            editable: false,
                            data: [{
                                id: "Y",
                                text: "显示"
                            },
                            {
                                id: "N",
                                text: "隐藏"
                            }],
                            valueField: "id",
                            textField: "text",
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && newValue.length > 0) {
                                    $("#" + objId)[0].setAttribute("mfancoorshow", newValue);
                                    MicroDraw_ShowCoordinate()
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mfancoorshow"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row)
            }
            if ($("#" + objId).parents('[mtype="' + mDrawFlag_Win + '"]').length <= 0) {
                mcx = MicroDraw_GetObjProperty(objId, "mcx");
                if (isEmptyOrNull(mcx)) {
                    var x = $("#" + objId + "_bg")[0].getAttribute("x");
                    mcx = ((Number(x) / mDrawPixelPerM) * 1000).toFixed(2)
                }
                var row = {
                    name: "X座标",
                    value: mcx,
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: true,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                                    $("#" + objId)[0].setAttribute("mcx", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mcx"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                mcy = MicroDraw_GetObjProperty(objId, "mcy");
                if (isEmptyOrNull(mcy)) {
                    var y = $("#" + objId + "_bg")[0].getAttribute("y");
                    mcy = ((Number(y) / mDrawPixelPerM) * 1000).toFixed(2)
                }
                var row = {
                    name: "Y座标",
                    value: mcy,
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: true,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                                    $("#" + objId)[0].setAttribute("mcy", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mcy"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                mcwidth = MicroDraw_GetObjProperty(objId, "mcwidth");
                if (isEmptyOrNull(mcwidth)) {
                    var width = $("#" + objId + "_bg")[0].getAttribute("width");
                    mcwidth = ((Number(width) / mDrawPixelPerM) * 1000).toFixed(2)
                }
                var row = {
                    name: "宽度",
                    value: mcwidth,
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: true,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                                    $("#" + objId)[0].setAttribute("mcwidth", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mcwidth"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                mcheight = MicroDraw_GetObjProperty(objId, "mcheight");
                if (isEmptyOrNull(mcheight)) {
                    var height = $("#" + objId + "_bg")[0].getAttribute("height");
                    mcheight = ((Number(height) / mDrawPixelPerM) * 1000).toFixed(2)
                }
                var row = {
                    name: "高度",
                    value: mcheight,
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: true,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                                    $("#" + objId)[0].setAttribute("mcheight", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mcheight"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row)
            }
        } else {
            if (mtype.substring(0, 3) == mDrawFlag_Zdm) {
                switch (mVersion) {
                case "DRAW":
                case "DRAW_M":
                case "DRAW_JX":
                    break;
                default:
                    var row = {
                        name: "玻璃规格",
                        value: MicroDraw_GetObjProperty(objId, "mglass"),
                        group: "",
                        editor: {
                            type: "combobox",
                            options: {
                                required: false,
                                editable: true,
                                data: mPublicGlList,
                                valueField: "glass",
                                textField: "glass",
                                onChange: function(newValue, oldValue) {
                                    oldValue = $("#" + objId).attr("mglass");
                                    if (newValue != oldValue) {
                                        $("#" + objId)[0].setAttribute("mglass", newValue);
                                        MicroDraw_Redraw(objId)
                                    }
                                }
                            }
                        },
                        mObjId: objId,
                        mType: MicroDraw_GetObjProperty(objId, "mtype"),
                        mPropertyName: "mglass"
                    };
                    $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                    var row = {
                        name: "玻璃工艺",
                        value: MicroDraw_GetObjProperty(objId, "mtech"),
                        group: "",
                        editor: {
                            type: "combogrid",
                            options: {
                                panelWidth: 260,
                                required: true,
                                editable: false,
                                data: mPublicGlassTech,
                                idField: "GlassTech",
                                textField: "GlassTech",
                                columns: [[{
                                    field: "GlassTech",
                                    title: "玻璃工艺",
                                    width: 80
                                },
                                {
                                    field: "Memo",
                                    title: "备注",
                                    width: 120
                                }]],
                                onChange: function(newValue, oldValue) {
                                    if (newValue != oldValue && newValue.length > 0) {
                                        $("#" + objId)[0].setAttribute("mtech", newValue);
                                        MicroDraw_Redraw(objId)
                                    }
                                }
                            }
                        },
                        mObjId: objId,
                        mType: MicroDraw_GetObjProperty(objId, "mtype"),
                        mPropertyName: "mtech"
                    };
                    $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                    var row = {
                        name: "底玻",
                        value: MicroDraw_GetObjProperty(objId, "mdb"),
                        group: "",
                        editor: {
                            type: "combobox",
                            options: {
                                required: false,
                                editable: true,
                                data: mPublicGlassTexture,
                                valueField: "GlassTexture",
                                textField: "GlassTexture",
                                onChange: function(newValue, oldValue) {
                                    oldValue = $("#" + objId).attr("mdb");
                                    if (newValue != oldValue) {
                                        $("#" + objId)[0].setAttribute("mdb", newValue);
                                        MicroDraw_Redraw(objId)
                                    }
                                }
                            }
                        },
                        mObjId: objId,
                        mType: MicroDraw_GetObjProperty(objId, "mtype"),
                        mPropertyName: "mdb"
                    };
                    $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                    var row = {
                        name: "面玻",
                        value: MicroDraw_GetObjProperty(objId, "mmb"),
                        group: "",
                        editor: {
                            type: "combobox",
                            options: {
                                required: false,
                                editable: true,
                                data: mPublicGlassTexture,
                                valueField: "GlassTexture",
                                textField: "GlassTexture",
                                onChange: function(newValue, oldValue) {
                                    oldValue = $("#" + objId).attr("mmb");
                                    if (newValue != oldValue) {
                                        $("#" + objId)[0].setAttribute("mmb", newValue);
                                        MicroDraw_Redraw(objId)
                                    }
                                }
                            }
                        },
                        mObjId: objId,
                        mType: MicroDraw_GetObjProperty(objId, "mtype"),
                        mPropertyName: "mmb"
                    };
                    $("#" + mDrawObjProperty).propertygrid("appendRow", row)
                }
                var row = {
                    name: "扇拼接方式",
                    value: MicroDraw_GetObjProperty(objId, "mfanpjstyle"),
                    group: "",
                    editor: {
                        type: "combobox",
                        options: {
                            required: true,
                            editable: false,
                            data: [{
                                id: "45",
                                text: "45"
                            },
                            {
                                id: "V",
                                text: "竖向通长"
                            }],
                            valueField: "id",
                            textField: "text",
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && newValue.length > 0) {
                                    $("#" + objId)[0].setAttribute("mfanpjstyle", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mfanpjstyle"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                var row = {
                    name: "是否有压线",
                    value: MicroDraw_GetObjProperty(objId, "mfanhasyt"),
                    group: "",
                    editor: {
                        type: "combobox",
                        options: {
                            required: true,
                            editable: false,
                            data: [{
                                id: "Y",
                                text: "是"
                            },
                            {
                                id: "N",
                                text: "否"
                            }],
                            valueField: "id",
                            textField: "text",
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && newValue.length > 0) {
                                    $("#" + objId)[0].setAttribute("mfanhasyt", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mfanhasyt"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                var row = {
                    name: "压线拼接方式",
                    value: MicroDraw_GetObjProperty(objId, "mfanytpjstyle"),
                    group: "",
                    editor: {
                        type: "combobox",
                        options: {
                            required: true,
                            editable: false,
                            data: [{
                                id: "45",
                                text: "45"
                            },
                            {
                                id: "V",
                                text: "竖向通长"
                            },
                            {
                                id: "H",
                                text: "横向通长"
                            }],
                            valueField: "id",
                            textField: "text",
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && newValue.length > 0) {
                                    $("#" + objId)[0].setAttribute("mfanytpjstyle", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mfanytpjstyle"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                var row = {
                    name: "左扇数量",
                    value: MicroDraw_GetObjProperty(objId, "mlscnt"),
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: true,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && newValue.length > 0) {
                                    $("#" + objId)[0].setAttribute("mlscnt", newValue);
                                    MicroDraw_Redraw(objId);
                                    MicroDraw_autoGdPic()
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mlscnt"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                var row = {
                    name: "右扇数量",
                    value: MicroDraw_GetObjProperty(objId, "mrscnt"),
                    group: "",
                    editor: {
                        type: "textbox",
                        options: {
                            required: true,
                            editable: true,
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && newValue.length > 0) {
                                    $("#" + objId)[0].setAttribute("mrscnt", newValue);
                                    MicroDraw_Redraw(objId);
                                    MicroDraw_autoGdPic()
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mrscnt"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                var row = {
                    name: "俯视图开启方向",
                    value: MicroDraw_GetObjProperty(objId, "mgdopendir"),
                    group: "",
                    editor: {
                        type: "combobox",
                        options: {
                            required: true,
                            editable: false,
                            data: [{
                                id: "上",
                                text: "上"
                            },
                            {
                                id: "下",
                                text: "下"
                            }],
                            valueField: "id",
                            textField: "text",
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && newValue.length > 0) {
                                    $("#" + objId)[0].setAttribute("mgdopendir", newValue);
                                    MicroDraw_Redraw(objId);
                                    MicroDraw_autoGdPic()
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mgdopendir"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                var oriVal = MicroDraw_GetObjProperty(objId, "mgdshowstyle");
                if ($.Micro.IsEmpty(oriVal)) {
                    oriVal = 0
                }
                var row = {
                    name: "轨道显示方式",
                    value: oriVal,
                    group: "",
                    editor: {
                        type: "combobox",
                        options: {
                            required: true,
                            editable: false,
                            data: [{
                                id: "0",
                                text: "系统默认"
                            },
                            {
                                id: "1",
                                text: "自定义"
                            }],
                            valueField: "id",
                            textField: "text",
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue && newValue.length > 0) {
                                    MicroDraw_showhiddenEasyUIRow(mDrawObjProperty, "mgdshow_hidden", newValue);
                                    $("#" + objId)[0].setAttribute("mgdshowstyle", newValue);
                                    MicroDraw_Redraw(objId);
                                    MicroDraw_autoGdPic()
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mgdshowstyle"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                var oriVal = MicroDraw_GetObjProperty(objId, "mgdid");
                if ($.Micro.IsEmpty(oriVal)) {
                    oriVal = ""
                }
                var row = {
                    mgdshow_hidden: "0",
                    name: "轨道编号",
                    value: oriVal,
                    group: "",
                    editor: {
                        type: "combobox",
                        options: {
                            required: false,
                            editable: true,
                            data: [{
                                id: oriVal,
                                text: oriVal
                            }],
                            valueField: "id",
                            textField: "text",
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue) {
                                    $("#" + objId)[0].setAttribute("mgdid", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mgdid"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                var oriVal = MicroDraw_GetObjProperty(objId, "mgdscale");
                var defScale = mDrawFlag_DefinedgdScale;
                if ($.Micro.IsEmpty(oriVal)) {
                    oriVal = defScale
                }
                if (isNaN(oriVal)) {
                    oriVal = defScale
                }
                if (Number(oriVal) < 0) {
                    oriVal = defScale
                }
                var datas = [];
                for (var i = 1; i < 2.1; i += 0.1) {
                    var _val = $.Micro.MRound(0.5 * i, 2);
                    datas.push({
                        id: _val,
                        text: _val
                    })
                }
                var row = {
                    mgdshow_hidden: "0",
                    name: "轨道缩放比例",
                    value: oriVal,
                    group: "",
                    editor: {
                        type: "combobox",
                        options: {
                            required: false,
                            editable: true,
                            data: datas,
                            valueField: "id",
                            textField: "text",
                            onChange: function(newValue, oldValue) {
                                if (newValue != oldValue) {
                                    if ($.Micro.IsEmpty(newValue)) {
                                        newValue = defScale
                                    }
                                    if (isNaN(newValue)) {
                                        newValue = defScale
                                    }
                                    if (Number(newValue) < 0) {
                                        newValue = defScale
                                    }
                                    if (String(newValue) == "0.") {
                                        return true
                                    }
                                    $("#" + objId)[0].setAttribute("mgdscale", newValue);
                                    MicroDraw_Redraw(objId)
                                }
                            }
                        }
                    },
                    mObjId: objId,
                    mType: MicroDraw_GetObjProperty(objId, "mtype"),
                    mPropertyName: "mgdscale"
                };
                $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                var mgdshowstyle = MicroDraw_GetObjProperty(objId, "mgdshowstyle");
                if ($.Micro.IsEmpty(mgdshowstyle)) {
                    mgdshowstyle = 0
                }
                MicroDraw_showhiddenEasyUIRow(mDrawObjProperty, "mgdshow_hidden", mgdshowstyle);
                if ($("#" + objId).parents('[mtype="' + mDrawFlag_Win + '"]').length <= 0) {
                    mcx = MicroDraw_GetObjProperty(objId, "mcx");
                    if (isEmptyOrNull(mcx)) {
                        var x = $("#" + objId + "_bg")[0].getAttribute("x");
                        mcx = ((Number(x) / mDrawPixelPerM) * 1000).toFixed(2)
                    }
                    var row = {
                        name: "X座标",
                        value: mcx,
                        group: "",
                        editor: {
                            type: "textbox",
                            options: {
                                required: true,
                                editable: true,
                                onChange: function(newValue, oldValue) {
                                    if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                                        $("#" + objId)[0].setAttribute("mcx", newValue);
                                        MicroDraw_Redraw(objId)
                                    }
                                }
                            }
                        },
                        mObjId: objId,
                        mType: MicroDraw_GetObjProperty(objId, "mtype"),
                        mPropertyName: "mcx"
                    };
                    $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                    mcy = MicroDraw_GetObjProperty(objId, "mcy");
                    if (isEmptyOrNull(mcy)) {
                        var y = $("#" + objId + "_bg")[0].getAttribute("y");
                        mcy = ((Number(y) / mDrawPixelPerM) * 1000).toFixed(2)
                    }
                    var row = {
                        name: "Y座标",
                        value: mcy,
                        group: "",
                        editor: {
                            type: "textbox",
                            options: {
                                required: true,
                                editable: true,
                                onChange: function(newValue, oldValue) {
                                    if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                                        $("#" + objId)[0].setAttribute("mcy", newValue);
                                        MicroDraw_Redraw(objId)
                                    }
                                }
                            }
                        },
                        mObjId: objId,
                        mType: MicroDraw_GetObjProperty(objId, "mtype"),
                        mPropertyName: "mcy"
                    };
                    $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                    mcwidth = MicroDraw_GetObjProperty(objId, "mcwidth");
                    if (isEmptyOrNull(mcwidth)) {
                        var width = $("#" + objId + "_bg")[0].getAttribute("width");
                        mcwidth = ((Number(width) / mDrawPixelPerM) * 1000).toFixed(2)
                    }
                    var row = {
                        name: "宽度",
                        value: mcwidth,
                        group: "",
                        editor: {
                            type: "textbox",
                            options: {
                                required: true,
                                editable: true,
                                onChange: function(newValue, oldValue) {
                                    if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                                        $("#" + objId)[0].setAttribute("mcwidth", newValue);
                                        MicroDraw_Redraw(objId)
                                    }
                                }
                            }
                        },
                        mObjId: objId,
                        mType: MicroDraw_GetObjProperty(objId, "mtype"),
                        mPropertyName: "mcwidth"
                    };
                    $("#" + mDrawObjProperty).propertygrid("appendRow", row);
                    mcheight = MicroDraw_GetObjProperty(objId, "mcheight");
                    if (isEmptyOrNull(mcheight)) {
                        var height = $("#" + objId + "_bg")[0].getAttribute("height");
                        mcheight = ((Number(height) / mDrawPixelPerM) * 1000).toFixed(2)
                    }
                    var row = {
                        name: "高度",
                        value: mcheight,
                        group: "",
                        editor: {
                            type: "textbox",
                            options: {
                                required: true,
                                editable: true,
                                onChange: function(newValue, oldValue) {
                                    if (newValue != oldValue && !isEmptyOrNull(oldValue) && !isEmptyOrNull(newValue)) {
                                        $("#" + objId)[0].setAttribute("mcheight", newValue);
                                        MicroDraw_Redraw(objId)
                                    }
                                }
                            }
                        },
                        mObjId: objId,
                        mType: MicroDraw_GetObjProperty(objId, "mtype"),
                        mPropertyName: "mcheight"
                    };
                    $("#" + mDrawObjProperty).propertygrid("appendRow", row)
                }
            }
        }
        break
    }
    if ($("#" + mWEB_ORDER_DrawObjProperty).length > 0) {
        Micro_DelDatagridData($("#" + mWEB_ORDER_DrawObjProperty), "propertygrid");
        var rows = $("#" + mDrawObjProperty).propertygrid("getRows");
        for (var i = 0; i < rows.length; i++) {
            $("#" + mWEB_ORDER_DrawObjProperty).propertygrid("appendRow", rows[i])
        }
        if (!isEmptyOrNull($("#WEB_ORDER_OPTTABS")[0])) {
            var tab = $("#WEB_ORDER_OPTTABS").tabs("getSelected");
            var tabIndex = $("#WEB_ORDER_OPTTABS").tabs("getTabIndex", tab);
            if (tabIndex == 0) {
                $("#WEB_ORDER_OPTTABS").tabs("select", "图形")
            }
        }
    } else {
        if (!isEmptyOrNull($("#WEB_BUDGET_propertyTab")[0])) {
            var tab = $("#WEB_BUDGET_propertyTab").tabs("getSelected");
            var tabIndex = $("#WEB_BUDGET_propertyTab").tabs("getTabIndex", tab);
            if (tabIndex == 0) {
                $("#WEB_BUDGET_propertyTab").tabs("select", "图形")
            }
        }
    }
}
function MicroDraw_changeXcxl(frameId, newXcxlId) {
    nodeFrame = $("#" + frameId)[0];
    nodeWin = nodeFrame.parentNode;
    var winId = nodeWin.getAttribute("id");
    var changeObjIDs = [];
    var combobjs = MicroDraw_getCombWinIDs("all");
    var WinIDs = combobjs.Wins;
    if ($.Micro.isInArray(winId, WinIDs)) {
        for (var i = 0; i < WinIDs.length; i++) {
            changeObjIDs.push($("#" + mDrawFlag_SvgId + " #" + WinIDs[i] + " [mtype=" + mDrawFlag_FrameRect + "]").attr("id"))
        }
    } else {
        changeObjIDs.push(frameId)
    }
    for (var ii = 0; ii < changeObjIDs.length; ii++) {
        var _frameId = changeObjIDs[ii];
        var _nodeFrame = $("#" + _frameId)[0];
        var _winId = $("#" + _frameId).parents("[mtype=" + mDrawFlag_Win + "]").attr("id");
        var _newXcxlId = $("#" + _frameId).attr("mxcxlid");
        if ($.Micro.IsEmpty(_newXcxlId)) {
            _newXcxlId = newXcxlId
        }
        var mcflId = MicroDraw_genData_getMcflIdByXcxlid(_newXcxlId);
        var xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(_newXcxlId);
        var xcxljgJson = eval("(" + xcxljgStr + ")");
        var tem = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "框拼接方式", "prid");
        if ($.Micro.IsEmpty(tem) && String(mcflId) == "3") {
            tem = "45V"
        }
        _nodeFrame.setAttribute("mpjstyle", tem);
        if (tem == "45V" && String(mcflId) == "3") {
            $("#" + _frameId).attr("mhideframe", "Y")
        }
        var rows = $("#" + mDrawObjProperty).datagrid("getRows");
        for (i = 0; i < rows.length; i++) {
            if (rows[i].mPropertyName == "mpjstyle") {
                rows[i].value = tem;
                $("#" + mDrawObjProperty).datagrid("refreshRow", i)
            }
        }
        $("#" + _winId + " [mtype='" + mDrawFlag_Glass + "']").each(function(i, obj) {
            tem = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "固玻压线", "prid");
            obj.setAttribute("myt", tem);
            tem = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "固玻压线拼接方式", "prid");
            obj.setAttribute("mytpjstyle", tem)
        });
        $("#" + _winId + " [mtype='" + mDrawFlag_Pkc + "']").each(function(i, obj) {
            tem = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "扇拼接方式", "prid");
            obj.setAttribute("mfanpjstyle", tem);
            tem = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "扇压线", "prid");
            obj.setAttribute("myt", tem);
            tem = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "扇压线拼接方式", "prid");
            obj.setAttribute("mytpjstyle", tem)
        });
        $("#" + _winId + " [mtype='" + mDrawFlag_Dkc + "']").each(function(i, obj) {
            tem = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "扇拼接方式", "prid");
            obj.setAttribute("mfanpjstyle", tem);
            tem = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "扇压线", "prid");
            obj.setAttribute("myt", tem);
            tem = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "扇压线拼接方式", "prid");
            obj.setAttribute("mytpjstyle", tem)
        });
        $("#" + _winId + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(i, obj) {
            tem = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "扇拼接方式", "prid");
            obj.setAttribute("mfanpjstyle", tem);
            tem = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "扇压线", "prid");
            obj.setAttribute("mfanhasyt", tem);
            tem = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "扇压线拼接方式", "prid");
            obj.setAttribute("mfanytpjstyle", tem);
            var xmfanlsstate = "";
            if (mcflId == 2) {
                xmfanlsstate = "SD"
            } else {
                xmfanlsstate = "SA"
            }
            obj.setAttribute("mfanlsstate", xmfanlsstate);
            MicroDraw_autoGdPic()
        })
    }
}
function MicroDraw_saveWin() {
    var G = MicroBudget_getPropertyValue(mBudgetWinProperty, "Numx");
    if (!isTableRecordExists("WEB_BUDGET_ITEM", "Numx", G)) {
        $.messager.alert("提示", "另存门窗到图库之前必须先保存当前单据！", "info");
        return
    }
    var D = "";
    var C = 0;
    var A = 0;
    var B = false;
    var E = window.screen.width;
    var F = window.screen.height;
    if (E >= 768 && F >= 768) {
        B = true
    }
    if (isPcUserAgent() || B) {
        D = "../MicroBudget/WEB_BUDGET_SAVEWIN.html";
        C = 600;
        A = 320
    } else {
        D = "../MicroBudget/WEB_BUDGET_SAVEWIN_MOBILE.html";
        C = $(window).width();
        A = $(window).height()
    }
    $("<div></div>").dialog({
        id: mMicroDraw_savewin,
        title: "另存为窗型图库...",
        href: D,
        height: A,
        width: C,
        modal: true,
        iconCls: "icon-save",
        buttons: [{
            text: "确定",
            iconCls: "icon-add",
            handler: function() {
                if (MicroDraw_saveWin_isWinExists($("#WEB_WIN_CATELOG_winCode").val())) {
                    $.messager.confirm("提示:", "门窗代号 " + $("#WEB_WIN_CATELOG_winCode").val() + " 已存在，是否覆盖原有记录?",
                    function(H) {
                        if (H) {
                            $("#" + mDrawFlag_SvgId + " [mbelongtofanid]").each(function(I, J) {
                                J.parentNode.removeChild(J)
                            });
                            $("#" + mDrawFlag_SvgId + " [mwallbelongto]").each(function(I, J) {
                                J.parentNode.removeChild(J)
                            });
                            $("#" + mDrawFlag_SvgId + " [mgdbelongto]").each(function(I, J) {
                                J.parentNode.removeChild(J)
                            });
                            $("[mtype='" + mDrawFlag_Custom_g + "']").each(function(J, L) {
                                var M = $("#" + L.id).html();
                                var I = $("#" + L.id).parent().attr("id");
                                $("#" + I).append(M);
                                var K = $("#" + I).html();
                                $("#" + I).html(K);
                                $("#" + L.id).remove()
                            });
                            $("#" + mMicroDraw_savewin + "_FORM").form("submit", {
                                url: "../MicroBudget/MicroDraw.ashx",
                                onSubmit: function(I) {
                                    I.action = "saveWin";
                                    I.Numx = MicroBudget_getPropertyValue(mBudgetWinProperty, "Numx");
                                    I.svg = $("#" + mDrawFlag_SvgAreaId).html();
                                    return $(this).form("validate")
                                },
                                success: function(I) {
                                    if (I.substring(0, 2) == "ok") {
                                        $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_FrameRect + "']").each(function(P, Q) {
                                            var W = Q.getAttribute("mwall");
                                            if (isEmptyOrNull(W)) {
                                                W = ""
                                            }
                                            if (W == "Y") {
                                                var L = MicroDraw_GUID();
                                                var S = 0;
                                                var T = 0;
                                                var M = mDrawWallColor;
                                                var R = "#000000";
                                                var O = "1px";
                                                var K = mDrawWallWidth;
                                                var U = mDrawWallHeight;
                                                var J = mDrawWallRow;
                                                var N;
                                                var V = Q.id;
                                                S = $("#" + V + "_r1")[0].getAttribute("x");
                                                T = Number($("#" + V + "_r1")[0].getAttribute("y")) + Number($("#" + V + "_r1")[0].getAttribute("height"));
                                                N = $("#" + V)[0].getAttribute("mwidth");
                                                MicroDraw_AddCustom_Wall(L, S, T, N, M, K, U, J, V);
                                                MicroDraw_ShowCoordinate()
                                            }
                                        });
                                        MicroDraw_reflashHandleCoorY();
                                        MicroDraw_autoGdPic();
                                        $("#" + mMicroDraw_savewin).dialog("destroy")
                                    } else {
                                        jQuery.messager.alert("提示:", "保存失败！" + I, "error")
                                    }
                                }
                            })
                        }
                    })
                } else {
                    $("#" + mDrawFlag_SvgId + " [mbelongtofanid]").each(function(H, I) {
                        I.parentNode.removeChild(I)
                    });
                    $("#" + mDrawFlag_SvgId + " [mwallbelongto]").each(function(H, I) {
                        I.parentNode.removeChild(I)
                    });
                    $("#" + mDrawFlag_SvgId + " [mgdbelongto]").each(function(H, I) {
                        I.parentNode.removeChild(I)
                    });
                    $("[mtype='" + mDrawFlag_Custom_g + "']").each(function(I, K) {
                        var L = $("#" + K.id).html();
                        var H = $("#" + K.id).parent().attr("id");
                        $("#" + H).append(L);
                        var J = $("#" + H).html();
                        $("#" + H).html(J);
                        $("#" + K.id).remove()
                    });
                    $("#" + mMicroDraw_savewin + "_FORM").form("submit", {
                        url: "../MicroBudget/MicroDraw.ashx",
                        onSubmit: function(H) {
                            H.action = "saveWin";
                            H.Numx = MicroBudget_getPropertyValue(mBudgetWinProperty, "Numx");
                            H.difficulty = MicroBudget_getPropertyValue(mBudgetWinProperty, "difficulty");
                            H.svg = $("#" + mDrawFlag_SvgAreaId).html();
                            return $(this).form("validate")
                        },
                        success: function(H) {
                            if (H.substring(0, 2) == "ok") {
                                $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_FrameRect + "']").each(function(O, P) {
                                    var V = P.getAttribute("mwall");
                                    if (isEmptyOrNull(V)) {
                                        V = ""
                                    }
                                    if (V == "Y") {
                                        var K = MicroDraw_GUID();
                                        var R = 0;
                                        var S = 0;
                                        var L = mDrawWallColor;
                                        var Q = "#000000";
                                        var N = "1px";
                                        var J = mDrawWallWidth;
                                        var T = mDrawWallHeight;
                                        var I = mDrawWallRow;
                                        var M;
                                        var U = P.id;
                                        R = $("#" + U + "_r1")[0].getAttribute("x");
                                        S = Number($("#" + U + "_r1")[0].getAttribute("y")) + Number($("#" + U + "_r1")[0].getAttribute("height"));
                                        M = $("#" + U)[0].getAttribute("mwidth");
                                        MicroDraw_AddCustom_Wall(K, R, S, M, L, J, T, I, U);
                                        MicroDraw_ShowCoordinate()
                                    }
                                });
                                MicroDraw_reflashHandleCoorY();
                                MicroDraw_autoGdPic();
                                $("#" + mMicroDraw_savewin).dialog("destroy")
                            } else {
                                jQuery.messager.alert("提示:", "保存失败！" + H, "error")
                            }
                        }
                    })
                }
            }
        },
        {
            text: "取消",
            iconCls: "icon-cancel",
            handler: function() {
                $("#" + mMicroDraw_savewin).dialog("destroy")
            }
        }],
        onClose: function() {
            $("#" + mMicroDraw_savewin).dialog("destroy")
        },
        onLoad: function() {
            $("#WEB_WIN_CATELOG_winCatelog").focus();
            $("#WEB_WIN_CATELOG_winCatelog").select();
            $("#MicroDraw_savewin_tree").tree("append", {
                data: [{
                    id: "产品目录",
                    text: "产品目录",
                    state: "closed"
                }]
            });
            $("#MicroDraw_savewin_tree").tree({
                onClick: function(H) {
                    var I = "";
                    pNode = H;
                    while (pNode != null) {
                        I = pNode.text + "-" + I;
                        pNode = $(this).tree("getParent", pNode.target)
                    }
                    I = I.substring(0, I.length - 1);
                    if (I.length > 0) {
                        if (I.indexOf("-") > 0) {
                            I = I.substring(I.indexOf("-") + 1)
                        } else {
                            I = ""
                        }
                    }
                    $("#WEB_WIN_CATELOG_winCatelog").val(I)
                },
                onBeforeExpand: function(I) {
                    var J = "";
                    var H = I;
                    while (H != null) {
                        J = H.text + "-" + J;
                        H = $(this).tree("getParent", H.target)
                    }
                    J = J.substring(0, J.length - 1);
                    childNodes = $(this).tree("getChildren", I.target);
                    if (!childNodes.length > 0) {
                        MicroDraw_getTreeChildNode("MicroDraw_savewin_tree", I, J);
                        return false
                    }
                }
            })
        }
    })
}
function MicroDraw_saveWin_isWinExists(B) {
    var A;
    para = {};
    para.action = "isWinCodeExists";
    para.winCode = B;
    $.ajax({
        url: "../MicroBudget/MicroDraw.ashx",
        data: para,
        type: "POST",
        dataType: "text",
        async: false,
        success: function(C) {
            if (C == "ok") {
                A = true
            } else {
                A = false
            }
        }
    });
    return A
}
function MicroDraw_getTreeChildNode(A, B, C) {
    para = {};
    para.action = "getTreeChildNode";
    para.winCatelog = C;
    $.ajax({
        url: "../MicroBudget/MicroDraw.ashx",
        data: para,
        type: "POST",
        dataType: "text",
        async: true,
        success: function(E) {
            if (E.substring(0, 2) == "ok") {
                var G = E.substring(3);
                if (G.length > 0) {
                    var D = G.split(";");
                    var F;
                    for (i = 0; i < D.length; i++) {
                        F = D[i].split(",");
                        if (F[0].length > 0) {
                            $("#" + A).tree("append", {
                                parent: B.target,
                                data: [{
                                    id: F[0],
                                    text: F[0],
                                    state: F[1]
                                }]
                            })
                        }
                    }
                    $("#" + A).tree("expand", B.target)
                } else {}
            } else {
                jQuery.messager.alert("提示:", "失败!" + E, "error")
            }
        }
    })
}
function MicroDraw_fromWin() {
    if (!WEB_BUDGET_ISSIMPLE && $("#" + DrawOrder_DG_DETAIL).length == 0 && $("#" + mMicroDraw_fromwin).length > 0) {
        $("#" + mMicroDraw_fromwin).dialog("destroy")
    }
    if ($("#" + mMicroDraw_fromwin).length == 0) {
        $("<div></div>").dialog({
            id: mMicroDraw_fromwin,
            title: "从窗型图库生成...",
            href: "../MicroBudget/WEB_BUDGET_FROMWIN.html",
            height: "100%",
            width: "100%",
            modal: true,
            iconCls: "icon-search",
            buttons: [{
                text: "确定",
                iconCls: "icon-add",
                handler: function() {
                    var A = "";
                    $("#MicroDraw_fromwin_svg [selected='true']").each(function(B, C) {
                        A = $(C)[0].getAttribute("selectId")
                    });
                    MicroDraw_fromWin_selectFinish(A, "FROMWIN");
                    $("#" + mMicroDraw_fromwin).dialog("close")
                }
            },
            {
                text: "取消",
                iconCls: "icon-cancel",
                handler: function() {
                    $("#" + mMicroDraw_fromwin).dialog("close");
                    $("#" + mMicroDraw_fromwin).dialog("destroy")
                }
            }],
            onClose: function() {
                if (!WEB_BUDGET_ISSIMPLE && $("#" + DrawOrder_DG_DETAIL).length == 0) {
                    $("#" + mMicroDraw_fromwin).dialog("destroy")
                }
                if ($.Micro.IsEmpty(mDrawSelectFinishSvgId)) {
                    $("#V_AL_PROJECT_FROMBUDGET").dialog("close")
                } else {
                    mDrawSelectFinishSvgId = ""
                }
            },
            onLoad: function() {
                $("#MicroDraw_fromwin_tree").tree("append", {
                    data: [{
                        id: "MicroDraw_fromwin_tree_id",
                        text: "产品目录",
                        state: "closed"
                    }]
                });
                $("#MicroDraw_fromwin_tree").tree({
                    onClick: function(A) {
                        var B = "";
                        pNode = A;
                        while (pNode != null) {
                            B = pNode.text + "-" + B;
                            pNode = $(this).tree("getParent", pNode.target)
                        }
                        B = B.substring(0, B.length - 1);
                        if (B.length > 0) {
                            if (B.indexOf("-") > 0) {
                                B = B.substring(B.indexOf("-") + 1)
                            } else {
                                B = ""
                            }
                        }
                        MicroDraw_fromWin_getWinSvg(B, "MicroDraw_fromwin_svg", "FROMWIN", "")
                    },
                    onBeforeExpand: function(B) {
                        var C = "";
                        var A = B;
                        while (A != null) {
                            C = A.text + "-" + C;
                            A = $(this).tree("getParent", A.target)
                        }
                        C = C.substring(0, C.length - 1);
                        childNodes = $(this).tree("getChildren", B.target);
                        if (!childNodes.length > 0) {
                            MicroDraw_getTreeChildNode("MicroDraw_fromwin_tree", B, C);
                            return false
                        }
                    }
                });
                $("#MicroDraw_fromwin_tree").tree("expandAll")
            }
        })
    } else {
        $("#" + mMicroDraw_fromwin).dialog("open")
    }
}
function MicroDraw_fromWin_getWinSvg(winCatelog, svgDiv, fromWinOrStore, wincode, psize, currpage) {
    para = {};
    para.action = "getWebWinSvg";
    para.winCatelog = winCatelog;
    para.fromWinOrStore = fromWinOrStore;
    para.wincode = wincode;
    var _psize = Number($.Micro.IsEmpty(psize) ? mWinSvgPListSize: psize);
    var _currpage = Number($.Micro.IsEmpty(currpage) ? mWinSvgPListCurrPage: currpage);
    if (isNaN(_psize)) {
        _psize = mWinSvgPListSize
    }
    if (isNaN(_currpage)) {
        _currpage = mWinSvgPListCurrPage
    }
    para.psize = _psize;
    para.currpage = _currpage;
    $("#" + svgDiv + "_Total").html("");
    $("#" + svgDiv).html("加载中......");
    $.ajax({
        url: "../MicroBudget/MicroDraw.ashx",
        data: para,
        type: "POST",
        dataType: "text",
        async: true,
        success: function(result) {
            if (result.substring(0, 2) == "ok") {
                $("#" + svgDiv).html(result.substring(3));
                $("#" + svgDiv + " [mtype='" + mDrawFlag_CoorX + "']").each(function(i, o) {
                    var pNode = o.parentNode;
                    pNode.removeChild(o)
                });
                $("#" + svgDiv + " [mtype='" + mDrawFlag_CoorY + "']").each(function(i, o) {
                    var pNode = o.parentNode;
                    pNode.removeChild(o)
                });
                var creatWinPages = function(tag) {
                    with($("#" + tag + "_PageInfor")) {
                        if (length > 0) {
                            eval("var infor = " + val());
                            var TotalRecord = infor.TotalRecord;
                            var TotalPage = infor.TotalPage;
                            var pageStr = "";
                            pageStr = pageStr + "<table width='100%' border='0' cellspacing='0' cellpadding='0'>";
                            pageStr = pageStr + "<tr>";
                            pageStr = pageStr + "<td align='center' height='30'>每页";
                            pageStr = pageStr + "&nbsp;";
                            if (tag == "MicroDraw_WINSTORE") {
                                pageStr = pageStr + "<input id='" + tag + "_Psize' type='text' value='" + _psize + "' size='2' maxlength='3' style='text-align:center'/>"
                            } else {
                                var psizeStr = "";
                                pageStr = pageStr + "<select id='" + tag + "_Psize'>";
                                for (var i = 10; i < 60; i += 10) {
                                    psizeStr = psizeStr + "<option value='" + i + "'";
                                    if (i == Number(_psize)) {
                                        psizeStr = psizeStr + " selected='selected'"
                                    }
                                    psizeStr = psizeStr + ">" + i + "</option>"
                                }
                                pageStr = pageStr + psizeStr;
                                pageStr = pageStr + "</select>"
                            }
                            pageStr = pageStr + "&nbsp;条记录";
                            pageStr = pageStr + "&nbsp;&nbsp;&nbsp;&nbsp;";
                            if (_currpage == 1) {
                                pageStr = pageStr + "[首页]"
                            } else {
                                pageStr = pageStr + "<a pagetag='first' href='javascript:;'>[首页]</a>"
                            }
                            pageStr = pageStr + "&nbsp;&nbsp;";
                            if (_currpage - 1 >= 1) {
                                pageStr = pageStr + "<a pagetag='prev' href='javascript:;'>[上一页]</a>"
                            } else {
                                pageStr = pageStr + "[上一页]"
                            }
                            pageStr = pageStr + "&nbsp;&nbsp;第&nbsp;<input id='" + tag + "_TotalPageList' type='text' value='" + _currpage + "' size='2' maxlength='3' style='text-align:center'/>&nbsp;页&nbsp;&nbsp;";
                            pageStr = pageStr + "共" + TotalPage + "页";
                            pageStr = pageStr + "&nbsp;&nbsp;&nbsp;&nbsp;";
                            if (_currpage + 1 <= TotalPage) {
                                pageStr = pageStr + "<a pagetag='next' href='javascript:;'>[下一页]</a> "
                            } else {
                                pageStr = pageStr + "[下一页]"
                            }
                            pageStr = pageStr + "&nbsp;&nbsp;";
                            if (_currpage == TotalPage) {
                                pageStr = pageStr + "[末页]"
                            } else {
                                pageStr = pageStr + "<a pagetag='last' href='javascript:;'>[末页]</a>"
                            }
                            pageStr = pageStr + "</td>";
                            pageStr = pageStr + "</tr>";
                            pageStr = pageStr + "</table>"
                        }
                        with($("#" + tag + "_PageList")) {
                            html("");
                            if (TotalPage > 1) {
                                html(pageStr);
                                $.Micro.Bind(find("a[pagetag='first']"), "click",
                                function() {
                                    MicroDraw_fromWin_getWinSvg(winCatelog, svgDiv, fromWinOrStore, wincode, $("#" + tag + "_Psize").val(), 1)
                                });
                                $.Micro.Bind(find("a[pagetag='next']"), "click",
                                function() {
                                    MicroDraw_fromWin_getWinSvg(winCatelog, svgDiv, fromWinOrStore, wincode, $("#" + tag + "_Psize").val(), _currpage + 1)
                                });
                                $.Micro.Bind(find("a[pagetag='prev']"), "click",
                                function() {
                                    MicroDraw_fromWin_getWinSvg(winCatelog, svgDiv, fromWinOrStore, wincode, $("#" + tag + "_Psize").val(), _currpage - 1)
                                });
                                $.Micro.Bind(find("a[pagetag='last']"), "click",
                                function() {
                                    MicroDraw_fromWin_getWinSvg(winCatelog, svgDiv, fromWinOrStore, wincode, $("#" + tag + "_Psize").val(), TotalPage)
                                });
                                $.Micro.Bind($("#" + tag + "_TotalPageList,#" + tag + "_Psize"), "focus",
                                function() {
                                    document.onkeydown = function(e) {
                                        var ev = document.all ? window.event: e;
                                        if (ev.keyCode == 13) {
                                            var ntpage = $("#" + tag + "_TotalPageList").val();
                                            if (isNaN(ntpage)) {
                                                ntpage = 1
                                            }
                                            if (ntpage < 1) {
                                                ntpage = 1
                                            } else {
                                                if (ntpage > TotalPage) {
                                                    ntpage = TotalPage
                                                }
                                            }
                                            MicroDraw_fromWin_getWinSvg(winCatelog, svgDiv, fromWinOrStore, wincode, $("#" + tag + "_Psize").val(), ntpage)
                                        }
                                    }
                                })
                            }
                        }
                    }
                };
                if ($("#MicroDraw_winstore_svg").length > 0) {
                    $.MicroSVGShow([{
                        area: $("#MicroDraw_winstore_svg"),
                        w: 240,
                        h: 240
                    }], "js", 1);
                    var TotalSVGID = "MicroDraw_winstore_svg_Total";
                    var TotalSVG;
                    if ($("#" + TotalSVGID).length == 0) {
                        TotalSVG = $('<div style="clear:both;" id="' + TotalSVGID + '"></div>');
                        TotalSVG.insertAfter($("#MicroDraw_winstore_svg"))
                    } else {
                        TotalSVG = $("#" + TotalSVGID)
                    }
                    with(TotalSVG) {
                        css({
                            "text-align": "center",
                            "font-size": "14px",
                            "line-height": "30px"
                        });
                        var verifyNum = $("#MicroDraw_winstore_svg").find("div[svg_verify=1]").length;
                        var NoverifyNum = $("#MicroDraw_winstore_svg").find("div[svg_verify=0]").length;
                        html("总数：" + (verifyNum + NoverifyNum) + "&nbsp;&nbsp;&nbsp;&nbsp;审核：" + verifyNum + "&nbsp;&nbsp;&nbsp;&nbsp;未审核：" + NoverifyNum)
                    }
                }
                if ($("#MicroDraw_fromwin_svg").length > 0) {
                    $.MicroSVGShow([{
                        area: $("#MicroDraw_fromwin_svg"),
                        w: 240,
                        h: 240
                    }], "js", 1, 0)
                }
                creatWinPages("MicroDraw_" + fromWinOrStore);
                var tSVGarea = $("#" + svgDiv + " svg").parents('[id*="_MicroDraw_fromWin_svg"],[id*="_MicroDraw_winStore_svg"]');
                $.each(tSVGarea,
                function() {
                    var _this = $(this);
                    var selectSVG = _this.find("svg:first");
                    var selectid = _this.attr("id");
                    $.Micro.Bind(_this, "dblclick",
                    function() {
                        if (fromWinOrStore == "FROMWIN") {
                            with($("#MicroDraw_fromwin_svg div")) {
                                css("background-color", "#EEEEEE");
                                _this.removeAttr("selected").removeAttr("selectId")
                            }
                            $("#" + selectid + ",#" + selectid + " div").css("background-color", "lightskyblue");
                            _this[0].setAttribute("selected", "true");
                            _this[0].setAttribute("selectId", selectid.substring(0, selectid.indexOf("_")));
                            MicroDraw_fromWin_selectFinish(selectid.substring(0, selectid.indexOf("_")), "FROMWIN");
                            $("#" + mMicroDraw_fromwin).dialog("close")
                        } else {
                            var winName = "出图报价";
                            if ($("#mainTab").tabs("exists", winName)) {
                                $.messager.alert("提示", "请关闭出图报价窗口！");
                                return
                            }
                            if (Micro_IsExistWebBudgetPage(winName)) {
                                return
                            }
                            WEB_BUDGET_WIN_MODEL = true;
                            addTab(winName, "../MicroBudget/WEB_BUDGET.aspx", "icon-mSubMenu");
                            $.messager.progress({
                                title: "加载中",
                                msg: "加载中，请稍候……"
                            });
                            $.parser.onComplete = function() {
                                if (!WEB_BUDGET_WIN_MODEL) {
                                    return true
                                }
                                var result = "";
                                var realwinCatelog = "";
                                var para = {};
                                para.action = "getWinCatelog";
                                para.svgId = selectid.substring(0, selectid.indexOf("_"));
                                $.ajax({
                                    url: "../MicroBudget/MicroDraw.ashx",
                                    data: para,
                                    type: "POST",
                                    dataType: "text",
                                    async: true,
                                    success: function(result) {
                                        if (result.substring(0, 3) == "ok-") {
                                            realwinCatelog = result.substring(3);
                                            MicroDraw_fromWin_editWin(realwinCatelog, selectid.substring(0, selectid.indexOf("_")));
                                            $.messager.progress("close")
                                        } else {
                                            jQuery.messager.alert("提示:", "找不到对应的窗型资料！", "error")
                                        }
                                    }
                                });
                                $.parser.onComplete = function() {}
                            }
                        }
                    });
                    $.Micro.Bind(_this, "click",
                    function() {
                        if (fromWinOrStore == "FROMWIN") {
                            with($("#MicroDraw_fromwin_svg div")) {
                                css("background-color", "#EEEEEE");
                                _this.removeAttr("selected").removeAttr("selectId")
                            }
                            $("#" + selectid + ",#" + selectid + " div").css("background-color", "lightskyblue");
                            _this[0].setAttribute("selected", "true");
                            _this[0].setAttribute("selectId", selectid.substring(0, selectid.indexOf("_")))
                        } else {
                            if ($.Micro.isInArray(_this.attr("selected"), ["true", true, "selected"])) {
                                $("#" + selectid + ",#" + selectid + " div").css("background-color", "#EEEEEE");
                                _this.removeAttr("selected").removeAttr("selectId")
                            } else {
                                $("#" + selectid + ",#" + selectid + " div").css("background-color", "lightskyblue");
                                _this[0].setAttribute("selected", "true");
                                _this[0].setAttribute("selectId", selectid.substring(0, selectid.indexOf("_")))
                            }
                        }
                    })
                })
            } else {
                jQuery.messager.alert("提示:", "失败!" + result, "error")
            }
        }
    })
}
function MicroDraw_fromWin_editWin(A, D) {
    $("#WEB_BUDGET_svgIdParam").val(D);
    $("#WEB_BUDGET_winCatelogParam").val(A);
    MicroBudget_newNum();
    MicroBudget_setPropertyValue(mBudgetWinProperty, "wincode", replaceAll($("#" + D + "_winCode").text().toString(), "门窗代号：", ""));
    MicroBudget_setPropertyValue(mBudgetWinProperty, "winCatelog", A);
    if ($("#" + DrawBudget_DG_DETAIL).length > 0) {
        var C = $("#" + DrawBudget_DG_DETAIL).datagrid("getRows");
        var B = MicroBudget_getPropertyValue(mBudgetWinProperty, "wincode");
        C[0]["门窗代号"] = B;
        $("#" + DrawBudget_DG_DETAIL).datagrid("refreshRow", 0)
    }
    MicroDraw_fromWin_selectFinish(D, "WINSTORE");
    $("#mBudget_new").hide();
    $("#mBudget_save").hide();
    $("#mDraw_savewin").hide();
    $("#mBudget_Opt").hide();
    $("#mBudget_printRpt").hide();
    setTimeout(function() {
        $("#mBudget_submit,#mBudget_unsubmit,#mBudget_check,#mBudget_uncheck").hide()
    },
    200);
    if (WEB_BUDGET_WIN_MODEL == true) {
        WEB_BUDGET_MODEL_EDIT_SETTING()
    } else {
        $("#mDraw_editSaveWin").remove()
    }
}
function MicroDraw_fromWin_editWin_save() {
    MicroBudget_save();
    $("#" + mDrawFlag_SvgId + " [mbelongtofanid]").each(function(E, F) {
        F.parentNode.removeChild(F)
    });
    $("#" + mDrawFlag_SvgId + " [mwallbelongto]").each(function(E, F) {
        F.parentNode.removeChild(F)
    });
    $("#" + mDrawFlag_SvgId + " [mgdbelongto]").each(function(E, F) {
        F.parentNode.removeChild(F)
    });
    $("[mtype='" + mDrawFlag_Custom_g + "']").each(function(F, H) {
        var I = $("#" + H.id).html();
        var E = $("#" + H.id).parent().attr("id");
        $("#" + E).append(I);
        var G = $("#" + E).html();
        $("#" + E).html(G);
        $("#" + H.id).remove()
    });
    var D = $("#WEB_BUDGET_winCatelogParam").val();
    var B = MicroBudget_getPropertyValue(mBudgetWinProperty, "wincode");
    var C = false;
    para = {};
    para.action = "saveWin";
    para.Numx = MicroBudget_getPropertyValue(mBudgetWinProperty, "Numx");
    para.difficulty = MicroBudget_getPropertyValue(mBudgetWinProperty, "difficulty");
    para.svg = $("#" + mDrawFlag_SvgAreaId).html();
    if (isEmptyOrNull(MicroBudget_getPropertyValue(mBudgetWinProperty, "winCatelog"))) {
        para.winCatelog = D
    } else {
        if (MicroBudget_getPropertyValue(mBudgetWinProperty, "winCatelog") != D) {
            para.winCatelog = MicroBudget_getPropertyValue(mBudgetWinProperty, "winCatelog")
        } else {
            para.winCatelog = MicroBudget_getPropertyValue(mBudgetWinProperty, "winCatelog")
        }
    }
    para.winCode = B;
    $.ajax({
        url: "../MicroBudget/MicroDraw.ashx",
        data: para,
        type: "POST",
        dataType: "text",
        async: false,
        success: function(E) {
            if (E == "ok") {
                C = true
            } else {
                jQuery.messager.alert("提示:", "保存门窗图库失败!", "error");
                C = false
            }
        }
    });
    if (C) {
        var A = "'" + MicroBudget_getPropertyValue(mBudgetOrderProperty, "Num") + "'";
        para = {};
        para.action = "delOrder";
        para.delList = A;
        $.ajax({
            url: "../MicroBudget/WEB_BUDGET.ashx",
            data: para,
            type: "POST",
            dataType: "text",
            async: false,
            success: function(E) {
                if (E.substr(0, 2) == "ok") {
                    $("#mainTab").tabs("close", "出图报价")
                } else {
                    jQuery.messager.alert("提示:", "删除临时订单失败!" + E, "error")
                }
            }
        })
    }
    MicroDraw_fromWin_reflashCatelogTree("MicroDraw_winstore_tree", "MicroDraw_winstore_svg", "WINSTORE")
}
function MicroDraw_fromWin_reflashCatelogTree(H, I, B) {
    var F = $("#" + H).tree("getSelected");
    var C = "";
    pNode = F;
    while (pNode != null) {
        C = pNode.text + "-" + C;
        pNode = $("#" + H).tree("getParent", pNode.target)
    }
    C = C.substring(0, C.length - 1);
    if (C.length > 0) {
        if (C.indexOf("-") > 0) {
            C = C.substring(C.indexOf("-") + 1)
        } else {
            C = ""
        }
    }
    var D = $("#MicroDraw_" + B + "_Psize").val();
    var G = $("#MicroDraw_" + B + "_TotalPageList").val();
    var A = Number($.Micro.IsEmpty(D) ? mWinSvgPListSize: D);
    var E = Number($.Micro.IsEmpty(G) ? mWinSvgPListCurrPage: G);
    if (isNaN(A)) {
        A = mWinSvgPListSize
    }
    if (isNaN(E)) {
        E = mWinSvgPListCurrPage
    }
    MicroDraw_fromWin_getWinSvg(C, I, B, "", A, E)
}
function WEB_BUDGET_WINSTORE_INIT() {
    $("#MicroDraw_winstore_tree").tree("append", {
        data: [{
            id: "MicroDraw_winstore_tree_id",
            text: "产品目录",
            state: "closed"
        }]
    });
    $("#MicroDraw_winstore_tree").tree({
        onClick: function(A) {
            var B = "";
            pNode = A;
            while (pNode != null) {
                B = pNode.text + "-" + B;
                pNode = $(this).tree("getParent", pNode.target)
            }
            B = B.substring(0, B.length - 1);
            if (B.length > 0) {
                if (B.indexOf("-") > 0) {
                    B = B.substring(B.indexOf("-") + 1)
                } else {
                    B = ""
                }
            }
            MicroDraw_fromWin_getWinSvg(B, "MicroDraw_winstore_svg", "WINSTORE", "")
        },
        onBeforeExpand: function(B) {
            var C = "";
            var A = B;
            while (A != null) {
                C = A.text + "-" + C;
                A = $(this).tree("getParent", A.target)
            }
            C = C.substring(0, C.length - 1);
            childNodes = $(this).tree("getChildren", B.target);
            if (!childNodes.length > 0) {
                MicroDraw_getTreeChildNode("MicroDraw_winstore_tree", B, C);
                return false
            }
        }
    });
    $("#MicroDraw_winstore_tree").tree("expandAll")
}
function WEB_BUDGET_WINSTORE_DEL() {
    if ($("#MicroDraw_winstore_svg [selected=true]").length == 0) {
        jQuery.messager.alert("提示:", "请点击需要删除的门窗，然后再删除!", "info");
        return
    }
    $.messager.confirm("提示", "删除后不能恢复，确定要删除所选窗型吗？",
    function(A) {
        if (!A) {
            return
        }
        var E = [];
        var B = "";
        var D = "";
        $("#MicroDraw_winstore_svg div[selected='true']").each(function(G, F) {
            E[E.length] = $(F).attr("selectId");
            var H = $(F).attr("selectId");
            if (B.indexOf(H) == -1) {
                B += H + ","
            }
            switch (mVersion) {
            case "DRAW":
            case "DRAW_M":
            case "DRAW_JX":
                break;
            default:
                if ($(F).find("img").attr("src") == "../MicroThemes/icons/pass.png") {
                    D = "1"
                }
            }
        });
        if (D == "1") {
            jQuery.messager.alert("提示:", "已审核的窗型不能删除!", "info");
            MicroDraw_fromWin_reflashCatelogTree("MicroDraw_winstore_tree", "MicroDraw_winstore_svg", "WINSTORE");
            return
        }
        B = B.substr(0, B.length - 1);
        var C = {};
        C.action = "delWin";
        C.svgDivs = B;
        C.mVersion = mVersion;
        $.ajax({
            url: "../MicroBudget/WEB_BUDGET_WIN_COPY.ashx",
            data: C,
            type: "POST",
            dataType: "text",
            async: true,
            success: function(F) {
                if (F.substring(0, 2) == "ok") {
                    $.messager.show({
                        title: "提示",
                        msg: "删除成功！",
                        timeout: 1500
                    });
                    MicroDraw_fromWin_reflashCatelogTree("MicroDraw_winstore_tree", "MicroDraw_winstore_svg", "WINSTORE")
                } else {
                    jQuery.messager.alert("提示:", "删除失败！" + F, "error")
                }
            }
        })
    })
}
function WEB_BUDGET_WINSTORE_CHECK() {
    if ($("#MicroDraw_winstore_svg [selected=true]").length == 0) {
        jQuery.messager.alert("提示:", "请点击需要审核的门窗，然后再操作!", "info");
        return
    }
    var C = [];
    var A = "";
    $("#MicroDraw_winstore_svg div[selected='true']").each(function(E, D) {
        C[C.length] = $(D).attr("selectId");
        A += $(D).attr("selectId") + ","
    });
    A = A.substr(0, A.length - 1);
    var B = {};
    B.action = "checkWinStore";
    B.id = A;
    B.check = "1";
    $.ajax({
        url: "../MicroBudget/MicroDraw.ashx",
        data: B,
        type: "POST",
        dataType: "text",
        async: true,
        success: function(D) {
            if (D.substring(0, 2) == "ok") {
                $.messager.show({
                    title: "提示",
                    msg: "审核成功！",
                    timeout: 1500
                });
                MicroDraw_fromWin_reflashCatelogTree("MicroDraw_winstore_tree", "MicroDraw_winstore_svg", "WINSTORE")
            } else {
                jQuery.messager.alert("提示:", "审核失败！" + D, "error")
            }
        }
    })
}
function WEB_BUDGET_WINSTORE_UNCHECK() {
    if ($("#MicroDraw_winstore_svg [selected=true]").length == 0) {
        jQuery.messager.alert("提示:", "请点击需要反审核的门窗，然后再操作!", "info");
        return
    }
    var C = [];
    var A = "";
    $("#MicroDraw_winstore_svg div[selected='true']").each(function(E, D) {
        C[C.length] = $(D).attr("selectId");
        A += $(D).attr("selectId") + ","
    });
    A = A.substr(0, A.length - 1);
    var B = {};
    B.action = "checkWinStore";
    B.id = A;
    B.check = "0";
    $.ajax({
        url: "../MicroBudget/MicroDraw.ashx",
        data: B,
        type: "POST",
        dataType: "text",
        async: true,
        success: function(D) {
            if (D.substring(0, 2) == "ok") {
                $.messager.show({
                    title: "提示",
                    msg: "反审核成功！",
                    timeout: 1500
                });
                MicroDraw_fromWin_reflashCatelogTree("MicroDraw_winstore_tree", "MicroDraw_winstore_svg", "WINSTORE")
            } else {
                jQuery.messager.alert("提示:", "反审核失败！" + D, "error")
            }
        }
    })
}
function WEB_BUDGET_WINSTORE_SEARCH(D, A) {
    var B = $("#MicroDraw_" + A + "_tree").tree("getSelected");
    var C = "";
    pNode = B;
    while (pNode != null) {
        C = pNode.text + "-" + C;
        pNode = $("#MicroDraw_" + A + "_tree").tree("getParent", pNode.target)
    }
    C = C.substring(0, C.length - 1);
    if (C.length > 0) {
        if (C.indexOf("-") > 0) {
            C = C.substring(C.indexOf("-") + 1)
        } else {
            C = ""
        }
    }
    MicroDraw_fromWin_getWinSvg(C, "MicroDraw_" + A + "_svg", A.toUpperCase(), D);
    $("#MicroDraw_" + A + "_tree").tree({
        onClick: function(E) {
            var F = "";
            pNode = E;
            while (pNode != null) {
                F = pNode.text + "-" + F;
                pNode = $(this).tree("getParent", pNode.target)
            }
            F = F.substring(0, F.length - 1);
            if (F.length > 0) {
                if (F.indexOf("-") > 0) {
                    F = F.substring(F.indexOf("-") + 1)
                } else {
                    F = ""
                }
            }
            MicroDraw_fromWin_getWinSvg(F, "MicroDraw_" + A + "_svg", A.toUpperCase(), D)
        },
        onBeforeExpand: function(F) {
            var G = "";
            var E = F;
            while (E != null) {
                G = E.text + "-" + G;
                E = $(this).tree("getParent", E.target)
            }
            G = G.substring(0, G.length - 1);
            childNodes = $(this).tree("getChildren", F.target);
            if (!childNodes.length > 0) {
                MicroDraw_getTreeChildNode("MicroDraw_" + A + "_tree", F, G);
                return false
            }
        }
    })
}
function MicroDraw_fromWin_GetSVGOriInfor(D) {
    if ($("#" + MicroDraw_SVGTempData).length == 0) {
        $('<div id="' + MicroDraw_SVGTempData + '" style="display:none"></div>').appendTo($("body"))
    }
    $("#" + MicroDraw_SVGTempData).html(D);
    var A = $("#" + MicroDraw_SVGTempData).find("svg");
    if (A.length == 0) {
        return true
    }
    A.removeAttr("id");
    var F = A.get(0).attributes;
    var G = $("[id=" + mDrawFlag_SvgId + "]").eq(0);
    for (var B = 0; B < F.length; B++) {
        if (F[B].name.indexOf("_exp") >= 0) {
            var C = replaceAll(F[B].name, "_exp", "");
            var E = A.attr(C);
            G.attr(F[B].name, A.attr(F[B].name));
            G.attr(C, E)
        }
    }
    $("#" + MicroDraw_SVGTempData).html("");
    MicroBudget_calcOutlookArea()
}
function MicroDraw_fromWin_changeCombWinIDs(C) {
    var A = mDrawFlag_combsortwin;
    var B = $("#" + mDrawFlag_SvgId + ' [mtype="' + A + '"]');
    var D = "";
    if (B.length > 0) {
        D = B.attr(A)
    }
    if ($.Micro.IsEmpty(D)) {
        D = ""
    } else {
        $.each($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Win + "']"),
        function() {
            var E = $(this).attr("id").substr(C.length, $(this).attr("id").length);
            D = replaceAll(D, E, $(this).attr("id"))
        });
        $.each($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_CornerMaterial + "']"),
        function() {
            var E = $(this).attr("id").substr(C.length, $(this).attr("id").length);
            D = replaceAll(D, E, C + E)
        });
        B.attr(A, D);
        $.each($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Cornergdpic + "'] [belongto]"),
        function() {
            var E = $(this).attr("belongto");
            $(this).attr("belongto", C + E)
        })
    }
}
function _MicroDraw_fromWin_changeCombWinIDs(I, K, H) {
    if (!I || I.length == 0) {
        return true
    }
    var F = mDrawFlag_combsortwin;
    var E = I.find('[mtype="' + F + '"]');
    var L = "";
    if (E.length > 0) {
        L = E.attr(F)
    }
    if ($.Micro.IsEmpty(L)) {
        L = ""
    } else {
        var B = $.Micro.MergeObjs([I.find("[mtype='" + mDrawFlag_Win + "']"), I.find("[mtype='" + mDrawFlag_Custom_CornerMaterial + "']")]);
        for (var G = 0; G < B.length; G++) {
            var M = B[G].attr("oriID");
            var J = $.Micro.isInArray(M, K, 1, 1);
            var D = H[J];
            L = replaceAll(L, M, D)
        }
        E.attr(F, L);
        var C = ["belongto", "mrulermaster"];
        for (var G = 0; G < C.length; G++) {
            var A = C[G];
            $.each(I.find("*[mtype][" + A + "]"),
            function() {
                var P = $(this).attr(A);
                var N = $.Micro.isInArray(P, K, 1, 1);
                var O = H[N];
                $(this).attr(A, O)
            })
        }
        B = $.Micro.MergeObjs([]);
        $.each(I.find("[mtype='" + mDrawFlag_Cornergdpic + "'] [belongto]"),
        function() {
            var P = $(this).attr("belongto");
            var N = $.Micro.isInArray(P, K, 1, 1);
            var O = H[N];
            $(this).attr("belongto", O)
        })
    }
}
function MicroDraw_fromWin_selectFinish(svgId, fromWinOrStore) {
    mDrawSelectFinishSvgId = svgId;
    $("#" + mDrawOptProperty).datagrid("loadData", []);
    $("#" + mDrawPrProperty).datagrid("loadData", []);
    $("#" + mDrawGlProperty).datagrid("loadData", []);
    $("#" + mDrawWjProperty).datagrid("loadData", []);
    $("#" + mDrawCpProperty).datagrid("loadData", []);
    $("#" + mDrawBjProperty).datagrid("loadData", []);
    $("#" + mDrawLabelProperty).datagrid("loadData", []);
    $("#" + mDrawCostProperty).datagrid("loadData", []);
    $("#" + mDrawRouteProperty).datagrid("loadData", []);
    para = {};
    para.action = "getSvg";
    para.svgId = svgId;
    var async = true;
    if (WEB_BUDGET_ISSIMPLE) {
        if (AL_PROJECT_FROMBUDGET_ARGUMENT.opr == "copy") {
            async = false
        }
    }
    $.ajax({
        url: "../MicroBudget/MicroDraw.ashx",
        data: para,
        type: "POST",
        dataType: "text",
        async: async,
        success: function(result) {
            if (result.substr(0, 2) == "ok") {
                MicroDraw_fromWin_GetSVGOriInfor(result.substr(3));
                if (mDrawIDNameStyle == 1) {
                    var groupStr = result.substr(3);
                    var svgStr = $("#" + mDrawFlag_SvgAreaId).html();
                    var newSvgStr = "";
                    var leftStr, rightStr;
                    var rndNum = RandomNumBoth(0, 10000).toString();
                    var msvgpixelperm_fromWin = groupStr.substr(groupStr.indexOf("msvgpixelperm") + 15);
                    msvgpixelperm_fromWin = msvgpixelperm_fromWin.substr(0, msvgpixelperm_fromWin.indexOf('"'));
                    groupStr = groupStr.substr(groupStr.indexOf("</rect>") + 7);
                    groupStr = groupStr.substr(0, groupStr.indexOf("</svg>"));
                    groupStr = groupStr.replace(/(^\s*)|(\s*$)/g, "");
                    if (groupStr.indexOf('mtype="' + mDrawFlag_Win + '"') == -1) {
                        groupStr = replaceAll(groupStr, ' id="', ' id="' + rndNum + "");
                        leftStr = svgStr.substr(0, svgStr.indexOf("</svg>"));
                        rightStr = "</svg>";
                        newSvgStr = leftStr + groupStr + rightStr;
                        $("#" + mDrawFlag_SvgAreaId).html(newSvgStr)
                    } else {
                        var guid = MicroDraw_GUID();
                        groupStr = replaceAll(groupStr, ' id="', ' id="' + rndNum + "");
                        groupStr = '<g id="' + guid + '">' + groupStr + "</g>";
                        leftStr = svgStr.substr(0, svgStr.indexOf("</svg>"));
                        rightStr = "</svg>";
                        newSvgStr = leftStr + groupStr + rightStr;
                        $("#" + mDrawFlag_SvgAreaId).html(newSvgStr);
                        $.each($("#" + mDrawFlag_SvgAreaId + " [id*=mBackGround]"),
                        function() {
                            if ($(this).attr("id") != "mBackGround") {
                                $(this).remove()
                            }
                        });
                        MicroDraw_fromWin_changeCombWinIDs(rndNum);
                        $("#" + guid + " *[mtid]").each(function(i, o) {
                            var objId = o.id;
                            var mtid = $("#" + objId)[0].getAttribute("mtid");
                            var newId = "";
                            if (mtid.length > 0) {
                                var ls_arr = mtid.split(",");
                                for (hh = 0; hh < ls_arr.length; hh++) {
                                    newId = newId + "," + rndNum + ls_arr[hh]
                                }
                                newId = newId.substr(1);
                                $("#" + objId)[0].setAttribute("mtid", newId)
                            }
                        });
                        $("#" + guid + " *[mbid]").each(function(i, o) {
                            var objId = o.id;
                            var mbid = $("#" + objId)[0].getAttribute("mbid");
                            var newId = "";
                            if (mbid.length > 0) {
                                var ls_arr = mbid.split(",");
                                for (ii = 0; ii < ls_arr.length; ii++) {
                                    newId = newId + "," + rndNum + ls_arr[ii]
                                }
                                newId = newId.substr(1);
                                $("#" + objId)[0].setAttribute("mbid", newId)
                            }
                        });
                        $("#" + guid + " *[mlid]").each(function(i, o) {
                            var objId = o.id;
                            var mlid = $("#" + objId)[0].getAttribute("mlid");
                            var newId = "";
                            if (mlid.length > 0) {
                                var ls_arr = mlid.split(",");
                                for (jj = 0; jj < ls_arr.length; jj++) {
                                    newId = newId + "," + rndNum + ls_arr[jj]
                                }
                                newId = newId.substr(1);
                                $("#" + objId)[0].setAttribute("mlid", newId)
                            }
                        });
                        $("#" + guid + " *[mrid]").each(function(i, o) {
                            var objId = o.id;
                            var mrid = $("#" + objId)[0].getAttribute("mrid");
                            var newId = "";
                            if (mrid.length > 0) {
                                var ls_arr = mrid.split(",");
                                for (kk = 0; kk < ls_arr.length; kk++) {
                                    newId = newId + "," + rndNum + ls_arr[kk]
                                }
                                newId = newId.substr(1);
                                $("#" + objId)[0].setAttribute("mrid", newId)
                            }
                        });
                        $.each($("#" + guid).children(),
                        function(i, c) {
                            $("#" + mDrawFlag_SvgId).append(c)
                        });
                        $("#" + guid).remove()
                    }
                    $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Win + "']").each(function(i, o) {
                        $("#" + o.id)[0].setAttribute("mwin", mDrawFlag_Win + (i + 1).toString())
                    });
                    MicroDraw_CombWinSetPos()
                } else {
                    if (mDrawIDNameStyle == 2) {
                        var M_AddSVGToCanvas = MicroDraw_AddSVGToCanvas($("#" + mDrawFlag_SvgId), result.substr(3));
                        var oriIDs = M_AddSVGToCanvas.oriIDs;
                        var newIDs = M_AddSVGToCanvas.newIDs
                    }
                }
                var Numx = MicroBudget_getPropertyValue(mBudgetWinProperty, "Numx");
                if (WEB_BUDGET_ISSIMPLE) {
                    if (AL_PROJECT_FROMBUDGET_ARGUMENT && AL_PROJECT_FROMBUDGET_ARGUMENT.opr == "copy") {
                        var newXcxlId = AL_PROJECT_FROMBUDGET_ARGUMENT.newSeries;
                        $("#" + mDrawFlag_SvgId + " [mType='" + mDrawFlag_FrameRect + "']").each(function(i, item) {
                            item.setAttribute("mxcxlid", newXcxlId);
                            MicroDraw_changeXcxl($(item).attr("id"), newXcxlId)
                        });
                        MicroDraw_RedrawAll(mDrawFlag_SvgId);
                        $("#" + mDrawOptProperty).datagrid("loadData", {
                            total: 0,
                            rows: []
                        });
                        $("#" + mDrawPrProperty).datagrid("loadData", {
                            total: 0,
                            rows: []
                        });
                        $("#" + mDrawGlProperty).datagrid("loadData", {
                            total: 0,
                            rows: []
                        });
                        $("#" + mDrawWjProperty).datagrid("loadData", {
                            total: 0,
                            rows: []
                        });
                        $("#" + mDrawCpProperty).datagrid("loadData", {
                            total: 0,
                            rows: []
                        });
                        $("#" + mDrawBjProperty).datagrid("loadData", {
                            total: 0,
                            rows: []
                        });
                        $("#" + mDrawLabelProperty).datagrid("loadData", {
                            total: 0,
                            rows: []
                        });
                        $("#" + mDrawCostProperty).datagrid("loadData", {
                            total: 0,
                            rows: []
                        });
                        $("#" + mDrawRouteProperty).datagrid("loadData", {
                            total: 0,
                            rows: []
                        });
                        MicroDraw_reflashGlassFlag();
                        MicroDraw_genData(mDrawPrProperty, mDrawGlProperty, mDrawWjProperty, mDrawCpProperty, mDrawBjProperty, mDrawLabelProperty, mDrawCostProperty, mDrawRouteProperty);
                        MicroBudget_setPropertyValue(mBudgetWinProperty, "wincode", MicroDraw_GUID());
                        if ($("#" + DrawBudget_DG_DETAIL).length > 0) {
                            var rows = $("#" + DrawBudget_DG_DETAIL).datagrid("getRows");
                            var wincode = MicroBudget_getPropertyValue(mBudgetWinProperty, "wincode");
                            for (var oi = 0; oi < rows.length; oi++) {
                                if (Numx == rows[oi]["流水号明细"]) {
                                    rows[oi]["门窗代号"] = wincode;
                                    $("#" + DrawBudget_DG_DETAIL).datagrid("refreshRow", oi);
                                    break
                                }
                            }
                        }
                        MicroBudget_setPropertyValue(mBudgetWinProperty, "difficulty", MicroDraw_getDifficulty(svgId));
                        MicroBudget_save();
                        return
                    }
                }
                para = {};
                para.action = "getOptPrGlWjCpBJ";
                para.svgId = svgId;
                $.ajax({
                    url: "../MicroBudget/MicroDraw.ashx",
                    data: para,
                    type: "POST",
                    dataType: "text",
                    async: async,
                    success: function(result) {
                        if (result.substr(0, 2) == "ok") {
                            var ls_arr = result.substr(3).split("@");
                            var ls_arrSub_pr = ls_arr[0].split(";");
                            for (h = 0; h < ls_arrSub_pr.length; h++) {
                                var ls_arrSubSub_pr = ls_arrSub_pr[h].split("[,]");
                                var xcxljgJson = eval("([])");
                                var newObjId = "";
                                if (!isEmptyOrNull(ls_arrSubSub_pr[0])) {
                                    if (mDrawIDNameStyle == 1) {
                                        newObjId = rndNum + ls_arrSubSub_pr[0]
                                    } else {
                                        if (mDrawIDNameStyle == 2) {
                                            var _index = $.Micro.isInArray(ls_arrSubSub_pr[0], oriIDs, 1, 1);
                                            newObjId = newIDs[_index]
                                        }
                                    }
                                } else {
                                    newObjId = ""
                                }
                                MicroDraw_genData_pr_addRow(0, xcxljgJson, mDrawPrProperty, Numx, newObjId, ls_arrSubSub_pr[1], ls_arrSubSub_pr[2], ls_arrSubSub_pr[3], ls_arrSubSub_pr[4], ls_arrSubSub_pr[5], ls_arrSubSub_pr[6], ls_arrSubSub_pr[7], ls_arrSubSub_pr[8], ls_arrSubSub_pr[9], ls_arrSubSub_pr[10], "", {
                                    xcxljgid: ls_arrSubSub_pr[11]
                                })
                            }
                            var ls_arrSub_gl = ls_arr[1].split(";");
                            for (i = 0; i < ls_arrSub_gl.length; i++) {
                                var ls_arrSubSub_gl = ls_arrSub_gl[i].split("[,]");
                                var newObjId = "";
                                if (!isEmptyOrNull(ls_arrSubSub_gl[0])) {
                                    if (mDrawIDNameStyle == 1) {
                                        newObjId = rndNum + ls_arrSubSub_gl[0]
                                    } else {
                                        if (mDrawIDNameStyle == 2) {
                                            var _index = $.Micro.isInArray(ls_arrSubSub_gl[0], oriIDs, 1, 1);
                                            newObjId = newIDs[_index]
                                        }
                                    }
                                } else {
                                    newObjId = ""
                                }
                                MicroDraw_genData_gl_addRow(0, xcxljgJson, mDrawGlProperty, Numx, newObjId, ls_arrSubSub_gl[1], ls_arrSubSub_gl[2], ls_arrSubSub_gl[3], ls_arrSubSub_gl[4], ls_arrSubSub_gl[5], ls_arrSubSub_gl[6], ls_arrSubSub_gl[7], ls_arrSubSub_gl[8], ls_arrSubSub_gl[9], ls_arrSubSub_gl[10], "", ls_arrSubSub_gl[11], ls_arrSubSub_gl[12], ls_arrSubSub_gl[13], ls_arrSubSub_gl[14], ls_arrSubSub_gl[15], ls_arrSubSub_gl[16], ls_arrSubSub_gl[17], ls_arrSubSub_gl[18], ls_arrSubSub_gl[19])
                            }
                            var ls_arrSub_wj = ls_arr[2].split(";");
                            for (j = 0; j < ls_arrSub_wj.length; j++) {
                                var ls_arrSubSub_wj = ls_arrSub_wj[j].split("[,]");
                                var newObjId = "";
                                if (!isEmptyOrNull(ls_arrSubSub_wj[0])) {
                                    if (mDrawIDNameStyle == 1) {
                                        newObjId = rndNum + ls_arrSubSub_wj[0]
                                    } else {
                                        if (mDrawIDNameStyle == 2) {
                                            var _index = $.Micro.isInArray(ls_arrSubSub_wj[0], oriIDs, 1, 1);
                                            newObjId = newIDs[_index]
                                        }
                                    }
                                } else {
                                    newObjId = ""
                                }
                                MicroDraw_genData_wj_addRow(mDrawWjProperty, Numx, newObjId, ls_arrSubSub_wj[1], ls_arrSubSub_wj[2], ls_arrSubSub_wj[3], ls_arrSubSub_wj[4], ls_arrSubSub_wj[5], ls_arrSubSub_wj[6], ls_arrSubSub_wj[7], ls_arrSubSub_wj[8], ls_arrSubSub_wj[9])
                            }
                            var ls_arrSub_cp = ls_arr[3].split(";");
                            for (k = 0; k < ls_arrSub_cp.length; k++) {
                                var ls_arrSubSub_cp = ls_arrSub_cp[k].split("[,]");
                                var newObjId = "";
                                if (!isEmptyOrNull(ls_arrSubSub_cp[0])) {
                                    if (mDrawIDNameStyle == 1) {
                                        newObjId = rndNum + ls_arrSubSub_cp[0]
                                    } else {
                                        if (mDrawIDNameStyle == 2) {
                                            var _index = $.Micro.isInArray(ls_arrSubSub_cp[0], oriIDs, 1, 1);
                                            newObjId = newIDs[_index]
                                        }
                                    }
                                } else {
                                    newObjId = ""
                                }
                                MicroDraw_genData_cp_addRow(mDrawCpProperty, Numx, newObjId, ls_arrSubSub_cp[1], ls_arrSubSub_cp[2], ls_arrSubSub_cp[3], ls_arrSubSub_cp[4], ls_arrSubSub_cp[5], ls_arrSubSub_cp[6], ls_arrSubSub_cp[7], ls_arrSubSub_cp[8], ls_arrSubSub_cp[9])
                            }
                            var ls_arrSub_opt = ls_arr[4].split(";");
                            for (k = 0; k < ls_arrSub_opt.length; k++) {
                                var ls_arrSubSub_opt = ls_arrSub_opt[k].split("#!");
                                MicroDraw_genData_opt_addRow(mDrawOptProperty, Numx, ls_arrSubSub_opt[0], ls_arrSubSub_opt[1], ls_arrSubSub_opt[2], ls_arrSubSub_opt[3], ls_arrSubSub_opt[4], ls_arrSubSub_opt[5], ls_arrSubSub_opt[8], ls_arrSubSub_opt[6], ls_arrSubSub_opt[7], ls_arrSubSub_opt[9] == "True" ? true: false, ls_arrSubSub_opt[10])
                            }
                            MicroBudget_WEB_ORDER_genData("toorder", 1, "opt");
                            var rows;
                            if (WEB_BUDGET_ISSIMPLE && ls_arrSub_opt.length > 0) {
                                rows = $("#MicroBudgetWinProperty").propertygrid("getRows");
                                for (i = rows.length - 1; i >= 0; i--) {
                                    if (rows[i].name == "颜色" || rows[i].name == "底玻" || rows[i].name == "面玻" || rows[i].name == "玻璃工艺" || rows[i].name == "图册" || rows[i].name == "吊脚" || rows[i].name == "墙厚" || rows[i].name == "包套" || rows[i].name == "锁及拉手") {
                                        $("#MicroBudgetWinProperty").propertygrid("deleteRow", i)
                                    }
                                }
                            }
                            var ls_arrSub_bj = ls_arr[5].split(";");
                            for (k = 0; k < ls_arrSub_bj.length; k++) {
                                var ls_arrSubSub_bj = ls_arrSub_bj[k].split("#!");
                                var newObjId = "";
                                if (!isEmptyOrNull(ls_arrSubSub_bj[0])) {
                                    if (mDrawIDNameStyle == 1) {
                                        newObjId = rndNum + ls_arrSubSub_bj[0]
                                    } else {
                                        if (mDrawIDNameStyle == 2) {
                                            var _index = $.Micro.isInArray(ls_arrSubSub_bj[0], oriIDs, 1, 1);
                                            newObjId = newIDs[_index]
                                        }
                                    }
                                } else {
                                    newObjId = ""
                                }
                                MicroDraw_genData_bj_addRow(mDrawBjProperty, Numx, newObjId, ls_arrSubSub_bj[1], ls_arrSubSub_bj[2], ls_arrSubSub_bj[3], ls_arrSubSub_bj[4], ls_arrSubSub_bj[5], ls_arrSubSub_bj[6], ls_arrSubSub_bj[7], ls_arrSubSub_bj[8], ls_arrSubSub_bj[9], ls_arrSubSub_bj[10], ls_arrSubSub_bj[11], ls_arrSubSub_bj[12], ls_arrSubSub_bj[13], 100)
                            }
                            MicroBudget_WEB_ORDER_genData("toorder", 0, "bj");
                            var ls_arrSub_win = ls_arr[6].split(";");
                            for (h = 0; h < ls_arrSub_win.length; h++) {
                                var ls_arrsubsub_win = ls_arrSub_win[h].split(",");
                                var ls_seq = Numx.substr(Numx.lastIndexOf("-"));
                                if (fromWinOrStore == "FROMWIN") {
                                    MicroBudget_setPropertyValue(mBudgetWinProperty, "wincode", ls_arrsubsub_win[0] + ls_seq);
                                    if ($("#" + DrawBudget_DG_DETAIL).length > 0) {
                                        var rows = $("#" + DrawBudget_DG_DETAIL).datagrid("getRows");
                                        var wincode = MicroBudget_getPropertyValue(mBudgetWinProperty, "wincode");
                                        for (var oi = 0; oi < rows.length; oi++) {
                                            if (Numx == rows[oi]["流水号明细"]) {
                                                rows[oi]["门窗代号"] = wincode;
                                                $("#" + DrawBudget_DG_DETAIL).datagrid("refreshRow", oi);
                                                break
                                            }
                                        }
                                    }
                                    if ($("#" + DrawOrder_DG_DETAIL).length > 0) {
                                        var rows = $("#" + DrawOrder_DG_DETAIL).datagrid("getRows");
                                        var wincode = MicroBudget_getPropertyValue(mBudgetWinProperty, "wincode");
                                        for (var oi = 0; oi < rows.length; oi++) {
                                            if (Numx == rows[oi]["流水号明细"]) {
                                                rows[oi]["门窗代号"] = wincode;
                                                $("#" + DrawOrder_DG_DETAIL).datagrid("refreshRow", oi);
                                                break
                                            }
                                        }
                                    }
                                } else {
                                    MicroBudget_setPropertyValue(mBudgetWinProperty, "wincode", ls_arrsubsub_win[0])
                                }
                                MicroBudget_setPropertyValue(mBudgetWinProperty, "productid", ls_arrsubsub_win[1]);
                                MicroBudget_setPropertyValue(mBudgetWinProperty, "difficulty", ls_arrsubsub_win[2])
                            }
                            var ls_arrSub_label = ls_arr[7].split(";");
                            for (k = 0; k < ls_arrSub_label.length; k++) {
                                var ls_arrSubSub_label = ls_arrSub_label[k].split("#!");
                                var newObjId = "";
                                if (!isEmptyOrNull(ls_arrSub_label[0])) {
                                    if (mDrawIDNameStyle == 1) {
                                        newObjId = rndNum + ls_arrSubSub_label[0]
                                    } else {
                                        if (mDrawIDNameStyle == 2) {
                                            var _index = $.Micro.isInArray(ls_arrSubSub_label[0], oriIDs, 1, 1);
                                            newObjId = newIDs[_index]
                                        }
                                    }
                                } else {
                                    newObjId = ""
                                }
                                MicroDraw_genData_label_addRow(mDrawLabelProperty, Numx, newObjId, ls_arrSubSub_label[1], ls_arrSubSub_label[2], ls_arrSubSub_label[3], ls_arrSubSub_label[4])
                            }
                            var ls_arrSub_bj = ls_arr[8].split(";");
                            for (k = 0; k < ls_arrSub_bj.length; k++) {
                                var ls_arrSubSub_bj = ls_arrSub_bj[k].split("#!");
                                var newObjId = "";
                                if (!isEmptyOrNull(ls_arrSubSub_bj[0])) {
                                    if (mDrawIDNameStyle == 1) {
                                        newObjId = rndNum + ls_arrSubSub_bj[0]
                                    } else {
                                        if (mDrawIDNameStyle == 2) {
                                            var _index = $.Micro.isInArray(ls_arrSubSub_bj[0], oriIDs, 1, 1);
                                            newObjId = newIDs[_index]
                                        }
                                    }
                                } else {
                                    newObjId = ""
                                }
                                MicroDraw_genData_cost_addRow(mDrawCostProperty, Numx, newObjId, ls_arrSubSub_bj[1], ls_arrSubSub_bj[2], ls_arrSubSub_bj[3], ls_arrSubSub_bj[4], ls_arrSubSub_bj[5], ls_arrSubSub_bj[6], ls_arrSubSub_bj[7], ls_arrSubSub_bj[8], ls_arrSubSub_bj[9], ls_arrSubSub_bj[10], ls_arrSubSub_bj[11], ls_arrSubSub_bj[12], ls_arrSubSub_bj[13], 100)
                            }
                            MicroBudget_WEB_ORDER_genData("toorder", 0, "cost");
                            var ls_arrSub_route = ls_arr[9].split(";");
                            for (k = 0; k < ls_arrSub_route.length; k++) {
                                var ls_arrSubSub_route = ls_arrSub_route[k].split("#!");
                                var newObjId = "";
                                if (!isEmptyOrNull(ls_arrSub_route[0])) {
                                    if (mDrawIDNameStyle == 1) {
                                        newObjId = rndNum + ls_arrSubSub_route[0]
                                    } else {
                                        if (mDrawIDNameStyle == 2) {
                                            var _index = $.Micro.isInArray(ls_arrSubSub_route[0], oriIDs, 1, 1);
                                            newObjId = newIDs[_index]
                                        }
                                    }
                                } else {
                                    newObjId = ""
                                }
                                MicroDraw_genData_route_addRow(mDrawRouteProperty, Numx, newObjId, ls_arrSubSub_route[1], ls_arrSubSub_route[2], ls_arrSubSub_route[3], ls_arrSubSub_route[4], ls_arrSubSub_route[5], ls_arrSubSub_route[6], ls_arrSubSub_route[7], ls_arrSubSub_route[8], ls_arrSubSub_route[9], ls_arrSubSub_route[10], ls_arrSubSub_route[11], ls_arrSubSub_route[12], ls_arrSubSub_route[13], ls_arrSubSub_route[14], ls_arrSubSub_route[15], ls_arrSubSub_route[16], ls_arrSubSub_route[17], ls_arrSubSub_route[18], ls_arrSubSub_route[19], ls_arrSubSub_route[20], ls_arrSubSub_route[21], ls_arrSubSub_route[22], ls_arrSubSub_route[23], ls_arrSubSub_route[24], ls_arrSubSub_route[25])
                            }
                            MicroBudget_HideWinProperty();
                            MicroDraw_ShowCoordinate();
                            MicroDraw_reflashHandleCoorY()
                        } else {
                            jQuery.messager.alert("提示:", "获取参数型材玻璃配件成品数据失败!", "error")
                        }
                    }
                });
                mDrawSvgWidth = $("#" + mDrawFlag_SvgId).attr("msvgwidth");
                mDrawSvgHeight = $("#" + mDrawFlag_SvgId).attr("msvgheight");
                mDrawSvgViewBox = $("#" + mDrawFlag_SvgId).attr("msvgviewbox");
                MicroDraw_StepInit();
                MicroDraw_StepRecord();
                MicroDraw_ShowSizeProperty();
                MicroDraw_ShowCoordinate();
                MicroDraw_drapDropInit();
                MicroDraw_calcTotal();
                $("#" + mDrawFlag_SvgId + " [mwallbelongto]").remove();
                $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_FrameRect + "']").each(function(i, o) {
                    var mwall = o.getAttribute("mwall");
                    if (isEmptyOrNull(mwall)) {
                        mwall = ""
                    }
                    if (mwall == "Y") {
                        var mwallid = MicroDraw_GUID();
                        var x = 0;
                        var y = 0;
                        var mfill = mDrawWallColor;
                        var mstroke = "#000000";
                        var mstrokewidth = "1px";
                        var mwallwidth = mDrawWallWidth;
                        var mwallheight = mDrawWallHeight;
                        var mwallrow = mDrawWallRow;
                        var mwallrealwidth;
                        var frameId = o.id;
                        x = $("#" + frameId + "_r1")[0].getAttribute("x");
                        y = Number($("#" + frameId + "_r1")[0].getAttribute("y")) + Number($("#" + frameId + "_r1")[0].getAttribute("height"));
                        mwallrealwidth = $("#" + frameId)[0].getAttribute("mwidth");
                        MicroDraw_AddCustom_Wall(mwallid, x, y, mwallrealwidth, mfill, mwallwidth, mwallheight, mwallrow, frameId);
                        MicroDraw_ShowCoordinate()
                    }
                });
                MicroDraw_autoGdPic();
                MicroDraw_reflashGlassFlag();
                $("#" + mDrawFlag_SvgId + " [mtype][mxcxlid]").each(function(i, item) {
                    var xcxlid = item.getAttribute("mxcxlid");
                    var mPublicXcxlIDs = [];
                    for (var i = 0; i < mPublicXcxlList.length; i++) {
                        mPublicXcxlIDs.push(mPublicXcxlList[i].id)
                    }
                    if ($.Micro.isInArray(xcxlid, mPublicXcxlIDs) && !$.Micro.IsEmpty(xcxlid)) {
                        MicroBudget_setFinishDate(xcxlid);
                        MicroGetWinProductId(xcxlid);
                        row = {
                            name: "型号款式",
                            value: "",
                            group: "",
                            editor: {
                                "type": "combobox",
                                "options": {
                                    data: mPublicWinProductIdList,
                                    textField: "name",
                                    valueField: "name"
                                }
                            },
                            dbCol: "productid"
                        };
                        $("#" + mBudgetWinProperty).propertygrid("updateRow", {
                            index: 1,
                            row: row
                        })
                    }
                });
                MicroBudget_HideWinProperty()
            } else {
                jQuery.messager.alert("提示:", "获取失败!", "error")
            }
        }
    })
}
function MicroDraw_selectObjPrGl(D) {
    if (isEmptyOrNull(D)) {
        return
    }
    $("#" + mDrawPrProperty).datagrid("unselectAll");
    var C = $("#" + mDrawPrProperty).datagrid("getRows");
    $.each(C,
    function(E, F) {
        if (F.ObjId == D) {
            var G = $("#" + mDrawPrProperty).datagrid("getRowIndex", F);
            $("#" + mDrawPrProperty).datagrid("selectRow", G)
        }
    });
    $("#" + mDrawGlProperty).datagrid("unselectAll");
    var C = $("#" + mDrawGlProperty).datagrid("getRows");
    $.each(C,
    function(E, F) {
        if (F.ObjId == D) {
            var G = $("#" + mDrawGlProperty).datagrid("getRowIndex", F);
            $("#" + mDrawGlProperty).datagrid("selectRow", G)
        }
    });
    $("#" + mDrawWjProperty).datagrid("unselectAll");
    var B = $("#" + D).parents('[mtype="' + mDrawFlag_Win + '"]')[0];
    if (!isEmptyOrNull(B)) {
        var A = B.getAttribute("id");
        var C = $("#" + mDrawWjProperty).datagrid("getRows");
        $.each(C,
        function(E, F) {
            if (F.ObjId == A) {
                var G = $("#" + mDrawWjProperty).datagrid("getRowIndex", F);
                $("#" + mDrawWjProperty).datagrid("selectRow", G)
            }
        })
    }
}
function MicroDraw_genData_getMcflIdByXcxlid(B) {
    var C;
    if (!isEmptyOrNull(mPublicXcxlList)) {
        $.each(mPublicXcxlList,
        function(D, E) {
            if (E.id == B) {
                C = E.mcflid;
                return false
            }
        })
    } else {
        mPublicXcxlList = ""
    }
    if (C > 0) {
        return C.toString()
    }
    var A = {};
    A.action = "getMcflIdByXcxlid";
    A.xcxlId = B;
    $.ajax({
        url: "../MicroBudget/MicroDraw.ashx",
        data: A,
        type: "POST",
        dataType: "text",
        async: false,
        success: function(D) {
            if (D.substr(0, 2) == "ok") {
                if (D.substr(3).length > 0) {
                    C = D.substr(3)
                }
            } else {
                jQuery.messager.alert("提示:", "获取门窗类型失败！", "error")
            }
        }
    });
    return C
}
function MicroDraw_genData_getXcxljgByXcxlId(B) {
    var C = -1;
    var E = "";
    var D;
    if (!isEmptyOrNull(mXcxljgStrArray)) {
        $.each(mXcxljgStrArray,
        function(F, G) {
            if (G.id == B) {
                C = F;
                E = G.data
            }
        })
    } else {
        mXcxljgStrArray = new Array()
    }
    if (C >= 0) {
        D = E
    } else {
        var A = {};
        A.action = "getXcxljgByXcxlId";
        A.xcxlId = B;
        $.ajax({
            url: "../MicroBudget/MicroDraw.ashx",
            data: A,
            type: "POST",
            dataType: "text",
            async: false,
            success: function(G) {
                if (G.substr(0, 2) == "ok") {
                    if (G.substr(3).length > 0) {
                        D = G.substr(3);
                        var F = new Object;
                        F.id = B;
                        F.data = D;
                        mXcxljgStrArray.push(F)
                    }
                } else {
                    jQuery.messager.alert("提示:", "获取型材系列结构失败！", "error")
                }
            }
        })
    }
    return D
}
function MicroDraw_getData_getXcxljgData(json, type, name, col) {
    var retValue = "";
    $.each(json,
    function(i, o) {
        if (o.type == type && o.name == name && o.bmain.toString() == "true") {
            switch (col) {
            case "prid":
                retValue = o.prid;
                return false;
                break;
            case "exp":
                retValue = o.EXP;
                return false;
                break;
            case "iw":
                retValue = o.iw;
                return false;
                break;
            case "bdefault":
                retValue = o.bdefault;
                return false;
                break;
            case "bcpType":
                retValue = o.bcpType;
                return false;
                break;
            case "usePlace":
                retValue = o.usePlace;
                return false;
                break;
            case "cntExp":
                retValue = o.cntExp;
                return false;
                break;
            case "optList":
                retValue = o.optList;
                return false;
                break;
            case "optListExp":
                retValue = o.optListExp;
                return false;
                break;
            case "bxdOpt":
                retValue = o.bxdOpt;
                return false;
                break;
            case "colorExp":
                retValue = o.colorExp;
                return false;
                break;
            case "glassExp":
                retValue = o.glassExp;
                return false;
                break;
            case "cntExp2":
                retValue = o.cntExp2;
                return false;
                break;
            case "bjAreaExp":
                retValue = o.bjAreaExp;
                return false;
                break;
            case "bjPriceExp":
                retValue = o.bjPriceExp;
                return false;
                break;
            case "Discount":
                retValue = o.Discount;
                return false;
                break;
            case "fcAngle":
                retValue = o.fcAngle;
                return false;
                break;
            case "glAreaExp":
                retValue = o.glAreaExp;
                return false;
                break;
            case "optValExp":
                retValue = o.optValExp;
                return false;
                break;
            default:
                retValue = eval("o." + col);
                return false
            }
        }
    });
    return retValue
}
function MicroDraw_genData_getMcflOPT(A) {
    var D = -1;
    var B = "";
    var E;
    if (mMcflIdOptStrArray.length > 0) {
        $.each(mMcflIdOptStrArray,
        function(F, G) {
            if (G.id == A) {
                D = F;
                B = G.data
            }
        })
    }
    if (D >= 0) {
        E = B
    } else {
        var C = {};
        C.action = "getMcflOPT";
        C.mcflId = A;
        $.ajax({
            url: "../MicroBudget/MicroDraw.ashx",
            data: C,
            type: "POST",
            dataType: "text",
            async: false,
            success: function(F) {
                if (F.substr(0, 2) == "ok") {
                    if (F.substr(3).length > 0) {
                        E = F.substr(3);
                        var G = new Object;
                        G.id = A;
                        G.data = E;
                        mMcflIdOptStrArray.push(G)
                    }
                } else {
                    jQuery.messager.alert("提示:", "获取门窗分类参数失败！", "error")
                }
            }
        })
    }
    return E
}
function MicroDraw_genData_opt_addRow(D, G, L, B, J, O, K, C, I, N, E, A, F) {
    var M = false;
    var H = $("#" + D).datagrid("getRows");
    $.each(H,
    function(P, Q) {
        if (L == Q.optId && L.length > 0) {
            M = true
        }
    });
    if (M) {
        return
    }
    if (!isEmptyOrNull(L)) {
        $("#" + D).datagrid("insertRow", {
            index: $("#" + D).datagrid("getRows").length,
            row: {
                Numx: G,
                optId: L,
                optName: B,
                optVal: J,
                optList: O,
                optListExp: K,
                memo: C,
                optValExp: I,
                bgyOpt: N,
                bgyOptExp: E,
                bgyOpt: N,
                bgyOptExp: E,
                optValExp: I,
                bxdOpt: A,
                seq: F
            }
        });
        if (!A) {
            $("#" + D).datagrid("hideRow", $("#" + D).datagrid("getRows").length - 1)
        }
    }
}
function MicroDraw_genData_pr_addRow(X, U, G, O, L, I, R, C, B, D, Y, a, A, E, Q, J, W) {
    if (!isEmptyOrNull(I)) {
        var b = MicroDraw_getData_getXcxljgData(U, "P", J, "fcAngle");
        if (!isEmptyOrNull(b)) {
            Y = b
        }
        var K = 0;
        if (!$.Micro.IsEmpty(W) && W.xcxljgid > 0) {
            K = W.xcxljgid
        } else {
            K = MicroDraw_getData_getXcxljgData(U, "P", J, "id")
        }
        if ($.Micro.IsEmpty(K)) {
            K = 0
        }
        $("#" + G).datagrid("insertRow", {
            index: $("#" + G).datagrid("getRows").length,
            row: {
                Numx: O,
                ObjId: L,
                ProductId: I,
                Len: R,
                LenExp: C,
                Cnt: B,
                CntExp: D,
                Angle: Y,
                BcpType: a,
                Memo: A,
                color: E,
                colorExp: Q,
                xcxljgid: K
            }
        });
        var S = "";
        var Z = "";
        var P = "";
        var F = "";
        var c = "";
        var V = "";
        var M = "";
        var T = "";
        var H = "";
        var N = "";
        $.each(U,
        function(e, f) {
            if (f.type == "P" && f.name == J && f.bmain.toString() == "false") {
                S = f.prid;
                P = f.EXP;
                if (isEmptyOrNull(P)) {
                    P = C
                }
                Z = MicroDraw_genData_calcExp(X, P, L, U);
                F = MicroDraw_genData_calcExp(X, f.cntExp, L, U);
                c = f.cntExp;
                if (!isEmptyOrNull(f.fcAngle)) {
                    V = f.fcAngle
                } else {
                    V = Y
                }
                M = f.bcpType;
                T = f.memo;
                H = MicroDraw_genData_calcExp(X, f.colorExp, L, U);
                N = f.colorExp;
                if (!isEmptyOrNull(S)) {
                    $("#" + G).datagrid("insertRow", {
                        index: $("#" + G).datagrid("getRows").length,
                        row: {
                            Numx: O,
                            ObjId: L,
                            ProductId: S,
                            Len: Z,
                            LenExp: P,
                            Cnt: F,
                            CntExp: c,
                            Angle: V,
                            BcpType: M,
                            Memo: A,
                            color: H,
                            colorExp: N,
                            xcxljgid: f.id
                        }
                    })
                }
            }
        })
    }
}
function MicroDraw_genData_gl_addRow(P, T, A, s, E, G, Y, Ac, a, p, c, o, O, V, N, f, L, g, e, m, Q, X, n, Aa, I) {
    if (!isEmptyOrNull(G)) {
        $("#" + A).datagrid("insertRow", {
            index: $("#" + A).datagrid("getRows").length,
            row: {
                Numx: s,
                ObjId: E,
                Glass: G,
                W: Y,
                WExp: Ac,
                H: a,
                HExp: p,
                Cnt: c,
                CntExp: o,
                BcpType: O,
                Memo: V,
                Flag: N,
                glassExp: L,
                glassGy: g,
                glassGyExp: e,
                glassDb: m,
                glassDbExp: Q,
                glassMb: X,
                glassMbExp: n,
                glassArea: Aa,
                glassAreaExp: I
            }
        });
        var F;
        var u;
        var J;
        var w;
        var q;
        var B;
        var Z;
        var D = replaceAll(f, "宽度", "高度");
        var Ab = "";
        var R = "";
        var v = "";
        var C = "";
        var U = "";
        var r = "";
        var b = "";
        var M = "";
        var t = "";
        var S = O;
        var K = 0;
        var l = "";
        $.each(T,
        function(H, W) {
            if (W.type == "G" && W.name == f && W.bmain.toString() == "false") {
                u = W.EXP;
                B = W.cntExp;
                Z = W.memo;
                S = W.bcpType;
                Ab = W.glassExp;
                var Ad = Ab.split(",");
                if (Ad.length == 4) {
                    v = Ad[0];
                    U = Ad[1];
                    b = Ad[2];
                    t = Ad[3]
                } else {
                    v = Ad[0];
                    if (e.indexOf("--") > -1) {
                        U = e
                    }
                    if (Q.indexOf("--") > -1) {
                        b = Q
                    }
                    if (Q.indexOf("--") > -1) {
                        t = Q
                    }
                }
                $.each(T,
                function(Ah, Ai) {
                    if (Ai.type == "G" && Ai.name == D && Ai.bmain.toString() == "false" && Ai.memo == Z) {
                        w = Ai.EXP
                    }
                });
                F = MicroDraw_genData_calcExp(P, u, E, T);
                J = MicroDraw_genData_calcExp(P, w, E, T);
                q = MicroDraw_genData_calcExp(P, B, E, T);
                if (Ad.length == 4) {
                    R = MicroDraw_genData_calcExp(P, v, E, T);
                    C = MicroDraw_genData_calcExp(P, U, E, T);
                    r = MicroDraw_genData_calcExp(P, b, E, T);
                    M = MicroDraw_genData_calcExp(P, t, E, T)
                } else {
                    R = MicroDraw_genData_calcExp(P, v, E, T)
                }
                l = W.glAreaExp;
                if ($.Micro.IsEmpty(l)) {
                    K = Number(F) / 1000 * Number(J) / 1000
                } else {
                    K = MicroDraw_genData_calcExp(P, l, E, T)
                }
                var Ae = N;
                if (P == 2 || P == 4) {
                    var Ag = W.glassExp;
                    if (isEmptyOrNull(Ag)) {
                        Ag = ""
                    }
                    if (W.name.indexOf("扇玻宽度") >= 0 && (Ag.indexOf("OGG") >= 0 || Ag.indexOf("MGG") >= 0)) {
                        var Af = $("#" + E + "_txt2")[0];
                        if (!isEmptyOrNull(Af)) {
                            Ae = Af.textContent
                        }
                    }
                }
                $("#" + A).datagrid("insertRow", {
                    index: $("#" + A).datagrid("getRows").length,
                    row: {
                        Numx: s,
                        ObjId: E,
                        Glass: R,
                        W: F,
                        WExp: u,
                        H: J,
                        HExp: w,
                        Cnt: q,
                        CntExp: B,
                        BcpType: S,
                        Memo: V + "辅材",
                        Flag: Ae,
                        glassExp: v,
                        glassGy: C,
                        glassGyExp: U,
                        glassDb: r,
                        glassDbExp: b,
                        glassMb: M,
                        glassMbExp: t,
                        glassArea: K,
                        glassAreaExp: l
                    }
                })
            }
        })
    }
}
function MicroDraw_genData_wj_addRow(A, C, G, I, F, H, B, K, L, E, J, D) {
    if (!isEmptyOrNull(I)) {
        $("#" + A).datagrid("insertRow", {
            index: $("#" + A).datagrid("getRows").length,
            row: {
                Numx: C,
                ObjId: G,
                MaterialId: I,
                Cnt: F,
                CntExp: H,
                BcpType: B,
                UsePlace: K,
                Memo: L,
                CntExp2: E,
                bgyOpt: J,
                bgyOptExp: D
            }
        })
    }
}
function MicroDraw_genData_cp_addRow(L, D, I, J, K, C, A, F, G, E, M, B) {
    if (!isEmptyOrNull(J)) {
        $("#" + L).datagrid("insertRow", {
            index: $("#" + L).datagrid("getRows").length,
            row: {
                Numx: D,
                ObjId: I,
                cpId: J,
                W: K,
                WExp: C,
                H: A,
                HExp: F,
                Cnt: G,
                CntExp: E,
                Memo: M,
                Range: B
            }
        })
    }
}
function MicroDraw_genData_bj_addRow(K, Q, F, P, I, R, A, L, S, J, B, O, M, C, G, N, D, H) {
    if (!isEmptyOrNull(P)) {
        if ($.Micro.IsEmpty(O)) {
            O = 0
        }
        if ($.Micro.IsEmpty(B)) {
            B = ""
        }
        if ($.Micro.IsEmpty(M)) {
            M = ""
        }
        if ($.Micro.IsEmpty(G)) {
            G = ""
        }
        if ($.Micro.IsEmpty(D)) {
            D = 100
        }
        if ($.Micro.IsEmpty(H)) {
            H = 0
        }
        var E = F;
        if ($.Micro.IsEmpty(I) || $.trim(I) == "0") {
            E = ""
        }
        $("#" + K).datagrid("insertRow", {
            index: $("#" + K).datagrid("getRows").length,
            row: {
                Numx: Q,
                ObjId: E,
                Name: P,
                TotalMoneyExp: I,
                TotalMoney: R,
                Memo: A,
                BjDescExp: L,
                BjDesc: S,
                BjType: J,
                CntExp2: B,
                CalcFlag: O,
                bjAreaExp: M,
                bjArea: C,
                bjPriceExp: G,
                bjPrice: N,
                Discount: D,
                DiscountFlag: H
            }
        })
    }
}
function MicroDraw_genData_label_addRow(F, G, A, C, E, B, D) {
    if (!isEmptyOrNull(C)) {
        $("#" + F).datagrid("insertRow", {
            index: $("#" + F).datagrid("getRows").length,
            row: {
                Numx: G,
                ObjId: A,
                Name: C,
                CntExp: E,
                Cnt: B,
                Memo: D
            }
        })
    }
}
function MicroDraw_genData_cost_addRow(F, G, A, C, D, E, B) {
    if (!isEmptyOrNull(C)) {
        $("#" + F).datagrid("insertRow", {
            index: $("#" + F).datagrid("getRows").length,
            row: {
                Numx: G,
                ObjId: A,
                Item: C,
                exp: D,
                Price: E,
                Memo: B
            }
        })
    }
}
function MicroDraw_genData_route_addRow(A, M, K, J, B, P, C, L, D, X, Q, Y, a, W, O, I, S, H, U, V, Z, E, F, G, R, N, b, T) {
    if (!isEmptyOrNull(P)) {
        $("#" + A).datagrid("insertRow", {
            index: $("#" + A).datagrid("getRows").length,
            row: {
                Numx: M,
                ObjId: K,
                xcxljgid: J,
                Seq: B,
                Proce: P,
                PutPic: C,
                Direction: L,
                side: D,
                x: X,
                xExp: Q,
                y: Y,
                yExp: a,
                z: W,
                zExp: O,
                Template: I,
                TemplateExp: S,
                Memo: H,
                ProceType: U,
                Pline: V,
                PlineExp: Z,
                BEnable: E,
                BEnableExp: F,
                Width: G,
                Height: R,
                PositionA: N,
                PositionB: b,
                CutSpeed: T
            }
        })
    }
}
function MicroDraw_newConstTag(D, C, E) {
    var B = 0;
    var A = "" + D.toString() + "@" + C.toString() + "" + FixedLenRandomNum(9).toString();
    while ($.Micro.isInArray(A, E) && B < 10) {
        console.log([A, E]);
        A = "" + D.toString() + "@" + C.toString() + "" + FixedLenRandomNum(9).toString();
        B++
    }
    E.push(A);
    return A
}
function MicroDraw_genData_calcExp(A, E, B, F, G, D, C) {
    return MicroCalc_CalcExp(A, E, B, F, G, D, C)
}
function getWjCnt(C) {
    var A = 0;
    var B = $("#" + mDrawWjProperty).datagrid("getRows");
    $.each(B,
    function(D, E) {
        var F = $("#" + mDrawWjProperty).datagrid("getRowIndex", E);
        if (C == B[D].MaterialId.toString()) {
            A = Number(A) + Number(B[D].Cnt)
        }
    });
    return A.toString()
}
function getWjPrice(B) {
    var A = "";
    para = {};
    para.action = "getWjPrice";
    para.wjId = B;
    $.ajax({
        url: "../MicroSys/MicroSys.ashx",
        data: para,
        type: "POST",
        dataType: "text",
        async: false,
        success: function(C) {
            if (C.substr(0, 2) == "ok") {
                A = C.substr(3)
            } else {
                A = "0"
            }
        }
    });
    return A
}
function MicroDraw_genData(prDgId, glDgId, wjDgId, cpDgId, bjDgId, labelDgId, costDgId, routeDgId) {
    MicroDraw_genData_Action = true;
    mMcflIdOptStrArray = new Array();
    mXcxljgStrArray = new Array();
    var isComboWin = false;
    var ComboWinCnt = 0;
    var ComboWinCntCost = 0;
    var cpSeq = 0;
    var mcName = "弧顶拉伸量";
    var arcName = "上弧";
    var arcbName = "弧下框";
    var arcZTname = "弧内中挺";
    var arctyxName = "上弧压线";
    var arcInyxName = "弧内固玻压线";
    var arcbyxName = "弧下框压线";
    var arcztPrExps = [{
        "pos": "竖中",
        "exp": "(ARCMTL+ARCZTZL).toFixed(0)"
    },
    {
        "pos": "左斜",
        "exp": "(ARCLTL+ARCZTZL).toFixed(0)"
    },
    {
        "pos": "右斜",
        "exp": "(ARCRTL+ARCZTZL).toFixed(0)"
    }];
    var mtingcnt = 0;
    var mbframe = "N";
    var isComboArcWin = function() {
        var winsNum = $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Win + "']").length;
        var arcsNum = $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_arc + "']").length;
        return (winsNum > 0 && arcsNum > 0) ? true: false
    };
    var GraphSetting = function(xcxljgJson, mtypes) {
        var grJson = [];
        for (var i = 0; i < xcxljgJson.length; i++) {
            var type = xcxljgJson[i].type;
            var cntExp2 = xcxljgJson[i].cntExp2;
            if (type == "GR" && $.Micro.IsEmpty(cntExp2)) {
                grJson.push(xcxljgJson[i])
            }
        }
        grJson.sort($.Micro.sortByArr([{
            key: "prid",
            keyType: "String"
        }], "asc"));
        var mtype = "";
        var grArr = [];
        for (var i = 0; i < grJson.length; i++) {
            if (grJson[i].prid != mtype) {
                mtype = grJson[i].prid;
                grArr.push({
                    mtype: mtype,
                    props: [{
                        name: grJson[i].name,
                        exp: grJson[i].EXP
                    }]
                })
            } else {
                grArr[grArr.length - 1].props.push({
                    name: grJson[i].name,
                    exp: grJson[i].EXP
                })
            }
        }
        for (var i = 0; i < grArr.length; i++) {
            var mtype = grArr[i].mtype;
            var props = grArr[i].props;
            $.each($("#" + mDrawFlag_SvgId + " [mtype=" + mtype + "]"),
            function() {
                var mtypeObj = $(this);
                if (!$.Micro.IsEmpty(mtypes)) {
                    if ($.inArray(mtype, mtypes) == -1) {
                        return true
                    }
                }
                if ($.inArray(mtype, [mDrawFlag_Custom_CornerMaterial, mDrawFlag_Custom_CornerMaterial_h]) == -1) {
                    if (mtypeObj.parents("[mwin]").find('[mxcxlid=""]').length > 0) {
                        return true
                    }
                }
                for (var j = 0; j < props.length; j++) {
                    if (!$.Micro.IsEmpty(props[j].name)) {
                        mtypeObj.attr(props[j].name + "_exp", props[j].exp)
                    }
                }
            })
        }
    };
    var checkAddTing = function() {
        if ($("#" + mDrawFlag_SvgId).find("[mtype='" + mDrawFlag_TingV + "'],[mtype='" + mDrawFlag_TingH + "']").length != $("#" + mDrawFlag_SvgId).find("[mting]").length) {
            $.each($("#" + mDrawFlag_SvgId).find("[mtype='" + mDrawFlag_TingV + "'],[mtype='" + mDrawFlag_TingH + "']"),
            function(i, tingObj) {
                var twin = $(tingObj).parents("[mtype=" + mDrawFlag_Win + "]");
                var mting = MicroDraw_getTagMaxVal(twin, "mting", "ting") + 1;
                $(tingObj).attr("mting", mting)
            })
        }
    };
    checkAddTing();
    var mcflWinsArr = $.Micro.MergeObjs([$("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Win + "']"), $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_arc + "']")]);
    $.each(mcflWinsArr,
    function() {
        var win = $(this).get(0);
        var winId = win.getAttribute("id");
        var Numx = MicroBudget_getPropertyValue(mBudgetWinProperty, "Numx");
        var xcxlId;
        var nodeFrame;
        var mtype = $("#" + mDrawFlag_SvgId + " #" + winId).attr("mtype");
        switch (mtype) {
        case mDrawFlag_Win:
            nodeFrame = $("#" + winId + " [mtype='" + mDrawFlag_FrameRect + "']")[0];
            break;
        case mDrawFlag_Custom_arc:
            nodeFrame = $("#" + winId)[0];
            mtingcnt = $.Micro.ConvToNum($(win).attr("mtingcnt"));
            mbframe = $(win).attr("mbframe");
            break
        }
        if ($(nodeFrame).length > 0) {
            xcxlId = nodeFrame.getAttribute("mxcxlid")
        }
        if (isEmptyOrNull(xcxlId)) {
            jQuery.messager.alert("提示:", "请点击 框 对象，然后设置 系列结构 属性，才能生成公式！", "info");
            return
        }
        var mcflId = MicroDraw_genData_getMcflIdByXcxlid(xcxlId);
        if (isEmptyOrNull(mcflId)) {
            jQuery.messager.alert("提示:", "当前窗型的系列结构已经不存在，请重新选择！", "info");
            return
        }
        var mCalcArcLen = MicroDraw_CalcDiviArcLen(winId);
        var ARCBR = mCalcArcLen.ARCBR;
        var ARCTL = mCalcArcLen.ARCTL;
        var ARCTZL = mCalcArcLen.ARCTZL;
        var ARCZTZL = mCalcArcLen.ARCZTZL;
        var ARCBKL = mCalcArcLen.ARCBKL;
        var ARCLTL = mCalcArcLen.ARCLTL;
        var ARCRTL = mCalcArcLen.ARCRTL;
        var ARCMTL = mCalcArcLen.ARCMTL;
        var ARCINYX = mCalcArcLen.ARCINYX;
        var j_Alpha = $.Micro.MRound(mCalcArcLen.j_Alpha, 0);
        var j_Beta = $.Micro.MRound(mCalcArcLen.j_Beta, 0);
        var j_Gamma = $.Micro.MRound(mCalcArcLen.j_Gamma, 0);
        var arcGlassRectSizes = mCalcArcLen.arcGlassRectSizes;
        var xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(xcxlId);
        var xcxljgJson = eval("(" + xcxljgStr + ")");
        GraphSetting(xcxljgJson);
        var arcPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arcName, "prid");
        var arcbPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arcbName, "prid");
        var arcztPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arcZTname, "prid");
        var arctyxPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arctyxName, "prid");
        var arcInyxPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arcInyxName, "prid");
        var arcbyxPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arcbyxName, "prid");
        var arcPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arcName, "exp");
        var barcPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arcbName, "exp");
        var arctyxPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arctyxName, "exp");
        var arcbyxPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arcbyxName, "exp");
        var arcCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arcName, "cntExp");
        var arcbCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arcbName, "cntExp");
        var arcztCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arcZTname, "cntExp");
        var arctyxCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arctyxName, "cntExp");
        var arcInyxCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arcInyxName, "cntExp");
        var arcbyxCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arcbyxName, "cntExp");
        var arcAngle = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arcName, "fcAngle");
        var arcbAngle = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arcbName, "fcAngle");
        var arcztAngle = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arcZTname, "fcAngle");
        var arctyxAngle = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arctyxName, "fcAngle");
        var arcInyxAngle = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arcInyxName, "fcAngle");
        var arcbyxAngle = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arcbyxName, "fcAngle");
        var arcBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arcName, "bcpType");
        var arcbBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arcbName, "bcpType");
        var acrztBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arcZTname, "bcpType");
        var arctyxBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arctyxName, "bcpType");
        var arcInyxBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arcInyxName, "bcpType");
        var arcbyxBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arcbyxName, "bcpType");
        var arcColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arcName, "colorExp");
        var arcbColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arcbName, "colorExp");
        var arcztColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arcZTname, "colorExp");
        var arctyxColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arctyxName, "colorExp");
        var arcInyxColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arcInyxName, "colorExp");
        var arcbyxColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", arcbyxName, "colorExp");
        var addArcZT = function() {
            var jd = "";
            switch (mtingcnt) {
            case 0:
                break;
            case 1:
                jd = arcztAngle;
                MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, arcztPrId, MicroDraw_genData_calcExp(mcflId, arcztPrExps[0].exp, ObjId, xcxljgJson), arcztPrExps[0].exp, MicroDraw_genData_calcExp(mcflId, arcztCntExp, ObjId, xcxljgJson), arcztCntExp, jd, acrztBcpType, arcztPrExps[0].pos, MicroDraw_genData_calcExp(mcflId, arcztColorExp, ObjId, xcxljgJson), arcztColorExp, arcZTname);
                break;
            case 2:
                jd = arcztAngle;
                for (var i = 1; i < arcztPrExps.length; i++) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, arcztPrId, MicroDraw_genData_calcExp(mcflId, arcztPrExps[i].exp, ObjId, xcxljgJson), arcztPrExps[i].exp, MicroDraw_genData_calcExp(mcflId, arcztCntExp, ObjId, xcxljgJson), arcztCntExp, jd, acrztBcpType, arcztPrExps[i].pos, MicroDraw_genData_calcExp(mcflId, arcztColorExp, ObjId, xcxljgJson), arcztColorExp, arcZTname)
                }
                break;
            case 3:
                for (var i = 0; i < arcztPrExps.length; i++) {
                    jd = arcztAngle;
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, arcztPrId, MicroDraw_genData_calcExp(mcflId, arcztPrExps[i].exp, ObjId, xcxljgJson), arcztPrExps[i].exp, MicroDraw_genData_calcExp(mcflId, arcztCntExp, ObjId, xcxljgJson), arcztCntExp, jd, acrztBcpType, arcztPrExps[i].pos, MicroDraw_genData_calcExp(mcflId, arcztColorExp, ObjId, xcxljgJson), arcztColorExp, arcZTname)
                }
                break
            }
        };
        var addArcYX = function() {
            var jd = "";
            if (!isEmptyOrNull(arctyxPrId)) {
                jd = arctyxAngle;
                MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, arctyxPrId, MicroDraw_genData_calcExp(mcflId, arctyxPrExp, ObjId, xcxljgJson), arctyxPrExp, MicroDraw_genData_calcExp(mcflId, arctyxCntExp, ObjId, xcxljgJson), arctyxCntExp, jd, arctyxBcpType, arctyxName, MicroDraw_genData_calcExp(mcflId, arctyxColorExp, ObjId, xcxljgJson), arctyxColorExp, arctyxName)
            }
            switch (mtingcnt) {
            case 0:
                jd = arcbAngle;
                if (!isEmptyOrNull(arcbyxPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, arcbyxPrId, MicroDraw_genData_calcExp(mcflId, arcbyxPrExp, ObjId, xcxljgJson), arcbyxPrExp, MicroDraw_genData_calcExp(mcflId, arcbyxCntExp, ObjId, xcxljgJson), arcbyxCntExp, jd, arcbyxBcpType, arcbyxName, MicroDraw_genData_calcExp(mcflId, arcbyxColorExp, ObjId, xcxljgJson), arcbyxColorExp, arcbyxName)
                }
                break;
            case 1:
                if (!isEmptyOrNull(arcbyxPrId)) {
                    jd = arcbAngle;
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, arcbyxPrId, MicroDraw_genData_calcExp(mcflId, arcbyxPrExp, ObjId, xcxljgJson), arcbyxPrExp, MicroDraw_genData_calcExp(mcflId, arcbyxCntExp, ObjId, xcxljgJson), arcbyxCntExp, jd, arcbyxBcpType, arcbyxName, MicroDraw_genData_calcExp(mcflId, arcbyxColorExp, ObjId, xcxljgJson), arcbyxColorExp, arcbyxName)
                }
                if (!isEmptyOrNull(arcInyxPrId)) {
                    jd = arcInyxAngle;
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, arcInyxPrId, MicroDraw_genData_calcExp(mcflId, arcztPrExps[0].exp, ObjId, xcxljgJson), arcztPrExps[0].exp, MicroDraw_genData_calcExp(mcflId, arcInyxCntExp, ObjId, xcxljgJson), "2*" + arcInyxCntExp, jd, arctyxBcpType, "弧内" + arcztPrExps[0].pos + "压线", MicroDraw_genData_calcExp(mcflId, arcInyxColorExp, ObjId, xcxljgJson), arcInyxColorExp, arcInyxName)
                }
                break;
            case 2:
                if (!isEmptyOrNull(arcbyxPrId)) {
                    jd = arcbAngle;
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, arcbyxPrId, MicroDraw_genData_calcExp(mcflId, arcbyxPrExp, ObjId, xcxljgJson), arcbyxPrExp, MicroDraw_genData_calcExp(mcflId, arcbyxCntExp, ObjId, xcxljgJson), arcbyxCntExp, jd, arcbyxBcpType, arcbyxName, MicroDraw_genData_calcExp(mcflId, arcbyxColorExp, ObjId, xcxljgJson), arcbyxColorExp, arcbyxName)
                }
                if (!isEmptyOrNull(arcInyxPrId)) {
                    jd = arcInyxAngle;
                    for (var i = 1; i < arcztPrExps.length; i++) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, arcInyxPrId, MicroDraw_genData_calcExp(mcflId, arcztPrExps[i].exp, ObjId, xcxljgJson), arcztPrExps[i].exp, MicroDraw_genData_calcExp(mcflId, arcInyxCntExp, ObjId, xcxljgJson), "2*" + arcInyxCntExp, jd, arctyxBcpType, "弧内" + arcztPrExps[i].pos + "压线", MicroDraw_genData_calcExp(mcflId, arcInyxColorExp, ObjId, xcxljgJson), arcInyxColorExp, arcInyxName)
                    }
                }
                break;
            case 3:
                if (!isEmptyOrNull(arcbyxPrId)) {
                    jd = arcbAngle;
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, arcbyxPrId, MicroDraw_genData_calcExp(mcflId, arcbyxPrExp, ObjId, xcxljgJson), arcbyxPrExp, MicroDraw_genData_calcExp(mcflId, arcbyxCntExp, ObjId, xcxljgJson), arcbyxCntExp, jd, arcbyxBcpType, arcbyxName, MicroDraw_genData_calcExp(mcflId, arcbyxColorExp, ObjId, xcxljgJson), arcbyxColorExp, arcbyxName)
                }
                if (!isEmptyOrNull(arcInyxPrId)) {
                    for (var i = 0; i < arcztPrExps.length; i++) {
                        if (i == 0) {
                            jd = !$.Micro.IsEmpty(arcInyxAngle) ? arcInyxAngle: "90-90"
                        } else {
                            jd = arcInyxAngle
                        }
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, arcInyxPrId, MicroDraw_genData_calcExp(mcflId, arcztPrExps[i].exp, ObjId, xcxljgJson), arcztPrExps[i].exp, MicroDraw_genData_calcExp(mcflId, arcInyxCntExp, ObjId, xcxljgJson), "2*" + arcInyxCntExp, jd, arctyxBcpType, "弧内" + arcztPrExps[i].pos + "压线", MicroDraw_genData_calcExp(mcflId, arcInyxColorExp, ObjId, xcxljgJson), arcInyxColorExp, arcInyxName)
                    }
                }
                break
            }
        };
        var setXCXLDiscountFlag = function(xcxlid) {
            var DiscountFlagObjs = [];
            if (xcxlid > 0) {
                para = {};
                para.action = "getDiscountFlagByXcxlid";
                para.xcxlid = xcxlid;
                $.ajax({
                    url: "../MicroBudget/WEB_BUDGET.ashx",
                    data: para,
                    type: "POST",
                    dataType: "text",
                    async: false,
                    success: function(result) {
                        if (result.substr(0, 2) == "ok") {
                            if (result.substr(3).length > 0) {
                                var jsonString = result.substr(3);
                                DiscountFlagObjs = eval(jsonString);
                                var rows = $("#" + mDrawBjProperty).propertygrid("getRows");
                                if (rows.length > 0) {
                                    $.each(rows,
                                    function(i, row) {
                                        var flag = 1;
                                        $.each(DiscountFlagObjs,
                                        function(j, obj) {
                                            if (DiscountFlagObjs[j].name == rows[i].Name) {
                                                flag = 0;
                                                return false
                                            }
                                        });
                                        rows[i].DiscountFlag = flag
                                    })
                                }
                            }
                        } else {}
                    }
                })
            }
        };
        switch (mcflId) {
        case "1":
            $.each(xcxljgJson,
            function(k, o) {
                if (o.type == "O") {
                    var prid = o.prid;
                    if (o.name == "MGG" || o.name == "MSA") {
                        if (o.prid.toString().substr(0, 1) != '"') {
                            prid = '"' + prid + '"'
                        }
                    }
                    MicroDraw_genData_opt_addRow(mDrawOptProperty, MicroBudget_getPropertyValue(mBudgetWinProperty, "Numx"), o.name, o.memo, prid, o.optList, o.optListExp, "", o.optValExp, "1", o.bgyOptExp, o.bxdOpt, 0)
                }
            });
            if ($(nodeFrame).length > 0) {
                var obj = nodeFrame;
                var tem = "";
                var ObjId = obj.getAttribute("id");
                var tPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上框", "prid");
                var bPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下框", "prid");
                var lPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左框", "prid");
                var rPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右框", "prid");
                var tCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上框", "cntExp");
                var bCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下框", "cntExp");
                var lCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左框", "cntExp");
                var rCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右框", "cntExp");
                tem = obj.getAttribute("mpjstyle");
                var frameAngle;
                switch (tem) {
                case "45":
                    frameAngle = "45-45";
                    break;
                case "H":
                    frameAngle = "90-90";
                    break;
                case "V":
                    frameAngle = "90-90";
                    break
                }
                var tPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上框", "exp");
                var bPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下框", "exp");
                var lPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左框", "exp");
                var rPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右框", "exp");
                var tBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上框", "bcpType");
                var bBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下框", "bcpType");
                var lBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左框", "bcpType");
                var rBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右框", "bcpType");
                var tColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上框", "colorExp");
                var bColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下框", "colorExp");
                var lColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左框", "colorExp");
                var rColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右框", "colorExp");
                if (mtype == mDrawFlag_Win) {
                    if (!isEmptyOrNull(tPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, tPrId, MicroDraw_genData_calcExp(mcflId, tPrExp, ObjId, xcxljgJson), tPrExp, MicroDraw_genData_calcExp(mcflId, tCntExp, ObjId, xcxljgJson), tCntExp, frameAngle, tBcpType, "上", MicroDraw_genData_calcExp(mcflId, tColorExp, ObjId, xcxljgJson), tColorExp, "上框")
                    }
                    if (!isEmptyOrNull(bPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, bPrId, MicroDraw_genData_calcExp(mcflId, bPrExp, ObjId, xcxljgJson), bPrExp, MicroDraw_genData_calcExp(mcflId, bCntExp, ObjId, xcxljgJson), bCntExp, frameAngle, bBcpType, "下", MicroDraw_genData_calcExp(mcflId, bColorExp, ObjId, xcxljgJson), bColorExp, "下框")
                    }
                    if (!isEmptyOrNull(lPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, lPrId, MicroDraw_genData_calcExp(mcflId, lPrExp, ObjId, xcxljgJson), lPrExp, MicroDraw_genData_calcExp(mcflId, lCntExp, ObjId, xcxljgJson), lCntExp, frameAngle, lBcpType, "左", MicroDraw_genData_calcExp(mcflId, lColorExp, ObjId, xcxljgJson), lColorExp, "左框")
                    }
                    if (!isEmptyOrNull(rPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, rPrId, MicroDraw_genData_calcExp(mcflId, rPrExp, ObjId, xcxljgJson), rPrExp, MicroDraw_genData_calcExp(mcflId, rCntExp, ObjId, xcxljgJson), rCntExp, frameAngle, rBcpType, "右", MicroDraw_genData_calcExp(mcflId, rColorExp, ObjId, xcxljgJson), rColorExp, "右框")
                    }
                } else {
                    if (mtype == mDrawFlag_Custom_arc) {
                        if (!isEmptyOrNull(arcPrId)) {
                            MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, arcPrId, MicroDraw_genData_calcExp(mcflId, arcPrExp, ObjId, xcxljgJson), arcPrExp, MicroDraw_genData_calcExp(mcflId, arcCntExp, ObjId, xcxljgJson), arcCntExp, "0-0", arcBcpType, "上弧", MicroDraw_genData_calcExp(mcflId, arcColorExp, ObjId, xcxljgJson), arcColorExp, "上弧")
                        }
                        if (!isEmptyOrNull(arcbPrId)) {
                            MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, arcbPrId, MicroDraw_genData_calcExp(mcflId, barcPrExp, ObjId, xcxljgJson), barcPrExp, MicroDraw_genData_calcExp(mcflId, bCntExp, ObjId, xcxljgJson), bCntExp, j_Gamma + "-" + j_Gamma, bBcpType, "弧下框", MicroDraw_genData_calcExp(mcflId, bColorExp, ObjId, xcxljgJson), bColorExp, "弧下框")
                        }
                        addArcZT();
                        addArcYX()
                    }
                }
                cpSeq = Number(cpSeq) + 1;
                MicroDraw_genData_cp_addRow(cpDgId, Numx, ObjId, "框", MicroDraw_genData_calcExp(mcflId, "W", ObjId, xcxljgJson), "W", MicroDraw_genData_calcExp(mcflId, "H", ObjId, xcxljgJson), "H", MicroDraw_genData_calcExp(mcflId, "CNT", ObjId, xcxljgJson), "CNT", "", "C" + cpSeq.toString());
                tPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "框左上角码", "prid");
                bPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "框右上角码", "prid");
                lPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "框右下角码", "prid");
                rPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "框左下角码", "prid");
                var tCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "框左上角码", "cntExp");
                var bCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "框右上角码", "cntExp");
                var lCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "框右下角码", "cntExp");
                var rCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "框左下角码", "cntExp");
                frameAngle = "";
                tPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "框左上角码", "exp");
                bPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "框右上角码", "exp");
                lPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "框右下角码", "exp");
                rPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "框左下角码", "exp");
                tBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "框左上角码", "bcpType");
                bBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "框右上角码", "bcpType");
                lBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "框右下角码", "bcpType");
                rBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "框左下角码", "bcpType");
                var tColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "框左上角码", "colorExp");
                var bColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "框右上角码", "colorExp");
                var lColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "框右下角码", "colorExp");
                var rColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "框左下角码", "colorExp");
                if (!isEmptyOrNull(tPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, tPrId, MicroDraw_genData_calcExp(mcflId, tPrExp, ObjId, xcxljgJson), tPrExp, MicroDraw_genData_calcExp(mcflId, tCntExp, ObjId, xcxljgJson), tCntExp, frameAngle, tBcpType, "左上", MicroDraw_genData_calcExp(mcflId, tColorExp, ObjId, xcxljgJson), tColorExp, "框左上角码")
                }
                if (!isEmptyOrNull(bPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, bPrId, MicroDraw_genData_calcExp(mcflId, bPrExp, ObjId, xcxljgJson), bPrExp, MicroDraw_genData_calcExp(mcflId, bCntExp, ObjId, xcxljgJson), bCntExp, frameAngle, bBcpType, "右上", MicroDraw_genData_calcExp(mcflId, bColorExp, ObjId, xcxljgJson), bColorExp, "框右上角码")
                }
                if (!isEmptyOrNull(lPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, lPrId, MicroDraw_genData_calcExp(mcflId, lPrExp, ObjId, xcxljgJson), lPrExp, MicroDraw_genData_calcExp(mcflId, lCntExp, ObjId, xcxljgJson), lCntExp, frameAngle, lBcpType, "右下", MicroDraw_genData_calcExp(mcflId, lColorExp, ObjId, xcxljgJson), lColorExp, "框右下角码")
                }
                if (!isEmptyOrNull(rPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, rPrId, MicroDraw_genData_calcExp(mcflId, rPrExp, ObjId, xcxljgJson), rPrExp, MicroDraw_genData_calcExp(mcflId, rCntExp, ObjId, xcxljgJson), rCntExp, frameAngle, rBcpType, "左下", MicroDraw_genData_calcExp(mcflId, rColorExp, ObjId, xcxljgJson), rColorExp, "框左下角码")
                }
            }
            $("#" + winId + " [mtype='" + mDrawFlag_TingH + "']").each(function(i, obj) {
                var ObjId = obj.getAttribute("id");
                var ObjPrId = obj.getAttribute("mprid");
                var mPrKind = "横挺";
                var mkind = obj.getAttribute("mkind");
                if (mkind == "N") {
                    mPrKind = "横挺"
                } else {
                    if (mkind == "Y") {
                        mPrKind = "加强中挺"
                    } else {
                        if (mkind == "Z") {
                            mPrKind = "Z中挺"
                        }
                    }
                }
                var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", mPrKind, "prid");
                if (!isEmptyOrNull(ObjPrId)) {
                    PrId = ObjPrId
                }
                var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", mPrKind, "exp");
                bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", mPrKind, "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", mPrKind, "cntExp");
                var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", mPrKind, "colorExp");
                if (!isEmptyOrNull(PrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", bcpType, "横", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, mPrKind)
                }
            });
            $("#" + winId + " [mtype='" + mDrawFlag_TingV + "']").each(function(i, obj) {
                var ObjId = obj.getAttribute("id");
                var ObjPrId = obj.getAttribute("mprid");
                var mPrKind = "竖挺";
                var mkind = obj.getAttribute("mkind");
                if (mkind == "N") {
                    mPrKind = "竖挺"
                } else {
                    if (mkind == "Y") {
                        mPrKind = "加强中挺"
                    } else {
                        if (mkind == "Z") {
                            mPrKind = "Z中挺"
                        }
                    }
                }
                var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", mPrKind, "prid");
                if (!isEmptyOrNull(ObjPrId)) {
                    PrId = ObjPrId
                }
                var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", mPrKind, "exp");
                bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", mPrKind, "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", mPrKind, "cntExp");
                var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", mPrKind, "colorExp");
                if (!isEmptyOrNull(PrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", bcpType, "竖", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, mPrKind)
                }
            });
            $("#" + winId + "[mtype=" + mDrawFlag_Win + "] [mtype='" + mDrawFlag_Glass + "']").each(function(i, obj) {
                var tem = "";
                var ObjId = obj.getAttribute("id");
                if (obj.getAttribute("myt") == "Y") {
                    var tPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻上压线", "prid");
                    var bPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻下压线", "prid");
                    var lPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻左压线", "prid");
                    var rPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻右压线", "prid");
                    var tCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻上压线", "cntExp");
                    var bCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻下压线", "cntExp");
                    var lCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻左压线", "cntExp");
                    var rCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻右压线", "cntExp");
                    tem = obj.getAttribute("mytpjstyle");
                    var frameAngle;
                    switch (tem) {
                    case "45":
                        frameAngle = "45-45";
                        break;
                    case "H":
                        frameAngle = "90-90";
                        break;
                    case "V":
                        frameAngle = "90-90";
                        break
                    }
                    var tPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻上压线", "exp");
                    var bPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻下压线", "exp");
                    var lPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻左压线", "exp");
                    var rPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻右压线", "exp");
                    var tBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻上压线", "bcpType");
                    var bBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻下压线", "bcpType");
                    var lBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻左压线", "bcpType");
                    var rBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻右压线", "bcpType");
                    var tColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻上压线", "colorExp");
                    var bColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻下压线", "colorExp");
                    var lColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻左压线", "colorExp");
                    var rColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻右压线", "colorExp");
                    if (!isEmptyOrNull(tPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, tPrId, MicroDraw_genData_calcExp(mcflId, tPrExp, ObjId, xcxljgJson), tPrExp, MicroDraw_genData_calcExp(mcflId, tCntExp, ObjId, xcxljgJson), tCntExp, frameAngle, tBcpType, "上", MicroDraw_genData_calcExp(mcflId, tColorExp, ObjId, xcxljgJson), tColorExp, "固玻上压线")
                    }
                    if (!isEmptyOrNull(bPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, bPrId, MicroDraw_genData_calcExp(mcflId, bPrExp, ObjId, xcxljgJson), bPrExp, MicroDraw_genData_calcExp(mcflId, bCntExp, ObjId, xcxljgJson), bCntExp, frameAngle, bBcpType, "下", MicroDraw_genData_calcExp(mcflId, bColorExp, ObjId, xcxljgJson), bColorExp, "固玻下压线")
                    }
                    if (!isEmptyOrNull(lPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, lPrId, MicroDraw_genData_calcExp(mcflId, lPrExp, ObjId, xcxljgJson), lPrExp, MicroDraw_genData_calcExp(mcflId, lCntExp, ObjId, xcxljgJson), lCntExp, frameAngle, lBcpType, "左", MicroDraw_genData_calcExp(mcflId, lColorExp, ObjId, xcxljgJson), lColorExp, "固玻左压线")
                    }
                    if (!isEmptyOrNull(rPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, rPrId, MicroDraw_genData_calcExp(mcflId, rPrExp, ObjId, xcxljgJson), rPrExp, MicroDraw_genData_calcExp(mcflId, rCntExp, ObjId, xcxljgJson), rCntExp, frameAngle, rBcpType, "右", MicroDraw_genData_calcExp(mcflId, rColorExp, ObjId, xcxljgJson), rColorExp, "固玻右压线")
                    }
                }
                tPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻上转换料", "prid");
                bPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻下转换料", "prid");
                lPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻左转换料", "prid");
                rPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻右转换料", "prid");
                var tCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻上转换料", "cntExp");
                var bCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻下转换料", "cntExp");
                var lCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻左转换料", "cntExp");
                var rCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻右转换料", "cntExp");
                frameAngle = "45-45";
                tPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻上转换料", "exp");
                bPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻下转换料", "exp");
                lPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻左转换料", "exp");
                rPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻右转换料", "exp");
                tBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻上转换料", "bcpType");
                bBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻下转换料", "bcpType");
                lBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻左转换料", "bcpType");
                rBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻右转换料", "bcpType");
                var tColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻上转换料", "colorExp");
                var bColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻下转换料", "colorExp");
                var lColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻左转换料", "colorExp");
                var rColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻右转换料", "colorExp");
                if (!isEmptyOrNull(tPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, tPrId, MicroDraw_genData_calcExp(mcflId, tPrExp, ObjId, xcxljgJson), tPrExp, MicroDraw_genData_calcExp(mcflId, tCntExp, ObjId, xcxljgJson), tCntExp, frameAngle, tBcpType, "上", MicroDraw_genData_calcExp(mcflId, tColorExp, ObjId, xcxljgJson), tColorExp, "固玻上转换料")
                }
                if (!isEmptyOrNull(bPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, bPrId, MicroDraw_genData_calcExp(mcflId, bPrExp, ObjId, xcxljgJson), bPrExp, MicroDraw_genData_calcExp(mcflId, bCntExp, ObjId, xcxljgJson), bCntExp, frameAngle, bBcpType, "下", MicroDraw_genData_calcExp(mcflId, bColorExp, ObjId, xcxljgJson), bColorExp, "固玻下转换料")
                }
                if (!isEmptyOrNull(lPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, lPrId, MicroDraw_genData_calcExp(mcflId, lPrExp, ObjId, xcxljgJson), lPrExp, MicroDraw_genData_calcExp(mcflId, lCntExp, ObjId, xcxljgJson), lCntExp, frameAngle, lBcpType, "左", MicroDraw_genData_calcExp(mcflId, lColorExp, ObjId, xcxljgJson), lColorExp, "固玻左转换料")
                }
                if (!isEmptyOrNull(rPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, rPrId, MicroDraw_genData_calcExp(mcflId, rPrExp, ObjId, xcxljgJson), rPrExp, MicroDraw_genData_calcExp(mcflId, rCntExp, ObjId, xcxljgJson), rCntExp, frameAngle, rBcpType, "右", MicroDraw_genData_calcExp(mcflId, rColorExp, ObjId, xcxljgJson), rColorExp, "固玻右转换料")
                }
            });
            $("#" + winId + " [mtype='" + mDrawFlag_Pkc + "'], #" + winId + " [mtype='" + mDrawFlag_Dkc + "']").each(function(i, obj) {
                var tem = "";
                var ObjId = obj.getAttribute("id");
                var mtype = obj.getAttribute("mtype");
                var tPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上扇", "prid");
                var bPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下扇", "prid");
                var lPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左扇", "prid");
                var rPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右扇", "prid");
                var tCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上扇", "cntExp");
                var bCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下扇", "cntExp");
                var lCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左扇", "cntExp");
                var rCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右扇", "cntExp");
                tem = obj.getAttribute("mfanpjstyle");
                var frameAngle;
                switch (tem) {
                case "45":
                    frameAngle = "45-45";
                    break;
                case "H":
                    frameAngle = "90-90";
                    break;
                case "V":
                    frameAngle = "90-90";
                    break
                }
                var tPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上扇", "exp");
                var bPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下扇", "exp");
                var lPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左扇", "exp");
                var rPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右扇", "exp");
                tBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上扇", "bcpType");
                bBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下扇", "bcpType");
                lBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左扇", "bcpType");
                rBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右扇", "bcpType");
                var tColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上扇", "colorExp");
                var bColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下扇", "colorExp");
                var lColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左扇", "colorExp");
                var rColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右扇", "colorExp");
                if (!isEmptyOrNull(tPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, tPrId, MicroDraw_genData_calcExp(mcflId, tPrExp, ObjId, xcxljgJson), tPrExp, MicroDraw_genData_calcExp(mcflId, tCntExp, ObjId, xcxljgJson), tCntExp, frameAngle, tBcpType, "上", MicroDraw_genData_calcExp(mcflId, tColorExp, ObjId, xcxljgJson), tColorExp, "上扇")
                }
                if (!isEmptyOrNull(bPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, bPrId, MicroDraw_genData_calcExp(mcflId, bPrExp, ObjId, xcxljgJson), bPrExp, MicroDraw_genData_calcExp(mcflId, bCntExp, ObjId, xcxljgJson), bCntExp, frameAngle, bBcpType, "下", MicroDraw_genData_calcExp(mcflId, bColorExp, ObjId, xcxljgJson), bColorExp, "下扇")
                }
                if (!isEmptyOrNull(lPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, lPrId, MicroDraw_genData_calcExp(mcflId, lPrExp, ObjId, xcxljgJson), lPrExp, MicroDraw_genData_calcExp(mcflId, lCntExp, ObjId, xcxljgJson), lCntExp, frameAngle, lBcpType, "左", MicroDraw_genData_calcExp(mcflId, lColorExp, ObjId, xcxljgJson), lColorExp, "左扇")
                }
                if (!isEmptyOrNull(rPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, rPrId, MicroDraw_genData_calcExp(mcflId, rPrExp, ObjId, xcxljgJson), rPrExp, MicroDraw_genData_calcExp(mcflId, rCntExp, ObjId, xcxljgJson), rCntExp, frameAngle, rBcpType, "右", MicroDraw_genData_calcExp(mcflId, rColorExp, ObjId, xcxljgJson), rColorExp, "右扇")
                }
                cpSeq = Number(cpSeq) + 1;
                if (mtype == mDrawFlag_Pkc) {
                    MicroDraw_genData_cp_addRow(cpDgId, Numx, ObjId, "扇", MicroDraw_genData_calcExp(mcflId, tPrExp, ObjId, xcxljgJson), tPrExp, MicroDraw_genData_calcExp(mcflId, lPrExp, ObjId, xcxljgJson), lPrExp, MicroDraw_genData_calcExp(mcflId, "CNT", ObjId, xcxljgJson), "CNT", "", "C" + cpSeq.toString())
                } else {
                    if (mtype == mDrawFlag_Dkc) {
                        MicroDraw_genData_cp_addRow(cpDgId, Numx, ObjId, "扇", MicroDraw_genData_calcExp(mcflId, tPrExp, ObjId, xcxljgJson), tPrExp, MicroDraw_genData_calcExp(mcflId, lPrExp, ObjId, xcxljgJson), lPrExp, MicroDraw_genData_calcExp(mcflId, "2*CNT", ObjId, xcxljgJson), "2*CNT", "", "C" + cpSeq.toString())
                    }
                }
                tPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇左上角码", "prid");
                bPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇右上角码", "prid");
                lPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇右下角码", "prid");
                rPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇左下角码", "prid");
                var tCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇左上角码", "cntExp");
                var bCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇右上角码", "cntExp");
                var lCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇右下角码", "cntExp");
                var rCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇左下角码", "cntExp");
                frameAngle = "";
                tPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇左上角码", "exp");
                bPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇右上角码", "exp");
                lPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇右下角码", "exp");
                rPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇左下角码", "exp");
                tBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇左上角码", "bcpType");
                bBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇右上角码", "bcpType");
                lBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇右下角码", "bcpType");
                rBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇左下角码", "bcpType");
                var tColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇左上角码", "colorExp");
                var bColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇右上角码", "colorExp");
                var lColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇右下角码", "colorExp");
                var rColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇左下角码", "colorExp");
                if (!isEmptyOrNull(tPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, tPrId, MicroDraw_genData_calcExp(mcflId, tPrExp, ObjId, xcxljgJson), tPrExp, MicroDraw_genData_calcExp(mcflId, tCntExp, ObjId, xcxljgJson), tCntExp, frameAngle, tBcpType, "左上", MicroDraw_genData_calcExp(mcflId, tColorExp, ObjId, xcxljgJson), tColorExp, "扇左上角码")
                }
                if (!isEmptyOrNull(bPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, bPrId, MicroDraw_genData_calcExp(mcflId, bPrExp, ObjId, xcxljgJson), bPrExp, MicroDraw_genData_calcExp(mcflId, bCntExp, ObjId, xcxljgJson), bCntExp, frameAngle, bBcpType, "右上", MicroDraw_genData_calcExp(mcflId, bColorExp, ObjId, xcxljgJson), bColorExp, "扇右上角码")
                }
                if (!isEmptyOrNull(lPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, lPrId, MicroDraw_genData_calcExp(mcflId, lPrExp, ObjId, xcxljgJson), lPrExp, MicroDraw_genData_calcExp(mcflId, lCntExp, ObjId, xcxljgJson), lCntExp, frameAngle, lBcpType, "右下", MicroDraw_genData_calcExp(mcflId, lColorExp, ObjId, xcxljgJson), lColorExp, "扇右下角码")
                }
                if (!isEmptyOrNull(rPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, rPrId, MicroDraw_genData_calcExp(mcflId, rPrExp, ObjId, xcxljgJson), rPrExp, MicroDraw_genData_calcExp(mcflId, rCntExp, ObjId, xcxljgJson), rCntExp, frameAngle, rBcpType, "左下", MicroDraw_genData_calcExp(mcflId, rColorExp, ObjId, xcxljgJson), rColorExp, "扇左下角码")
                }
                tPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇上转换料", "prid");
                bPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇下转换料", "prid");
                lPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇左转换料", "prid");
                rPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇右转换料", "prid");
                var tCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇上转换料", "cntExp");
                var bCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇下转换料", "cntExp");
                var lCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇左转换料", "cntExp");
                var rCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇右转换料", "cntExp");
                frameAngle = "45-45";
                tPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇上转换料", "exp");
                bPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇下转换料", "exp");
                lPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇左转换料", "exp");
                rPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇右转换料", "exp");
                tBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇上转换料", "bcpType");
                bBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇下转换料", "bcpType");
                lBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇左转换料", "bcpType");
                rBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇右转换料", "bcpType");
                var tColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇上转换料", "colorExp");
                var bColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇下转换料", "colorExp");
                var lColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇左转换料", "colorExp");
                var rColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇右转换料", "colorExp");
                if (!isEmptyOrNull(tPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, tPrId, MicroDraw_genData_calcExp(mcflId, tPrExp, ObjId, xcxljgJson), tPrExp, MicroDraw_genData_calcExp(mcflId, tCntExp, ObjId, xcxljgJson), tCntExp, frameAngle, tBcpType, "上", MicroDraw_genData_calcExp(mcflId, tColorExp, ObjId, xcxljgJson), tColorExp, "扇上转换料")
                }
                if (!isEmptyOrNull(bPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, bPrId, MicroDraw_genData_calcExp(mcflId, bPrExp, ObjId, xcxljgJson), bPrExp, MicroDraw_genData_calcExp(mcflId, bCntExp, ObjId, xcxljgJson), bCntExp, frameAngle, bBcpType, "下", MicroDraw_genData_calcExp(mcflId, bColorExp, ObjId, xcxljgJson), bColorExp, "扇下转换料")
                }
                if (!isEmptyOrNull(lPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, lPrId, MicroDraw_genData_calcExp(mcflId, lPrExp, ObjId, xcxljgJson), lPrExp, MicroDraw_genData_calcExp(mcflId, lCntExp, ObjId, xcxljgJson), lCntExp, frameAngle, lBcpType, "左", MicroDraw_genData_calcExp(mcflId, lColorExp, ObjId, xcxljgJson), lColorExp, "扇左转换料")
                }
                if (!isEmptyOrNull(rPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, rPrId, MicroDraw_genData_calcExp(mcflId, rPrExp, ObjId, xcxljgJson), rPrExp, MicroDraw_genData_calcExp(mcflId, rCntExp, ObjId, xcxljgJson), rCntExp, frameAngle, rBcpType, "右", MicroDraw_genData_calcExp(mcflId, rColorExp, ObjId, xcxljgJson), rColorExp, "扇右转换料")
                }
                if (obj.getAttribute("myt") == "Y" || obj.getAttribute("mfanhasyt") == "Y") {
                    tPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇玻上压线", "prid");
                    bPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇玻下压线", "prid");
                    lPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇玻左压线", "prid");
                    rPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇玻右压线", "prid");
                    var tCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇玻上压线", "cntExp");
                    var bCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇玻下压线", "cntExp");
                    var lCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇玻左压线", "cntExp");
                    var rCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇玻右压线", "cntExp");
                    if (mtype == mDrawFlag_Pkc) {
                        tem = obj.getAttribute("mytpjstyle")
                    } else {
                        tem = obj.getAttribute("mfanytpjstyle")
                    }
                    frameAngle;
                    switch (tem) {
                    case "45":
                        frameAngle = "45-45";
                        break;
                    case "H":
                        frameAngle = "90-90";
                        break;
                    case "V":
                        frameAngle = "90-90";
                        break
                    }
                    tPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇玻上压线", "exp");
                    bPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇玻下压线", "exp");
                    lPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇玻左压线", "exp");
                    rPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇玻右压线", "exp");
                    tBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇玻上压线", "bcpType");
                    bBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇玻下压线", "bcpType");
                    lBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇玻左压线", "bcpType");
                    rBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇玻右压线", "bcpType");
                    var tColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇玻上压线", "colorExp");
                    var bColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇玻下压线", "colorExp");
                    var lColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇玻左压线", "colorExp");
                    var rColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇玻右压线", "colorExp");
                    if (!isEmptyOrNull(tPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, tPrId, MicroDraw_genData_calcExp(mcflId, tPrExp, ObjId, xcxljgJson), tPrExp, MicroDraw_genData_calcExp(mcflId, tCntExp, ObjId, xcxljgJson), tCntExp, frameAngle, tBcpType, "上", MicroDraw_genData_calcExp(mcflId, tColorExp, ObjId, xcxljgJson), tColorExp, "扇玻上压线")
                    }
                    if (!isEmptyOrNull(bPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, bPrId, MicroDraw_genData_calcExp(mcflId, bPrExp, ObjId, xcxljgJson), bPrExp, MicroDraw_genData_calcExp(mcflId, bCntExp, ObjId, xcxljgJson), bCntExp, frameAngle, bBcpType, "下", MicroDraw_genData_calcExp(mcflId, bColorExp, ObjId, xcxljgJson), bColorExp, "扇玻下压线")
                    }
                    if (!isEmptyOrNull(lPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, lPrId, MicroDraw_genData_calcExp(mcflId, lPrExp, ObjId, xcxljgJson), lPrExp, MicroDraw_genData_calcExp(mcflId, lCntExp, ObjId, xcxljgJson), lCntExp, frameAngle, lBcpType, "左", MicroDraw_genData_calcExp(mcflId, lColorExp, ObjId, xcxljgJson), lColorExp, "扇玻左压线")
                    }
                    if (!isEmptyOrNull(rPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, rPrId, MicroDraw_genData_calcExp(mcflId, rPrExp, ObjId, xcxljgJson), rPrExp, MicroDraw_genData_calcExp(mcflId, rCntExp, ObjId, xcxljgJson), rCntExp, frameAngle, rBcpType, "右", MicroDraw_genData_calcExp(mcflId, rColorExp, ObjId, xcxljgJson), rColorExp, "扇玻右压线")
                    }
                }
                tPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上纱", "prid");
                bPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下纱", "prid");
                lPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左纱", "prid");
                rPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右纱", "prid");
                var tCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上纱", "cntExp");
                var bCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下纱", "cntExp");
                var lCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左纱", "cntExp");
                var rCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右纱", "cntExp");
                frameAngle = "45-45";
                tPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上纱", "exp");
                bPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下纱", "exp");
                lPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左纱", "exp");
                rPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右纱", "exp");
                tBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上纱", "bcpType");
                bBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下纱", "bcpType");
                lBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左纱", "bcpType");
                rBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右纱", "bcpType");
                var tColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上纱", "colorExp");
                var bColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下纱", "colorExp");
                var lColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左纱", "colorExp");
                var rColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右纱", "colorExp");
                if (!isEmptyOrNull(tPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, tPrId, MicroDraw_genData_calcExp(mcflId, tPrExp, ObjId, xcxljgJson), tPrExp, MicroDraw_genData_calcExp(mcflId, tCntExp, ObjId, xcxljgJson), tCntExp, frameAngle, tBcpType, "上", MicroDraw_genData_calcExp(mcflId, tColorExp, ObjId, xcxljgJson), tColorExp, "上纱")
                }
                if (!isEmptyOrNull(bPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, bPrId, MicroDraw_genData_calcExp(mcflId, bPrExp, ObjId, xcxljgJson), bPrExp, MicroDraw_genData_calcExp(mcflId, bCntExp, ObjId, xcxljgJson), bCntExp, frameAngle, bBcpType, "下", MicroDraw_genData_calcExp(mcflId, bColorExp, ObjId, xcxljgJson), bColorExp, "下纱")
                }
                if (!isEmptyOrNull(lPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, lPrId, MicroDraw_genData_calcExp(mcflId, lPrExp, ObjId, xcxljgJson), lPrExp, MicroDraw_genData_calcExp(mcflId, lCntExp, ObjId, xcxljgJson), lCntExp, frameAngle, lBcpType, "左", MicroDraw_genData_calcExp(mcflId, lColorExp, ObjId, xcxljgJson), lColorExp, "左纱")
                }
                if (!isEmptyOrNull(rPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, rPrId, MicroDraw_genData_calcExp(mcflId, rPrExp, ObjId, xcxljgJson), rPrExp, MicroDraw_genData_calcExp(mcflId, rCntExp, ObjId, xcxljgJson), rCntExp, frameAngle, rBcpType, "右", MicroDraw_genData_calcExp(mcflId, rColorExp, ObjId, xcxljgJson), rColorExp, "右纱")
                }
                cpSeq = Number(cpSeq) + 1;
                MicroDraw_genData_cp_addRow(cpDgId, Numx, ObjId, "纱扇", MicroDraw_genData_calcExp(mcflId, tPrExp, ObjId, xcxljgJson), tPrExp, MicroDraw_genData_calcExp(mcflId, lPrExp, ObjId, xcxljgJson), lPrExp, MicroDraw_genData_calcExp(mcflId, '( OT == "1扇1纱") ? CNT : ( OT == "2扇2纱" ) ? 2*CNT : 0', ObjId, xcxljgJson), '( OT == "1扇1纱") ? CNT : ( OT == "2扇2纱" ) ? 2*CNT : 0', "", "C" + cpSeq.toString());
                if (mtype == mDrawFlag_Dkc) {
                    var ObjId = obj.getAttribute("id");
                    var ObjPrId = obj.getAttribute("mprid");
                    var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "假中挺", "prid");
                    if (!isEmptyOrNull(ObjPrId)) {
                        PrId = ObjPrId
                    }
                    var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "假中挺", "exp");
                    bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "假中挺", "bcpType");
                    var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "假中挺", "cntExp");
                    var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "假中挺", "colorExp");
                    if (!isEmptyOrNull(PrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", bcpType, "竖假中挺", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, "假中挺")
                    }
                }
                if (mtype == mDrawFlag_Dkc) {
                    var ObjId = obj.getAttribute("id");
                    var ObjPrId = obj.getAttribute("mprid");
                    var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "纱扇假中挺", "prid");
                    if (!isEmptyOrNull(ObjPrId)) {
                        PrId = ObjPrId
                    }
                    var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "纱扇假中挺", "exp");
                    bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "纱扇假中挺", "bcpType");
                    var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "纱扇假中挺", "cntExp");
                    var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "纱扇假中挺", "colorExp");
                    if (!isEmptyOrNull(PrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", bcpType, "竖纱扇假中挺", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, "纱扇假中挺")
                    }
                }
            });
            $("#" + winId + " [mtype='" + mDrawFlag_Glass + "']").each(function(i, obj) {
                var tem = "";
                var ObjId;
                if (mtype == mDrawFlag_Win) {
                    ObjId = obj.getAttribute("id")
                } else {
                    if (mtype == mDrawFlag_Custom_arc) {
                        ObjId = winId
                    }
                }
                var Glass = obj.getAttribute("mglass");
                if (isEmptyOrNull(Glass)) {
                    Glass = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "MGG", "prid")
                }
                if (Glass.substr(0, 1) == '"') {
                    Glass = Glass.substr(1)
                }
                if (Glass.substr(Glass.length - 1, 1) == '"') {
                    Glass = Glass.substr(0, Glass.length - 1)
                }
                var WExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "固玻宽度", "exp");
                var HExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "固玻高度", "exp");
                if (arcGlassRectSizes.length > 0 && arcGlassRectSizes.length >= i) {
                    WExp = arcGlassRectSizes[i].W;
                    HExp = arcGlassRectSizes[i].H
                }
                bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "固玻宽度", "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "固玻宽度", "cntExp");
                var glExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "固玻宽度", "glassExp");
                var glassExp = "";
                var glassGy = "";
                var glassGyExp = "";
                var glassDb = "";
                var glassDbExp = "";
                var glassMb = "";
                var glassMbExp = "";
                var glExpArr = glExp.split(",");
                glassExp = glExpArr[0];
                glassGyExp = glExpArr[1];
                glassDbExp = glExpArr[2];
                glassMbExp = glExpArr[3];
                if (!isEmptyOrNull(glExp)) {
                    Glass = MicroDraw_genData_calcExp(mcflId, glassExp, ObjId, xcxljgJson);
                    glassGy = MicroDraw_genData_calcExp(mcflId, glassGyExp, ObjId, xcxljgJson);
                    glassDb = MicroDraw_genData_calcExp(mcflId, glassDbExp, ObjId, xcxljgJson);
                    glassMb = MicroDraw_genData_calcExp(mcflId, glassMbExp, ObjId, xcxljgJson)
                }
                if (!isEmptyOrNull(Glass)) {
                    var node_txt = "";
                    var glassFlag = "";
                    if (mtype == mDrawFlag_Win) {
                        node_txt = $("#" + ObjId + "_txt")[0];
                        if (!isEmptyOrNull(node_txt)) {
                            glassFlag = node_txt.textContent
                        }
                    } else {
                        if (mtype == mDrawFlag_Custom_arc) {
                            var textObj = $("#" + ObjId).find("[mtype=" + mDrawFlag_Glass + "]").eq(i).find("[id*=_txt]");
                            glassFlag = textObj.text()
                        }
                    }
                    var glAreaExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "固玻宽度", "glAreaExp");
                    var W = MicroDraw_genData_calcExp(mcflId, WExp, ObjId, xcxljgJson);
                    var H = MicroDraw_genData_calcExp(mcflId, HExp, ObjId, xcxljgJson);
                    var cnt = MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson);
                    var glArea = MicroDraw_genData_calcExp(mcflId, glAreaExp, ObjId, xcxljgJson);
                    if ($.Micro.IsEmpty(glArea)) {
                        glArea = (Number(W) / 1000 * Number(H) / 1000 * cnt)
                    }
                    MicroDraw_genData_gl_addRow(mcflId, xcxljgJson, glDgId, Numx, ObjId, Glass, W, WExp, H, HExp, cnt, cntExp, bcpType, "", glassFlag, "固玻宽度", glassExp, glassGy, glassGyExp, glassDb, glassDbExp, glassMb, glassMbExp, glArea, glAreaExp)
                }
            });
            $("#" + winId + " [mtype='" + mDrawFlag_Pkc + "'], #" + winId + " [mtype='" + mDrawFlag_Dkc + "']").each(function(i, obj) {
                var tem = "";
                var ObjId = obj.getAttribute("id");
                var Glass = obj.getAttribute("mglass");
                if (isEmptyOrNull(Glass)) {
                    Glass = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "MGG", "prid")
                }
                var WExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "扇玻宽度", "exp");
                var HExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "扇玻高度", "exp");
                bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "扇玻宽度", "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "扇玻宽度", "cntExp");
                var glExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "扇玻宽度", "glassExp");
                var glassExp = "";
                var glassGy = "";
                var glassGyExp = "";
                var glassDb = "";
                var glassDbExp = "";
                var glassMb = "";
                var glassMbExp = "";
                var glExpArr = glExp.split(",");
                glassExp = glExpArr[0];
                glassGyExp = glExpArr[1];
                glassDbExp = glExpArr[2];
                glassMbExp = glExpArr[3];
                if (!isEmptyOrNull(glExp)) {
                    Glass = MicroDraw_genData_calcExp(mcflId, glassExp, ObjId, xcxljgJson);
                    glassGy = MicroDraw_genData_calcExp(mcflId, glassGyExp, ObjId, xcxljgJson);
                    glassDb = MicroDraw_genData_calcExp(mcflId, glassDbExp, ObjId, xcxljgJson);
                    glassMb = MicroDraw_genData_calcExp(mcflId, glassMbExp, ObjId, xcxljgJson)
                }
                if (!isEmptyOrNull(Glass)) {
                    var node_txt = $("#" + ObjId + "_txt")[0];
                    var glassFlag = "";
                    if (!isEmptyOrNull(node_txt)) {
                        glassFlag = node_txt.textContent
                    }
                    var glAreaExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "扇玻宽度", "glAreaExp");
                    var W = MicroDraw_genData_calcExp(mcflId, WExp, ObjId, xcxljgJson);
                    var H = MicroDraw_genData_calcExp(mcflId, HExp, ObjId, xcxljgJson);
                    var cnt = MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson);
                    var glArea = MicroDraw_genData_calcExp(mcflId, glAreaExp, ObjId, xcxljgJson);
                    if ($.Micro.IsEmpty(glArea)) {
                        glArea = (Number(W) / 1000 * Number(H) / 1000 * cnt)
                    }
                    MicroDraw_genData_gl_addRow(mcflId, xcxljgJson, glDgId, Numx, ObjId, Glass, W, WExp, H, HExp, cnt, cntExp, bcpType, "", glassFlag, "扇玻宽度", glassExp, glassGy, glassGyExp, glassDb, glassDbExp, glassMb, glassMbExp, glArea, glAreaExp)
                }
                var tem = "";
                var ObjId = obj.getAttribute("id");
                var sw = obj.getAttribute("msa");
                if (isEmptyOrNull(sw)) {
                    sw = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "MSA", "prid")
                }
                if (sw.substr(0, 1) == '"') {
                    sw = sw.substr(1)
                }
                if (sw.substr(sw.length - 1, 1) == '"') {
                    sw = sw.substr(0, sw.length - 1)
                }
                var WExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网宽度", "exp");
                var HExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网高度", "exp");
                bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网宽度", "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网宽度", "cntExp");
                var glExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网宽度", "glassExp");
                var glassExp = "";
                var glassGy = "";
                var glassGyExp = '"--"';
                var glassDb = "";
                var glassDbExp = '"--"';
                var glassMb = "";
                var glassMbExp = '"--"';
                var glExpArr = glExp.split(",");
                glassExp = glExpArr[0];
                if (!isEmptyOrNull(glExp)) {
                    sw = MicroDraw_genData_calcExp(mcflId, glassExp, ObjId, xcxljgJson)
                }
                if (!isEmptyOrNull(sw)) {
                    var node_txt = $("#" + ObjId + "_txt")[0];
                    var glassFlag = "";
                    if (!isEmptyOrNull(node_txt)) {
                        glassFlag = node_txt.textContent
                    }
                    var glAreaExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网宽度", "glAreaExp");
                    var W = MicroDraw_genData_calcExp(mcflId, WExp, ObjId, xcxljgJson);
                    var H = MicroDraw_genData_calcExp(mcflId, HExp, ObjId, xcxljgJson);
                    var cnt = MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson);
                    var glArea = MicroDraw_genData_calcExp(mcflId, glAreaExp, ObjId, xcxljgJson);
                    if ($.Micro.IsEmpty(glArea)) {
                        glArea = (Number(W) / 1000 * Number(H) / 1000 * cnt)
                    }
                    MicroDraw_genData_gl_addRow(mcflId, xcxljgJson, glDgId, Numx, ObjId, sw, W, WExp, H, HExp, cnt, cntExp, bcpType, "", glassFlag, "纱网宽度", glassExp, glassGy, glassGyExp, glassDb, glassDbExp, glassMb, glassMbExp, glArea, glAreaExp)
                }
            });
            $.each(xcxljgJson,
            function(k, o) {
                if (o.type == "F") {
                    var temCnt = 0;
                    var Cnt = 0;
                    if (o.prid.length > 0) {
                        if ($(nodeFrame).length > 0) {
                            var obj = nodeFrame;
                            temCnt = Number(MicroDraw_genData_calcExp(mcflId, o.cntExp, obj.getAttribute("id"), xcxljgJson));
                            Cnt = Number(Cnt) + Number(temCnt)
                        }
                        $("#" + winId + " [mtype='" + mDrawFlag_TingH + "']").each(function(i, obj) {
                            temCnt = Number(MicroDraw_genData_calcExp(mcflId, o.cntExp, obj.getAttribute("id"), xcxljgJson));
                            Cnt = Number(Cnt) + Number(temCnt)
                        });
                        $("#" + winId + " [mtype='" + mDrawFlag_TingV + "']").each(function(i, obj) {
                            temCnt = Number(MicroDraw_genData_calcExp(mcflId, o.cntExp, obj.getAttribute("id"), xcxljgJson));
                            Cnt = Number(Cnt) + Number(temCnt)
                        });
                        $("#" + winId + " [mtype='" + mDrawFlag_Glass + "']").each(function(i, obj) {
                            var tobj;
                            if (mtype == mDrawFlag_Win) {
                                tobj = obj
                            } else {
                                if (mtype == mDrawFlag_Custom_arc) {
                                    tobj = $("#" + winId)[0]
                                }
                            }
                            temCnt = Number(MicroDraw_genData_calcExp(mcflId, o.cntExp, tobj.getAttribute("id"), xcxljgJson));
                            Cnt = Number(Cnt) + Number(temCnt)
                        });
                        $("#" + winId + " [mtype='" + mDrawFlag_Pkc + "']").each(function(i, obj) {
                            temCnt = Number(MicroDraw_genData_calcExp(mcflId, o.cntExp, obj.getAttribute("id"), xcxljgJson));
                            Cnt = Number(Cnt) + Number(temCnt)
                        });
                        $("#" + winId + " [mtype='" + mDrawFlag_Dkc + "']").each(function(i, obj) {
                            temCnt = Number(MicroDraw_genData_calcExp(mcflId, o.cntExp, obj.getAttribute("id"), xcxljgJson));
                            Cnt = Number(Cnt) + Number(temCnt)
                        });
                        var CntExp2 = o.cntExp2;
                        if (!isEmptyOrNull(CntExp2)) {
                            CntExp2 = replaceAll(CntExp2, " RES ", Cnt.toString());
                            Cnt = Number(MicroDraw_genData_calcExp(0, CntExp2, "", ""))
                        }
                        MicroDraw_genData_wj_addRow(wjDgId, Numx, winId, o.prid, Cnt, o.cntExp, o.bcpType, o.usePlace, "", o.cntExp2, "1", o.bgyOptExp)
                    }
                }
            });
            var getCombWinIDs = MicroDraw_getCombWinIDs("all");
            var Wins = getCombWinIDs.Wins;
            if ($.inArray(winId, Wins) >= 0) {
                isComboWin = true
            } else {
                if (isComboArcWin) {
                    isComboWin = true
                } else {
                    isComboWin = false
                }
            }
            if (!isComboWin || (isComboWin && ComboWinCnt == 0)) {
                $.each(xcxljgJson,
                function(k, o) {
                    if (o.type == "B") {
                        var temMoney = 0;
                        var Money = 0;
                        var temBjArea = 0;
                        var temBjPrice = 0;
                        var bjArea = 0;
                        var bjPrice = 0;
                        var temDesc = "";
                        var Desc = "";
                        var bjExp = o.bjExp;
                        var bjDescExp = o.bjDescExp;
                        var CntExp2 = o.cntExp2;
                        var bjAreaExp = o.bjAreaExp;
                        var bjPriceExp = o.bjPriceExp;
                        if (isEmptyOrNull(bjExp)) {
                            bjExp = "0"
                        }
                        if (isEmptyOrNull(bjDescExp)) {
                            bjDescExp = '""'
                        }
                        if (isEmptyOrNull(CntExp2)) {
                            CntExp2 = ""
                        }
                        if (isEmptyOrNull(bjAreaExp)) {
                            bjAreaExp = ""
                        }
                        if (isEmptyOrNull(bjPriceExp)) {
                            bjPriceExp = ""
                        }
                        if ($(nodeFrame).length > 0) {
                            var obj = nodeFrame;
                            temMoney = Number(MicroDraw_genData_calcExp(mcflId, bjExp, obj.getAttribute("id"), xcxljgJson));
                            Money = Number(Money) + Number(temMoney);
                            temBjArea = Number(MicroDraw_genData_calcExp(mcflId, bjAreaExp, obj.getAttribute("id"), xcxljgJson));
                            bjArea = Number(bjArea) + Number(temBjArea);
                            temBjPrice = Number(MicroDraw_genData_calcExp(mcflId, bjPriceExp, obj.getAttribute("id"), xcxljgJson));
                            bjPrice = Number(bjPrice) + Number(temBjPrice);
                            temDesc = MicroDraw_genData_calcExp(mcflId, bjDescExp, obj.getAttribute("id"), xcxljgJson);
                            Desc = Desc + " " + temDesc
                        }
                        MicroDraw_genData_bj_addRow(bjDgId, Numx, winId, o.name, bjExp, Money, "", bjDescExp, Desc, o.bjType, CntExp2, o.CalcFlag, bjAreaExp, bjArea, bjPriceExp, bjPrice, 100)
                    }
                });
                setXCXLDiscountFlag(xcxlId);
                if (isComboWin) {
                    ComboWinCnt++
                }
            }
            $.each(xcxljgJson,
            function(k, o) {
                if (o.type == "L") {
                    var temCnt = 0;
                    var Cnt = 0;
                    var CntExp = o.cntExp;
                    if (isEmptyOrNull(CntExp)) {
                        CntExp = "0"
                    }
                    if ($(nodeFrame).length > 0) {
                        var obj = nodeFrame;
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    }
                    MicroDraw_genData_label_addRow(labelDgId, Numx, winId, o.name, CntExp, Cnt, "")
                }
            });
            if (!isComboWin || (isComboWin && ComboWinCntCost == 0)) {
                $.each(xcxljgJson,
                function(k, o) {
                    if (o.type == "A") {
                        var temMoney = 0;
                        var Money = 0;
                        var exp = o.EXP;
                        var memo = o.memo;
                        if (isEmptyOrNull(exp)) {
                            exp = "0"
                        }
                        if ($(nodeFrame).length > 0) {
                            var obj = nodeFrame;
                            temMoney = Number(MicroDraw_genData_calcExp(mcflId, exp, obj.getAttribute("id"), xcxljgJson));
                            Money = Number(Money) + Number(temMoney)
                        }
                        MicroDraw_genData_cost_addRow(costDgId, Numx, winId, o.name, exp, Money, memo)
                    }
                });
                if (isComboWin) {
                    ComboWinCntCost++
                }
            }
            var mxList = "";
            var flagList = "";
            var subList = "";
            var mxArr;
            var flagArr;
            var subArr;
            $("#" + winId + " [mtype='" + mDrawFlag_TingV + "']").each(function(i, obj) {
                var ObjId = obj.getAttribute("id");
                var ObjPrId = obj.getAttribute("mprid");
                var mbreakframe = obj.getAttribute("mbreakframe");
                var mx = obj.getAttribute("mx");
                var mflag = obj.getAttribute("mflag");
                var mtl = obj.getAttribute("mtl");
                var mtr = obj.getAttribute("mtr");
                if (Number(mtl) == 0) {
                    mtl = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid") / 2)
                }
                if (Number(mtr) == 0) {
                    mtr = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid") / 2)
                }
                var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "竖挺", "prid");
                if (!isEmptyOrNull(ObjPrId)) {
                    PrId = ObjPrId
                }
                if (mbreakframe == "Y") {
                    mxList = mxList + ";" + mx;
                    flagList = flagList + ";" + mflag;
                    subList = subList + ";" + mtl.toString() + "," + mtr.toString()
                }
            });
            if (!isEmptyOrNull(mxList)) {
                mxList = "0;" + mxList.substr(1);
                flagList = "0;" + flagList.substr(1);
                var kwWidth = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "框宽度", "prid");
                var winFlag = $("#" + winId)[0].getAttribute("mwin");
                mxArr = mxList.split(";");
                flagArr = flagList.split(";");
                subArr = subList.split(";");
                var frameId = $("#" + winId + " [mtype='" + mDrawFlag_FrameRect + "']")[0].getAttribute("id");
                var topRow = new Array();
                var bottomRow = new Array();
                var topIdx = new Array();
                var bottomIdx = new Array();
                var rows = $("#" + mDrawPrProperty).datagrid("getRows");
                $.each(rows,
                function(i, row) {
                    if (row.ObjId == frameId && row.Memo == "上") {
                        topRow.push(row);
                        topIdx.push(i)
                    }
                    if (row.ObjId == frameId && row.Memo == "下") {
                        bottomRow.push(row);
                        bottomIdx.push(i)
                    }
                });
                var temStr = "";
                for (var i = 0; i < mxArr.length; i++) {
                    for (j = i + 1; j < mxArr.length; j++) {
                        if (Number(mxArr[j]) < Number(mxArr[i])) {
                            temStr = mxArr[i];
                            mxArr[i] = mxArr[j];
                            mxArr[j] = temStr;
                            temStr = flagArr[i];
                            flagArr[i] = flagArr[j];
                            flagArr[j] = temStr;
                            temStr = subArr[i];
                            subArr[i] = subArr[j];
                            subArr[j] = temStr
                        }
                    }
                }
                var frameWidth = $("#" + frameId)[0].getAttribute("mwidth");
                for (var i = 1; i < mxArr.length; i++) {
                    var leftSub = "";
                    var rightSub = "";
                    var newLen = 0;
                    var newLenExp = "";
                    var tingSubArr = subArr[i].split(",");
                    var lSub = tingSubArr[0];
                    var rSub = tingSubArr[1];
                    var preTingSubArr = subArr[i - 1].split(",");
                    var preLSub = preTingSubArr[0];
                    var preRSub = preTingSubArr[1];
                    if (i == 1) {
                        var htingExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "横挺", "exp").toString();
                        var kwWidth = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "框宽度", "prid");
                        var tingWidth = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid");
                        var caoShen = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "框槽深度", "prid");
                        var framePjStyle = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "框拼接方式", "prid");
                        var rightSub = "";
                        if (Number(lSub) != 0) {
                            rightSub = lSub
                        } else {
                            rightSub = Number(tingWidth) / 2
                        }
                        var NKW_DK = "( " + winFlag + "." + flagArr[i] + " - " + flagArr[i - 1] + " - " + kwWidth.toString() + " - " + rightSub.toString() + " )";
                        htingExp = replaceAll(htingExp, "NKW", NKW_DK);
                        htingExp = replaceAll(htingExp, "LID", '""');
                        htingExp = replaceAll(htingExp, "RID", '"RID_DEF"');
                        if (framePjStyle == "45" || framePjStyle == "H") {
                            htingExp = htingExp + " + " + (Number(kwWidth) - Number(caoShen)).toString()
                        }
                        newLenExp = htingExp
                    } else {
                        var htingExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "横挺", "exp").toString();
                        var kwWidth = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "框宽度", "prid");
                        var tingWidth = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid");
                        var leftSub = "";
                        if (Number(preRSub) != 0) {
                            leftSub = preRSub
                        } else {
                            leftSub = Number(tingWidth) / 2
                        }
                        var rightSub = "";
                        if (Number(lSub) != 0) {
                            rightSub = lSub
                        } else {
                            rightSub = Number(tingWidth) / 2
                        }
                        var NKW_DK = "( " + winFlag + "." + flagArr[i] + " - " + winFlag + "." + flagArr[i - 1] + " - " + leftSub.toString() + " - " + rightSub.toString() + " )";
                        htingExp = replaceAll(htingExp, "NKW", NKW_DK);
                        htingExp = replaceAll(htingExp, "LID", '"LID_DEF"');
                        htingExp = replaceAll(htingExp, "RID", '"RID_DEF"');
                        newLenExp = htingExp
                    }
                    var tBreakPrKind = "上框";
                    var bBreakPrKind = "下框";
                    $.each(topRow,
                    function(x, topObjrow) {
                        $.each(xcxljgJson,
                        function(k, fcObj) {
                            var trowAngle = topObjrow.Angle.split("-");
                            var trowAngleStr = trowAngle[0] + "-90";
                            if (i > 1) {
                                trowAngleStr = "90-90"
                            }
                            if (fcObj.type == "P" && fcObj.name == tBreakPrKind && fcObj.bmain.toString() == "true" && fcObj.prid == topObjrow.ProductId) {
                                $("#" + mDrawPrProperty).datagrid("insertRow", {
                                    index: $("#" + mDrawPrProperty).datagrid("getRows").length,
                                    row: {
                                        Numx: topObjrow.Numx,
                                        ObjId: topObjrow.ObjId,
                                        ProductId: topObjrow.ProductId,
                                        Len: newLen,
                                        LenExp: newLenExp,
                                        Cnt: topObjrow.Cnt,
                                        CntExp: topObjrow.CntExp,
                                        Angle: trowAngleStr,
                                        BcpType: topObjrow.BcpType,
                                        Memo: topObjrow.Memo,
                                        color: topObjrow.color,
                                        colorExp: topObjrow.colorExp,
                                        xcxljgid: ($.Micro.IsEmpty(topObjrow.xcxljgid) ? 0 : topObjrow.xcxljgid)
                                    }
                                })
                            } else {
                                if (fcObj.type == "P" && fcObj.name == tBreakPrKind && fcObj.bmain.toString() == "false" && fcObj.prid == topObjrow.ProductId) {
                                    if (!isNaN(topObjrow.LenExp)) {
                                        $("#" + mDrawPrProperty).datagrid("insertRow", {
                                            index: $("#" + mDrawPrProperty).datagrid("getRows").length,
                                            row: {
                                                Numx: topObjrow.Numx,
                                                ObjId: topObjrow.ObjId,
                                                ProductId: fcObj.prid,
                                                Len: topObjrow.LenExp,
                                                LenExp: topObjrow.LenExp,
                                                Cnt: MicroDraw_genData_calcExp(mcflId, fcObj.cntExp, topObjrow.ObjId, xcxljgJson, false),
                                                CntExp: fcObj.cntExp,
                                                Angle: trowAngleStr,
                                                BcpType: fcObj.bcpType,
                                                Memo: topObjrow.Memo,
                                                color: MicroDraw_genData_calcExp(mcflId, fcObj.colorExp, topObjrow.ObjId, xcxljgJson, false),
                                                colorExp: fcObj.colorExp,
                                                xcxljgid: ($.Micro.IsEmpty(fcObj.xcxljgid) ? 0 : fcObj.xcxljgid)
                                            }
                                        })
                                    } else {
                                        $("#" + mDrawPrProperty).datagrid("insertRow", {
                                            index: $("#" + mDrawPrProperty).datagrid("getRows").length,
                                            row: {
                                                Numx: topObjrow.Numx,
                                                ObjId: topObjrow.ObjId,
                                                ProductId: fcObj.prid,
                                                Len: newLen,
                                                LenExp: newLenExp,
                                                Cnt: MicroDraw_genData_calcExp(mcflId, fcObj.cntExp, topObjrow.ObjId, xcxljgJson, false),
                                                CntExp: fcObj.cntExp,
                                                Angle: trowAngleStr,
                                                BcpType: fcObj.bcpType,
                                                Memo: topObjrow.Memo,
                                                color: MicroDraw_genData_calcExp(mcflId, fcObj.colorExp, topObjrow.ObjId, xcxljgJson, false),
                                                colorExp: fcObj.colorExp,
                                                xcxljgid: ($.Micro.IsEmpty(fcObj.xcxljgid) ? 0 : fcObj.xcxljgid)
                                            }
                                        })
                                    }
                                }
                            }
                        })
                    });
                    $.each(bottomRow,
                    function(x, botObjrow) {
                        $.each(xcxljgJson,
                        function(k, fcObj) {
                            var browAngle = botObjrow.Angle.split("-");
                            var browAngleStr = "90-" + browAngle[0];
                            if (i > 1) {
                                browAngleStr = "90-90"
                            }
                            if (fcObj.type == "P" && fcObj.name == bBreakPrKind && fcObj.bmain.toString() == "true" && fcObj.prid == botObjrow.ProductId) {
                                $("#" + mDrawPrProperty).datagrid("insertRow", {
                                    index: $("#" + mDrawPrProperty).datagrid("getRows").length,
                                    row: {
                                        Numx: botObjrow.Numx,
                                        ObjId: botObjrow.ObjId,
                                        ProductId: botObjrow.ProductId,
                                        Len: newLen,
                                        LenExp: newLenExp,
                                        Cnt: botObjrow.Cnt,
                                        CntExp: botObjrow.CntExp,
                                        Angle: browAngleStr,
                                        BcpType: botObjrow.BcpType,
                                        Memo: botObjrow.Memo,
                                        color: botObjrow.color,
                                        colorExp: botObjrow.colorExp,
                                        xcxljgid: ($.Micro.IsEmpty(botObjrow.xcxljgid) ? 0 : botObjrow.xcxljgid)
                                    }
                                })
                            } else {
                                if (fcObj.type == "P" && fcObj.name == bBreakPrKind && fcObj.bmain.toString() == "false" && fcObj.prid == botObjrow.ProductId) {
                                    if (!isNaN(botObjrow.LenExp)) {
                                        $("#" + mDrawPrProperty).datagrid("insertRow", {
                                            index: $("#" + mDrawPrProperty).datagrid("getRows").length,
                                            row: {
                                                Numx: botObjrow.Numx,
                                                ObjId: botObjrow.ObjId,
                                                ProductId: fcObj.prid,
                                                Len: botObjrow.LenExp,
                                                LenExp: botObjrow.LenExp,
                                                Cnt: MicroDraw_genData_calcExp(mcflId, fcObj.cntExp, botObjrow.ObjId, xcxljgJson, false),
                                                CntExp: fcObj.cntExp,
                                                Angle: browAngleStr,
                                                BcpType: fcObj.bcpType,
                                                Memo: botObjrow.Memo,
                                                color: MicroDraw_genData_calcExp(mcflId, fcObj.colorExp, botObjrow.ObjId, xcxljgJson, false),
                                                colorExp: fcObj.colorExp,
                                                xcxljgid: ($.Micro.IsEmpty(fcObj.xcxljgid) ? 0 : fcObj.xcxljgid)
                                            }
                                        })
                                    } else {
                                        $("#" + mDrawPrProperty).datagrid("insertRow", {
                                            index: $("#" + mDrawPrProperty).datagrid("getRows").length,
                                            row: {
                                                Numx: botObjrow.Numx,
                                                ObjId: botObjrow.ObjId,
                                                ProductId: fcObj.prid,
                                                Len: newLen,
                                                LenExp: newLenExp,
                                                Cnt: MicroDraw_genData_calcExp(mcflId, fcObj.cntExp, botObjrow.ObjId, xcxljgJson, false),
                                                CntExp: fcObj.cntExp,
                                                Angle: browAngleStr,
                                                BcpType: fcObj.bcpType,
                                                Memo: botObjrow.Memo,
                                                color: MicroDraw_genData_calcExp(mcflId, fcObj.colorExp, botObjrow.ObjId, xcxljgJson, false),
                                                colorExp: fcObj.colorExp,
                                                xcxljgid: ($.Micro.IsEmpty(fcObj.xcxljgid) ? 0 : fcObj.xcxljgid)
                                            }
                                        })
                                    }
                                }
                            }
                        })
                    })
                }
                var tingSubArr = subArr[mxArr.length - 1].split(",");
                var lSub = tingSubArr[0];
                var rSub = tingSubArr[1];
                var htingExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "横挺", "exp").toString();
                var kwWidth = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "框宽度", "prid");
                var tingWidth = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid");
                var caoShen = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "框槽深度", "prid");
                var framePjStyle = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "框拼接方式", "prid");
                var leftSub = "";
                if (Number(rSub) != 0) {
                    leftSub = rSub
                } else {
                    leftSub = Number(tingWidth) / 2
                }
                var NKW_DK = "( " + winFlag + ".W - " + winFlag + "." + flagArr[mxArr.length - 1] + " - " + leftSub.toString() + " - " + kwWidth.toString() + " )";
                htingExp = replaceAll(htingExp, "NKW", NKW_DK);
                htingExp = replaceAll(htingExp, "LID", '"LID_DEF"');
                htingExp = replaceAll(htingExp, "RID", '""');
                if (framePjStyle == "45" || framePjStyle == "H") {
                    htingExp = htingExp + " + " + (Number(kwWidth) - Number(caoShen)).toString()
                }
                newLen = 0;
                newLenExp = htingExp;
                var tBreakPrKind = "上框";
                var bBreakPrKind = "下框";
                $.each(topRow,
                function(x, topObjrow) {
                    $.each(xcxljgJson,
                    function(k, fcObj) {
                        var trowAngle = topObjrow.Angle.split("-");
                        var trowAngleStr = trowAngle[0] + "-90";
                        if (fcObj.type == "P" && fcObj.name == tBreakPrKind && fcObj.bmain.toString() == "true" && fcObj.prid == topObjrow.ProductId) {
                            $("#" + mDrawPrProperty).datagrid("insertRow", {
                                index: $("#" + mDrawPrProperty).datagrid("getRows").length,
                                row: {
                                    Numx: topObjrow.Numx,
                                    ObjId: topObjrow.ObjId,
                                    ProductId: topObjrow.ProductId,
                                    Len: newLen,
                                    LenExp: newLenExp,
                                    Cnt: topObjrow.Cnt,
                                    CntExp: topObjrow.CntExp,
                                    Angle: trowAngleStr,
                                    BcpType: topObjrow.BcpType,
                                    Memo: topObjrow.Memo,
                                    color: topObjrow.color,
                                    colorExp: topObjrow.colorExp,
                                    xcxljgid: ($.Micro.IsEmpty(topObjrow.xcxljgid) ? 0 : topObjrow.xcxljgid)
                                }
                            })
                        } else {
                            if (fcObj.type == "P" && fcObj.name == tBreakPrKind && fcObj.bmain.toString() == "false" && fcObj.prid == topObjrow.ProductId) {
                                if (!isNaN(topObjrow.LenExp)) {
                                    $("#" + mDrawPrProperty).datagrid("insertRow", {
                                        index: $("#" + mDrawPrProperty).datagrid("getRows").length,
                                        row: {
                                            Numx: topObjrow.Numx,
                                            ObjId: topObjrow.ObjId,
                                            ProductId: fcObj.prid,
                                            Len: topObjrow.LenExp,
                                            LenExp: topObjrow.LenExp,
                                            Cnt: MicroDraw_genData_calcExp(mcflId, fcObj.cntExp, topObjrow.ObjId, xcxljgJson, false),
                                            CntExp: fcObj.cntExp,
                                            Angle: trowAngleStr,
                                            BcpType: fcObj.bcpType,
                                            Memo: topObjrow.Memo,
                                            color: MicroDraw_genData_calcExp(mcflId, fcObj.colorExp, topObjrow.ObjId, xcxljgJson, false),
                                            colorExp: fcObj.colorExp,
                                            xcxljgid: ($.Micro.IsEmpty(fcObj.xcxljgid) ? 0 : fcObj.xcxljgid)
                                        }
                                    })
                                } else {
                                    $("#" + mDrawPrProperty).datagrid("insertRow", {
                                        index: $("#" + mDrawPrProperty).datagrid("getRows").length,
                                        row: {
                                            Numx: topObjrow.Numx,
                                            ObjId: topObjrow.ObjId,
                                            ProductId: fcObj.prid,
                                            Len: newLen,
                                            LenExp: newLenExp,
                                            Cnt: MicroDraw_genData_calcExp(mcflId, fcObj.cntExp, topObjrow.ObjId, xcxljgJson, false),
                                            CntExp: fcObj.cntExp,
                                            Angle: trowAngleStr,
                                            BcpType: fcObj.bcpType,
                                            Memo: topObjrow.Memo,
                                            color: MicroDraw_genData_calcExp(mcflId, fcObj.colorExp, topObjrow.ObjId, xcxljgJson, false),
                                            colorExp: fcObj.colorExp,
                                            xcxljgid: ($.Micro.IsEmpty(fcObj.xcxljgid) ? 0 : fcObj.xcxljgid)
                                        }
                                    })
                                }
                            }
                        }
                    })
                });
                $.each(bottomRow,
                function(x, botObjrow) {
                    $.each(xcxljgJson,
                    function(k, fcObj) {
                        var browAngle = botObjrow.Angle.split("-");
                        var browAngleStr = "90-" + browAngle[0];
                        if (fcObj.type == "P" && fcObj.name == bBreakPrKind && fcObj.bmain.toString() == "true" && fcObj.prid == botObjrow.ProductId) {
                            $("#" + mDrawPrProperty).datagrid("insertRow", {
                                index: $("#" + mDrawPrProperty).datagrid("getRows").length,
                                row: {
                                    Numx: botObjrow.Numx,
                                    ObjId: botObjrow.ObjId,
                                    ProductId: botObjrow.ProductId,
                                    Len: newLen,
                                    LenExp: newLenExp,
                                    Cnt: botObjrow.Cnt,
                                    CntExp: botObjrow.CntExp,
                                    Angle: browAngleStr,
                                    BcpType: botObjrow.BcpType,
                                    Memo: botObjrow.Memo,
                                    color: botObjrow.color,
                                    colorExp: botObjrow.colorExp,
                                    xcxljgid: ($.Micro.IsEmpty(botObjrow.xcxljgid) ? 0 : botObjrow.xcxljgid)
                                }
                            })
                        } else {
                            if (fcObj.type == "P" && fcObj.name == bBreakPrKind && fcObj.bmain.toString() == "false" && fcObj.prid == botObjrow.ProductId) {
                                if (!isNaN(botObjrow.LenExp)) {
                                    $("#" + mDrawPrProperty).datagrid("insertRow", {
                                        index: $("#" + mDrawPrProperty).datagrid("getRows").length,
                                        row: {
                                            Numx: botObjrow.Numx,
                                            ObjId: botObjrow.ObjId,
                                            ProductId: fcObj.prid,
                                            Len: botObjrow.LenExp,
                                            LenExp: botObjrow.LenExp,
                                            Cnt: MicroDraw_genData_calcExp(mcflId, fcObj.cntExp, botObjrow.ObjId, xcxljgJson, false),
                                            CntExp: fcObj.cntExp,
                                            Angle: browAngleStr,
                                            BcpType: fcObj.bcpType,
                                            Memo: botObjrow.Memo,
                                            color: MicroDraw_genData_calcExp(mcflId, fcObj.colorExp, botObjrow.ObjId, xcxljgJson, false),
                                            colorExp: fcObj.colorExp,
                                            xcxljgid: ($.Micro.IsEmpty(fcObj.xcxljgid) ? 0 : fcObj.xcxljgid)
                                        }
                                    })
                                } else {
                                    $("#" + mDrawPrProperty).datagrid("insertRow", {
                                        index: $("#" + mDrawPrProperty).datagrid("getRows").length,
                                        row: {
                                            Numx: botObjrow.Numx,
                                            ObjId: botObjrow.ObjId,
                                            ProductId: fcObj.prid,
                                            Len: newLen,
                                            LenExp: newLenExp,
                                            Cnt: MicroDraw_genData_calcExp(mcflId, fcObj.cntExp, botObjrow.ObjId, xcxljgJson, false),
                                            CntExp: fcObj.cntExp,
                                            Angle: browAngleStr,
                                            BcpType: fcObj.bcpType,
                                            Memo: botObjrow.Memo,
                                            color: MicroDraw_genData_calcExp(mcflId, fcObj.colorExp, botObjrow.ObjId, xcxljgJson, false),
                                            colorExp: fcObj.colorExp,
                                            xcxljgid: ($.Micro.IsEmpty(fcObj.xcxljgid) ? 0 : fcObj.xcxljgid)
                                        }
                                    })
                                }
                            }
                        }
                    })
                });
                var delIdx = $.Micro.MergeArr([topIdx, bottomIdx]);
                for (var i = delIdx.length - 1; i >= 0; i--) {
                    $("#" + mDrawPrProperty).datagrid("deleteRow", delIdx[i])
                }
            }
            break;
        case "2":
            $.each(xcxljgJson,
            function(k, o) {
                if (o.type == "O") {
                    var prid = o.prid;
                    if (o.name == "MGG" || o.name == "MSA") {
                        if (o.prid.toString().substr(0, 1) != '"') {
                            prid = '"' + prid + '"'
                        }
                    }
                    MicroDraw_genData_opt_addRow(mDrawOptProperty, MicroBudget_getPropertyValue(mBudgetWinProperty, "Numx"), o.name, o.memo, prid, o.optList, o.optListExp, "", o.optValExp, "1", o.bgyOptExp, o.bxdOpt, 0)
                }
            });
            if ($(nodeFrame).length > 0) {
                var obj = nodeFrame;
                var tem = "";
                var ObjId = obj.getAttribute("id");
                var tPrKind = "上滑";
                var bPrKind = "下滑";
                $("#" + winId + " [mtype='" + mDrawFlag_Glass + "']").each(function(i, obj) {
                    var ObjId = obj.getAttribute("id");
                    if (obj.getAttribute("mtid") == "") {
                        tPrKind = "固定框"
                    }
                    if (obj.getAttribute("mbid") == "") {
                        bPrKind = "固定框"
                    }
                });
                var tPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tPrKind, "prid");
                var bPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", bPrKind, "prid");
                var lPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左边封", "prid");
                var rPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右边封", "prid");
                var tCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tPrKind, "cntExp");
                var bCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", bPrKind, "cntExp");
                var lCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左边封", "cntExp");
                var rCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右边封", "cntExp");
                tem = obj.getAttribute("mpjstyle");
                var frameAngle;
                switch (tem) {
                case "45":
                    frameAngle = "45-45";
                    break;
                case "H":
                    frameAngle = "90-90";
                    break;
                case "V":
                    frameAngle = "90-90";
                    break
                }
                var tPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tPrKind, "exp");
                var bPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", bPrKind, "exp");
                var lPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左边封", "exp");
                var rPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右边封", "exp");
                var tBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tPrKind, "bcpType");
                var bBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", bPrKind, "bcpType");
                var lBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左边封", "bcpType");
                var rBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右边封", "bcpType");
                var tColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tPrKind, "colorExp");
                var bColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", bPrKind, "colorExp");
                var lColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左边封", "colorExp");
                var rColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右边封", "colorExp");
                if (mtype == mDrawFlag_Win) {
                    if (!isEmptyOrNull(tPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, tPrId, MicroDraw_genData_calcExp(mcflId, tPrExp, ObjId, xcxljgJson), tPrExp, MicroDraw_genData_calcExp(mcflId, tCntExp, ObjId, xcxljgJson), tCntExp, frameAngle, tBcpType, "上", MicroDraw_genData_calcExp(mcflId, tColorExp, ObjId, xcxljgJson), tColorExp, tPrKind)
                    }
                    if (!isEmptyOrNull(bPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, bPrId, MicroDraw_genData_calcExp(mcflId, bPrExp, ObjId, xcxljgJson), bPrExp, MicroDraw_genData_calcExp(mcflId, bCntExp, ObjId, xcxljgJson), bCntExp, frameAngle, bBcpType, "下", MicroDraw_genData_calcExp(mcflId, bColorExp, ObjId, xcxljgJson), bColorExp, bPrKind)
                    }
                    if (!isEmptyOrNull(lPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, lPrId, MicroDraw_genData_calcExp(mcflId, lPrExp, ObjId, xcxljgJson), lPrExp, MicroDraw_genData_calcExp(mcflId, lCntExp, ObjId, xcxljgJson), lCntExp, frameAngle, lBcpType, "左", MicroDraw_genData_calcExp(mcflId, lColorExp, ObjId, xcxljgJson), lColorExp, "左边封")
                    }
                    if (!isEmptyOrNull(rPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, rPrId, MicroDraw_genData_calcExp(mcflId, rPrExp, ObjId, xcxljgJson), rPrExp, MicroDraw_genData_calcExp(mcflId, rCntExp, ObjId, xcxljgJson), rCntExp, frameAngle, rBcpType, "右", MicroDraw_genData_calcExp(mcflId, rColorExp, ObjId, xcxljgJson), rColorExp, "右边封")
                    }
                } else {
                    if (mtype == mDrawFlag_Custom_arc) {
                        if (!isEmptyOrNull(arcPrId)) {
                            MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, arcPrId, MicroDraw_genData_calcExp(mcflId, arcPrExp, ObjId, xcxljgJson), arcPrExp, MicroDraw_genData_calcExp(mcflId, arcCntExp, ObjId, xcxljgJson), arcCntExp, "0-0", arcBcpType, "上弧", MicroDraw_genData_calcExp(mcflId, arcColorExp, ObjId, xcxljgJson), arcColorExp, "上弧")
                        }
                        if (!isEmptyOrNull(arcbPrId)) {
                            MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, arcbPrId, MicroDraw_genData_calcExp(mcflId, barcPrExp, ObjId, xcxljgJson), barcPrExp, MicroDraw_genData_calcExp(mcflId, bCntExp, ObjId, xcxljgJson), bCntExp, j_Gamma + "-" + j_Gamma, bBcpType, "弧下框", MicroDraw_genData_calcExp(mcflId, bColorExp, ObjId, xcxljgJson), bColorExp, "弧下框")
                        }
                        addArcZT();
                        addArcYX()
                    }
                }
                cpSeq = Number(cpSeq) + 1;
                MicroDraw_genData_cp_addRow(cpDgId, Numx, ObjId, "框", MicroDraw_genData_calcExp(mcflId, "W", ObjId, xcxljgJson), "W", MicroDraw_genData_calcExp(mcflId, "H", ObjId, xcxljgJson), "H", MicroDraw_genData_calcExp(mcflId, "CNT", ObjId, xcxljgJson), "CNT", "", "C" + cpSeq.toString())
            }
            $("#" + winId + " [mtype='" + mDrawFlag_TingV + "']").each(function(i, obj) {
                var ObjId = obj.getAttribute("id");
                var ObjPrId = obj.getAttribute("mprid");
                var tem = MicroDraw_getTlcTingKind(ObjId);
                var arr = tem.split(",");
                var tingType = arr[0];
                var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "prid");
                if (!isEmptyOrNull(ObjPrId)) {
                    PrId = ObjPrId
                }
                var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "exp");
                bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "cntExp");
                var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "colorExp");
                if (!isEmptyOrNull(PrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", bcpType, "竖", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, tingType)
                }
                var tingSbfDist = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "横挺遇双边封减量", "prid");
                if (Number(tingSbfDist) != 0) {
                    var hasTlcObj = false;
                    var mlid = obj.getAttribute("mlid");
                    var mlidArr = mlid.split(",");
                    for (var kk = 0; kk < mlidArr.length; kk++) {
                        var objMtype = $("#" + mlidArr[kk])[0].getAttribute("mtype");
                        if (objMtype.indexOf("tlc") >= 0) {
                            hasTlcObj = true
                        }
                    }
                    if (!hasTlcObj && (tingType == "双边封" || tingType == "转角双边封")) {
                        var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边封盖板", "prid");
                        var PrExp = "H";
                        bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边封盖板", "bcpType");
                        var cntExp = "CNT";
                        var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边封盖板", "colorExp");
                        if (!isEmptyOrNull(PrId)) {
                            MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", bcpType, "挺左边", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, "边封盖板")
                        }
                    }
                }
                var tingSbfDist = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "横挺遇双边封减量", "prid");
                if (Number(tingSbfDist) != 0) {
                    var hasTlcObj = false;
                    var mrid = obj.getAttribute("mrid");
                    var mridArr = mrid.split(",");
                    for (var kk = 0; kk < mridArr.length; kk++) {
                        var objMtype = $("#" + mridArr[kk])[0].getAttribute("mtype");
                        if (objMtype.indexOf("tlc") >= 0) {
                            hasTlcObj = true
                        }
                    }
                    if (!hasTlcObj && (tingType == "双边封" || tingType == "转角双边封")) {
                        var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边封盖板", "prid");
                        var PrExp = "H";
                        bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边封盖板", "bcpType");
                        var cntExp = "CNT";
                        var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边封盖板", "colorExp");
                        if (!isEmptyOrNull(PrId)) {
                            MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", bcpType, "挺左边", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, "边封盖板")
                        }
                    }
                }
            });
            $("#" + winId + " [mtype='" + mDrawFlag_TingH + "']").each(function(i, obj) {
                var ObjId = obj.getAttribute("id");
                var ObjPrId = obj.getAttribute("mprid");
                var tem = MicroDraw_getTlcTingKind(ObjId);
                var arr = tem.split(",");
                var tingType = arr[0];
                var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "prid");
                if (!isEmptyOrNull(ObjPrId)) {
                    PrId = ObjPrId
                }
                var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "exp");
                bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "cntExp");
                var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "colorExp");
                var mlid = obj.getAttribute("mlid");
                var mrid = obj.getAttribute("mrid");
                var tingSbfDist = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "横挺遇双边封减量", "prid");
                if (Number(tingSbfDist) != 0 && !MicroDraw_hasTlc(winId, mlid, mrid)) {
                    PrExp = PrExp + " - " + tingSbfDist
                }
                if (!isEmptyOrNull(PrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", bcpType, "横", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, tingType)
                }
            });
            $("#" + winId + "[mtype=" + mDrawFlag_Win + "] [mtype='" + mDrawFlag_Glass + "']").each(function(i, obj) {
                var tem = "";
                var ObjId = obj.getAttribute("id");
                if (obj.getAttribute("myt") == "Y") {
                    var tPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻上压线", "prid");
                    var bPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻下压线", "prid");
                    var lPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻左压线", "prid");
                    var rPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻右压线", "prid");
                    var tCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻上压线", "cntExp");
                    var bCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻下压线", "cntExp");
                    var lCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻左压线", "cntExp");
                    var rCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻右压线", "cntExp");
                    tem = obj.getAttribute("mytpjstyle");
                    var Angle;
                    switch (tem) {
                    case "45":
                        Angle = "45-45";
                        break;
                    case "H":
                        Angle = "90-90";
                        break;
                    case "V":
                        Angle = "90-90";
                        break
                    }
                    var tPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻上压线", "exp");
                    var bPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻下压线", "exp");
                    var lPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻左压线", "exp");
                    var rPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻右压线", "exp");
                    var tBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻上压线", "bcpType");
                    var bBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻下压线", "bcpType");
                    var lBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻左压线", "bcpType");
                    var rBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻右压线", "bcpType");
                    var tColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻上压线", "colorExp");
                    var bColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻下压线", "colorExp");
                    var lColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻左压线", "colorExp");
                    var rColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻右压线", "colorExp");
                    if (!isEmptyOrNull(tPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, tPrId, MicroDraw_genData_calcExp(mcflId, tPrExp, ObjId, xcxljgJson), tPrExp, MicroDraw_genData_calcExp(mcflId, tCntExp, ObjId, xcxljgJson), tCntExp, Angle, tBcpType, "上", MicroDraw_genData_calcExp(mcflId, tColorExp, ObjId, xcxljgJson), tColorExp, "固玻上压线")
                    }
                    if (!isEmptyOrNull(bPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, bPrId, MicroDraw_genData_calcExp(mcflId, bPrExp, ObjId, xcxljgJson), bPrExp, MicroDraw_genData_calcExp(mcflId, bCntExp, ObjId, xcxljgJson), bCntExp, Angle, bBcpType, "下", MicroDraw_genData_calcExp(mcflId, bColorExp, ObjId, xcxljgJson), bColorExp, "固玻下压线")
                    }
                    if (!isEmptyOrNull(lPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, lPrId, MicroDraw_genData_calcExp(mcflId, lPrExp, ObjId, xcxljgJson), lPrExp, MicroDraw_genData_calcExp(mcflId, lCntExp, ObjId, xcxljgJson), lCntExp, Angle, lBcpType, "左", MicroDraw_genData_calcExp(mcflId, lColorExp, ObjId, xcxljgJson), lColorExp, "固玻左压线")
                    }
                    if (!isEmptyOrNull(rPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, rPrId, MicroDraw_genData_calcExp(mcflId, rPrExp, ObjId, xcxljgJson), rPrExp, MicroDraw_genData_calcExp(mcflId, rCntExp, ObjId, xcxljgJson), rCntExp, Angle, rBcpType, "右", MicroDraw_genData_calcExp(mcflId, rColorExp, ObjId, xcxljgJson), rColorExp, "固玻右压线")
                    }
                }
                var LID;
                var RID;
                LID = obj.getAttribute("mlid");
                RID = obj.getAttribute("mrid");
                if (LID.length > 0) {
                    lType = MicroDraw_getTlcTingKind(LID);
                    Arr = lType.split(",");
                    if (Arr[0] == "双边封" || Arr[0] == "转角双边封" || (Arr[0] == "边封固定" && Arr[2] == "B") || (Arr[0] == "转角边封固定" && Arr[2] == "B")) {
                        var tingSbfDist = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "横挺遇双边封减量", "prid");
                        if (Number(tingSbfDist) != 0 && !MicroDraw_hasTlc(winId, LID, RID)) {} else {
                            var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边封盖板", "prid");
                            var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边封盖板", "exp");
                            bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边封盖板", "bcpType");
                            var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边封盖板", "cntExp");
                            var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边封盖板", "colorExp");
                            if (!isEmptyOrNull(PrId)) {
                                MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", bcpType, "左竖", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, "边封盖板")
                            }
                        }
                    }
                } else {
                    var tem = MicroDraw_getTlcFrameKind(winId);
                    fArr = tem.split(",");
                    if (fArr[0] == "B") {
                        var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边封盖板", "prid");
                        var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边封盖板", "exp");
                        bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边封盖板", "bcpType");
                        var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边封盖板", "cntExp");
                        var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边封盖板", "colorExp");
                        if (!isEmptyOrNull(PrId)) {
                            MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", bcpType, "左竖", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, "边封盖板")
                        }
                    }
                }
                if (RID.length > 0) {
                    rType = MicroDraw_getTlcTingKind(RID);
                    Arr = rType.split(",");
                    if (Arr[0] == "双边封" || Arr[0] == "转角双边封" || (Arr[0] == "边封固定" && Arr[1] == "B") || (Arr[0] == "转角边封固定" && Arr[1] == "B")) {
                        var tingSbfDist = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "横挺遇双边封减量", "prid");
                        if (Number(tingSbfDist) != 0 && !MicroDraw_hasTlc(winId, LID, RID)) {} else {
                            var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边封盖板", "prid");
                            var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边封盖板", "exp");
                            bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边封盖板", "bcpType");
                            var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边封盖板", "cntExp");
                            var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边封盖板", "colorExp");
                            if (!isEmptyOrNull(PrId)) {
                                MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", bcpType, "右竖", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, "边封盖板")
                            }
                        }
                    }
                } else {
                    var tem = MicroDraw_getTlcFrameKind(winId);
                    fArr = tem.split(",");
                    if (fArr[1] == "B") {
                        var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边封盖板", "prid");
                        var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边封盖板", "exp");
                        bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边封盖板", "bcpType");
                        var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边封盖板", "cntExp");
                        var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边封盖板", "colorExp");
                        if (!isEmptyOrNull(PrId)) {
                            MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", bcpType, "右竖", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, "边封盖板")
                        }
                    }
                }
            });
            $("#" + winId + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(i, obj) {
                var tem = "";
                var ObjId = obj.getAttribute("id");
                tem = obj.getAttribute("mfanpjstyle");
                var Angle;
                switch (tem) {
                case "45":
                    Angle = "45-45";
                    break;
                default:
                    Angle = "90-90";
                    break
                }
                var WExp;
                var HExp;
                var PrKind = "内光企";
                var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                if (!isEmptyOrNull(PrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, Angle, BcpType, "内竖", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                }
                HExp = PrExp;
                var PrKind = "外光企";
                var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                if (!isEmptyOrNull(PrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, Angle, BcpType, "外竖", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                }
                var PrKind = "内勾企";
                var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                if (!isEmptyOrNull(PrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, Angle, BcpType, "内竖", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                }
                var PrKind = "外勾企";
                var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                if (!isEmptyOrNull(PrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, Angle, BcpType, "外竖", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                }
                var PrKind = "内上方";
                var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                if (!isEmptyOrNull(PrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, Angle, BcpType, "内上横", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                }
                WExp = PrExp + " + " + MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "扇宽减上方余量", "prid").toString();
                var PrKind = "外上方";
                var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                if (!isEmptyOrNull(PrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, Angle, BcpType, "外上横", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                }
                var PrKind = "内下方";
                var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                if (!isEmptyOrNull(PrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, Angle, BcpType, "内下横", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                }
                var PrKind = "外下方";
                var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                if (!isEmptyOrNull(PrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, Angle, BcpType, "外下横", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                }
                var PrKind = "内勾企盖板";
                var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                if (!isEmptyOrNull(PrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", BcpType, "内竖勾盖", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                }
                var PrKind = "外勾企盖板";
                var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                if (!isEmptyOrNull(PrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", BcpType, "外竖勾盖", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                }
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "内光企", "cntExp");
                var OcntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "外光企", "cntExp");
                var inPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "内光企", "exp");
                var outPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "外光企", "exp");
                var gqIsSame = true;
                if (inPrExp != outPrExp) {
                    if (MicroDraw_genData_calcExp(mcflId, inPrExp, ObjId, xcxljgJson) != MicroDraw_genData_calcExp(mcflId, outPrExp, ObjId, xcxljgJson)) {
                        gqIsSame = false
                    } else {
                        gqIsSame = true
                    }
                } else {
                    gqIsSame = true
                }
                if (gqIsSame) {
                    cntExp = "2 * (" + cntExp + ")";
                    cpSeq = Number(cpSeq) + 1;
                    MicroDraw_genData_cp_addRow(cpDgId, Numx, ObjId, "扇", MicroDraw_genData_calcExp(mcflId, WExp, ObjId, xcxljgJson), WExp, MicroDraw_genData_calcExp(mcflId, inPrExp, ObjId, xcxljgJson), inPrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "", "C" + cpSeq.toString())
                } else {
                    cpSeq = Number(cpSeq) + 1;
                    MicroDraw_genData_cp_addRow(cpDgId, Numx, ObjId, "扇", MicroDraw_genData_calcExp(mcflId, WExp, ObjId, xcxljgJson), WExp, MicroDraw_genData_calcExp(mcflId, inPrExp, ObjId, xcxljgJson), inPrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "", "C" + cpSeq.toString());
                    cpSeq = Number(cpSeq) + 1;
                    MicroDraw_genData_cp_addRow(cpDgId, Numx, ObjId, "扇", MicroDraw_genData_calcExp(mcflId, WExp, ObjId, xcxljgJson), WExp, MicroDraw_genData_calcExp(mcflId, outPrExp, ObjId, xcxljgJson), outPrExp, MicroDraw_genData_calcExp(mcflId, OcntExp, ObjId, xcxljgJson), OcntExp, "", "C" + cpSeq.toString())
                }
                mfanswflag = obj.getAttribute("mfanswflag");
                var PrKind = "上纱扇";
                var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                if (!isEmptyOrNull(PrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, Angle, BcpType, "上纱", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                }
                var ssyl = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "纱扇宽减横纱余量", "prid").toString();
                if ($.Micro.IsEmpty(ssyl) || isNaN(ssyl)) {
                    ssyl = 0
                }
                WExp = PrExp + " + " + $.trim(ssyl);
                var PrKind = "下纱扇";
                var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                if (!isEmptyOrNull(PrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, Angle, BcpType, "下纱", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                }
                var PrKind = "左纱扇";
                var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                if (!isEmptyOrNull(PrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, Angle, BcpType, "左纱", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                }
                HExp = PrExp;
                var PrKind = "右纱扇";
                var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                if (!isEmptyOrNull(PrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, Angle, BcpType, "右纱", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                }
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上纱扇", "cntExp");
                cpSeq = Number(cpSeq) + 1;
                MicroDraw_genData_cp_addRow(cpDgId, Numx, ObjId, "纱扇", MicroDraw_genData_calcExp(mcflId, WExp, ObjId, xcxljgJson), WExp, MicroDraw_genData_calcExp(mcflId, HExp, ObjId, xcxljgJson), HExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "", "C" + cpSeq.toString());
                var OT = MicroDraw_getTlcObjType(ObjId);
                switch (OT) {
                case "2推":
                case "2推1纱":
                    break;
                case "1轨1推":
                    break;
                case "1推1固":
                    break;
                case "3推":
                    break;
                case "3推带收口":
                case "3推带收口1纱":
                    var PrKind = "收口";
                    var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                    var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                    var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                    var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                    var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                    if (!isEmptyOrNull(PrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", BcpType, "竖收口", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                    }
                    break;
                case "3轨3推":
                    break;
                case "2推1固":
                    break;
                case "4推":
                    var PrKind = "收口";
                    var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                    var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                    var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                    var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                    var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                    if (!isEmptyOrNull(PrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", BcpType, "竖收口", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                    }
                    break;
                case "4推2纱":
                    var PrKind = "收口";
                    var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                    var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                    var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                    var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                    var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                    if (!isEmptyOrNull(PrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", BcpType, "竖收口", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                    }
                    var PrKind = "纱扇收口";
                    var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                    var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                    var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                    var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                    var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                    if (!isEmptyOrNull(PrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", BcpType, "竖纱收口", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                    }
                    break;
                case "1轨2推":
                    break;
                case "2推2固":
                    break;
                case "上下推":
                    break;
                case "上固下推":
                    break;
                case "上推下固":
                    break;
                case "6推":
                    var PrKind = "收口";
                    var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                    var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                    var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                    var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                    var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                    if (!isEmptyOrNull(PrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", BcpType, "竖收口", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                    }
                    break
                }
            });
            $("#" + winId + " [mtype='" + mDrawFlag_Glass + "']").each(function(i, obj) {
                var tem = "";
                var ObjId;
                if (mtype == mDrawFlag_Win) {
                    ObjId = obj.getAttribute("id")
                } else {
                    if (mtype == mDrawFlag_Custom_arc) {
                        ObjId = winId
                    }
                }
                var Glass = obj.getAttribute("mglass");
                if (isEmptyOrNull(Glass)) {
                    Glass = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "MGG", "prid")
                }
                if (Glass.substr(0, 1) == '"') {
                    Glass = Glass.substr(1)
                }
                if (Glass.substr(Glass.length - 1, 1) == '"') {
                    Glass = Glass.substr(0, Glass.length - 1)
                }
                var WExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "固玻宽度", "exp");
                var HExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "固玻高度", "exp");
                if (arcGlassRectSizes.length > 0 && arcGlassRectSizes.length >= i) {
                    WExp = arcGlassRectSizes[i].W;
                    HExp = arcGlassRectSizes[i].H
                }
                bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "固玻宽度", "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "固玻宽度", "cntExp");
                var glExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "固玻宽度", "glassExp");
                var glassExp = "";
                var glassGy = "";
                var glassGyExp = "";
                var glassDb = "";
                var glassDbExp = "";
                var glassMb = "";
                var glassMbExp = "";
                var glExpArr = glExp.split(",");
                glassExp = glExpArr[0];
                glassGyExp = glExpArr[1];
                glassDbExp = glExpArr[2];
                glassMbExp = glExpArr[3];
                if (!isEmptyOrNull(glExp)) {
                    Glass = MicroDraw_genData_calcExp(mcflId, glassExp, ObjId, xcxljgJson);
                    glassGy = MicroDraw_genData_calcExp(mcflId, glassGyExp, ObjId, xcxljgJson);
                    glassDb = MicroDraw_genData_calcExp(mcflId, glassDbExp, ObjId, xcxljgJson);
                    glassMb = MicroDraw_genData_calcExp(mcflId, glassMbExp, ObjId, xcxljgJson)
                }
                if (!isEmptyOrNull(Glass)) {
                    var node_txt = "";
                    var glassFlag = "";
                    if (mtype == mDrawFlag_Win) {
                        node_txt = $("#" + ObjId + "_txt")[0];
                        if (!isEmptyOrNull(node_txt)) {
                            glassFlag = node_txt.textContent
                        }
                    } else {
                        if (mtype == mDrawFlag_Custom_arc) {
                            var textObj = $("#" + ObjId).find("[mtype=" + mDrawFlag_Glass + "]").eq(i).find("[id*=_txt]");
                            glassFlag = textObj.text()
                        }
                    }
                    var glAreaExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "固玻宽度", "glAreaExp");
                    var W = MicroDraw_genData_calcExp(mcflId, WExp, ObjId, xcxljgJson);
                    var H = MicroDraw_genData_calcExp(mcflId, HExp, ObjId, xcxljgJson);
                    var cnt = MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson);
                    var glArea = MicroDraw_genData_calcExp(mcflId, glAreaExp, ObjId, xcxljgJson);
                    if ($.Micro.IsEmpty(glArea)) {
                        glArea = (Number(W) / 1000 * Number(H) / 1000 * cnt)
                    }
                    MicroDraw_genData_gl_addRow(mcflId, xcxljgJson, glDgId, Numx, ObjId, Glass, W, WExp, H, HExp, cnt, cntExp, bcpType, "", glassFlag, "固玻宽度", glassExp, glassGy, glassGyExp, glassDb, glassDbExp, glassMb, glassMbExp, glArea, glAreaExp)
                }
            });
            $("#" + winId + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(i, obj) {
                var tem = "";
                var ObjId = obj.getAttribute("id");
                var tem = "";
                var ObjId = obj.getAttribute("id");
                var Glass = obj.getAttribute("mglass");
                if (isEmptyOrNull(Glass)) {
                    Glass = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "MGG", "prid")
                }
                if (Glass.substr(0, 1) == '"') {
                    Glass = Glass.substr(1)
                }
                if (Glass.substr(Glass.length - 1, 1) == '"') {
                    Glass = Glass.substr(0, Glass.length - 1)
                }
                var WExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "内扇玻宽度", "exp");
                var HExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "内扇玻高度", "exp");
                bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "内扇玻宽度", "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "内扇玻宽度", "cntExp");
                var glExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "内扇玻宽度", "glassExp");
                var glassExp = "";
                var glassGy = "";
                var glassGyExp = "";
                var glassDb = "";
                var glassDbExp = "";
                var glassMb = "";
                var glassMbExp = "";
                var glExpArr = glExp.split(",");
                glassExp = glExpArr[0];
                glassGyExp = glExpArr[1];
                glassDbExp = glExpArr[2];
                glassMbExp = glExpArr[3];
                if (!isEmptyOrNull(glExp)) {
                    Glass = MicroDraw_genData_calcExp(mcflId, glassExp, ObjId, xcxljgJson);
                    glassGy = MicroDraw_genData_calcExp(mcflId, glassGyExp, ObjId, xcxljgJson);
                    glassDb = MicroDraw_genData_calcExp(mcflId, glassDbExp, ObjId, xcxljgJson);
                    glassMb = MicroDraw_genData_calcExp(mcflId, glassMbExp, ObjId, xcxljgJson)
                }
                if (!isEmptyOrNull(Glass)) {
                    var node_txt = $("#" + ObjId + "_txt")[0];
                    var glassFlag = "";
                    if (!isEmptyOrNull(node_txt)) {
                        glassFlag = node_txt.textContent
                    }
                    var glAreaExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "内扇玻宽度", "glAreaExp");
                    var W = MicroDraw_genData_calcExp(mcflId, WExp, ObjId, xcxljgJson);
                    var H = MicroDraw_genData_calcExp(mcflId, HExp, ObjId, xcxljgJson);
                    var cnt = MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson);
                    var glArea = MicroDraw_genData_calcExp(mcflId, glAreaExp, ObjId, xcxljgJson);
                    if ($.Micro.IsEmpty(glArea)) {
                        glArea = (Number(W) / 1000 * Number(H) / 1000 * cnt)
                    }
                    MicroDraw_genData_gl_addRow(mcflId, xcxljgJson, glDgId, Numx, ObjId, Glass, W, WExp, H, HExp, cnt, cntExp, bcpType, "", glassFlag, "内扇玻宽度", glassExp, glassGy, glassGyExp, glassDb, glassDbExp, glassMb, glassMbExp, glArea, glAreaExp)
                }
                var tem = "";
                var ObjId = obj.getAttribute("id");
                var Glass = obj.getAttribute("mglass");
                if (isEmptyOrNull(Glass)) {
                    Glass = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "MGG", "prid")
                }
                if (Glass.substr(0, 1) == '"') {
                    Glass = Glass.substr(1)
                }
                if (Glass.substr(Glass.length - 1, 1) == '"') {
                    Glass = Glass.substr(0, Glass.length - 1)
                }
                var WExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "外扇玻宽度", "exp");
                var HExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "外扇玻高度", "exp");
                bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "外扇玻宽度", "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "外扇玻宽度", "cntExp");
                var glExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "外扇玻宽度", "glassExp");
                var glassExp = "";
                var glassGy = "";
                var glassGyExp = "";
                var glassDb = "";
                var glassDbExp = "";
                var glassMb = "";
                var glassMbExp = "";
                var glExpArr = glExp.split(",");
                glassExp = glExpArr[0];
                glassGyExp = glExpArr[1];
                glassDbExp = glExpArr[2];
                glassMbExp = glExpArr[3];
                if (!isEmptyOrNull(glExp)) {
                    Glass = MicroDraw_genData_calcExp(mcflId, glassExp, ObjId, xcxljgJson);
                    glassGy = MicroDraw_genData_calcExp(mcflId, glassGyExp, ObjId, xcxljgJson);
                    glassDb = MicroDraw_genData_calcExp(mcflId, glassDbExp, ObjId, xcxljgJson);
                    glassMb = MicroDraw_genData_calcExp(mcflId, glassMbExp, ObjId, xcxljgJson)
                }
                if (!isEmptyOrNull(Glass)) {
                    var node_txt = $("#" + ObjId + "_txt")[0];
                    var glassFlag = "";
                    if (!isEmptyOrNull(node_txt)) {
                        glassFlag = node_txt.textContent
                    }
                    var glAreaExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "外扇玻宽度", "glAreaExp");
                    var W = MicroDraw_genData_calcExp(mcflId, WExp, ObjId, xcxljgJson);
                    var H = MicroDraw_genData_calcExp(mcflId, HExp, ObjId, xcxljgJson);
                    var cnt = MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson);
                    var glArea = MicroDraw_genData_calcExp(mcflId, glAreaExp, ObjId, xcxljgJson);
                    if ($.Micro.IsEmpty(glArea)) {
                        glArea = (Number(W) / 1000 * Number(H) / 1000 * cnt)
                    }
                    MicroDraw_genData_gl_addRow(mcflId, xcxljgJson, glDgId, Numx, ObjId, Glass, W, WExp, H, HExp, cnt, cntExp, bcpType, "", glassFlag, "外扇玻宽度", glassExp, glassGy, glassGyExp, glassDb, glassDbExp, glassMb, glassMbExp, glArea, glAreaExp)
                }
                var OT = MicroDraw_getTlcObjType(ObjId);
                switch (OT) {
                case "2推":
                case "2推1纱":
                    break;
                case "1轨1推":
                    break;
                case "1推1固":
                    break;
                case "3推":
                    break;
                case "3推带收口":
                case "3推带收口1纱":
                    break;
                case "3轨3推":
                    break;
                case "2推1固":
                    break;
                case "4推":
                case "4推2纱":
                    break;
                case "1轨2推":
                    break;
                case "2推2固":
                    break;
                case "上下推":
                    break;
                case "上固下推":
                    break;
                case "上推下固":
                    break;
                case "6推":
                    break
                }
            });
            $("#" + winId + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(i, obj) {
                var tem = "";
                var ObjId = obj.getAttribute("id");
                var OT = MicroDraw_getTlcObjType(ObjId);
                switch (OT) {
                case "2推1纱":
                case "2推":
                case "1推1固":
                case "1推1固1纱":
                case "2推2固":
                case "2推2固2纱":
                case "3推带收口1纱":
                    var tem = "";
                    var ObjId = obj.getAttribute("id");
                    var sw = obj.getAttribute("msa");
                    if (isEmptyOrNull(sw)) {
                        sw = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "MSA", "prid")
                    }
                    if (sw.substr(0, 1) == '"') {
                        sw = sw.substr(1)
                    }
                    if (sw.substr(sw.length - 1, 1) == '"') {
                        sw = sw.substr(0, sw.length - 1)
                    }
                    var WExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网宽度", "exp");
                    var HExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网高度", "exp");
                    bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网宽度", "bcpType");
                    var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网宽度", "cntExp");
                    var glExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网宽度", "glassExp");
                    var glassExp = "";
                    var glassGy = "";
                    var glassGyExp = '"--"';
                    var glassDb = "";
                    var glassDbExp = '"--"';
                    var glassMb = "";
                    var glassMbExp = '"--"';
                    var glExpArr = glExp.split(",");
                    glassExp = glExpArr[0];
                    if (!isEmptyOrNull(glExp)) {
                        sw = MicroDraw_genData_calcExp(mcflId, glassExp, ObjId, xcxljgJson)
                    }
                    if (!isEmptyOrNull(sw)) {
                        var node_txt = $("#" + ObjId + "_txt")[0];
                        var glassFlag = "";
                        if (!isEmptyOrNull(node_txt)) {
                            glassFlag = node_txt.textContent
                        }
                        var glAreaExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网宽度", "glAreaExp");
                        var W = MicroDraw_genData_calcExp(mcflId, WExp, ObjId, xcxljgJson);
                        var H = MicroDraw_genData_calcExp(mcflId, HExp, ObjId, xcxljgJson);
                        var cnt = MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson);
                        var glArea = MicroDraw_genData_calcExp(mcflId, glAreaExp, ObjId, xcxljgJson);
                        if ($.Micro.IsEmpty(glArea)) {
                            glArea = (Number(W) / 1000 * Number(H) / 1000 * cnt)
                        }
                        MicroDraw_genData_gl_addRow(mcflId, xcxljgJson, glDgId, Numx, ObjId, sw, W, WExp, H, HExp, cnt, cntExp, bcpType, "", glassFlag, "纱网宽度", glassExp, glassGy, glassGyExp, glassDb, glassDbExp, glassMb, glassMbExp, glArea, glAreaExp)
                    }
                    break;
                case "4推2纱":
                case "4推":
                    var tem = "";
                    var ObjId = obj.getAttribute("id");
                    var sw = obj.getAttribute("msa");
                    if (isEmptyOrNull(sw)) {
                        sw = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "MSA", "prid")
                    }
                    if (sw.substr(0, 1) == '"') {
                        sw = sw.substr(1)
                    }
                    if (sw.substr(sw.length - 1, 1) == '"') {
                        sw = sw.substr(0, sw.length - 1)
                    }
                    var WExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网宽度", "exp");
                    var HExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网高度", "exp");
                    bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网宽度", "bcpType");
                    var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网宽度", "cntExp");
                    var glExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网宽度", "glassExp");
                    var glassExp = "";
                    var glassGy = "";
                    var glassGyExp = '"--"';
                    var glassDb = "";
                    var glassDbExp = '"--"';
                    var glassMb = "";
                    var glassMbExp = '"--"';
                    var glExpArr = glExp.split(",");
                    glassExp = glExpArr[0];
                    if (!isEmptyOrNull(glExp)) {
                        sw = MicroDraw_genData_calcExp(mcflId, glassExp, ObjId, xcxljgJson)
                    }
                    if (!isEmptyOrNull(sw)) {
                        var node_txt = $("#" + ObjId + "_txt")[0];
                        var glassFlag = "";
                        if (!isEmptyOrNull(node_txt)) {
                            glassFlag = node_txt.textContent
                        }
                        var glAreaExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网宽度", "glAreaExp");
                        var W = MicroDraw_genData_calcExp(mcflId, WExp, ObjId, xcxljgJson);
                        var H = MicroDraw_genData_calcExp(mcflId, HExp, ObjId, xcxljgJson);
                        var cnt = MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson);
                        var glArea = MicroDraw_genData_calcExp(mcflId, glAreaExp, ObjId, xcxljgJson);
                        if ($.Micro.IsEmpty(glArea)) {
                            glArea = (Number(W) / 1000 * Number(H) / 1000 * cnt)
                        }
                        MicroDraw_genData_gl_addRow(mcflId, xcxljgJson, glDgId, Numx, ObjId, sw, W, WExp, H, HExp, cnt, cntExp, bcpType, "", glassFlag, "纱网宽度", glassExp, glassGy, glassGyExp, glassDb, glassDbExp, glassMb, glassMbExp, glArea, glAreaExp)
                    }
                    break
                }
            });
            $.each(xcxljgJson,
            function(k, o) {
                if (o.type == "F") {
                    var temCnt = 0;
                    var Cnt = 0;
                    if (o.prid.length > 0) {
                        if ($(nodeFrame).length > 0) {
                            var obj = nodeFrame;
                            temCnt = Number(MicroDraw_genData_calcExp(mcflId, o.cntExp, obj.getAttribute("id"), xcxljgJson));
                            Cnt = Number(Cnt) + Number(temCnt)
                        }
                        $("#" + winId + " [mtype='" + mDrawFlag_TingH + "']").each(function(i, obj) {
                            temCnt = Number(MicroDraw_genData_calcExp(mcflId, o.cntExp, obj.getAttribute("id"), xcxljgJson));
                            Cnt = Number(Cnt) + Number(temCnt)
                        });
                        $("#" + winId + " [mtype='" + mDrawFlag_TingV + "']").each(function(i, obj) {
                            temCnt = Number(MicroDraw_genData_calcExp(mcflId, o.cntExp, obj.getAttribute("id"), xcxljgJson));
                            Cnt = Number(Cnt) + Number(temCnt)
                        });
                        $("#" + winId + " [mtype='" + mDrawFlag_Glass + "']").each(function(i, obj) {
                            var tobj;
                            if (mtype == mDrawFlag_Win) {
                                tobj = obj
                            } else {
                                if (mtype == mDrawFlag_Custom_arc) {
                                    tobj = $("#" + winId)[0]
                                }
                            }
                            temCnt = Number(MicroDraw_genData_calcExp(mcflId, o.cntExp, tobj.getAttribute("id"), xcxljgJson));
                            Cnt = Number(Cnt) + Number(temCnt)
                        });
                        $("#" + winId + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(i, obj) {
                            temCnt = Number(MicroDraw_genData_calcExp(mcflId, o.cntExp, obj.getAttribute("id"), xcxljgJson));
                            Cnt = Number(Cnt) + Number(temCnt)
                        });
                        var CntExp2 = o.cntExp2;
                        if (!isEmptyOrNull(CntExp2)) {
                            CntExp2 = replaceAll(CntExp2, " RES ", Cnt.toString());
                            Cnt = Number(MicroDraw_genData_calcExp(0, CntExp2, "", ""))
                        }
                        MicroDraw_genData_wj_addRow(wjDgId, Numx, winId, o.prid, Cnt, o.cntExp, o.bcpType, o.usePlace, "", o.cntExp2, "1", o.bgyOptExp)
                    }
                }
            });
            var getCombWinIDs = MicroDraw_getCombWinIDs("all");
            var Wins = getCombWinIDs.Wins;
            if ($.inArray(winId, Wins) >= 0) {
                isComboWin = true
            } else {
                if (isComboArcWin) {
                    isComboWin = true
                } else {
                    isComboWin = false
                }
            }
            if (!isComboWin || (isComboWin && ComboWinCnt == 0)) {
                $.each(xcxljgJson,
                function(k, o) {
                    if (o.type == "B") {
                        var temMoney = 0;
                        var Money = 0;
                        var temBjArea = 0;
                        var bjArea = 0;
                        var tempBjPrice = 0;
                        var bjPrice = 0;
                        var temDesc = "";
                        var Desc = "";
                        var bjExp = o.bjExp;
                        var bjDescExp = o.bjDescExp;
                        var CntExp2 = o.CntExp2;
                        var bjAreaExp = o.bjAreaExp;
                        var bjPriceExp = o.bjPriceExp;
                        if (isEmptyOrNull(bjExp)) {
                            bjExp = "0"
                        }
                        if (isEmptyOrNull(bjDescExp)) {
                            bjDescExp = '""'
                        }
                        if (isEmptyOrNull(CntExp2)) {
                            CntExp2 = ""
                        }
                        if (isEmptyOrNull(bjAreaExp)) {
                            bjAreaExp = ""
                        }
                        if (isEmptyOrNull(bjPriceExp)) {
                            bjPriceExp = ""
                        }
                        if ($(nodeFrame).length > 0) {
                            var obj = nodeFrame;
                            temMoney = Number(MicroDraw_genData_calcExp(mcflId, bjExp, obj.getAttribute("id"), xcxljgJson));
                            Money = Number(Money) + Number(temMoney);
                            temBjArea = Number(MicroDraw_genData_calcExp(mcflId, bjAreaExp, obj.getAttribute("id"), xcxljgJson));
                            bjArea = Number(bjArea) + Number(temBjArea);
                            temBjPrice = Number(MicroDraw_genData_calcExp(mcflId, bjPriceExp, obj.getAttribute("id"), xcxljgJson));
                            bjPrice = Number(bjPrice) + Number(temBjPrice);
                            temDesc = MicroDraw_genData_calcExp(mcflId, bjDescExp, obj.getAttribute("id"), xcxljgJson);
                            Desc = Desc + " " + temDesc
                        }
                        MicroDraw_genData_bj_addRow(bjDgId, Numx, winId, o.name, bjExp, Money, "", bjDescExp, Desc, o.bjType, CntExp2, o.CalcFlag, bjAreaExp, bjArea, bjPriceExp, bjPrice, 100)
                    }
                });
                setXCXLDiscountFlag(xcxlId);
                if (isComboWin) {
                    ComboWinCnt++
                }
            }
            $.each(xcxljgJson,
            function(k, o) {
                if (o.type == "L") {
                    var temCnt = 0;
                    var Cnt = 0;
                    var CntExp = o.cntExp;
                    if (isEmptyOrNull(CntExp)) {
                        CntExp = "0"
                    }
                    if ($(nodeFrame).length > 0) {
                        var obj = nodeFrame;
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    }
                    MicroDraw_genData_label_addRow(labelDgId, Numx, winId, o.name, CntExp, Cnt, "")
                }
            });
            if (!isComboWin || (isComboWin && ComboWinCntCost == 0)) {
                $.each(xcxljgJson,
                function(k, o) {
                    if (o.type == "A") {
                        var temMoney = 0;
                        var Money = 0;
                        var exp = o.EXP;
                        var memo = o.memo;
                        if (isEmptyOrNull(exp)) {
                            exp = "0"
                        }
                        if ($(nodeFrame).length > 0) {
                            var obj = nodeFrame;
                            temMoney = Number(MicroDraw_genData_calcExp(mcflId, exp, obj.getAttribute("id"), xcxljgJson));
                            Money = Number(Money) + Number(temMoney)
                        }
                        MicroDraw_genData_cost_addRow(costDgId, Numx, winId, o.name, exp, Money, memo)
                    }
                });
                if (isComboWin) {
                    ComboWinCntCost++
                }
            }
            var BCZDZ = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "标尺中对中", "prid");
            var tingIdList = "";
            var mxList = "";
            var flagList = "";
            var typeList = "";
            var mxArr;
            var flagArr;
            var typeArr;
            $("#" + winId + " [mtype='" + mDrawFlag_TingV + "']").each(function(i, obj) {
                var ObjId = obj.getAttribute("id");
                var ObjPrId = obj.getAttribute("mprid");
                var mbreakframe = obj.getAttribute("mbreakframe");
                var mx = obj.getAttribute("mx");
                var mflag = obj.getAttribute("mflag");
                var type = MicroDraw_getTlcTingKind(ObjId);
                var arr = type.split(",");
                var tingType = arr[0];
                var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "prid");
                if (!isEmptyOrNull(ObjPrId)) {
                    PrId = ObjPrId
                }
                if (mbreakframe == "Y") {
                    tingIdList = tingIdList + ";" + ObjId;
                    mxList = mxList + ";" + mx;
                    flagList = flagList + ";" + mflag;
                    typeList = typeList + ";" + type
                }
            });
            if (!isEmptyOrNull(mxList)) {
                tingIdList = ";" + tingIdList.substr(1);
                mxList = "0;" + mxList.substr(1);
                flagList = "0;" + flagList.substr(1);
                typeList = ",,;" + typeList.substr(1);
                var bfWidth = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封宽度", "prid");
                var gdWidth = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "固定框宽度", "prid");
                var syDist = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "挺伸入边封量", "prid");
                var syGdDist = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "挺伸入固定量", "prid");
                var tingSbfDist = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "横挺遇双边封减量", "prid");
                if (isEmptyOrNull(tingSbfDist)) {
                    tingSbfDist = "0"
                }
                var winFlag = $("#" + winId)[0].getAttribute("mwin");
                tingIdArr = tingIdList.split(";");
                mxArr = mxList.split(";");
                flagArr = flagList.split(";");
                typeArr = typeList.split(";");
                var frameId = $("#" + winId + " [mtype='" + mDrawFlag_FrameRect + "']")[0].getAttribute("id");
                var topRow;
                var bottomRow;
                var topIdx = -1;
                var bottomIdx = -1;
                var rows = $("#" + mDrawPrProperty).datagrid("getRows");
                $.each(rows,
                function(i, row) {
                    if (row.ObjId == frameId && row.Memo == "上" && topIdx == -1) {
                        topRow = row;
                        topIdx = i
                    }
                    if (row.ObjId == frameId && row.Memo == "下" && bottomIdx == -1) {
                        bottomRow = row;
                        bottomIdx = i
                    }
                });
                var rows = $("#" + mDrawPrProperty).datagrid("getRows");
                for (var k = rows.length - 1; k >= 0; k--) {
                    var idx = $("#" + mDrawPrProperty).datagrid("getRowIndex", rows[k]);
                    if (rows[k].ObjId == frameId && rows[k].Memo == "上") {
                        $("#" + mDrawPrProperty).datagrid("deleteRow", idx)
                    }
                    if (rows[k].ObjId == frameId && rows[k].Memo == "下") {
                        $("#" + mDrawPrProperty).datagrid("deleteRow", idx)
                    }
                }
                var temStr = "";
                for (var i = 0; i < mxArr.length; i++) {
                    for (j = i + 1; j < mxArr.length; j++) {
                        if (Number(mxArr[j]) < Number(mxArr[i])) {
                            temStr = tingIdArr[i];
                            tingIdArr[i] = tingIdArr[j];
                            tingIdArr[j] = temStr;
                            temStr = mxArr[i];
                            mxArr[i] = mxArr[j];
                            mxArr[j] = temStr;
                            temStr = flagArr[i];
                            flagArr[i] = flagArr[j];
                            flagArr[j] = temStr;
                            temStr = typeArr[i];
                            typeArr[i] = typeArr[j];
                            typeArr[j] = temStr
                        }
                    }
                }
                for (var i = 1; i < mxArr.length; i++) {
                    var tingSbfSubExp = "";
                    var leftSub = 0;
                    var rightSub = 0;
                    var newLen = 0;
                    var newLenExp = "";
                    var tingTypeArr = typeArr[i].split(",");
                    var tingType = tingTypeArr[0];
                    var lType = tingTypeArr[1];
                    var rType = tingTypeArr[2];
                    var preTingTypeArr = typeArr[i - 1].split(",");
                    var preTingType = preTingTypeArr[0];
                    var preLType = preTingTypeArr[1];
                    var preRType = preTingTypeArr[2];
                    if (i == 1) {
                        if (getTlcFrameKind(nodeFrame.getAttribute("id")).substr(0, 1) == "B") {
                            leftSub = bfWidth - syDist
                        } else {
                            leftSub = gdWidth - syGdDist
                        }
                        switch (tingType) {
                        case "双边封":
                            rightSub = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "双边封宽度", "prid")) / 2 - Number(syDist);
                            if (!MicroDraw_hasTlc(winId, tingIdArr[i - 1], tingIdArr[i])) {
                                tingSbfSubExp = tingSbfSubExp + " - " + tingSbfDist
                            }
                            break;
                        case "转角双边封":
                            rightSub = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角双边封宽度", "prid")) / 2 - Number(syDist);
                            if (!MicroDraw_hasTlc(winId, tingIdArr[i - 1], tingIdArr[i])) {
                                tingSbfSubExp = tingSbfSubExp + " - " + tingSbfDist
                            }
                            break;
                        case "边封固定":
                            if (lType == "B") {
                                if (BCZDZ == "Y") {
                                    rightSub = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid"))) / 2 - Number(syDist)
                                } else {
                                    rightSub = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid")) - Number(syDist)
                                }
                            } else {
                                if (BCZDZ == "Y") {
                                    rightSub = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid"))) / 2 - Number(syGdDist)
                                } else {
                                    rightSub = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) - Number(syGdDist)
                                }
                            }
                            break;
                        case "转角边封固定":
                            if (lType == "B") {
                                if (BCZDZ == "Y") {
                                    rightSub = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid"))) / 2 - Number(syDist)
                                } else {
                                    rightSub = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid")) - Number(syDist)
                                }
                            } else {
                                if (BCZDZ == "Y") {
                                    rightSub = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid"))) / 2 - Number(syGdDist)
                                } else {
                                    rightSub = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) - Number(syGdDist)
                                }
                            }
                            break;
                        case "转角双固定":
                            rightSub = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角双固定宽度", "prid")) / 2 - Number(syGdDist);
                            break;
                        default:
                        }
                    } else {
                        switch (preTingType) {
                        case "双边封":
                            leftSub = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "双边封宽度", "prid")) / 2 - Number(syDist);
                            if (!MicroDraw_hasTlc(winId, tingIdArr[i - 1], tingIdArr[i])) {
                                tingSbfSubExp = tingSbfSubExp + " - " + tingSbfDist
                            }
                            break;
                        case "转角双边封":
                            leftSub = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角双边封宽度", "prid")) / 2 - Number(syDist);
                            if (!MicroDraw_hasTlc(winId, tingIdArr[i - 1], tingIdArr[i])) {
                                tingSbfSubExp = tingSbfSubExp + " - " + tingSbfDist
                            }
                            break;
                        case "边封固定":
                            if (preRType == "B") {
                                if (BCZDZ == "Y") {
                                    leftSub = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid"))) / 2 - Number(syDist)
                                } else {
                                    leftSub = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid")) - Number(syDist)
                                }
                            } else {
                                if (BCZDZ == "Y") {
                                    leftSub = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid"))) / 2 - Number(syGdDist)
                                } else {
                                    leftSub = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) - Number(syGdDist)
                                }
                            }
                            break;
                        case "转角边封固定":
                            if (preRType == "B") {
                                if (BCZDZ == "Y") {
                                    leftSub = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid"))) / 2 - Number(syDist)
                                } else {
                                    leftSub = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid")) - Number(syDist)
                                }
                            } else {
                                if (BCZDZ == "Y") {
                                    leftSub = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid"))) / 2 - Number(syGdDist)
                                } else {
                                    leftSub = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) - Number(syGdDist)
                                }
                            }
                            break;
                        case "转角双固定":
                            leftSub = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角双固定宽度", "prid")) / 2 - Number(syGdDist);
                            break;
                        default:
                        }
                        switch (tingType) {
                        case "双边封":
                            rightSub = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "双边封宽度", "prid")) / 2 - Number(syDist);
                            if (!MicroDraw_hasTlc(winId, tingIdArr[i - 1], tingIdArr[i])) {
                                tingSbfSubExp = tingSbfSubExp + " - " + tingSbfDist
                            }
                            break;
                        case "转角双边封":
                            rightSub = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角双边封宽度", "prid")) / 2 - Number(syDist);
                            if (!MicroDraw_hasTlc(winId, tingIdArr[i - 1], tingIdArr[i])) {
                                tingSbfSubExp = tingSbfSubExp + " - " + tingSbfDist
                            }
                            break;
                        case "边封固定":
                            if (lType == "B") {
                                if (BCZDZ == "Y") {
                                    rightSub = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid"))) / 2 - Number(syDist)
                                } else {
                                    rightSub = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid")) - Number(syDist)
                                }
                            } else {
                                if (BCZDZ == "Y") {
                                    rightSub = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid"))) / 2 - Number(syGdDist)
                                } else {
                                    rightSub = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) - Number(syGdDist)
                                }
                            }
                            break;
                        case "转角边封固定":
                            if (lType == "B") {
                                if (BCZDZ == "Y") {
                                    rightSub = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid"))) / 2 - Number(syDist)
                                } else {
                                    rightSub = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid")) - Number(syDist)
                                }
                            } else {
                                if (BCZDZ == "Y") {
                                    rightSub = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid"))) / 2 - Number(syGdDist)
                                } else {
                                    rightSub = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) - Number(syGdDist)
                                }
                            }
                            break;
                        case "转角双固定":
                            rightSub = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角双固定宽度", "prid")) / 2 - Number(syGdDist);
                            break;
                        default:
                        }
                    }
                    newLen = mxArr[i] - mxArr[i - 1] - leftSub - rightSub;
                    if (i == 1) {
                        newLenExp = "( " + winFlag + "." + flagArr[i] + " - " + flagArr[i - 1] + ") - " + leftSub.toString() + " - " + rightSub.toString() + tingSbfSubExp
                    } else {
                        newLenExp = "( " + winFlag + "." + flagArr[i] + " - " + winFlag + "." + flagArr[i - 1] + ") - " + leftSub.toString() + " - " + rightSub.toString() + tingSbfSubExp
                    }
                    var tBreakPrKind = "上滑";
                    var bBreakPrKind = "下滑";
                    $("#" + winId + " [mtype='" + mDrawFlag_Glass + "']").each(function(j, obj) {
                        var ObjId = obj.getAttribute("id");
                        if (obj.getAttribute("mtid") == "" && Number(obj.getAttribute("mx")) >= Number(mxArr[i - 1]) && Number(obj.getAttribute("mx")) < Number(mxArr[i])) {
                            tBreakPrKind = "固定框"
                        }
                        if (obj.getAttribute("mbid") == "" && Number(obj.getAttribute("mx")) >= Number(mxArr[i - 1]) && Number(obj.getAttribute("mx")) < Number(mxArr[i])) {
                            bBreakPrKind = "固定框"
                        }
                    });
                    var tBreakPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tBreakPrKind, "prid");
                    var bBreakPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", bBreakPrKind, "prid");
                    $("#" + mDrawPrProperty).datagrid("insertRow", {
                        index: $("#" + mDrawPrProperty).datagrid("getRows").length,
                        row: {
                            Numx: topRow.Numx,
                            ObjId: topRow.ObjId,
                            ProductId: tBreakPrId,
                            Len: newLen,
                            LenExp: newLenExp,
                            Cnt: topRow.Cnt,
                            CntExp: topRow.CntExp,
                            Angle: topRow.Angle,
                            BcpType: topRow.BcpType,
                            Memo: topRow.Memo,
                            color: topRow.color,
                            colorExp: topRow.colorExp,
                            xcxljgid: 0
                        }
                    });
                    $.each(xcxljgJson,
                    function(k, fcObj) {
                        if (fcObj.type == "P" && fcObj.name == tBreakPrKind && fcObj.bmain.toString() == "false") {
                            $("#" + mDrawPrProperty).datagrid("insertRow", {
                                index: $("#" + mDrawPrProperty).datagrid("getRows").length,
                                row: {
                                    Numx: topRow.Numx,
                                    ObjId: topRow.ObjId,
                                    ProductId: fcObj.prid,
                                    Len: newLen,
                                    LenExp: newLenExp,
                                    Cnt: MicroDraw_genData_calcExp(mcflId, fcObj.cntExp, topRow.ObjId, xcxljgJson, false),
                                    CntExp: fcObj.cntExp,
                                    Angle: fcObj.fcAngle,
                                    BcpType: fcObj.bcpType,
                                    Memo: topRow.Memo,
                                    color: MicroDraw_genData_calcExp(mcflId, fcObj.colorExp, topRow.ObjId, xcxljgJson, false),
                                    colorExp: fcObj.colorExp,
                                    xcxljgid: ($.Micro.IsEmpty(fcObj.xcxljgid) ? 0 : fcObj.xcxljgid)
                                }
                            })
                        }
                    });
                    $("#" + mDrawPrProperty).datagrid("insertRow", {
                        index: $("#" + mDrawPrProperty).datagrid("getRows").length,
                        row: {
                            Numx: bottomRow.Numx,
                            ObjId: bottomRow.ObjId,
                            ProductId: bBreakPrId,
                            Len: newLen,
                            LenExp: newLenExp,
                            Cnt: bottomRow.Cnt,
                            CntExp: bottomRow.CntExp,
                            Angle: bottomRow.Angle,
                            BcpType: bottomRow.BcpType,
                            Memo: bottomRow.Memo,
                            color: bottomRow.color,
                            colorExp: bottomRow.colorExp,
                            xcxljgid: 0
                        }
                    });
                    $.each(xcxljgJson,
                    function(k, fcObj) {
                        if (fcObj.type == "P" && fcObj.name == bBreakPrKind && fcObj.bmain.toString() == "false") {
                            $("#" + mDrawPrProperty).datagrid("insertRow", {
                                index: $("#" + mDrawPrProperty).datagrid("getRows").length,
                                row: {
                                    Numx: bottomRow.Numx,
                                    ObjId: bottomRow.ObjId,
                                    ProductId: fcObj.prid,
                                    Len: newLen,
                                    LenExp: newLenExp,
                                    Cnt: MicroDraw_genData_calcExp(mcflId, fcObj.cntExp, bottomRow.ObjId, xcxljgJson, false),
                                    CntExp: fcObj.cntExp,
                                    Angle: fcObj.fcAngle,
                                    BcpType: fcObj.bcpType,
                                    Memo: bottomRow.Memo,
                                    color: MicroDraw_genData_calcExp(mcflId, fcObj.colorExp, bottomRow.ObjId, xcxljgJson, false),
                                    colorExp: fcObj.colorExp,
                                    xcxljgid: ($.Micro.IsEmpty(fcObj.xcxljgid) ? 0 : fcObj.xcxljgid)
                                }
                            })
                        }
                    })
                }
                var tingSbfSubExp = "";
                var tingTypeArr = typeArr[mxArr.length - 1].split(",");
                var tingType = tingTypeArr[0];
                var lType = tingTypeArr[1];
                var rType = tingTypeArr[2];
                switch (tingType) {
                case "双边封":
                    leftSub = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "双边封宽度", "prid")) / 2 - Number(syDist);
                    if (!MicroDraw_hasTlc(winId, tingIdArr[mxArr.length - 1], "")) {
                        tingSbfSubExp = tingSbfSubExp + " - " + tingSbfDist
                    }
                    break;
                case "转角双边封":
                    leftSub = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角双边封宽度", "prid")) / 2 - Number(syDist);
                    if (!MicroDraw_hasTlc(winId, tingIdArr[mxArr.length - 1], "")) {
                        tingSbfSubExp = tingSbfSubExp + " - " + tingSbfDist
                    }
                    break;
                case "边封固定":
                    if (rType == "B") {
                        if (BCZDZ == "Y") {
                            leftSub = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid"))) / 2 - Number(syDist)
                        } else {
                            leftSub = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid")) - Number(syDist)
                        }
                    } else {
                        if (BCZDZ == "Y") {
                            leftSub = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid"))) / 2 - Number(syGdDist)
                        } else {
                            leftSub = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) - Number(syGdDist)
                        }
                    }
                    break;
                case "转角边封固定":
                    if (rType == "B") {
                        if (BCZDZ == "Y") {
                            leftSub = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid"))) / 2 - Number(syDist)
                        } else {
                            leftSub = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid")) - Number(syDist)
                        }
                    } else {
                        if (BCZDZ == "Y") {
                            leftSub = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid"))) / 2 - Number(syGdDist)
                        } else {
                            leftSub = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) - Number(syGdDist)
                        }
                    }
                    break;
                case "转角双固定":
                    leftSub = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角双固定宽度", "prid")) / 2 - Number(syGdDist);
                    break;
                default:
                }
                if (getTlcFrameKind(nodeFrame.getAttribute("id")).substr(2, 1) == "B") {
                    rightSub = bfWidth - syDist
                } else {
                    rightSub = gdWidth - syGdDist
                }
                newLen = 0;
                newLenExp = "( " + winFlag + ".W - " + winFlag + "." + flagArr[mxArr.length - 1] + ") - " + leftSub.toString() + " - " + rightSub.toString() + tingSbfSubExp;
                var tBreakPrKind = "上滑";
                var bBreakPrKind = "下滑";
                $("#" + winId + " [mtype='" + mDrawFlag_Glass + "']").each(function(j, obj) {
                    var ObjId = obj.getAttribute("id");
                    if (obj.getAttribute("mtid") == "" && Number(obj.getAttribute("mx")) >= Number(mxArr[mxArr.length - 1]) && Number(obj.getAttribute("mx")) < Number(nodeFrame.getAttribute("mwidth"))) {
                        tBreakPrKind = "固定框"
                    }
                    if (obj.getAttribute("mbid") == "" && Number(obj.getAttribute("mx")) >= Number(mxArr[mxArr.length - 1]) && Number(obj.getAttribute("mx")) < Number(nodeFrame.getAttribute("mwidth"))) {
                        bBreakPrKind = "固定框"
                    }
                });
                var tBreakPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tBreakPrKind, "prid");
                var bBreakPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", bBreakPrKind, "prid");
                $("#" + mDrawPrProperty).datagrid("insertRow", {
                    index: $("#" + mDrawPrProperty).datagrid("getRows").length,
                    row: {
                        Numx: topRow.Numx,
                        ObjId: topRow.ObjId,
                        ProductId: tBreakPrId,
                        Len: newLen,
                        LenExp: newLenExp,
                        Cnt: topRow.Cnt,
                        CntExp: topRow.CntExp,
                        Angle: topRow.Angle,
                        BcpType: topRow.BcpType,
                        Memo: topRow.Memo,
                        color: topRow.color,
                        colorExp: topRow.colorExp,
                        xcxljgid: 0
                    }
                });
                $.each(xcxljgJson,
                function(k, fcObj) {
                    if (fcObj.type == "P" && fcObj.name == tBreakPrKind && fcObj.bmain.toString() == "false") {
                        $("#" + mDrawPrProperty).datagrid("insertRow", {
                            index: $("#" + mDrawPrProperty).datagrid("getRows").length,
                            row: {
                                Numx: topRow.Numx,
                                ObjId: topRow.ObjId,
                                ProductId: fcObj.prid,
                                Len: newLen,
                                LenExp: newLenExp,
                                Cnt: MicroDraw_genData_calcExp(mcflId, fcObj.cntExp, topRow.ObjId, xcxljgJson, false),
                                CntExp: fcObj.cntExp,
                                Angle: fcObj.fcAngle,
                                BcpType: fcObj.bcpType,
                                Memo: topRow.Memo,
                                color: MicroDraw_genData_calcExp(mcflId, fcObj.colorExp, topRow.ObjId, xcxljgJson, false),
                                colorExp: fcObj.colorExp,
                                xcxljgid: ($.Micro.IsEmpty(fcObj.xcxljgid) ? 0 : fcObj.xcxljgid)
                            }
                        })
                    }
                });
                $("#" + mDrawPrProperty).datagrid("insertRow", {
                    index: $("#" + mDrawPrProperty).datagrid("getRows").length,
                    row: {
                        Numx: bottomRow.Numx,
                        ObjId: bottomRow.ObjId,
                        ProductId: bBreakPrId,
                        Len: newLen,
                        LenExp: newLenExp,
                        Cnt: bottomRow.Cnt,
                        CntExp: bottomRow.CntExp,
                        Angle: bottomRow.Angle,
                        BcpType: bottomRow.BcpType,
                        Memo: bottomRow.Memo,
                        color: bottomRow.color,
                        colorExp: bottomRow.colorExp,
                        xcxljgid: 0
                    }
                });
                $.each(xcxljgJson,
                function(k, fcObj) {
                    if (fcObj.type == "P" && fcObj.name == bBreakPrKind && fcObj.bmain.toString() == "false") {
                        $("#" + mDrawPrProperty).datagrid("insertRow", {
                            index: $("#" + mDrawPrProperty).datagrid("getRows").length,
                            row: {
                                Numx: bottomRow.Numx,
                                ObjId: bottomRow.ObjId,
                                ProductId: fcObj.prid,
                                Len: newLen,
                                LenExp: newLenExp,
                                Cnt: MicroDraw_genData_calcExp(mcflId, fcObj.cntExp, bottomRow.ObjId, xcxljgJson, false),
                                CntExp: fcObj.cntExp,
                                Angle: fcObj.fcAngle,
                                BcpType: fcObj.bcpType,
                                Memo: bottomRow.Memo,
                                color: MicroDraw_genData_calcExp(mcflId, fcObj.colorExp, bottomRow.ObjId, xcxljgJson, false),
                                colorExp: fcObj.colorExp,
                                xcxljgid: ($.Micro.IsEmpty(fcObj.xcxljgid) ? 0 : fcObj.xcxljgid)
                            }
                        })
                    }
                })
            }
            break;
        case "3":
            $.each(xcxljgJson,
            function(k, o) {
                if (o.type == "O") {
                    var prid = o.prid;
                    if (o.name == "MGG" || o.name == "MSA") {
                        if (o.prid.toString().substr(0, 1) != '"') {
                            prid = '"' + prid + '"'
                        }
                    }
                    MicroDraw_genData_opt_addRow(mDrawOptProperty, MicroBudget_getPropertyValue(mBudgetWinProperty, "Numx"), o.name, o.memo, prid, o.optList, o.optListExp, "", o.optValExp, "1", o.bgyOptExp, o.bxdOpt, 0)
                }
            });
            $("#" + winId + " [mtype='" + mDrawFlag_FrameRect + "']").each(function(i, obj) {
                var tem = "";
                var ObjId = obj.getAttribute("id");
                var tPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上框", "prid");
                var bPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下框", "prid");
                var lPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左框", "prid");
                var rPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右框", "prid");
                var tCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上框", "cntExp");
                var bCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下框", "cntExp");
                var lCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左框", "cntExp");
                var rCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右框", "cntExp");
                tem = obj.getAttribute("mpjstyle");
                var frameAngle;
                switch (tem) {
                case "45":
                    frameAngle = "45-45";
                    break;
                case "H":
                    frameAngle = "90-90";
                    break;
                case "V":
                    frameAngle = "90-90";
                    break;
                case "45V":
                    frameAngle = "45-90";
                    break
                }
                var tPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上框", "exp");
                var bPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下框", "exp");
                var lPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左框", "exp");
                var rPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右框", "exp");
                var tBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上框", "bcpType");
                var bBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下框", "bcpType");
                var lBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左框", "bcpType");
                var rBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右框", "bcpType");
                var tColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上框", "colorExp");
                var bColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下框", "colorExp");
                var lColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左框", "colorExp");
                var rColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右框", "colorExp");
                if (!isEmptyOrNull(tPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, tPrId, MicroDraw_genData_calcExp(mcflId, tPrExp, ObjId, xcxljgJson), tPrExp, MicroDraw_genData_calcExp(mcflId, tCntExp, ObjId, xcxljgJson), tCntExp, frameAngle, tBcpType, "上", MicroDraw_genData_calcExp(mcflId, tColorExp, ObjId, xcxljgJson), tColorExp, "上框")
                }
                if (!isEmptyOrNull(bPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, bPrId, MicroDraw_genData_calcExp(mcflId, bPrExp, ObjId, xcxljgJson), bPrExp, MicroDraw_genData_calcExp(mcflId, bCntExp, ObjId, xcxljgJson), bCntExp, frameAngle, bBcpType, "下", MicroDraw_genData_calcExp(mcflId, bColorExp, ObjId, xcxljgJson), bColorExp, "下框")
                }
                if (!isEmptyOrNull(lPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, lPrId, MicroDraw_genData_calcExp(mcflId, lPrExp, ObjId, xcxljgJson), lPrExp, MicroDraw_genData_calcExp(mcflId, lCntExp, ObjId, xcxljgJson), lCntExp, frameAngle, lBcpType, "左", MicroDraw_genData_calcExp(mcflId, lColorExp, ObjId, xcxljgJson), lColorExp, "左框")
                }
                if (!isEmptyOrNull(rPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, rPrId, MicroDraw_genData_calcExp(mcflId, rPrExp, ObjId, xcxljgJson), rPrExp, MicroDraw_genData_calcExp(mcflId, rCntExp, ObjId, xcxljgJson), rCntExp, frameAngle, rBcpType, "右", MicroDraw_genData_calcExp(mcflId, rColorExp, ObjId, xcxljgJson), rColorExp, "右框")
                }
                cpSeq = Number(cpSeq) + 1;
                MicroDraw_genData_cp_addRow(cpDgId, Numx, ObjId, "框", MicroDraw_genData_calcExp(mcflId, "W", ObjId, xcxljgJson), "W", MicroDraw_genData_calcExp(mcflId, "H", ObjId, xcxljgJson), "H", MicroDraw_genData_calcExp(mcflId, "CNT", ObjId, xcxljgJson), "CNT", "", "C" + cpSeq.toString())
            });
            $("#" + winId + " [mtype='" + mDrawFlag_Pkc + "'], #" + winId + " [mtype='" + mDrawFlag_Dkc + "']").each(function(i, obj) {
                var tem = "";
                var ObjId = obj.getAttribute("id");
                var mtype = obj.getAttribute("mtype");
                var tPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上扇", "prid");
                var bPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下扇", "prid");
                var lPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左扇", "prid");
                var rPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右扇", "prid");
                var tCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上扇", "cntExp");
                var bCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下扇", "cntExp");
                var lCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左扇", "cntExp");
                var rCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右扇", "cntExp");
                tem = obj.getAttribute("mfanpjstyle");
                var frameAngle;
                switch (tem) {
                case "45":
                    frameAngle = "45-45";
                    break;
                case "H":
                    frameAngle = "90-90";
                    break;
                case "V":
                    frameAngle = "90-90";
                    break
                }
                var tPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上扇", "exp");
                var bPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下扇", "exp");
                var lPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左扇", "exp");
                var rPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右扇", "exp");
                tBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上扇", "bcpType");
                bBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下扇", "bcpType");
                lBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左扇", "bcpType");
                rBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右扇", "bcpType");
                var tColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上扇", "colorExp");
                var bColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下扇", "colorExp");
                var lColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左扇", "colorExp");
                var rColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右扇", "colorExp");
                if (!isEmptyOrNull(tPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, tPrId, MicroDraw_genData_calcExp(mcflId, tPrExp, ObjId, xcxljgJson), tPrExp, MicroDraw_genData_calcExp(mcflId, tCntExp, ObjId, xcxljgJson), tCntExp, frameAngle, tBcpType, "上", MicroDraw_genData_calcExp(mcflId, tColorExp, ObjId, xcxljgJson), tColorExp, "上扇")
                }
                if (!isEmptyOrNull(bPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, bPrId, MicroDraw_genData_calcExp(mcflId, bPrExp, ObjId, xcxljgJson), bPrExp, MicroDraw_genData_calcExp(mcflId, bCntExp, ObjId, xcxljgJson), bCntExp, frameAngle, bBcpType, "下", MicroDraw_genData_calcExp(mcflId, bColorExp, ObjId, xcxljgJson), bColorExp, "下扇")
                }
                if (!isEmptyOrNull(lPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, lPrId, MicroDraw_genData_calcExp(mcflId, lPrExp, ObjId, xcxljgJson), lPrExp, MicroDraw_genData_calcExp(mcflId, lCntExp, ObjId, xcxljgJson), lCntExp, frameAngle, lBcpType, "左", MicroDraw_genData_calcExp(mcflId, lColorExp, ObjId, xcxljgJson), lColorExp, "左扇")
                }
                if (!isEmptyOrNull(rPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, rPrId, MicroDraw_genData_calcExp(mcflId, rPrExp, ObjId, xcxljgJson), rPrExp, MicroDraw_genData_calcExp(mcflId, rCntExp, ObjId, xcxljgJson), rCntExp, frameAngle, rBcpType, "右", MicroDraw_genData_calcExp(mcflId, rColorExp, ObjId, xcxljgJson), rColorExp, "右扇")
                }
                cpSeq = Number(cpSeq) + 1;
                if (mtype == mDrawFlag_Pkc) {
                    MicroDraw_genData_cp_addRow(cpDgId, Numx, ObjId, "扇", MicroDraw_genData_calcExp(mcflId, tPrExp, ObjId, xcxljgJson), tPrExp, MicroDraw_genData_calcExp(mcflId, lPrExp, ObjId, xcxljgJson), lPrExp, MicroDraw_genData_calcExp(mcflId, "CNT", ObjId, xcxljgJson), "CNT", "", "C" + cpSeq.toString())
                } else {
                    if (mtype == mDrawFlag_Dkc) {
                        MicroDraw_genData_cp_addRow(cpDgId, Numx, ObjId, "扇", MicroDraw_genData_calcExp(mcflId, tPrExp, ObjId, xcxljgJson), tPrExp, MicroDraw_genData_calcExp(mcflId, lPrExp, ObjId, xcxljgJson), lPrExp, MicroDraw_genData_calcExp(mcflId, "2*CNT", ObjId, xcxljgJson), "2*CNT", "", "C" + cpSeq.toString())
                    }
                }
                var prId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇横挺", "prid");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇横挺", "cntExp");
                frameAngle = "90-90";
                var prExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇横挺", "exp");
                bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇横挺", "bcpType");
                var colorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "扇横挺", "colorExp");
                if (!isEmptyOrNull(prId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, prId, MicroDraw_genData_calcExp(mcflId, prExp, ObjId, xcxljgJson), prExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, frameAngle, bcpType, "横", MicroDraw_genData_calcExp(mcflId, colorExp, ObjId, xcxljgJson), colorExp, "扇横挺")
                }
                if (mtype == mDrawFlag_Dkc) {
                    var ObjId = obj.getAttribute("id");
                    var ObjPrId = obj.getAttribute("mprid");
                    var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "假中挺", "prid");
                    if (!isEmptyOrNull(ObjPrId)) {
                        PrId = ObjPrId
                    }
                    var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "假中挺", "exp");
                    bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "假中挺", "bcpType");
                    var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "假中挺", "cntExp");
                    var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "假中挺", "colorExp");
                    if (!isEmptyOrNull(PrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", bcpType, "竖假中挺", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, "假中挺")
                    }
                }
                if (mtype == mDrawFlag_Dkc) {
                    var ObjId = obj.getAttribute("id");
                    var ObjPrId = obj.getAttribute("mprid");
                    var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "纱扇假中挺", "prid");
                    if (!isEmptyOrNull(ObjPrId)) {
                        PrId = ObjPrId
                    }
                    var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "纱扇假中挺", "exp");
                    bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "纱扇假中挺", "bcpType");
                    var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "纱扇假中挺", "cntExp");
                    var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "纱扇假中挺", "colorExp");
                    if (!isEmptyOrNull(PrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", bcpType, "竖纱扇假中挺", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, "纱扇假中挺")
                    }
                }
            });
            $("#" + winId + " [mtype='" + mDrawFlag_Pkc + "'], #" + winId + " [mtype='" + mDrawFlag_Dkc + "']").each(function(i, obj) {
                var tem = "";
                var ObjId = obj.getAttribute("id");
                var Glass = obj.getAttribute("mglass");
                if (isEmptyOrNull(Glass)) {
                    Glass = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "MGG", "prid")
                }
                if (Glass.substr(0, 1) == '"') {
                    Glass = Glass.substr(1)
                }
                if (Glass.substr(Glass.length - 1, 1) == '"') {
                    Glass = Glass.substr(0, Glass.length - 1)
                }
                var WExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "扇玻宽度", "exp");
                var HExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "扇玻高度", "exp");
                bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "扇玻宽度", "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "扇玻宽度", "cntExp");
                var glExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "扇玻宽度", "glassExp");
                var glassExp = "";
                var glassGy = "";
                var glassGyExp = "";
                var glassDb = "";
                var glassDbExp = "";
                var glassMb = "";
                var glassMbExp = "";
                var glExpArr = glExp.split(",");
                glassExp = glExpArr[0];
                glassGyExp = glExpArr[1];
                glassDbExp = glExpArr[2];
                glassMbExp = glExpArr[3];
                if (!isEmptyOrNull(glExp)) {
                    Glass = MicroDraw_genData_calcExp(mcflId, glassExp, ObjId, xcxljgJson);
                    glassGy = MicroDraw_genData_calcExp(mcflId, glassGyExp, ObjId, xcxljgJson);
                    glassDb = MicroDraw_genData_calcExp(mcflId, glassDbExp, ObjId, xcxljgJson);
                    glassMb = MicroDraw_genData_calcExp(mcflId, glassMbExp, ObjId, xcxljgJson)
                }
                if (!isEmptyOrNull(Glass)) {
                    var node_txt = $("#" + ObjId + "_txt")[0];
                    var glassFlag = "";
                    if (!isEmptyOrNull(node_txt)) {
                        glassFlag = node_txt.textContent
                    }
                    var glAreaExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "扇玻宽度", "glAreaExp");
                    var W = MicroDraw_genData_calcExp(mcflId, WExp, ObjId, xcxljgJson);
                    var H = MicroDraw_genData_calcExp(mcflId, HExp, ObjId, xcxljgJson);
                    var cnt = MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson);
                    var glArea = MicroDraw_genData_calcExp(mcflId, glAreaExp, ObjId, xcxljgJson);
                    if ($.Micro.IsEmpty(glArea)) {
                        glArea = (Number(W) / 1000 * Number(H) / 1000 * cnt)
                    }
                    MicroDraw_genData_gl_addRow(mcflId, xcxljgJson, glDgId, Numx, ObjId, Glass, W, WExp, H, HExp, cnt, cntExp, bcpType, "", glassFlag, "扇玻宽度", glassExp, glassGy, glassGyExp, glassDb, glassDbExp, glassMb, glassMbExp, glArea, glAreaExp)
                }
            });
            $.each(xcxljgJson,
            function(k, o) {
                if (o.type == "F") {
                    var temCnt = 0;
                    var Cnt = 0;
                    if (o.prid.length > 0) {
                        $("#" + winId + " [mtype='" + mDrawFlag_FrameRect + "']").each(function(i, obj) {
                            temCnt = Number(MicroDraw_genData_calcExp(mcflId, o.cntExp, obj.getAttribute("id"), xcxljgJson));
                            Cnt = Number(Cnt) + Number(temCnt)
                        });
                        $("#" + winId + " [mtype='" + mDrawFlag_Pkc + "']").each(function(i, obj) {
                            temCnt = Number(MicroDraw_genData_calcExp(mcflId, o.cntExp, obj.getAttribute("id"), xcxljgJson));
                            Cnt = Number(Cnt) + Number(temCnt)
                        });
                        $("#" + winId + " [mtype='" + mDrawFlag_Dkc + "']").each(function(i, obj) {
                            temCnt = Number(MicroDraw_genData_calcExp(mcflId, o.cntExp, obj.getAttribute("id"), xcxljgJson));
                            Cnt = Number(Cnt) + Number(temCnt)
                        });
                        var CntExp2 = o.cntExp2;
                        if (!isEmptyOrNull(CntExp2)) {
                            CntExp2 = replaceAll(CntExp2, " RES ", Cnt.toString());
                            Cnt = Number(MicroDraw_genData_calcExp(0, CntExp2, "", ""))
                        }
                        MicroDraw_genData_wj_addRow(wjDgId, Numx, winId, o.prid, Cnt, o.cntExp, o.bcpType, o.usePlace, "", o.cntExp2, "1", o.bgyOptExp)
                    }
                }
            });
            var getCombWinIDs = MicroDraw_getCombWinIDs("all");
            var Wins = getCombWinIDs.Wins;
            if ($.inArray(winId, Wins) >= 0) {
                isComboWin = true
            } else {
                if (isComboArcWin) {
                    isComboWin = true
                } else {
                    isComboWin = false
                }
            }
            if (!isComboWin || (isComboWin && ComboWinCnt == 0)) {
                $.each(xcxljgJson,
                function(k, o) {
                    if (o.type == "B") {
                        var temMoney = 0;
                        var Money = 0;
                        var temBjArea = 0;
                        var bjArea = 0;
                        var tempBjPrice = 0;
                        var bjPrice = 0;
                        var temDesc = "";
                        var Desc = "";
                        var bjExp = o.bjExp;
                        var bjDescExp = o.bjDescExp;
                        var CntExp2 = o.cntExp2;
                        var bjAreaExp = o.bjAreaExp;
                        var bjPriceExp = o.bjPriceExp;
                        if (isEmptyOrNull(bjExp)) {
                            bjExp = "0"
                        }
                        if (isEmptyOrNull(bjDescExp)) {
                            bjDescExp = '""'
                        }
                        if (isEmptyOrNull(CntExp2)) {
                            CntExp2 = ""
                        }
                        if (isEmptyOrNull(bjAreaExp)) {
                            bjAreaExp = ""
                        }
                        if (isEmptyOrNull(bjPriceExp)) {
                            bjPriceExp = ""
                        }
                        $("#" + winId + " [mtype='" + mDrawFlag_FrameRect + "']").each(function(i, obj) {
                            temMoney = Number(MicroDraw_genData_calcExp(mcflId, bjExp, obj.getAttribute("id"), xcxljgJson));
                            Money = Number(Money) + Number(temMoney);
                            temBjArea = Number(MicroDraw_genData_calcExp(mcflId, bjAreaExp, obj.getAttribute("id"), xcxljgJson));
                            bjArea = Number(bjArea) + Number(temBjArea);
                            temBjPrice = Number(MicroDraw_genData_calcExp(mcflId, bjPriceExp, obj.getAttribute("id"), xcxljgJson));
                            bjPrice = Number(bjPrice) + Number(temBjPrice);
                            temDesc = MicroDraw_genData_calcExp(mcflId, bjDescExp, obj.getAttribute("id"), xcxljgJson);
                            Desc = Desc + " " + temDesc
                        });
                        MicroDraw_genData_bj_addRow(bjDgId, Numx, winId, o.name, bjExp, Money, "", bjDescExp, Desc, o.bjType, CntExp2, o.CalcFlag, bjAreaExp, bjArea, bjPriceExp, bjPrice, 100)
                    }
                });
                setXCXLDiscountFlag(xcxlId);
                if (isComboWin) {
                    ComboWinCnt++
                }
            }
            $.each(xcxljgJson,
            function(k, o) {
                if (o.type == "L") {
                    var temCnt = 0;
                    var Cnt = 0;
                    var CntExp = o.cntExp;
                    if (isEmptyOrNull(CntExp)) {
                        CntExp = "0"
                    }
                    $("#" + winId + " [mtype='" + mDrawFlag_FrameRect + "']").each(function(i, obj) {
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    });
                    MicroDraw_genData_label_addRow(labelDgId, Numx, winId, o.name, CntExp, Cnt, "")
                }
            });
            if (!isComboWin || (isComboWin && ComboWinCntCost == 0)) {
                $.each(xcxljgJson,
                function(k, o) {
                    if (o.type == "A") {
                        var temMoney = 0;
                        var Money = 0;
                        var exp = o.EXP;
                        var memo = o.memo;
                        if (isEmptyOrNull(exp)) {
                            exp = "0"
                        }
                        if ($(nodeFrame).length > 0) {
                            var obj = nodeFrame;
                            temMoney = Number(MicroDraw_genData_calcExp(mcflId, exp, obj.getAttribute("id"), xcxljgJson));
                            Money = Number(Money) + Number(temMoney)
                        }
                        MicroDraw_genData_cost_addRow(costDgId, Numx, winId, o.name, exp, Money, memo)
                    }
                });
                if (isComboWin) {
                    ComboWinCntCost++
                }
            }
            break;
        case "4":
            $.each(xcxljgJson,
            function(k, o) {
                if (o.type == "O") {
                    var prid = o.prid;
                    if (o.name == "MGG" || o.name == "MSA") {
                        if (o.prid.toString().substr(0, 1) != '"') {
                            prid = '"' + prid + '"'
                        }
                    }
                    MicroDraw_genData_opt_addRow(mDrawOptProperty, MicroBudget_getPropertyValue(mBudgetWinProperty, "Numx"), o.name, o.memo, prid, o.optList, o.optListExp, "", o.optValExp, "1", o.bgyOptExp, o.bxdOpt, 0)
                }
            });
            if ($(nodeFrame).length > 0) {
                var obj = nodeFrame;
                var tem = "";
                var ObjId = obj.getAttribute("id");
                var sgPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上轨", "prid");
                var tPrKind = "上轨";
                if (sgPrId.length > 0) {
                    tPrKind = "上轨"
                } else {
                    tPrKind = "上框"
                }
                $("#" + winId + " [mtype='" + mDrawFlag_Glass + "']").each(function(i, obj) {
                    var ObjId = obj.getAttribute("id");
                    if (obj.getAttribute("mtid") == "") {
                        tPrKind = "上框"
                    }
                });
                var bPrKind = "下框";
                var tPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tPrKind, "prid");
                var bPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", bPrKind, "prid");
                var lPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左框", "prid");
                var rPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右框", "prid");
                var tCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tPrKind, "cntExp");
                var bCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", bPrKind, "cntExp");
                var lCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左框", "cntExp");
                var rCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右框", "cntExp");
                tem = obj.getAttribute("mpjstyle");
                var frameAngle;
                switch (tem) {
                case "45":
                    frameAngle = "45-45";
                    break;
                case "H":
                    frameAngle = "90-90";
                    break;
                case "V":
                    frameAngle = "90-90";
                    break;
                case "45V":
                    frameAngle = "45-90";
                    break
                }
                var tPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tPrKind, "exp");
                var bPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", bPrKind, "exp");
                var lPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左框", "exp");
                var rPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右框", "exp");
                var tBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tPrKind, "bcpType");
                var bBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", bPrKind, "bcpType");
                var lBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左框", "bcpType");
                var rBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右框", "bcpType");
                var tColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tPrKind, "colorExp");
                var bColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", bPrKind, "colorExp");
                var lColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左框", "colorExp");
                var rColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右框", "colorExp");
                if (mtype == mDrawFlag_Win) {
                    if (!isEmptyOrNull(tPrId)) {
                        if (frameAngle == "45-90") {
                            MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, tPrId, MicroDraw_genData_calcExp(mcflId, tPrExp, ObjId, xcxljgJson), tPrExp, MicroDraw_genData_calcExp(mcflId, tCntExp, ObjId, xcxljgJson), tCntExp, "45-45", tBcpType, "上", MicroDraw_genData_calcExp(mcflId, tColorExp, ObjId, xcxljgJson), tColorExp, tPrKind)
                        } else {
                            MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, tPrId, MicroDraw_genData_calcExp(mcflId, tPrExp, ObjId, xcxljgJson), tPrExp, MicroDraw_genData_calcExp(mcflId, tCntExp, ObjId, xcxljgJson), tCntExp, frameAngle, tBcpType, "上", MicroDraw_genData_calcExp(mcflId, tColorExp, ObjId, xcxljgJson), tColorExp, tPrKind)
                        }
                    }
                    if (!isEmptyOrNull(bPrId)) {
                        if (frameAngle == "45-90") {
                            MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, bPrId, MicroDraw_genData_calcExp(mcflId, bPrExp, ObjId, xcxljgJson), bPrExp, MicroDraw_genData_calcExp(mcflId, bCntExp, ObjId, xcxljgJson), bCntExp, "90-90", bBcpType, "下", MicroDraw_genData_calcExp(mcflId, bColorExp, ObjId, xcxljgJson), bColorExp, bPrKind)
                        } else {
                            MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, bPrId, MicroDraw_genData_calcExp(mcflId, bPrExp, ObjId, xcxljgJson), bPrExp, MicroDraw_genData_calcExp(mcflId, bCntExp, ObjId, xcxljgJson), bCntExp, frameAngle, bBcpType, "下", MicroDraw_genData_calcExp(mcflId, bColorExp, ObjId, xcxljgJson), bColorExp, bPrKind)
                        }
                    }
                    if (!isEmptyOrNull(lPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, lPrId, MicroDraw_genData_calcExp(mcflId, lPrExp, ObjId, xcxljgJson), lPrExp, MicroDraw_genData_calcExp(mcflId, lCntExp, ObjId, xcxljgJson), lCntExp, frameAngle, lBcpType, "左", MicroDraw_genData_calcExp(mcflId, lColorExp, ObjId, xcxljgJson), lColorExp, "左框")
                    }
                    if (!isEmptyOrNull(rPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, rPrId, MicroDraw_genData_calcExp(mcflId, rPrExp, ObjId, xcxljgJson), rPrExp, MicroDraw_genData_calcExp(mcflId, rCntExp, ObjId, xcxljgJson), rCntExp, frameAngle, rBcpType, "右", MicroDraw_genData_calcExp(mcflId, rColorExp, ObjId, xcxljgJson), rColorExp, "右框")
                    }
                } else {
                    if (mtype == mDrawFlag_Custom_arc) {
                        if (!isEmptyOrNull(arcPrId)) {
                            MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, arcPrId, MicroDraw_genData_calcExp(mcflId, arcPrExp, ObjId, xcxljgJson), arcPrExp, MicroDraw_genData_calcExp(mcflId, arcCntExp, ObjId, xcxljgJson), arcCntExp, "0-0", arcBcpType, "上弧", MicroDraw_genData_calcExp(mcflId, arcColorExp, ObjId, xcxljgJson), arcColorExp, "上弧")
                        }
                        if (!isEmptyOrNull(arcbPrId)) {
                            MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, arcbPrId, MicroDraw_genData_calcExp(mcflId, barcPrExp, ObjId, xcxljgJson), barcPrExp, MicroDraw_genData_calcExp(mcflId, bCntExp, ObjId, xcxljgJson), bCntExp, j_Gamma + "-" + j_Gamma, bBcpType, "弧下框", MicroDraw_genData_calcExp(mcflId, bColorExp, ObjId, xcxljgJson), bColorExp, "弧下框")
                        }
                        addArcZT();
                        addArcYX()
                    }
                }
                cpSeq = Number(cpSeq) + 1;
                MicroDraw_genData_cp_addRow(cpDgId, Numx, ObjId, "框", MicroDraw_genData_calcExp(mcflId, "W", ObjId, xcxljgJson), "W", MicroDraw_genData_calcExp(mcflId, "H", ObjId, xcxljgJson), "H", MicroDraw_genData_calcExp(mcflId, "CNT", ObjId, xcxljgJson), "CNT", "", "C" + cpSeq.toString())
            }
            if ($(nodeFrame).length > 0) {
                var hPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "横门套", "prid");
                var vPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "竖门套", "prid");
                var hCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "横门套", "cntExp");
                var vCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "竖门套", "cntExp");
                var hAngle = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "横门套", "fcAngle");
                var vAngle = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "竖门套", "fcAngle");
                var hPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "横门套", "exp");
                var vPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "竖门套", "exp");
                var hBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "横门套", "bcpType");
                var vBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "竖门套", "bcpType");
                var hColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "横门套", "colorExp");
                var vColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "竖门套", "colorExp");
                if (!isEmptyOrNull(hPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, hPrId, MicroDraw_genData_calcExp(mcflId, hPrExp, ObjId, xcxljgJson), hPrExp, MicroDraw_genData_calcExp(mcflId, hCntExp, ObjId, xcxljgJson), hCntExp, hAngle, hBcpType, "横门套", MicroDraw_genData_calcExp(mcflId, hColorExp, ObjId, xcxljgJson), hColorExp, "横门套")
                }
                if (!isEmptyOrNull(vPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, vPrId, MicroDraw_genData_calcExp(mcflId, vPrExp, ObjId, xcxljgJson), vPrExp, MicroDraw_genData_calcExp(mcflId, vCntExp, ObjId, xcxljgJson), vCntExp, vAngle, vBcpType, "竖门套", MicroDraw_genData_calcExp(mcflId, vColorExp, ObjId, xcxljgJson), vColorExp, "竖门套")
                }
            }
            $("#" + winId + " [mtype='" + mDrawFlag_TingV + "']").each(function(i, obj) {
                var ObjId = obj.getAttribute("id");
                var ObjPrId = obj.getAttribute("mprid");
                var tem = MicroDraw_getTlmTingKind(ObjId);
                var arr = tem.split(",");
                var tingType = arr[0];
                var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "prid");
                if (!isEmptyOrNull(ObjPrId)) {
                    PrId = ObjPrId
                }
                var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "exp");
                bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "cntExp");
                var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "colorExp");
                if (!isEmptyOrNull(PrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", bcpType, "竖", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, tingType)
                }
            });
            $("#" + winId + " [mtype='" + mDrawFlag_TingH + "']").each(function(i, obj) {
                var ObjId = obj.getAttribute("id");
                var ObjPrId = obj.getAttribute("mprid");
                var tem = MicroDraw_getTlmTingKind(ObjId);
                var arr = tem.split(",");
                var tingType = arr[0];
                if (tingType == "固上轨") {
                    var sgPrid = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上轨", "prid");
                    if (isEmptyOrNull(sgPrid)) {
                        tingType = "横挺"
                    } else {
                        tingType = "上轨"
                    }
                } else {
                    tingType = "横挺"
                }
                var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "prid");
                if (!isEmptyOrNull(ObjPrId)) {
                    PrId = ObjPrId
                }
                var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "exp");
                bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "cntExp");
                var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "colorExp");
                if (!isEmptyOrNull(PrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", bcpType, "横", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, tingType)
                }
            });
            $("#" + winId + "[mtype=" + mDrawFlag_Win + "] [mtype='" + mDrawFlag_Glass + "']").each(function(i, obj) {
                var tem = "";
                var ObjId = obj.getAttribute("id");
                if (obj.getAttribute("myt") == "Y") {
                    var tPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻上压线", "prid");
                    var bPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻下压线", "prid");
                    var lPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻左压线", "prid");
                    var rPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻右压线", "prid");
                    var tCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻上压线", "cntExp");
                    var bCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻下压线", "cntExp");
                    var lCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻左压线", "cntExp");
                    var rCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻右压线", "cntExp");
                    tem = obj.getAttribute("mytpjstyle");
                    var Angle;
                    switch (tem) {
                    case "45":
                        Angle = "45-45";
                        break;
                    case "H":
                        Angle = "90-90";
                        break;
                    case "V":
                        Angle = "90-90";
                        break
                    }
                    var tPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻上压线", "exp");
                    var bPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻下压线", "exp");
                    var lPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻左压线", "exp");
                    var rPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻右压线", "exp");
                    var tBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻上压线", "bcpType");
                    var bBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻下压线", "bcpType");
                    var lBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻左压线", "bcpType");
                    var rBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻右压线", "bcpType");
                    var tColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻上压线", "colorExp");
                    var bColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻下压线", "colorExp");
                    var lColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻左压线", "colorExp");
                    var rColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻右压线", "colorExp");
                    if (!isEmptyOrNull(tPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, tPrId, MicroDraw_genData_calcExp(mcflId, tPrExp, ObjId, xcxljgJson), tPrExp, MicroDraw_genData_calcExp(mcflId, tCntExp, ObjId, xcxljgJson), tCntExp, Angle, tBcpType, "上", MicroDraw_genData_calcExp(mcflId, tColorExp, ObjId, xcxljgJson), tColorExp, "固玻上压线")
                    }
                    if (!isEmptyOrNull(bPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, bPrId, MicroDraw_genData_calcExp(mcflId, bPrExp, ObjId, xcxljgJson), bPrExp, MicroDraw_genData_calcExp(mcflId, bCntExp, ObjId, xcxljgJson), bCntExp, Angle, bBcpType, "下", MicroDraw_genData_calcExp(mcflId, bColorExp, ObjId, xcxljgJson), bColorExp, "固玻下压线")
                    }
                    if (!isEmptyOrNull(lPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, lPrId, MicroDraw_genData_calcExp(mcflId, lPrExp, ObjId, xcxljgJson), lPrExp, MicroDraw_genData_calcExp(mcflId, lCntExp, ObjId, xcxljgJson), lCntExp, Angle, lBcpType, "左", MicroDraw_genData_calcExp(mcflId, lColorExp, ObjId, xcxljgJson), lColorExp, "固玻左压线")
                    }
                    if (!isEmptyOrNull(rPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, rPrId, MicroDraw_genData_calcExp(mcflId, rPrExp, ObjId, xcxljgJson), rPrExp, MicroDraw_genData_calcExp(mcflId, rCntExp, ObjId, xcxljgJson), rCntExp, Angle, rBcpType, "右", MicroDraw_genData_calcExp(mcflId, rColorExp, ObjId, xcxljgJson), rColorExp, "固玻右压线")
                    }
                }
                var LID;
                var RID;
                LID = obj.getAttribute("mlid");
                RID = obj.getAttribute("mrid");
                if (LID.length > 0) {
                    lType = MicroDraw_getTlmTingKind(LID);
                    Arr = lType.split(",");
                    if (Arr[0].indexOf("转角") >= 0) {
                        var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "prid");
                        var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "exp");
                        bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "bcpType");
                        var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "cntExp");
                        var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "colorExp");
                        if (!isEmptyOrNull(PrId)) {
                            MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", bcpType, "左竖", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, "边框盖板")
                        }
                    }
                } else {
                    var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "prid");
                    var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "exp");
                    bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "bcpType");
                    var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "cntExp");
                    var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "colorExp");
                    if (!isEmptyOrNull(PrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", bcpType, "左竖", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, "边框盖板")
                    }
                }
                if (RID.length > 0) {
                    rType = MicroDraw_getTlmTingKind(RID);
                    Arr = rType.split(",");
                    if (Arr[0].indexOf("转角") >= 0) {
                        var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "prid");
                        var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "exp");
                        bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "bcpType");
                        var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "cntExp");
                        var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "colorExp");
                        if (!isEmptyOrNull(PrId)) {
                            MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", bcpType, "右竖", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, "边框盖板")
                        }
                    }
                } else {
                    var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "prid");
                    var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "exp");
                    bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "bcpType");
                    var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "cntExp");
                    var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "colorExp");
                    if (!isEmptyOrNull(PrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", bcpType, "右竖", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, "边框盖板")
                    }
                }
            });
            $("#" + winId + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(i, obj) {
                var tem = "";
                var ObjId = obj.getAttribute("id");
                var tPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上扇", "prid");
                var bPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下扇", "prid");
                var lPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左扇", "prid");
                var rPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右扇", "prid");
                var tCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上扇", "cntExp");
                var bCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下扇", "cntExp");
                var lCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左扇", "cntExp");
                var rCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右扇", "cntExp");
                tem = obj.getAttribute("mfanpjstyle");
                var Angle;
                switch (tem) {
                case "45":
                    Angle = "45-45";
                    break;
                case "H":
                    Angle = "90-90";
                    break;
                case "V":
                    Angle = "90-90";
                    break
                }
                var tPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上扇", "exp");
                var bPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下扇", "exp");
                var lPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左扇", "exp");
                var rPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右扇", "exp");
                tBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上扇", "bcpType");
                bBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下扇", "bcpType");
                lBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左扇", "bcpType");
                rBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右扇", "bcpType");
                var tColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上扇", "colorExp");
                var bColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下扇", "colorExp");
                var lColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左扇", "colorExp");
                var rColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右扇", "colorExp");
                if (!isEmptyOrNull(tPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, tPrId, MicroDraw_genData_calcExp(mcflId, tPrExp, ObjId, xcxljgJson), tPrExp, MicroDraw_genData_calcExp(mcflId, tCntExp, ObjId, xcxljgJson), tCntExp, Angle, tBcpType, "上", MicroDraw_genData_calcExp(mcflId, tColorExp, ObjId, xcxljgJson), tColorExp, "上扇")
                }
                if (!isEmptyOrNull(bPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, bPrId, MicroDraw_genData_calcExp(mcflId, bPrExp, ObjId, xcxljgJson), bPrExp, MicroDraw_genData_calcExp(mcflId, bCntExp, ObjId, xcxljgJson), bCntExp, Angle, bBcpType, "下", MicroDraw_genData_calcExp(mcflId, bColorExp, ObjId, xcxljgJson), bColorExp, "下扇")
                }
                if (!isEmptyOrNull(lPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, lPrId, MicroDraw_genData_calcExp(mcflId, lPrExp, ObjId, xcxljgJson), lPrExp, MicroDraw_genData_calcExp(mcflId, lCntExp, ObjId, xcxljgJson), lCntExp, Angle, lBcpType, "左", MicroDraw_genData_calcExp(mcflId, lColorExp, ObjId, xcxljgJson), lColorExp, "左扇")
                }
                if (!isEmptyOrNull(rPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, rPrId, MicroDraw_genData_calcExp(mcflId, rPrExp, ObjId, xcxljgJson), rPrExp, MicroDraw_genData_calcExp(mcflId, rCntExp, ObjId, xcxljgJson), rCntExp, Angle, rBcpType, "右", MicroDraw_genData_calcExp(mcflId, rColorExp, ObjId, xcxljgJson), rColorExp, "右扇")
                }
                cpSeq = Number(cpSeq) + 1;
                MicroDraw_genData_cp_addRow(cpDgId, Numx, ObjId, "扇", MicroDraw_genData_calcExp(mcflId, tPrExp, ObjId, xcxljgJson), tPrExp, MicroDraw_genData_calcExp(mcflId, lPrExp, ObjId, xcxljgJson), lPrExp, MicroDraw_genData_calcExp(mcflId, lCntExp, ObjId, xcxljgJson), lCntExp, "", "C" + cpSeq.toString());
                var PrKind = "单勾企盖板";
                var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                if (!isEmptyOrNull(PrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", BcpType, "竖单勾", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                }
                var PrKind = "双勾企盖板";
                var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                if (!isEmptyOrNull(PrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", BcpType, "竖单勾", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                }
                mfanswflag = obj.getAttribute("mfanswflag");
                if (mfanswflag.indexOf("1") >= 0) {
                    var PrKind = "上纱扇";
                    var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                    var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                    var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                    var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                    var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                    if (!isEmptyOrNull(PrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, Angle, BcpType, "上纱", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                    }
                    WExp = PrExp;
                    var PrKind = "下纱扇";
                    var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                    var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                    var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                    var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                    var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                    if (!isEmptyOrNull(PrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, Angle, BcpType, "下纱", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                    }
                    var PrKind = "左纱扇";
                    var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                    var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                    var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                    var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                    var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                    if (!isEmptyOrNull(PrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, Angle, BcpType, "左纱", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                    }
                    HExp = PrExp;
                    var PrKind = "右纱扇";
                    var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                    var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                    var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                    var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                    var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                    if (!isEmptyOrNull(PrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, Angle, BcpType, "右纱", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                    }
                    var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上纱扇", "cntExp");
                    cpSeq = Number(cpSeq) + 1;
                    MicroDraw_genData_cp_addRow(cpDgId, Numx, ObjId, "纱扇", MicroDraw_genData_calcExp(mcflId, WExp, ObjId, xcxljgJson), WExp, MicroDraw_genData_calcExp(mcflId, HExp, ObjId, xcxljgJson), HExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "", "C" + cpSeq.toString())
                }
                var OT = MicroDraw_getTlcObjType(ObjId);
                switch (OT) {
                case "2推":
                case "2推1纱":
                    break;
                case "1轨1推":
                    break;
                case "1推1固":
                    break;
                case "3推":
                    break;
                case "3推带收口":
                case "3推带收口1纱":
                    var PrKind = "收口";
                    var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                    var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                    var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                    var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                    var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                    if (!isEmptyOrNull(PrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", BcpType, "竖收口", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                    }
                    break;
                case "3轨3推":
                    break;
                case "2推1固":
                    break;
                case "4推":
                    var PrKind = "收口";
                    var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                    var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                    var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                    var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                    var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                    if (!isEmptyOrNull(PrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", BcpType, "竖收口", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                    }
                    break;
                case "4推2纱":
                    var PrKind = "收口";
                    var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                    var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                    var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                    var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                    var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                    if (!isEmptyOrNull(PrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", BcpType, "竖收口", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                    }
                    var PrKind = "纱扇收口";
                    var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                    var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                    var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                    var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                    var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                    if (!isEmptyOrNull(PrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", BcpType, "竖纱收口", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                    }
                    break;
                case "1轨2推":
                    break;
                case "2推2固":
                    break;
                case "上下推":
                    break;
                case "上固下推":
                    break;
                case "上推下固":
                    break;
                case "6推":
                    var PrKind = "收口";
                    var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                    var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                    var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                    var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                    var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                    if (!isEmptyOrNull(PrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", BcpType, "竖收口", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                    }
                    break
                }
            });
            $("#" + winId + " [mtype='" + mDrawFlag_Glass + "']").each(function(i, obj) {
                var tem = "";
                var ObjId;
                if (mtype == mDrawFlag_Win) {
                    ObjId = obj.getAttribute("id")
                } else {
                    if (mtype == mDrawFlag_Custom_arc) {
                        ObjId = winId
                    }
                }
                var Glass = obj.getAttribute("mglass");
                if (isEmptyOrNull(Glass)) {
                    Glass = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "MGG", "prid")
                }
                if (Glass.substr(0, 1) == '"') {
                    Glass = Glass.substr(1)
                }
                if (Glass.substr(Glass.length - 1, 1) == '"') {
                    Glass = Glass.substr(0, Glass.length - 1)
                }
                var WExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "固玻宽度", "exp");
                var HExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "固玻高度", "exp");
                if (arcGlassRectSizes.length > 0 && arcGlassRectSizes.length >= i) {
                    WExp = arcGlassRectSizes[i].W;
                    HExp = arcGlassRectSizes[i].H
                }
                bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "固玻宽度", "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "固玻宽度", "cntExp");
                var glExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "固玻宽度", "glassExp");
                var glassExp = "";
                var glassGy = "";
                var glassGyExp = "";
                var glassDb = "";
                var glassDbExp = "";
                var glassMb = "";
                var glassMbExp = "";
                var glExpArr = glExp.split(",");
                glassExp = glExpArr[0];
                glassGyExp = glExpArr[1];
                glassDbExp = glExpArr[2];
                glassMbExp = glExpArr[3];
                if (!isEmptyOrNull(glExp)) {
                    Glass = MicroDraw_genData_calcExp(mcflId, glassExp, ObjId, xcxljgJson);
                    glassGy = MicroDraw_genData_calcExp(mcflId, glassGyExp, ObjId, xcxljgJson);
                    glassDb = MicroDraw_genData_calcExp(mcflId, glassDbExp, ObjId, xcxljgJson);
                    glassMb = MicroDraw_genData_calcExp(mcflId, glassMbExp, ObjId, xcxljgJson)
                }
                if (!isEmptyOrNull(Glass)) {
                    var node_txt = "";
                    var glassFlag = "";
                    if (mtype == mDrawFlag_Win) {
                        node_txt = $("#" + ObjId + "_txt")[0];
                        if (!isEmptyOrNull(node_txt)) {
                            glassFlag = node_txt.textContent
                        }
                    } else {
                        if (mtype == mDrawFlag_Custom_arc) {
                            var textObj = $("#" + ObjId).find("[mtype=" + mDrawFlag_Glass + "]").eq(i).find("[id*=_txt]");
                            glassFlag = textObj.text()
                        }
                    }
                    var glAreaExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "固玻宽度", "glAreaExp");
                    var W = MicroDraw_genData_calcExp(mcflId, WExp, ObjId, xcxljgJson);
                    var H = MicroDraw_genData_calcExp(mcflId, HExp, ObjId, xcxljgJson);
                    var cnt = MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson);
                    var glArea = MicroDraw_genData_calcExp(mcflId, glAreaExp, ObjId, xcxljgJson);
                    if ($.Micro.IsEmpty(glArea)) {
                        glArea = (Number(W) / 1000 * Number(H) / 1000 * cnt)
                    }
                    MicroDraw_genData_gl_addRow(mcflId, xcxljgJson, glDgId, Numx, ObjId, Glass, W, WExp, H, HExp, cnt, cntExp, bcpType, "", glassFlag, "固玻宽度", glassExp, glassGy, glassGyExp, glassDb, glassDbExp, glassMb, glassMbExp, glArea, glAreaExp)
                }
            });
            $("#" + winId + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(i, obj) {
                var tem = "";
                var ObjId = obj.getAttribute("id");
                var tem = "";
                var ObjId = obj.getAttribute("id");
                var Glass = obj.getAttribute("mglass");
                if (isEmptyOrNull(Glass)) {
                    Glass = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "MGG", "prid")
                }
                if (Glass.substr(0, 1) == '"') {
                    Glass = Glass.substr(1)
                }
                if (Glass.substr(Glass.length - 1, 1) == '"') {
                    Glass = Glass.substr(0, Glass.length - 1)
                }
                var WExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "扇玻宽度", "exp");
                var HExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "扇玻高度", "exp");
                bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "扇玻宽度", "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "扇玻宽度", "cntExp");
                var glExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "扇玻宽度", "glassExp");
                var glassExp = "";
                var glassGy = "";
                var glassGyExp = "";
                var glassDb = "";
                var glassDbExp = "";
                var glassMb = "";
                var glassMbExp = "";
                var glExpArr = glExp.split(",");
                glassExp = glExpArr[0];
                glassGyExp = glExpArr[1];
                glassDbExp = glExpArr[2];
                glassMbExp = glExpArr[3];
                if (!isEmptyOrNull(glExp)) {
                    Glass = MicroDraw_genData_calcExp(mcflId, glassExp, ObjId, xcxljgJson);
                    glassGy = MicroDraw_genData_calcExp(mcflId, glassGyExp, ObjId, xcxljgJson);
                    glassDb = MicroDraw_genData_calcExp(mcflId, glassDbExp, ObjId, xcxljgJson);
                    glassMb = MicroDraw_genData_calcExp(mcflId, glassMbExp, ObjId, xcxljgJson)
                }
                if (!isEmptyOrNull(Glass)) {
                    var node_txt = $("#" + ObjId + "_txt")[0];
                    var glassFlag = "";
                    if (!isEmptyOrNull(node_txt)) {
                        glassFlag = node_txt.textContent
                    }
                    var glAreaExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "扇玻宽度", "glAreaExp");
                    var W = MicroDraw_genData_calcExp(mcflId, WExp, ObjId, xcxljgJson);
                    var H = MicroDraw_genData_calcExp(mcflId, HExp, ObjId, xcxljgJson);
                    var cnt = MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson);
                    var glArea = MicroDraw_genData_calcExp(mcflId, glAreaExp, ObjId, xcxljgJson);
                    if ($.Micro.IsEmpty(glArea)) {
                        glArea = (Number(W) / 1000 * Number(H) / 1000 * cnt)
                    }
                    MicroDraw_genData_gl_addRow(mcflId, xcxljgJson, glDgId, Numx, ObjId, Glass, W, WExp, H, HExp, cnt, cntExp, bcpType, "", glassFlag, "扇玻宽度", glassExp, glassGy, glassGyExp, glassDb, glassDbExp, glassMb, glassMbExp, glArea, glAreaExp)
                }
            });
            $("#" + winId + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(i, obj) {
                var tem = "";
                var ObjId = obj.getAttribute("id");
                var OT = MicroDraw_getTlcObjType(ObjId);
                switch (OT) {
                case "2推1纱":
                case "1推1固":
                case "1推1固1纱":
                case "2推2固":
                case "2推2固2纱":
                case "3推带收口1纱":
                    var tem = "";
                    var ObjId = obj.getAttribute("id");
                    var sw = obj.getAttribute("msa");
                    if (isEmptyOrNull(sw)) {
                        sw = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "MSA", "prid")
                    }
                    if (sw.substr(0, 1) == '"') {
                        sw = sw.substr(1)
                    }
                    if (sw.substr(sw.length - 1, 1) == '"') {
                        sw = sw.substr(0, sw.length - 1)
                    }
                    var WExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网宽度", "exp");
                    var HExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网高度", "exp");
                    bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网宽度", "bcpType");
                    var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网宽度", "cntExp");
                    var glExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网宽度", "glassExp");
                    var glassExp = "";
                    var glassGy = "";
                    var glassGyExp = '"--"';
                    var glassDb = "";
                    var glassDbExp = '"--"';
                    var glassMb = "";
                    var glassMbExp = '"--"';
                    var glExpArr = glExp.split(",");
                    glassExp = glExpArr[0];
                    if (!isEmptyOrNull(glExp)) {
                        sw = MicroDraw_genData_calcExp(mcflId, glassExp, ObjId, xcxljgJson)
                    }
                    if (!isEmptyOrNull(sw)) {
                        var node_txt = $("#" + ObjId + "_txt")[0];
                        var glassFlag = "";
                        if (!isEmptyOrNull(node_txt)) {
                            glassFlag = node_txt.textContent
                        }
                        var glAreaExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网宽度", "glAreaExp");
                        var W = MicroDraw_genData_calcExp(mcflId, WExp, ObjId, xcxljgJson);
                        var H = MicroDraw_genData_calcExp(mcflId, HExp, ObjId, xcxljgJson);
                        var cnt = MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson);
                        var glArea = MicroDraw_genData_calcExp(mcflId, glAreaExp, ObjId, xcxljgJson);
                        if ($.Micro.IsEmpty(glArea)) {
                            glArea = (Number(W) / 1000 * Number(H) / 1000 * cnt)
                        }
                        MicroDraw_genData_gl_addRow(mcflId, xcxljgJson, glDgId, Numx, ObjId, sw, W, WExp, H, HExp, cnt, cntExp, bcpType, "", glassFlag, "纱网宽度", glassExp, glassGy, glassGyExp, glassDb, glassDbExp, glassMb, glassMbExp, glArea, glAreaExp)
                    }
                    break;
                case "4推2纱":
                    var tem = "";
                    var ObjId = obj.getAttribute("id");
                    var sw = obj.getAttribute("msa");
                    if (isEmptyOrNull(sw)) {
                        sw = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "MSA", "prid")
                    }
                    if (sw.substr(0, 1) == '"') {
                        sw = sw.substr(1)
                    }
                    if (sw.substr(sw.length - 1, 1) == '"') {
                        sw = sw.substr(0, sw.length - 1)
                    }
                    var WExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网宽度", "exp");
                    var HExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网高度", "exp");
                    bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网宽度", "bcpType");
                    var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网宽度", "cntExp");
                    var glExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网宽度", "glassExp");
                    var glassExp = "";
                    var glassGy = "";
                    var glassGyExp = '"--"';
                    var glassDb = "";
                    var glassDbExp = '"--"';
                    var glassMb = "";
                    var glassMbExp = '"--"';
                    var glExpArr = glExp.split(",");
                    glassExp = glExpArr[0];
                    if (!isEmptyOrNull(glExp)) {
                        sw = MicroDraw_genData_calcExp(mcflId, glassExp, ObjId, xcxljgJson)
                    }
                    if (!isEmptyOrNull(sw)) {
                        var node_txt = $("#" + ObjId + "_txt")[0];
                        var glassFlag = "";
                        if (!isEmptyOrNull(node_txt)) {
                            glassFlag = node_txt.textContent
                        }
                        var glAreaExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "纱网宽度", "glAreaExp");
                        var W = MicroDraw_genData_calcExp(mcflId, WExp, ObjId, xcxljgJson);
                        var H = MicroDraw_genData_calcExp(mcflId, HExp, ObjId, xcxljgJson);
                        var cnt = MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson);
                        var glArea = MicroDraw_genData_calcExp(mcflId, glAreaExp, ObjId, xcxljgJson);
                        if ($.Micro.IsEmpty(glArea)) {
                            glArea = (Number(W) / 1000 * Number(H) / 1000 * cnt)
                        }
                        MicroDraw_genData_gl_addRow(mcflId, xcxljgJson, glDgId, Numx, ObjId, sw, W, WExp, H, HExp, cnt, cntExp, bcpType, "", glassFlag, "纱网宽度", glassExp, glassGy, glassGyExp, glassDb, glassDbExp, glassMb, glassMbExp, glArea, glAreaExp)
                    }
                    break
                }
            });
            $.each(xcxljgJson,
            function(k, o) {
                if (o.type == "F") {
                    var temCnt = 0;
                    var Cnt = 0;
                    if (o.prid.length > 0) {
                        if ($(nodeFrame).length > 0) {
                            var obj = nodeFrame;
                            temCnt = Number(MicroDraw_genData_calcExp(mcflId, o.cntExp, obj.getAttribute("id"), xcxljgJson));
                            Cnt = Number(Cnt) + Number(temCnt)
                        }
                        $("#" + winId + " [mtype='" + mDrawFlag_TingH + "']").each(function(i, obj) {
                            temCnt = Number(MicroDraw_genData_calcExp(mcflId, o.cntExp, obj.getAttribute("id"), xcxljgJson));
                            Cnt = Number(Cnt) + Number(temCnt)
                        });
                        $("#" + winId + " [mtype='" + mDrawFlag_TingV + "']").each(function(i, obj) {
                            temCnt = Number(MicroDraw_genData_calcExp(mcflId, o.cntExp, obj.getAttribute("id"), xcxljgJson));
                            Cnt = Number(Cnt) + Number(temCnt)
                        });
                        $("#" + winId + " [mtype='" + mDrawFlag_Glass + "']").each(function(i, obj) {
                            var tobj;
                            if (mtype == mDrawFlag_Win) {
                                tobj = obj
                            } else {
                                if (mtype == mDrawFlag_Custom_arc) {
                                    tobj = $("#" + winId)[0]
                                }
                            }
                            temCnt = Number(MicroDraw_genData_calcExp(mcflId, o.cntExp, tobj.getAttribute("id"), xcxljgJson));
                            Cnt = Number(Cnt) + Number(temCnt)
                        });
                        $("#" + winId + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(i, obj) {
                            temCnt = Number(MicroDraw_genData_calcExp(mcflId, o.cntExp, obj.getAttribute("id"), xcxljgJson));
                            Cnt = Number(Cnt) + Number(temCnt)
                        });
                        var CntExp2 = o.cntExp2;
                        if (!isEmptyOrNull(CntExp2)) {
                            CntExp2 = replaceAll(CntExp2, " RES ", Cnt.toString());
                            Cnt = Number(MicroDraw_genData_calcExp(0, CntExp2, "", ""))
                        }
                        MicroDraw_genData_wj_addRow(wjDgId, Numx, winId, o.prid, Cnt, o.cntExp, o.bcpType, o.usePlace, "", o.cntExp2, "1", o.bgyOptExp)
                    }
                }
            });
            var getCombWinIDs = MicroDraw_getCombWinIDs("all");
            var Wins = getCombWinIDs.Wins;
            if ($.inArray(winId, Wins) >= 0) {
                isComboWin = true
            } else {
                if (isComboArcWin) {
                    isComboWin = true
                } else {
                    isComboWin = false
                }
            }
            if (!isComboWin || (isComboWin && ComboWinCnt == 0)) {
                $.each(xcxljgJson,
                function(k, o) {
                    if (o.type == "B") {
                        var temMoney = 0;
                        var Money = 0;
                        var temBjArea = 0;
                        var bjArea = 0;
                        var tempBjPrice = 0;
                        var bjPrice = 0;
                        var temDesc = "";
                        var Desc = "";
                        var bjExp = o.bjExp;
                        var bjDescExp = o.bjDescExp;
                        var CntExp2 = o.cntExp2;
                        var bjAreaExp = o.bjAreaExp;
                        var bjPriceExp = o.bjPriceExp;
                        if (isEmptyOrNull(bjExp)) {
                            bjExp = "0"
                        }
                        if (isEmptyOrNull(bjDescExp)) {
                            bjDescExp = '""'
                        }
                        if (isEmptyOrNull(CntExp2)) {
                            CntExp2 = ""
                        }
                        if (isEmptyOrNull(bjAreaExp)) {
                            bjAreaExp = ""
                        }
                        if (isEmptyOrNull(bjPriceExp)) {
                            bjPriceExp = ""
                        }
                        if ($(nodeFrame).length > 0) {
                            var obj = nodeFrame;
                            temMoney = Number(MicroDraw_genData_calcExp(mcflId, bjExp, obj.getAttribute("id"), xcxljgJson));
                            Money = Number(Money) + Number(temMoney);
                            temBjArea = Number(MicroDraw_genData_calcExp(mcflId, bjAreaExp, obj.getAttribute("id"), xcxljgJson));
                            bjArea = Number(bjArea) + Number(temBjArea);
                            temBjPrice = Number(MicroDraw_genData_calcExp(mcflId, bjPriceExp, obj.getAttribute("id"), xcxljgJson));
                            bjPrice = Number(bjPrice) + Number(temBjPrice);
                            temDesc = MicroDraw_genData_calcExp(mcflId, bjDescExp, obj.getAttribute("id"), xcxljgJson);
                            Desc = Desc + " " + temDesc
                        }
                        MicroDraw_genData_bj_addRow(bjDgId, Numx, winId, o.name, bjExp, Money, "", bjDescExp, Desc, o.bjType, CntExp2, o.CalcFlag, bjAreaExp, bjArea, bjPriceExp, bjPrice, 100)
                    }
                });
                setXCXLDiscountFlag(xcxlId);
                if (isComboWin) {
                    ComboWinCnt++
                }
            }
            $.each(xcxljgJson,
            function(k, o) {
                if (o.type == "L") {
                    var temCnt = 0;
                    var Cnt = 0;
                    var CntExp = o.cntExp;
                    if (isEmptyOrNull(CntExp)) {
                        CntExp = "0"
                    }
                    if ($(nodeFrame).length > 0) {
                        var obj = nodeFrame;
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    }
                    MicroDraw_genData_label_addRow(labelDgId, Numx, winId, o.name, CntExp, Cnt, "")
                }
            });
            if (!isComboWin || (isComboWin && ComboWinCntCost == 0)) {
                $.each(xcxljgJson,
                function(k, o) {
                    if (o.type == "A") {
                        var temMoney = 0;
                        var Money = 0;
                        var exp = o.EXP;
                        var memo = o.memo;
                        if (isEmptyOrNull(exp)) {
                            exp = "0"
                        }
                        if ($(nodeFrame).length > 0) {
                            var obj = nodeFrame;
                            temMoney = Number(MicroDraw_genData_calcExp(mcflId, exp, obj.getAttribute("id"), xcxljgJson));
                            Money = Number(Money) + Number(temMoney)
                        }
                        MicroDraw_genData_cost_addRow(costDgId, Numx, winId, o.name, exp, Money, memo)
                    }
                });
                if (isComboWin) {
                    ComboWinCntCost++
                }
            }
            break;
        case "5":
            $.each(xcxljgJson,
            function(k, o) {
                if (o.type == "O") {
                    var prid = o.prid;
                    if (o.name == "MGG" || o.name == "MSA") {
                        if (o.prid.toString().substr(0, 1) != '"') {
                            prid = '"' + prid + '"'
                        }
                    }
                    MicroDraw_genData_opt_addRow(mDrawOptProperty, MicroBudget_getPropertyValue(mBudgetWinProperty, "Numx"), o.name, o.memo, prid, o.optList, o.optListExp, "", o.optValExp, "1", o.bgyOptExp, o.bxdOpt, 0)
                }
            });
            $("#" + winId + " [mtype='" + mDrawFlag_FrameRect + "']").each(function(i, obj) {
                var tem = "";
                var ObjId = obj.getAttribute("id");
                var sgPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上轨", "prid");
                var tPrKind = "上轨";
                if (sgPrId.length > 0) {
                    tPrKind = "上轨"
                } else {
                    tPrKind = "上框"
                }
                $("#" + winId + " [mtype='" + mDrawFlag_Glass + "']").each(function(i, obj) {
                    var ObjId = obj.getAttribute("id");
                    if (obj.getAttribute("mtid") == "") {
                        tPrKind = "上框"
                    }
                });
                var bPrKind = "下框";
                var tPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tPrKind, "prid");
                var bPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", bPrKind, "prid");
                var lPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左框", "prid");
                var rPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右框", "prid");
                var tCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tPrKind, "cntExp");
                var bCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", bPrKind, "cntExp");
                var lCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左框", "cntExp");
                var rCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右框", "cntExp");
                tem = obj.getAttribute("mpjstyle");
                var frameAngle;
                switch (tem) {
                case "45":
                    frameAngle = "45-45";
                    break;
                case "H":
                    frameAngle = "90-90";
                    break;
                case "V":
                    frameAngle = "90-90";
                    break;
                case "45V":
                    frameAngle = "45-90";
                    break
                }
                var tPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tPrKind, "exp");
                var bPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", bPrKind, "exp");
                var lPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左框", "exp");
                var rPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右框", "exp");
                var tBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tPrKind, "bcpType");
                var bBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", bPrKind, "bcpType");
                var lBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左框", "bcpType");
                var rBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右框", "bcpType");
                var tColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tPrKind, "colorExp");
                var bColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", bPrKind, "colorExp");
                var lColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左框", "colorExp");
                var rColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右框", "colorExp");
                if (!isEmptyOrNull(tPrId)) {
                    if (frameAngle == "45-90") {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, tPrId, MicroDraw_genData_calcExp(mcflId, tPrExp, ObjId, xcxljgJson), tPrExp, MicroDraw_genData_calcExp(mcflId, tCntExp, ObjId, xcxljgJson), tCntExp, "45-45", tBcpType, "上", MicroDraw_genData_calcExp(mcflId, tColorExp, ObjId, xcxljgJson), tColorExp, tPrKind)
                    } else {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, tPrId, MicroDraw_genData_calcExp(mcflId, tPrExp, ObjId, xcxljgJson), tPrExp, MicroDraw_genData_calcExp(mcflId, tCntExp, ObjId, xcxljgJson), tCntExp, frameAngle, tBcpType, "上", MicroDraw_genData_calcExp(mcflId, tColorExp, ObjId, xcxljgJson), tColorExp, tPrKind)
                    }
                }
                if (!isEmptyOrNull(bPrId)) {
                    if (frameAngle == "45-90") {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, bPrId, MicroDraw_genData_calcExp(mcflId, bPrExp, ObjId, xcxljgJson), bPrExp, MicroDraw_genData_calcExp(mcflId, bCntExp, ObjId, xcxljgJson), bCntExp, "90-90", bBcpType, "下", MicroDraw_genData_calcExp(mcflId, bColorExp, ObjId, xcxljgJson), bColorExp, bPrKind)
                    } else {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, bPrId, MicroDraw_genData_calcExp(mcflId, bPrExp, ObjId, xcxljgJson), bPrExp, MicroDraw_genData_calcExp(mcflId, bCntExp, ObjId, xcxljgJson), bCntExp, frameAngle, bBcpType, "下", MicroDraw_genData_calcExp(mcflId, bColorExp, ObjId, xcxljgJson), bColorExp, bPrKind)
                    }
                }
                if (!isEmptyOrNull(lPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, lPrId, MicroDraw_genData_calcExp(mcflId, lPrExp, ObjId, xcxljgJson), lPrExp, MicroDraw_genData_calcExp(mcflId, lCntExp, ObjId, xcxljgJson), lCntExp, frameAngle, lBcpType, "左", MicroDraw_genData_calcExp(mcflId, lColorExp, ObjId, xcxljgJson), lColorExp, "左框")
                }
                if (!isEmptyOrNull(rPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, rPrId, MicroDraw_genData_calcExp(mcflId, rPrExp, ObjId, xcxljgJson), rPrExp, MicroDraw_genData_calcExp(mcflId, rCntExp, ObjId, xcxljgJson), rCntExp, frameAngle, rBcpType, "右", MicroDraw_genData_calcExp(mcflId, rColorExp, ObjId, xcxljgJson), rColorExp, "右框")
                }
                cpSeq = Number(cpSeq) + 1;
                MicroDraw_genData_cp_addRow(cpDgId, Numx, ObjId, "框", MicroDraw_genData_calcExp(mcflId, "W", ObjId, xcxljgJson), "W", MicroDraw_genData_calcExp(mcflId, "H", ObjId, xcxljgJson), "H", MicroDraw_genData_calcExp(mcflId, "CNT", ObjId, xcxljgJson), "CNT", "", "C" + cpSeq.toString())
            });
            $("#" + winId + " [mtype='" + mDrawFlag_TingV + "']").each(function(i, obj) {
                var ObjId = obj.getAttribute("id");
                var ObjPrId = obj.getAttribute("mprid");
                var tem = MicroDraw_getTlmTingKind(ObjId);
                var arr = tem.split(",");
                var tingType = arr[0];
                var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "prid");
                if (!isEmptyOrNull(ObjPrId)) {
                    PrId = ObjPrId
                }
                var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "exp");
                bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "cntExp");
                var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "colorExp");
                if (!isEmptyOrNull(PrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", bcpType, "竖", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, tingType)
                }
            });
            $("#" + winId + " [mtype='" + mDrawFlag_TingH + "']").each(function(i, obj) {
                var ObjId = obj.getAttribute("id");
                var ObjPrId = obj.getAttribute("mprid");
                var tem = MicroDraw_getTlmTingKind(ObjId);
                var arr = tem.split(",");
                var tingType = arr[0];
                if (tingType == "固上轨") {
                    var sgPrid = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上轨", "prid");
                    if (isEmptyOrNull(sgPrid)) {
                        tingType = "横挺"
                    } else {
                        tingType = "上轨"
                    }
                } else {
                    tingType = "横挺"
                }
                var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "prid");
                if (!isEmptyOrNull(ObjPrId)) {
                    PrId = ObjPrId
                }
                var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "exp");
                bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "cntExp");
                var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", tingType, "colorExp");
                if (!isEmptyOrNull(PrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", bcpType, "横", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, tingType)
                }
            });
            $("#" + winId + " [mtype='" + mDrawFlag_Glass + "']").each(function(i, obj) {
                var tem = "";
                var ObjId = obj.getAttribute("id");
                if (obj.getAttribute("myt") == "Y") {
                    var tPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻上压线", "prid");
                    var bPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻下压线", "prid");
                    var lPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻左压线", "prid");
                    var rPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻右压线", "prid");
                    var tCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻上压线", "cntExp");
                    var bCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻下压线", "cntExp");
                    var lCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻左压线", "cntExp");
                    var rCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻右压线", "cntExp");
                    tem = obj.getAttribute("mytpjstyle");
                    var Angle;
                    switch (tem) {
                    case "45":
                        Angle = "45-45";
                        break;
                    case "H":
                        Angle = "90-90";
                        break;
                    case "V":
                        Angle = "90-90";
                        break
                    }
                    var tPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻上压线", "exp");
                    var bPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻下压线", "exp");
                    var lPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻左压线", "exp");
                    var rPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻右压线", "exp");
                    var tBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻上压线", "bcpType");
                    var bBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻下压线", "bcpType");
                    var lBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻左压线", "bcpType");
                    var rBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻右压线", "bcpType");
                    var tColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻上压线", "colorExp");
                    var bColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻下压线", "colorExp");
                    var lColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻左压线", "colorExp");
                    var rColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "固玻右压线", "colorExp");
                    if (!isEmptyOrNull(tPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, tPrId, MicroDraw_genData_calcExp(mcflId, tPrExp, ObjId, xcxljgJson), tPrExp, MicroDraw_genData_calcExp(mcflId, tCntExp, ObjId, xcxljgJson), tCntExp, Angle, tBcpType, "上", MicroDraw_genData_calcExp(mcflId, tColorExp, ObjId, xcxljgJson), tColorExp, "固玻上压线")
                    }
                    if (!isEmptyOrNull(bPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, bPrId, MicroDraw_genData_calcExp(mcflId, bPrExp, ObjId, xcxljgJson), bPrExp, MicroDraw_genData_calcExp(mcflId, bCntExp, ObjId, xcxljgJson), bCntExp, Angle, bBcpType, "下", MicroDraw_genData_calcExp(mcflId, bColorExp, ObjId, xcxljgJson), bColorExp, "固玻下压线")
                    }
                    if (!isEmptyOrNull(lPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, lPrId, MicroDraw_genData_calcExp(mcflId, lPrExp, ObjId, xcxljgJson), lPrExp, MicroDraw_genData_calcExp(mcflId, lCntExp, ObjId, xcxljgJson), lCntExp, Angle, lBcpType, "左", MicroDraw_genData_calcExp(mcflId, lColorExp, ObjId, xcxljgJson), lColorExp, "固玻左压线")
                    }
                    if (!isEmptyOrNull(rPrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, rPrId, MicroDraw_genData_calcExp(mcflId, rPrExp, ObjId, xcxljgJson), rPrExp, MicroDraw_genData_calcExp(mcflId, rCntExp, ObjId, xcxljgJson), rCntExp, Angle, rBcpType, "右", MicroDraw_genData_calcExp(mcflId, rColorExp, ObjId, xcxljgJson), rColorExp, "固玻右压线")
                    }
                }
                var LID;
                var RID;
                LID = obj.getAttribute("mlid");
                RID = obj.getAttribute("mrid");
                if (LID.length > 0) {
                    lType = MicroDraw_getTlmTingKind(LID);
                    Arr = lType.split(",");
                    if (Arr[0].indexOf("转角") >= 0) {
                        var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "prid");
                        var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "exp");
                        bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "bcpType");
                        var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "cntExp");
                        var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "colorExp");
                        if (!isEmptyOrNull(PrId)) {
                            MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", bcpType, "左竖", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, "边框盖板")
                        }
                    }
                } else {
                    var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "prid");
                    var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "exp");
                    bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "bcpType");
                    var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "cntExp");
                    var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "colorExp");
                    if (!isEmptyOrNull(PrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", bcpType, "左竖", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, "边框盖板")
                    }
                }
                if (RID.length > 0) {
                    rType = MicroDraw_getTlmTingKind(RID);
                    Arr = rType.split(",");
                    if (Arr[0].indexOf("转角") >= 0) {
                        var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "prid");
                        var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "exp");
                        bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "bcpType");
                        var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "cntExp");
                        var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "colorExp");
                        if (!isEmptyOrNull(PrId)) {
                            MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", bcpType, "右竖", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, "边框盖板")
                        }
                    }
                } else {
                    var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "prid");
                    var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "exp");
                    bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "bcpType");
                    var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "cntExp");
                    var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "边框盖板", "colorExp");
                    if (!isEmptyOrNull(PrId)) {
                        MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", bcpType, "右竖", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, "边框盖板")
                    }
                }
            });
            $("#" + winId + " [mtype*='" + mDrawFlag_Zdm + "']").each(function(i, obj) {
                var tem = "";
                var ObjId = obj.getAttribute("id");
                var tPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上扇", "prid");
                var bPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下扇", "prid");
                var lPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左扇", "prid");
                var rPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右扇", "prid");
                var tCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上扇", "cntExp");
                var bCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下扇", "cntExp");
                var lCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左扇", "cntExp");
                var rCntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右扇", "cntExp");
                tem = obj.getAttribute("mfanpjstyle");
                var Angle;
                switch (tem) {
                case "45":
                    Angle = "45-45";
                    break;
                case "H":
                    Angle = "90-90";
                    break;
                case "V":
                    Angle = "90-90";
                    break
                }
                var tPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上扇", "exp");
                var bPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下扇", "exp");
                var lPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左扇", "exp");
                var rPrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右扇", "exp");
                tBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上扇", "bcpType");
                bBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下扇", "bcpType");
                lBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左扇", "bcpType");
                rBcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右扇", "bcpType");
                var tColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上扇", "colorExp");
                var bColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "下扇", "colorExp");
                var lColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "左扇", "colorExp");
                var rColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "右扇", "colorExp");
                if (!isEmptyOrNull(tPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, tPrId, MicroDraw_genData_calcExp(mcflId, tPrExp, ObjId, xcxljgJson), tPrExp, MicroDraw_genData_calcExp(mcflId, tCntExp, ObjId, xcxljgJson), tCntExp, Angle, tBcpType, "上", MicroDraw_genData_calcExp(mcflId, tColorExp, ObjId, xcxljgJson), tColorExp, "上扇")
                }
                if (!isEmptyOrNull(bPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, bPrId, MicroDraw_genData_calcExp(mcflId, bPrExp, ObjId, xcxljgJson), bPrExp, MicroDraw_genData_calcExp(mcflId, bCntExp, ObjId, xcxljgJson), bCntExp, Angle, bBcpType, "下", MicroDraw_genData_calcExp(mcflId, bColorExp, ObjId, xcxljgJson), bColorExp, "下扇")
                }
                if (!isEmptyOrNull(lPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, lPrId, MicroDraw_genData_calcExp(mcflId, lPrExp, ObjId, xcxljgJson), lPrExp, MicroDraw_genData_calcExp(mcflId, lCntExp, ObjId, xcxljgJson), lCntExp, Angle, lBcpType, "左", MicroDraw_genData_calcExp(mcflId, lColorExp, ObjId, xcxljgJson), lColorExp, "左扇")
                }
                if (!isEmptyOrNull(rPrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, rPrId, MicroDraw_genData_calcExp(mcflId, rPrExp, ObjId, xcxljgJson), rPrExp, MicroDraw_genData_calcExp(mcflId, rCntExp, ObjId, xcxljgJson), rCntExp, Angle, rBcpType, "右", MicroDraw_genData_calcExp(mcflId, rColorExp, ObjId, xcxljgJson), rColorExp, "右扇")
                }
                cpSeq = Number(cpSeq) + 1;
                MicroDraw_genData_cp_addRow(cpDgId, Numx, ObjId, "扇", MicroDraw_genData_calcExp(mcflId, tPrExp, ObjId, xcxljgJson), tPrExp, MicroDraw_genData_calcExp(mcflId, lPrExp, ObjId, xcxljgJson), lPrExp, MicroDraw_genData_calcExp(mcflId, lCntExp, ObjId, xcxljgJson), lCntExp, "", "C" + cpSeq.toString());
                var PrKind = "收口";
                var PrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "prid");
                var PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "exp");
                var BcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "cntExp");
                var ColorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", PrKind, "colorExp");
                if (!isEmptyOrNull(PrId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, PrId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, "90-90", BcpType, "竖收口", MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson), ColorExp, PrKind)
                }
            });
            $("#" + winId + " [mtype='" + mDrawFlag_Glass + "']").each(function(i, obj) {
                var tem = "";
                var ObjId = obj.getAttribute("id");
                var Glass = obj.getAttribute("mglass");
                if (isEmptyOrNull(Glass)) {
                    Glass = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "MGG", "prid")
                }
                if (Glass.substr(0, 1) == '"') {
                    Glass = Glass.substr(1)
                }
                if (Glass.substr(Glass.length - 1, 1) == '"') {
                    Glass = Glass.substr(0, Glass.length - 1)
                }
                var WExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "固玻宽度", "exp");
                var HExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "固玻高度", "exp");
                bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "固玻宽度", "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "固玻宽度", "cntExp");
                var glExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "固玻宽度", "glassExp");
                var glassExp = "";
                var glassGy = "";
                var glassGyExp = "";
                var glassDb = "";
                var glassDbExp = "";
                var glassMb = "";
                var glassMbExp = "";
                var glExpArr = glExp.split(",");
                glassExp = glExpArr[0];
                glassGyExp = glExpArr[1];
                glassDbExp = glExpArr[2];
                glassMbExp = glExpArr[3];
                if (!isEmptyOrNull(glExp)) {
                    Glass = MicroDraw_genData_calcExp(mcflId, glassExp, ObjId, xcxljgJson);
                    glassGy = MicroDraw_genData_calcExp(mcflId, glassGyExp, ObjId, xcxljgJson);
                    glassDb = MicroDraw_genData_calcExp(mcflId, glassDbExp, ObjId, xcxljgJson);
                    glassMb = MicroDraw_genData_calcExp(mcflId, glassMbExp, ObjId, xcxljgJson)
                }
                if (!isEmptyOrNull(Glass)) {
                    var node_txt = $("#" + ObjId + "_txt")[0];
                    var glassFlag = "";
                    if (!isEmptyOrNull(node_txt)) {
                        glassFlag = node_txt.textContent
                    }
                    var glAreaExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "固玻宽度", "glAreaExp");
                    var W = MicroDraw_genData_calcExp(mcflId, WExp, ObjId, xcxljgJson);
                    var H = MicroDraw_genData_calcExp(mcflId, HExp, ObjId, xcxljgJson);
                    var cnt = MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson);
                    var glArea = MicroDraw_genData_calcExp(mcflId, glAreaExp, ObjId, xcxljgJson);
                    if ($.Micro.IsEmpty(glArea)) {
                        glArea = (Number(W) / 1000 * Number(H) / 1000 * cnt)
                    }
                    MicroDraw_genData_gl_addRow(mcflId, xcxljgJson, glDgId, Numx, ObjId, Glass, W, WExp, H, HExp, cnt, cntExp, bcpType, "", glassFlag, "固玻宽度", glassExp, glassGy, glassGyExp, glassDb, glassDbExp, glassMb, glassMbExp, glArea, glAreaExp)
                }
            });
            $("#" + winId + " [mtype*='" + mDrawFlag_Zdm + "']").each(function(i, obj) {
                var tem = "";
                var ObjId = obj.getAttribute("id");
                var tem = "";
                var ObjId = obj.getAttribute("id");
                var Glass = obj.getAttribute("mglass");
                if (isEmptyOrNull(Glass)) {
                    Glass = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "MGG", "prid")
                }
                if (Glass.substr(0, 1) == '"') {
                    Glass = Glass.substr(1)
                }
                if (Glass.substr(Glass.length - 1, 1) == '"') {
                    Glass = Glass.substr(0, Glass.length - 1)
                }
                var WExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "扇玻宽度", "exp");
                var HExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "扇玻高度", "exp");
                bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "扇玻宽度", "bcpType");
                var cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "扇玻宽度", "cntExp");
                var glExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "扇玻宽度", "glassExp");
                var glassExp = "";
                var glassGy = "";
                var glassGyExp = "";
                var glassDb = "";
                var glassDbExp = "";
                var glassMb = "";
                var glassMbExp = "";
                var glExpArr = glExp.split(",");
                glassExp = glExpArr[0];
                glassGyExp = glExpArr[1];
                glassDbExp = glExpArr[2];
                glassMbExp = glExpArr[3];
                if (!isEmptyOrNull(glExp)) {
                    Glass = MicroDraw_genData_calcExp(mcflId, glassExp, ObjId, xcxljgJson);
                    glassGy = MicroDraw_genData_calcExp(mcflId, glassGyExp, ObjId, xcxljgJson);
                    glassDb = MicroDraw_genData_calcExp(mcflId, glassDbExp, ObjId, xcxljgJson);
                    glassMb = MicroDraw_genData_calcExp(mcflId, glassMbExp, ObjId, xcxljgJson)
                }
                if (!isEmptyOrNull(Glass)) {
                    var node_txt = $("#" + ObjId + "_txt")[0];
                    var glassFlag = "";
                    if (!isEmptyOrNull(node_txt)) {
                        glassFlag = node_txt.textContent
                    }
                    var glAreaExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", "扇玻宽度", "glAreaExp");
                    var W = MicroDraw_genData_calcExp(mcflId, WExp, ObjId, xcxljgJson);
                    var H = MicroDraw_genData_calcExp(mcflId, HExp, ObjId, xcxljgJson);
                    var cnt = MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson);
                    var glArea = MicroDraw_genData_calcExp(mcflId, glAreaExp, ObjId, xcxljgJson);
                    if ($.Micro.IsEmpty(glArea)) {
                        glArea = (Number(W) / 1000 * Number(H) / 1000 * cnt)
                    }
                    MicroDraw_genData_gl_addRow(mcflId, xcxljgJson, glDgId, Numx, ObjId, Glass, W, WExp, H, HExp, cnt, cntExp, bcpType, "", glassFlag, "扇玻宽度", glassExp, glassGy, glassGyExp, glassDb, glassDbExp, glassMb, glassMbExp, glArea, glAreaExp)
                }
            });
            $.each(xcxljgJson,
            function(k, o) {
                if (o.type == "F") {
                    var temCnt = 0;
                    var Cnt = 0;
                    if (o.prid.length > 0) {
                        $("#" + winId + " [mtype='" + mDrawFlag_FrameRect + "']").each(function(i, obj) {
                            temCnt = Number(MicroDraw_genData_calcExp(mcflId, o.cntExp, obj.getAttribute("id"), xcxljgJson));
                            Cnt = Number(Cnt) + Number(temCnt)
                        });
                        $("#" + winId + " [mtype='" + mDrawFlag_TingH + "']").each(function(i, obj) {
                            temCnt = Number(MicroDraw_genData_calcExp(mcflId, o.cntExp, obj.getAttribute("id"), xcxljgJson));
                            Cnt = Number(Cnt) + Number(temCnt)
                        });
                        $("#" + winId + " [mtype='" + mDrawFlag_TingV + "']").each(function(i, obj) {
                            temCnt = Number(MicroDraw_genData_calcExp(mcflId, o.cntExp, obj.getAttribute("id"), xcxljgJson));
                            Cnt = Number(Cnt) + Number(temCnt)
                        });
                        $("#" + winId + " [mtype='" + mDrawFlag_Glass + "']").each(function(i, obj) {
                            temCnt = Number(MicroDraw_genData_calcExp(mcflId, o.cntExp, obj.getAttribute("id"), xcxljgJson));
                            Cnt = Number(Cnt) + Number(temCnt)
                        });
                        $("#" + winId + " [mtype*='" + mDrawFlag_Zdm + "']").each(function(i, obj) {
                            temCnt = Number(MicroDraw_genData_calcExp(mcflId, o.cntExp, obj.getAttribute("id"), xcxljgJson));
                            Cnt = Number(Cnt) + Number(temCnt)
                        });
                        var CntExp2 = o.cntExp2;
                        if (!isEmptyOrNull(CntExp2)) {
                            CntExp2 = replaceAll(CntExp2, " RES ", Cnt.toString());
                            Cnt = Number(MicroDraw_genData_calcExp(0, CntExp2, "", ""))
                        }
                        MicroDraw_genData_wj_addRow(wjDgId, Numx, winId, o.prid, Cnt, o.cntExp, o.bcpType, o.usePlace, "", o.cntExp2, "1", o.bgyOptExp)
                    }
                }
            });
            var getCombWinIDs = MicroDraw_getCombWinIDs("all");
            var Wins = getCombWinIDs.Wins;
            if ($.inArray(winId, Wins) >= 0) {
                isComboWin = true
            } else {
                if (isComboArcWin) {
                    isComboWin = true
                } else {
                    isComboWin = false
                }
            }
            if (!isComboWin || (isComboWin && ComboWinCnt == 0)) {
                $.each(xcxljgJson,
                function(k, o) {
                    if (o.type == "B") {
                        var temMoney = 0;
                        var Money = 0;
                        var temBjArea = 0;
                        var bjArea = 0;
                        var tempBjPrice = 0;
                        var bjPrice = 0;
                        var temDesc = "";
                        var Desc = "";
                        var bjExp = o.bjExp;
                        var bjDescExp = o.bjDescExp;
                        var CntExp2 = o.cntExp2;
                        var bjAreaExp = o.bjAreaExp;
                        var bjPriceExp = o.bjPriceExp;
                        if (isEmptyOrNull(bjExp)) {
                            bjExp = "0"
                        }
                        if (isEmptyOrNull(bjDescExp)) {
                            bjDescExp = '""'
                        }
                        if (isEmptyOrNull(CntExp2)) {
                            CntExp2 = ""
                        }
                        if (isEmptyOrNull(bjAreaExp)) {
                            bjAreaExp = ""
                        }
                        if (isEmptyOrNull(bjPriceExp)) {
                            bjPriceExp = ""
                        }
                        $("#" + winId + " [mtype='" + mDrawFlag_FrameRect + "']").each(function(i, obj) {
                            temMoney = Number(MicroDraw_genData_calcExp(mcflId, bjExp, obj.getAttribute("id"), xcxljgJson));
                            Money = Number(Money) + Number(temMoney);
                            temBjArea = Number(MicroDraw_genData_calcExp(mcflId, bjAreaExp, obj.getAttribute("id"), xcxljgJson));
                            bjArea = Number(bjArea) + Number(temBjArea);
                            temBjPrice = Number(MicroDraw_genData_calcExp(mcflId, bjPriceExp, obj.getAttribute("id"), xcxljgJson));
                            bjPrice = Number(bjPrice) + Number(temBjPrice);
                            temDesc = MicroDraw_genData_calcExp(mcflId, bjDescExp, obj.getAttribute("id"), xcxljgJson);
                            Desc = Desc + " " + temDesc
                        });
                        MicroDraw_genData_bj_addRow(bjDgId, Numx, winId, o.name, bjExp, Money, "", bjDescExp, Desc, o.bjType, CntExp2, o.CalcFlag, bjAreaExp, bjArea, bjPriceExp, bjPrice, 100)
                    }
                });
                setXCXLDiscountFlag(xcxlId);
                if (isComboWin) {
                    ComboWinCnt++
                }
            }
            $.each(xcxljgJson,
            function(k, o) {
                if (o.type == "L") {
                    var temCnt = 0;
                    var Cnt = 0;
                    var CntExp = o.cntExp;
                    if (isEmptyOrNull(CntExp)) {
                        CntExp = "0"
                    }
                    $("#" + winId + " [mtype='" + mDrawFlag_FrameRect + "']").each(function(i, obj) {
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    });
                    MicroDraw_genData_label_addRow(labelDgId, Numx, winId, o.name, CntExp, Cnt, "")
                }
            });
            if (!isComboWin || (isComboWin && ComboWinCntCost == 0)) {
                $.each(xcxljgJson,
                function(k, o) {
                    if (o.type == "A") {
                        var temMoney = 0;
                        var Money = 0;
                        var exp = o.EXP;
                        var memo = o.memo;
                        if (isEmptyOrNull(exp)) {
                            exp = "0"
                        }
                        if ($(nodeFrame).length > 0) {
                            var obj = nodeFrame;
                            temMoney = Number(MicroDraw_genData_calcExp(mcflId, exp, obj.getAttribute("id"), xcxljgJson));
                            Money = Number(Money) + Number(temMoney)
                        }
                        MicroDraw_genData_cost_addRow(costDgId, Numx, winId, o.name, exp, Money, memo)
                    }
                });
                if (isComboWin) {
                    ComboWinCntCost++
                }
            }
            break
        }
        lf_createRouteData({
            xcxlId: xcxlId,
            DatasType: "other"
        })
    });
    var Numx = MicroBudget_getPropertyValue(mBudgetWinProperty, "Numx");
    var setCornerMaterial = function() {
        var allCombs = MicroDraw_getCombWinIDs("all");
        var Combs = allCombs.Combs;
        var Wins = allCombs.Wins;
        var tCMs = allCombs.CMs;
        var frameObj;
        var mxcxlid;
        var xcxljgStr, xcxljgJson;
        var tagText = "";
        var allWins = $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Win + "']");
        $.each($("#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_Custom_CornerMaterial + "],#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_Custom_CornerMaterial_h + "]"),
        function() {
            var tCM = $(this);
            var tid = tCM.attr("id");
            if ($.inArray(tid, tCMs) == -1) {
                tCMs.push(tid)
            }
        });
        if (tCMs.length == 0) {
            return true
        }
        if (allWins.length > 0) {
            frameObj = allWins.eq(0).find("[mtype=" + mDrawFlag_FrameRect + "]");
            mxcxlid = frameObj.attr("mxcxlid");
            xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(mxcxlid);
            xcxljgJson = eval("(" + xcxljgStr + ")")
        }
        var mcflId = MicroDraw_genData_getMcflIdByXcxlid(mxcxlid);
        if (mxcxlid && xcxljgJson) {
            for (var i = 0; i < tCMs.length; i++) {
                var ObjId = tCMs[i];
                var tCM = $("#" + mDrawFlag_SvgId + " #" + tCMs[i]);
                var prId, cntExp, bcpType, colorExp, PrExp;
                prId = tCM.attr("mprid");
                cntExp = tCM.attr("mcnt_exp");
                var mtype = tCM.attr("mtype");
                var mangle = tCM.attr("mangle");
                mangle = $.Micro.ConvToNum(mangle);
                var nameText = (mangle == 0) ? "拼接料": "转角料";
                prId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", nameText, "prid");
                cntExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", nameText, "cntExp");
                if ($.Micro.IsEmpty(cntExp)) {
                    cntExp = "CNT"
                }
                var nameText_width = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", nameText + "宽度", "prid"));
                if (isNaN(nameText_width)) {
                    nameText_width = 0
                }
                if (!$.Micro.IsEmpty(prId)) {
                    tCM.attr("mprid", prId)
                }
                if (!$.Micro.IsEmpty(cntExp)) {
                    tCM.attr("mcnt_exp", cntExp)
                }
                if (mtype == mDrawFlag_Custom_CornerMaterial) {
                    tCM.attr("mwidth", nameText_width)
                } else {
                    tCM.attr("mheight", nameText_width)
                }
                bcpType = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", nameText, "bcpType");
                colorExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", nameText, "colorExp");
                if ($.Micro.IsEmpty(bcpType)) {
                    bcpType = "框"
                }
                if ($.Micro.IsEmpty(colorExp)) {
                    colorExp = "MYS"
                }
                if (mtype == mDrawFlag_Custom_CornerMaterial) {
                    tagText = "竖";
                    PrExp = tCM.attr("mheight_exp")
                } else {
                    tagText = "横";
                    PrExp = tCM.attr("mwidth_exp")
                }
                if (!$.Micro.IsEmpty(MicroDraw_getData_getXcxljgData(xcxljgJson, "P", nameText, "exp"))) {
                    PrExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", nameText, "exp")
                }
                MicroDraw_Redraw(ObjId);
                if (!$.Micro.IsEmpty(prId)) {
                    MicroDraw_genData_pr_addRow(mcflId, xcxljgJson, prDgId, Numx, ObjId, prId, MicroDraw_genData_calcExp(mcflId, PrExp, ObjId, xcxljgJson), PrExp, MicroDraw_genData_calcExp(mcflId, cntExp, ObjId, xcxljgJson), cntExp, (mangle + "-" + mangle), bcpType, tagText, MicroDraw_genData_calcExp(mcflId, colorExp, ObjId, xcxljgJson), colorExp, nameText)
                }
            }
            GraphSetting(xcxljgJson, [mDrawFlag_Custom_CornerMaterial, mDrawFlag_Custom_CornerMaterial_h])
        }
    };
    setCornerMaterial();
    MicroBudget_WEB_ORDER_genData("toorder", 0, "all");
    MicroDraw_clearData_Except = [];
    MicroDraw_calcTotal();
    MicroDraw_genData_Action = false
}
function MicroDraw_clearData() {
    var A = $.messager.progress({
        title: "正在删除数据",
        msg: "正在删除数据，请等待..."
    });
    if ($.inArray("opt", MicroDraw_clearData_Except) == -1) {
        var B = $("#" + mDrawOptProperty).datagrid("getRows");
        for (i = B.length - 1; i >= 0; i--) {
            idx = $("#" + mDrawOptProperty).datagrid("getRowIndex", B[i]);
            $("#" + mDrawOptProperty).datagrid("deleteRow", idx)
        }
    }
    var B = $("#" + mDrawPrProperty).datagrid("getRows");
    for (i = B.length - 1; i >= 0; i--) {
        idx = $("#" + mDrawPrProperty).datagrid("getRowIndex", B[i]);
        $("#" + mDrawPrProperty).datagrid("deleteRow", idx)
    }
    var B = $("#" + mDrawGlProperty).datagrid("getRows");
    for (i = B.length - 1; i >= 0; i--) {
        idx = $("#" + mDrawGlProperty).datagrid("getRowIndex", B[i]);
        $("#" + mDrawGlProperty).datagrid("deleteRow", idx)
    }
    var B = $("#" + mDrawWjProperty).datagrid("getRows");
    for (i = B.length - 1; i >= 0; i--) {
        idx = $("#" + mDrawWjProperty).datagrid("getRowIndex", B[i]);
        $("#" + mDrawWjProperty).datagrid("deleteRow", idx)
    }
    var B = $("#" + mDrawCpProperty).datagrid("getRows");
    for (i = B.length - 1; i >= 0; i--) {
        idx = $("#" + mDrawCpProperty).datagrid("getRowIndex", B[i]);
        $("#" + mDrawCpProperty).datagrid("deleteRow", idx)
    }
    var B = $("#" + mDrawBjProperty).datagrid("getRows");
    for (i = B.length - 1; i >= 0; i--) {
        idx = $("#" + mDrawBjProperty).datagrid("getRowIndex", B[i]);
        $("#" + mDrawBjProperty).datagrid("deleteRow", idx)
    }
    var B = $("#" + mDrawLabelProperty).datagrid("getRows");
    for (i = B.length - 1; i >= 0; i--) {
        idx = $("#" + mDrawLabelProperty).datagrid("getRowIndex", B[i]);
        $("#" + mDrawLabelProperty).datagrid("deleteRow", idx)
    }
    var B = $("#" + mDrawCostProperty).datagrid("getRows");
    for (i = B.length - 1; i >= 0; i--) {
        idx = $("#" + mDrawCostProperty).datagrid("getRowIndex", B[i]);
        $("#" + mDrawCostProperty).datagrid("deleteRow", idx)
    }
    var B = $("#" + mDrawRouteProperty).datagrid("getRows");
    for (i = B.length - 1; i >= 0; i--) {
        idx = $("#" + mDrawRouteProperty).datagrid("getRowIndex", B[i]);
        $("#" + mDrawRouteProperty).datagrid("deleteRow", idx)
    }
    if ($.inArray("opt", MicroDraw_clearData_Except) == -1) {
        if ($("#" + mWEB_ORDER_DrawOptProperty).length > 0) {
            $("#" + mWEB_ORDER_DrawOptProperty).datagrid("loadData", {
                total: 0,
                rows: []
            })
        }
    }
    if ($("#" + mWEB_ORDER_DrawBjProperty).length > 0) {
        $("#" + mWEB_ORDER_DrawBjProperty).datagrid("loadData", {
            total: 0,
            rows: []
        })
    }
    if ($("#" + mWEB_ORDER_DrawCostProperty).length > 0) {
        $("#" + mWEB_ORDER_DrawCostProperty).datagrid("loadData", {
            total: 0,
            rows: []
        })
    }
    if (MicroDraw_calcTotal && typeof(MicroDraw_calcTotal) == "function") {
        setTimeout("MicroDraw_calcTotal()", 100)
    }
    setTimeout(function() {
        $.messager.progress("close")
    },
    1000)
}
function MicroDraw_getGlData(A, D) {
    var C = "";
    var B = $("#" + mDrawGlProperty).datagrid("getRows");
    if (B && B.length > 0) {
        $.each(B,
        function(E, F) {
            switch (D) {
            case "OGG":
                if (F.ObjId == A) {
                    C = F.Glass;
                    return false
                }
                break;
            case "OMB":
                if (F.ObjId == A) {
                    C = F.glassMb;
                    return false
                }
                break;
            case "ODB":
                if (F.ObjId == A) {
                    C = F.glassDb;
                    return false
                }
                break;
            case "OGY":
                if (F.ObjId == A) {
                    C = F.glassGy;
                    return false
                }
                break
            }
        });
        if (isEmptyOrNull(C)) {
            C = ""
        }
        return C
    }
}
function MicroDraw_getOptPrGlWjCpUpdateStr() {
    var B = "N";
    var A = "";
    var G = "";
    var E = "";
    var F = "";
    var D = "";
    MicroDraw_closeEditor();
    A = A + "WEB_BUDGET_ITEM_PR";
    G = "";
    var H = $("#" + mDrawPrProperty).datagrid("getColumnFields");
    $.each(H,
    function(L, M) {
        var K = $("#" + mDrawPrProperty).datagrid("getColumnOption", M);
        if (M != "id" && M != "ProductName") {
            if (!K.checkbox) {
                G = G + "," + M
            }
        }
    });
    G = G.substring(1);
    if (G.length > 0) {
        A = A + "#%" + G
    }
    var I = $("#" + mDrawPrProperty).datagrid("getChanges", "deleted");
    $.each(I,
    function(K, L) {
        if (!isEmptyOrNull(L)) {
            E = E + "," + L["id"] + ""
        }
    });
    E = E.substring(1);
    if (E.length > 0) {
        A = A + "#%D##" + E;
        B = "Y"
    }
    var C = $("#" + mDrawPrProperty).datagrid("getChanges", "inserted");
    $.each(C,
    function(K, L) {
        F = "";
        $.each(H,
        function(O, N) {
            var M = $("#" + mDrawPrProperty).datagrid("getColumnOption", N);
            if (!M.checkbox) {
                if (N != "id" && N != "ProductName") {
                    if (M.type == "NUM") {
                        F = F + "," + L[N]
                    } else {
                        F = F + ",'" + L[N] + "'"
                    }
                    B = "Y"
                }
            }
        });
        F = F.substring(1);
        if (F.length > 0) {
            A = A + "#%A##" + F
        }
    });
    var J = $("#" + mDrawPrProperty).datagrid("getChanges", "updated");
    $.each(J,
    function(K, L) {
        D = "";
        $.each(H,
        function(O, N) {
            var M = $("#" + mDrawPrProperty).datagrid("getColumnOption", N);
            if (!M.checkbox) {
                if (N != "id" && N != "ProductName") {
                    if (M.type == "NUM") {
                        D = D + "," + M.field + "=" + L[N]
                    } else {
                        D = D + "," + M.field + "='" + L[N] + "'"
                    }
                    B = "Y"
                }
            }
        });
        D = D.substring(1);
        if (D.length > 0) {
            A = A + "#%U##" + L["id"] + "##" + D
        }
    });
    A = A + "@@";
    G = "";
    E = "";
    F = "";
    D = "";
    A = A + "WEB_BUDGET_ITEM_GL";
    G = "";
    var H = $("#" + mDrawGlProperty).datagrid("getColumnFields");
    $.each(H,
    function(L, M) {
        var K = $("#" + mDrawGlProperty).datagrid("getColumnOption", M);
        if (M != "id") {
            if (!K.checkbox) {
                G = G + "," + M
            }
        }
    });
    G = G.substring(1);
    if (G.length > 0) {
        A = A + "#%" + G
    }
    var I = $("#" + mDrawGlProperty).datagrid("getChanges", "deleted");
    $.each(I,
    function(K, L) {
        if (!isEmptyOrNull(L)) {
            E = E + "," + L["id"] + ""
        }
    });
    E = E.substring(1);
    if (E.length > 0) {
        A = A + "#%D##" + E;
        B = "Y"
    }
    var C = $("#" + mDrawGlProperty).datagrid("getChanges", "inserted");
    $.each(C,
    function(K, L) {
        F = "";
        $.each(H,
        function(O, N) {
            var M = $("#" + mDrawGlProperty).datagrid("getColumnOption", N);
            if (!M.checkbox) {
                if (N != "id") {
                    if (M.type == "NUM") {
                        F = F + "," + L[N]
                    } else {
                        F = F + ",'" + L[N] + "'"
                    }
                    B = "Y"
                }
            }
        });
        F = F.substring(1);
        if (F.length > 0) {
            A = A + "#%A##" + F
        }
    });
    var J = $("#" + mDrawGlProperty).datagrid("getChanges", "updated");
    $.each(J,
    function(K, L) {
        D = "";
        $.each(H,
        function(O, N) {
            var M = $("#" + mDrawGlProperty).datagrid("getColumnOption", N);
            if (!M.checkbox) {
                if (N != "id") {
                    if (M.type == "NUM") {
                        D = D + "," + M.field + "=" + L[N]
                    } else {
                        D = D + "," + M.field + "='" + L[N] + "'"
                    }
                    B = "Y"
                }
            }
        });
        D = D.substring(1);
        if (D.length > 0) {
            A = A + "#%U##" + L["id"] + "##" + D
        }
    });
    A = A + "@@";
    G = "";
    E = "";
    F = "";
    D = "";
    A = A + "WEB_BUDGET_ITEM_WJ";
    G = "";
    var H = $("#" + mDrawWjProperty).datagrid("getColumnFields");
    $.each(H,
    function(L, M) {
        var K = $("#" + mDrawWjProperty).datagrid("getColumnOption", M);
        if (M != "id" && M != "MaterialName") {
            if (!K.checkbox) {
                G = G + "," + M
            }
        }
    });
    G = G.substring(1);
    if (G.length > 0) {
        A = A + "#%" + G
    }
    var I = $("#" + mDrawWjProperty).datagrid("getChanges", "deleted");
    $.each(I,
    function(K, L) {
        if (!isEmptyOrNull(L)) {
            E = E + "," + L["id"] + ""
        }
    });
    E = E.substring(1);
    if (E.length > 0) {
        A = A + "#%D##" + E;
        B = "Y"
    }
    var C = $("#" + mDrawWjProperty).datagrid("getChanges", "inserted");
    $.each(C,
    function(K, L) {
        F = "";
        $.each(H,
        function(O, N) {
            var M = $("#" + mDrawWjProperty).datagrid("getColumnOption", N);
            if (!M.checkbox) {
                if (N != "id" && N != "MaterialName") {
                    if (M.type == "NUM") {
                        F = F + "," + L[N]
                    } else {
                        F = F + ",'" + L[N] + "'"
                    }
                    B = "Y"
                }
            }
        });
        F = F.substring(1);
        if (F.length > 0) {
            A = A + "#%A##" + F
        }
    });
    var J = $("#" + mDrawWjProperty).datagrid("getChanges", "updated");
    $.each(J,
    function(K, L) {
        D = "";
        $.each(H,
        function(O, N) {
            var M = $("#" + mDrawWjProperty).datagrid("getColumnOption", N);
            if (!M.checkbox) {
                if (N != "id" && N != "MaterialName") {
                    if (M.type == "NUM") {
                        D = D + "," + M.field + "=" + L[N]
                    } else {
                        D = D + "," + M.field + "='" + L[N] + "'"
                    }
                    B = "Y"
                }
            }
        });
        D = D.substring(1);
        if (D.length > 0) {
            A = A + "#%U##" + L["id"] + "##" + D
        }
    });
    A = A + "@@";
    G = "";
    E = "";
    F = "";
    D = "";
    A = A + "WEB_BUDGET_ITEM_CP";
    G = "";
    var H = $("#" + mDrawCpProperty).datagrid("getColumnFields");
    $.each(H,
    function(L, M) {
        var K = $("#" + mDrawCpProperty).datagrid("getColumnOption", M);
        if (M != "id") {
            if (!K.checkbox) {
                G = G + "," + M
            }
        }
    });
    G = G.substring(1);
    if (G.length > 0) {
        A = A + "#%" + G
    }
    var I = $("#" + mDrawCpProperty).datagrid("getChanges", "deleted");
    $.each(I,
    function(K, L) {
        if (!isEmptyOrNull(L)) {
            E = E + "," + L["id"] + ""
        }
    });
    E = E.substring(1);
    if (E.length > 0) {
        A = A + "#%D##" + E;
        B = "Y"
    }
    var C = $("#" + mDrawCpProperty).datagrid("getChanges", "inserted");
    $.each(C,
    function(K, L) {
        F = "";
        $.each(H,
        function(O, N) {
            var M = $("#" + mDrawCpProperty).datagrid("getColumnOption", N);
            if (!M.checkbox) {
                if (N != "id") {
                    if (M.type == "NUM") {
                        F = F + "," + L[N]
                    } else {
                        F = F + ",'" + L[N] + "'"
                    }
                    B = "Y"
                }
            }
        });
        F = F.substring(1);
        if (F.length > 0) {
            A = A + "#%A##" + F
        }
    });
    var J = $("#" + mDrawCpProperty).datagrid("getChanges", "updated");
    $.each(J,
    function(K, L) {
        D = "";
        $.each(H,
        function(O, N) {
            var M = $("#" + mDrawCpProperty).datagrid("getColumnOption", N);
            if (!M.checkbox) {
                if (N != "id") {
                    if (M.type == "NUM") {
                        D = D + "," + M.field + "=" + L[N]
                    } else {
                        D = D + "," + M.field + "='" + L[N] + "'"
                    }
                    B = "Y"
                }
            }
        });
        D = D.substring(1);
        if (D.length > 0) {
            A = A + "#%U##" + L["id"] + "##" + D
        }
    });
    A = A + "@@";
    G = "";
    E = "";
    F = "";
    D = "";
    A = A + "WEB_BUDGET_ITEM_OPT";
    G = "";
    var H = $("#" + mDrawOptProperty).datagrid("getColumnFields");
    $.each(H,
    function(L, M) {
        var K = $("#" + mDrawOptProperty).datagrid("getColumnOption", M);
        if (M != "id") {
            if (!K.checkbox) {
                G = G + "," + M
            }
        }
    });
    G = G.substring(1);
    if (G.length > 0) {
        A = A + "#%" + G
    }
    var I = $("#" + mDrawOptProperty).datagrid("getChanges", "deleted");
    $.each(I,
    function(K, L) {
        if (!isEmptyOrNull(L)) {
            E = E + "," + L["id"] + ""
        }
    });
    E = E.substring(1);
    if (E.length > 0) {
        A = A + "#%D##" + E;
        B = "Y"
    }
    var C = $("#" + mDrawOptProperty).datagrid("getChanges", "inserted");
    $.each(C,
    function(K, L) {
        F = "";
        $.each(H,
        function(O, N) {
            var M = $("#" + mDrawOptProperty).datagrid("getColumnOption", N);
            if (!M.checkbox) {
                if (N != "id") {
                    if (M.type == "NUM") {
                        F = F + "," + L[N]
                    } else {
                        F = F + ",'" + L[N] + "'"
                    }
                    B = "Y"
                }
            }
        });
        F = F.substring(1);
        if (F.length > 0) {
            A = A + "#%A##" + F
        }
    });
    var J = $("#" + mDrawOptProperty).datagrid("getChanges", "updated");
    $.each(J,
    function(K, L) {
        D = "";
        $.each(H,
        function(O, N) {
            var M = $("#" + mDrawOptProperty).datagrid("getColumnOption", N);
            if (!M.checkbox) {
                if (N != "id") {
                    if (M.type == "NUM") {
                        D = D + "," + M.field + "=" + L[N]
                    } else {
                        D = D + "," + M.field + "='" + L[N] + "'"
                    }
                    B = "Y"
                }
            }
        });
        D = D.substring(1);
        if (D.length > 0) {
            A = A + "#%U##" + L["id"] + "##" + D
        }
    });
    A = A + "@@";
    G = "";
    E = "";
    F = "";
    D = "";
    A = A + "WEB_BUDGET_ITEM_BJ";
    G = "";
    var H = $("#" + mDrawBjProperty).datagrid("getColumnFields");
    $.each(H,
    function(L, M) {
        var K = $("#" + mDrawBjProperty).datagrid("getColumnOption", M);
        if (M != "id") {
            if (!K.checkbox) {
                G = G + "," + M
            }
        }
    });
    G = G.substring(1);
    if (G.length > 0) {
        A = A + "#%" + G
    }
    var I = $("#" + mDrawBjProperty).datagrid("getChanges", "deleted");
    $.each(I,
    function(K, L) {
        if (!isEmptyOrNull(L)) {
            E = E + "," + L["id"] + ""
        }
    });
    E = E.substring(1);
    if (E.length > 0) {
        A = A + "#%D##" + E;
        B = "Y"
    }
    var C = $("#" + mDrawBjProperty).datagrid("getChanges", "inserted");
    $.each(C,
    function(K, L) {
        F = "";
        $.each(H,
        function(O, N) {
            var M = $("#" + mDrawBjProperty).datagrid("getColumnOption", N);
            if (!M.checkbox) {
                if (N != "id") {
                    if (M.type == "NUM") {
                        F = F + "," + L[N]
                    } else {
                        F = F + ",'" + L[N] + "'"
                    }
                    B = "Y"
                }
            }
        });
        F = F.substring(1);
        if (F.length > 0) {
            A = A + "#%A##" + F
        }
    });
    var J = $("#" + mDrawBjProperty).datagrid("getChanges", "updated");
    $.each(J,
    function(K, L) {
        D = "";
        $.each(H,
        function(O, N) {
            var M = $("#" + mDrawBjProperty).datagrid("getColumnOption", N);
            if (!M.checkbox) {
                if (N != "id") {
                    if (M.type == "NUM") {
                        D = D + "," + M.field + "=" + L[N]
                    } else {
                        D = D + "," + M.field + "='" + L[N] + "'"
                    }
                    B = "Y"
                }
            }
        });
        D = D.substring(1);
        if (D.length > 0) {
            A = A + "#%U##" + L["id"] + "##" + D
        }
    });
    A = A + "@@";
    G = "";
    E = "";
    F = "";
    D = "";
    A = A + "WEB_BUDGET_ITEM_LABEL";
    G = "";
    var H = $("#" + mDrawLabelProperty).datagrid("getColumnFields");
    $.each(H,
    function(L, M) {
        var K = $("#" + mDrawLabelProperty).datagrid("getColumnOption", M);
        if (M != "id") {
            if (!K.checkbox) {
                G = G + "," + M
            }
        }
    });
    G = G.substring(1);
    if (G.length > 0) {
        A = A + "#%" + G
    }
    var I = $("#" + mDrawLabelProperty).datagrid("getChanges", "deleted");
    $.each(I,
    function(K, L) {
        if (!isEmptyOrNull(L)) {
            E = E + "," + L["id"] + ""
        }
    });
    E = E.substring(1);
    if (E.length > 0) {
        A = A + "#%D##" + E;
        B = "Y"
    }
    var C = $("#" + mDrawLabelProperty).datagrid("getChanges", "inserted");
    $.each(C,
    function(K, L) {
        F = "";
        $.each(H,
        function(O, N) {
            var M = $("#" + mDrawLabelProperty).datagrid("getColumnOption", N);
            if (!M.checkbox) {
                if (N != "id") {
                    if (M.type == "NUM") {
                        F = F + "," + L[N]
                    } else {
                        F = F + ",'" + L[N] + "'"
                    }
                    B = "Y"
                }
            }
        });
        F = F.substring(1);
        if (F.length > 0) {
            A = A + "#%A##" + F
        }
    });
    var J = $("#" + mDrawLabelProperty).datagrid("getChanges", "updated");
    $.each(J,
    function(K, L) {
        D = "";
        $.each(H,
        function(O, N) {
            var M = $("#" + mDrawLabelProperty).datagrid("getColumnOption", N);
            if (!M.checkbox) {
                if (N != "id") {
                    if (M.type == "NUM") {
                        D = D + "," + M.field + "=" + L[N]
                    } else {
                        D = D + "," + M.field + "='" + L[N] + "'"
                    }
                    B = "Y"
                }
            }
        });
        D = D.substring(1);
        if (D.length > 0) {
            A = A + "#%U##" + L["id"] + "##" + D
        }
    });
    A = A + "@@";
    G = "";
    E = "";
    F = "";
    D = "";
    A = A + "WEB_BUDGET_ITEM_PRICE_OTH";
    G = "";
    var H = $("#" + mDrawCostProperty).datagrid("getColumnFields");
    $.each(H,
    function(L, M) {
        var K = $("#" + mDrawCostProperty).datagrid("getColumnOption", M);
        if (M != "id") {
            if (!K.checkbox) {
                G = G + "," + M
            }
        }
    });
    G = G.substring(1);
    if (G.length > 0) {
        A = A + "#%" + G
    }
    var I = $("#" + mDrawCostProperty).datagrid("getChanges", "deleted");
    $.each(I,
    function(K, L) {
        if (!isEmptyOrNull(L)) {
            E = E + "," + L["id"] + ""
        }
    });
    E = E.substring(1);
    if (E.length > 0) {
        A = A + "#%D##" + E;
        B = "Y"
    }
    var C = $("#" + mDrawCostProperty).datagrid("getChanges", "inserted");
    $.each(C,
    function(K, L) {
        F = "";
        $.each(H,
        function(O, N) {
            var M = $("#" + mDrawCostProperty).datagrid("getColumnOption", N);
            if (!M.checkbox) {
                if (N != "id") {
                    if (M.type == "NUM") {
                        F = F + "," + L[N]
                    } else {
                        F = F + ",'" + L[N] + "'"
                    }
                    B = "Y"
                }
            }
        });
        F = F.substring(1);
        if (F.length > 0) {
            A = A + "#%A##" + F
        }
    });
    var J = $("#" + mDrawCostProperty).datagrid("getChanges", "updated");
    $.each(J,
    function(K, L) {
        D = "";
        $.each(H,
        function(O, N) {
            var M = $("#" + mDrawCostProperty).datagrid("getColumnOption", N);
            if (!M.checkbox) {
                if (N != "id") {
                    if (M.type == "NUM") {
                        D = D + "," + M.field + "=" + L[N]
                    } else {
                        D = D + "," + M.field + "='" + L[N] + "'"
                    }
                    B = "Y"
                }
            }
        });
        D = D.substring(1);
        if (D.length > 0) {
            A = A + "#%U##" + L["id"] + "##" + D
        }
    });
    A = A + "@@";
    G = "";
    E = "";
    F = "";
    D = "";
    A = A + "WEB_BUDGET_ITEM_ROUTE";
    G = "";
    var H = $("#" + mDrawRouteProperty).datagrid("getColumnFields");
    $.each(H,
    function(L, M) {
        var K = $("#" + mDrawRouteProperty).datagrid("getColumnOption", M);
        if (M != "id") {
            if (!K.checkbox) {
                G = G + "," + M
            }
        }
    });
    G = G.substring(1);
    if (G.length > 0) {
        A = A + "#%" + G
    }
    var I = $("#" + mDrawRouteProperty).datagrid("getChanges", "deleted");
    $.each(I,
    function(K, L) {
        if (!isEmptyOrNull(L)) {
            E = E + "," + L["id"] + ""
        }
    });
    E = E.substring(1);
    if (E.length > 0) {
        A = A + "#%D##" + E;
        B = "Y"
    }
    var C = $("#" + mDrawRouteProperty).datagrid("getChanges", "inserted");
    $.each(C,
    function(K, L) {
        F = "";
        $.each(H,
        function(O, N) {
            var M = $("#" + mDrawRouteProperty).datagrid("getColumnOption", N);
            if (!M.checkbox) {
                if (N != "id") {
                    if (M.type == "NUM") {
                        F = F + "," + L[N]
                    } else {
                        F = F + ",'" + L[N] + "'"
                    }
                    B = "Y"
                }
            }
        });
        F = F.substring(1);
        if (F.length > 0) {
            A = A + "#%A##" + F
        }
    });
    var J = $("#" + mDrawRouteProperty).datagrid("getChanges", "updated");
    $.each(J,
    function(K, L) {
        D = "";
        $.each(H,
        function(O, N) {
            var M = $("#" + mDrawRouteProperty).datagrid("getColumnOption", N);
            if (!M.checkbox) {
                if (N != "id") {
                    if (M.type == "NUM") {
                        D = D + "," + M.field + "=" + L[N]
                    } else {
                        D = D + "," + M.field + "='" + L[N] + "'"
                    }
                    B = "Y"
                }
            }
        });
        D = D.substring(1);
        if (D.length > 0) {
            A = A + "#%U##" + L["id"] + "##" + D
        }
    });
    if (B == "Y") {
        return A
    } else {
        return ""
    }
}
function MicroDraw_reflashOptPrGlWjCpData(A) {
    if (!$.Micro.IsEmpty(A)) {
        $("#" + mDrawOptProperty).datagrid("loadData", $.parseJSON(A[0]));
        $("#" + mDrawPrProperty).datagrid("loadData", $.parseJSON(A[1]));
        $("#" + mDrawGlProperty).datagrid("loadData", $.parseJSON(A[2]));
        $("#" + mDrawWjProperty).datagrid("loadData", $.parseJSON(A[3]));
        $("#" + mDrawCpProperty).datagrid("loadData", $.parseJSON(A[4]));
        $("#" + mDrawBjProperty).datagrid("loadData", $.parseJSON(A[5]));
        $("#" + mDrawLabelProperty).datagrid("loadData", $.parseJSON(A[6]));
        $("#" + mDrawCostProperty).datagrid("loadData", $.parseJSON(A[7]));
        $("#" + mDrawRouteProperty).datagrid("loadData", $.parseJSON(A[8]))
    } else {
        $("#" + mDrawOptProperty).datagrid({
            url: "../MicroBudget/WEB_BUDGET.ashx?action=searchOpt&whereStr=Numx='" + MicroBudget_getPropertyValue(mBudgetWinProperty, "Numx") + "'",
            sync: true,
        });
        $("#" + mDrawPrProperty).datagrid({
            url: "../MicroBudget/WEB_BUDGET.ashx?action=searchPr&whereStr=Numx='" + MicroBudget_getPropertyValue(mBudgetWinProperty, "Numx") + "'",
            sync: true
        });
        $("#" + mDrawGlProperty).datagrid({
            url: "../MicroBudget/WEB_BUDGET.ashx?action=searchGl&whereStr=Numx='" + MicroBudget_getPropertyValue(mBudgetWinProperty, "Numx") + "'",
            sync: true
        });
        $("#" + mDrawWjProperty).datagrid({
            url: "../MicroBudget/WEB_BUDGET.ashx?action=searchWj&whereStr=Numx='" + MicroBudget_getPropertyValue(mBudgetWinProperty, "Numx") + "'",
            sync: true
        });
        $("#" + mDrawCpProperty).datagrid({
            url: "../MicroBudget/WEB_BUDGET.ashx?action=searchCp&whereStr=Numx='" + MicroBudget_getPropertyValue(mBudgetWinProperty, "Numx") + "'",
            sync: true
        });
        $("#" + mDrawBjProperty).datagrid({
            url: "../MicroBudget/WEB_BUDGET.ashx?action=searchBj&whereStr=Numx='" + MicroBudget_getPropertyValue(mBudgetWinProperty, "Numx") + "'",
            sync: true
        });
        $("#" + mDrawLabelProperty).datagrid({
            url: "../MicroBudget/WEB_BUDGET.ashx?action=searchLabel&whereStr=Numx='" + MicroBudget_getPropertyValue(mBudgetWinProperty, "Numx") + "'",
            sync: true
        });
        $("#" + mDrawCostProperty).datagrid({
            url: "../MicroBudget/WEB_BUDGET.ashx?action=searchCost&whereStr=Numx='" + MicroBudget_getPropertyValue(mBudgetWinProperty, "Numx") + "'",
            sync: true
        });
        $("#" + mDrawRouteProperty).datagrid({
            url: "../MicroBudget/WEB_BUDGET.ashx?action=searchRoute&whereStr=Numx='" + MicroBudget_getPropertyValue(mBudgetWinProperty, "Numx") + "'",
            sync: true
        })
    }
    if (MicroDraw_calcTotal && typeof(MicroDraw_calcTotal) == "function") {
        setTimeout(function() {
            MicroDraw_calcTotal()
        },
        100)
    }
}
function MicroXCtime(A, J) {
    if ($.inArray(mCurUserId, ["13679737620"]) == -1) {
        return true
    }
    var E = A;
    var C = new Date();
    var D = C.getTime() - new Date(E).getTime();
    var B = Math.floor(D / (24 * 3600 * 1000));
    var F = D % (24 * 3600 * 1000);
    var K = Math.floor(F / (3600 * 1000));
    var L = F % (3600 * 1000);
    var G = Math.floor(L / (60 * 1000));
    var H = L % (60 * 1000);
    var I = Math.round(H / 1000);
    console.log(J + " 相差 " + B + "天 " + K + "小时 " + G + " 分钟" + I + " 秒共" + H + "毫秒")
}
function MicroDraw_calcAllExp() {
    var OrderRouteRefreshObj = {
        isPr: true,
        isGl: true,
        isWj: true,
        isCp: true,
        isPack: true,
        isOpt: true,
        isBj: true,
        isCost: true,
        isRoute: true
    };
    if (WEB_BUDGET_ISSIMPLE) {
        if (AL_PROJECT_FROMBUDGET_ARGUMENT.opr == "orderRouteRefresh") {
            for (var item in OrderRouteRefreshObj) {
                OrderRouteRefreshObj[item] = false
            }
            OrderRouteRefreshObj.isRoute = true
        }
    }
    var MicroTest_sdate = new Date();
    mMcflIdOptStrArray = new Array();
    mXcxljgStrArray = new Array();
    mPublicMatMoneyObj = undefined;
    switch (mVersion) {
    case "DRAW":
    case "DRAW_M":
    case "DRAW_JX":
        return;
        break;
    default:
    }
    MicroDraw_closeEditor();
    if (MicroDraw_OrderModel == "order") {
        MicroBudget_WEB_ORDER_genData("todesign", 0, "all")
    }
    var WinId;
    var nodeFrame;
    var node;
    var pNode;
    var xcxlId;
    var mcflId;
    var xcxljgStr;
    var xcxljgJson;
    var ObjId;
    var Len;
    var LenExp;
    var W;
    var WExp;
    var H;
    var HExp;
    var Cnt;
    var CntExp;
    var CalcFlag;
    var last_xcxlId;
    var last_mcflId;
    var last_xcxljgJson;
    xcxlId = $("#" + mDrawFlag_SvgId + " [mtype][mxcxlid]:first").attr("mxcxlid");
    var optVal = "";
    var optValExp = "";
    var bgyOpt = "";
    var bgyOptExp = "";
    var WinIds = [];
    var nodeFrames = [];
    var allWins = $("#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_Win + "],#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_Custom_arc + "]");
    $.each(allWins,
    function() {
        var _this = $(this);
        WinIds.push(_this.attr("id"));
        if (_this.attr("mtype") == mDrawFlag_Win) {
            nodeFrames.push(_this.find("[mtype=" + mDrawFlag_FrameRect + "]"))
        } else {
            if (_this.attr("mtype") == mDrawFlag_Custom_arc) {
                nodeFrames.push(_this)
            }
        }
    });
    if (OrderRouteRefreshObj.isOpt) {
        var svgArea = $("#" + mDrawFlag_SvgId).attr("area");
        var rows = $("#" + mDrawOptProperty).datagrid("getRows");
        rows = MicroDraw_convertOptValue(rows);
        $.each(rows,
        function(i, r) {
            var xcxlId;
            var ObjId;
            var mcflId;
            var xcxljgStr;
            var xcxljgJson;
            optValExp = r.optValExp;
            if (optValExp && optValExp.length > 0) {
                if ($("#" + mDrawFlag_SvgId + " [mtype='frameRect']").length > 0) {
                    xcxlId = $("#" + mDrawFlag_SvgId + " [mtype='frameRect']").attr("mxcxlid");
                    ObjId = $("#" + mDrawFlag_SvgId + " [mtype='frameRect']").attr("id")
                } else {
                    if ($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_arc + "']").length > 0) {
                        xcxlId = $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_arc + "']").attr("mxcxlid");
                        ObjId = $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_arc + "']").attr("id")
                    }
                }
                if (isEmptyOrNull(xcxlId)) {
                    var CNT = MicroBudget_getPropertyValue(mBudgetWinProperty, "cnt");
                    optValExp = replaceAll(optValExp, "CNT", CNT);
                    $.each(rows,
                    function(j, rs) {
                        optValExp = replaceAll(optValExp, rs.optId, rs.optVal)
                    });
                    optVal = eval(optValExp)
                } else {
                    if (xcxlId != last_xcxlId) {
                        mcflId = MicroDraw_genData_getMcflIdByXcxlid(xcxlId);
                        if (isEmptyOrNull(mcflId)) {
                            jQuery.messager.alert("提示:", "当前窗型的 系列结构已经不存在，请重新选择！", "info");
                            return
                        }
                        xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(xcxlId);
                        xcxljgJson = eval("(" + xcxljgStr + ")")
                    } else {
                        xcxlId = last_xcxlId;
                        mcflId = last_mcflId;
                        xcxljgJson = last_xcxljgJson
                    }
                    optVal = MicroDraw_genData_calcExp(mcflId, optValExp, ObjId, xcxljgJson)
                }
                if (!$.Micro.IsEmpty(svgArea) && !isNaN(svgArea) && r.optId == "MAREA") {
                    optVal = Number(svgArea)
                }
                $("#" + mDrawOptProperty).datagrid("updateRow", {
                    index: i,
                    row: {
                        optVal: optVal
                    }
                });
                if (!rows[i].bxdOpt) {
                    $("#" + mDrawOptProperty).datagrid("hideRow", i)
                }
                last_xcxlId = xcxlId;
                last_mcflId = mcflId;
                last_xcxljgJson = xcxljgJson
            }
            bgyOptExp = r.bgyOptExp;
            if (bgyOptExp && bgyOptExp.length > 0) {
                if ($("#" + mDrawFlag_SvgId + " [mtype='frameRect']").length > 0) {
                    xcxlId = $("#" + mDrawFlag_SvgId + " [mtype='frameRect']").attr("mxcxlid");
                    ObjId = $("#" + mDrawFlag_SvgId + " [mtype='frameRect']").attr("id")
                } else {
                    if ($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_arc + "']").length > 0) {
                        xcxlId = $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_arc + "']").attr("mxcxlid");
                        ObjId = $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_arc + "']").attr("id")
                    }
                }
                if (isEmptyOrNull(xcxlId)) {
                    var CNT = MicroBudget_getPropertyValue(mBudgetWinProperty, "cnt");
                    bgyOptExp = replaceAll(bgyOptExp, "CNT", CNT);
                    $.each(rows,
                    function(j, rs) {
                        bgyOptExp = replaceAll(bgyOptExp, rs.optId, rs.optVal)
                    });
                    bgyOpt = eval(bgyOptExp)
                } else {
                    if (xcxlId != last_xcxlId) {
                        mcflId = MicroDraw_genData_getMcflIdByXcxlid(xcxlId);
                        if (isEmptyOrNull(mcflId)) {
                            jQuery.messager.alert("提示:", "当前窗型的 系列结构已经不存在，请重新选择！", "info");
                            return
                        }
                        xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(xcxlId);
                        xcxljgJson = eval("(" + xcxljgStr + ")")
                    } else {
                        xcxlId = last_xcxlId;
                        mcflId = last_mcflId;
                        xcxljgJson = last_xcxljgJson
                    }
                    bgyOpt = MicroDraw_genData_calcExp(mcflId, bgyOptExp, ObjId, xcxljgJson)
                }
                $("#" + mDrawOptProperty).datagrid("updateRow", {
                    index: i,
                    row: {
                        bgyOpt: bgyOpt
                    }
                });
                if (!rows[i].bxdOpt) {
                    $("#" + mDrawOptProperty).datagrid("hideRow", i)
                }
                last_xcxlId = xcxlId;
                last_mcflId = mcflId;
                last_xcxljgJson = xcxljgJson
            }
        })
    }
    MicroXCtime(MicroTest_sdate, "参数 ");
    if (OrderRouteRefreshObj.isPr) {
        ObjId = "";
        Len = "";
        LenExp = "";
        Cnt = "";
        CntExp = "";
        Color = "";
        ColorExp = "";
        Memo = "";
        var rows = $("#" + mDrawPrProperty).datagrid("getRows");
        var CalcDiviArcLen;
        var j_Alpha, j_Beta;
        var j_Gamma;
        var row;
        $.each(rows,
        function(i, row) {
            var idx = $("#" + mDrawPrProperty).datagrid("getRowIndex", row);
            ObjId = rows[i].ObjId;
            LenExp = rows[i].LenExp;
            CntExp = rows[i].CntExp;
            ColorExp = rows[i].colorExp;
            Memo = rows[i].Memo;
            var Angle = rows[i].Angle;
            var objMtype;
            if (ObjId.length > 0 && $("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype") != mDrawFlag_Custom_CornerMaterial && $("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype") != mDrawFlag_Custom_CornerMaterial_h) {
                if ($("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype") == mDrawFlag_Win || $("#" + mDrawFlag_SvgId + " #" + ObjId).parents("[mtype=" + mDrawFlag_Win + "]").length > 0) {
                    objMtype = mDrawFlag_Win;
                    node = $("#" + ObjId)[0];
                    if (isEmptyOrNull(node)) {
                        jQuery.messager.alert("提示:", "第" + (Number(i) + 1).toString() + "行型材已经没有关联的图形，请重新生成数据！", "error");
                        setTimeout(function() {
                            $.messager.progress("close")
                        },
                        1);
                        return false
                    }
                    pNode = node.parentNode;
                    while (!isEmptyOrNull(pNode)) {
                        var mtype = pNode.getAttribute("mtype");
                        if (mtype == "win") {
                            WinId = pNode.getAttribute("id");
                            break
                        }
                        pNode = pNode.parentNode
                    }
                    nodeFrame = $("#" + WinId + " [mtype='" + mDrawFlag_FrameRect + "']")[0];
                    xcxlId = $("#" + WinId + " [mtype='" + mDrawFlag_FrameRect + "']").attr("mxcxlid")
                } else {
                    if ($("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype") == mDrawFlag_Custom_arc) {
                        objMtype = mDrawFlag_Custom_arc;
                        WinId = ObjId;
                        nodeFrame = $("#" + mDrawFlag_SvgId + " #" + WinId)[0];
                        xcxlId = $("#" + WinId).attr("mxcxlid")
                    }
                }
                if (isEmptyOrNull(xcxlId)) {
                    jQuery.messager.alert("提示:", "请点击 框 对象，然后设置 系列结构 属性，才能生成公式！", "info");
                    return
                }
                if (xcxlId != last_xcxlId) {
                    mcflId = MicroDraw_genData_getMcflIdByXcxlid(xcxlId);
                    if (isEmptyOrNull(mcflId)) {
                        jQuery.messager.alert("提示:", "当前窗型的 系列结构已经不存在，请重新选择！", "info");
                        return
                    }
                    xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(xcxlId);
                    xcxljgJson = eval("(" + xcxljgStr + ")")
                } else {
                    xcxlId = last_xcxlId;
                    mcflId = last_mcflId;
                    xcxljgJson = last_xcxljgJson
                }
                Len = MicroDraw_genData_calcExp(mcflId, LenExp, ObjId, xcxljgJson);
                Cnt = MicroDraw_genData_calcExp(mcflId, CntExp, ObjId, xcxljgJson);
                Color = MicroDraw_genData_calcExp(mcflId, ColorExp, ObjId, xcxljgJson);
                var row = {
                    Len: Len,
                    Cnt: Cnt,
                    color: Color
                };
                if (objMtype == mDrawFlag_Custom_arc && $.Micro.isInArray(Memo, ["弧下框", "左斜", "右斜", "弧内左斜压线", "弧内右斜压线"])) {
                    if ($.Micro.IsEmpty(CalcDiviArcLen)) {
                        CalcDiviArcLen = MicroDraw_CalcDiviArcLen(ObjId);
                        j_Alpha = $.Micro.MRound(CalcDiviArcLen.j_Alpha, 0);
                        j_Beta = $.Micro.MRound(CalcDiviArcLen.j_Beta, 0);
                        j_Gamma = $.Micro.MRound(CalcDiviArcLen.j_Gamma, 0)
                    }
                    if (!$.Micro.isInArray(Angle, ["45-45", "90-90", "45-90", "90-45"])) {
                        switch (Memo) {
                        case "左斜":
                        case "右斜":
                        case "弧内左斜压线":
                        case "弧内右斜压线":
                            row.Angle = j_Alpha + "-" + j_Beta;
                            break;
                        case "弧下框":
                            row.Angle = j_Gamma + "-" + j_Gamma;
                            break
                        }
                    }
                }
                $("#" + mDrawPrProperty).datagrid("updateRow", {
                    index: idx,
                    row: row
                });
                last_xcxlId = xcxlId;
                last_mcflId = mcflId;
                last_xcxljgJson = xcxljgJson
            } else {
                if (isEmptyOrNull(LenExp)) {
                    Len = rows[i].Len
                } else {
                    Len = MicroDraw_genData_calcExp(0, LenExp, "", "")
                }
                if (isEmptyOrNull(CntExp)) {
                    Cnt = rows[i].Cnt
                } else {
                    Cnt = MicroDraw_genData_calcExp(0, CntExp, "", "")
                }
                if (isEmptyOrNull(ColorExp)) {
                    Color = rows[i].Color
                } else {
                    Color = MicroDraw_genData_calcExp(0, ColorExp, "", "")
                }
                row = {
                    Len: Len,
                    Cnt: Cnt,
                    color: Color
                };
                $("#" + mDrawPrProperty).datagrid("updateRow", {
                    index: idx,
                    row: row
                })
            }
        })
    }
    MicroXCtime(MicroTest_sdate, "型材 ");
    if (OrderRouteRefreshObj.isGl) {
        ObjId = "";
        W = "";
        WExp = "";
        H = "";
        HExp = "";
        Cnt = "";
        CntExp = "";
        glass = "";
        glassExp = "";
        glassGy = "";
        glassGyExp = "";
        glassDb = "";
        glassDbExp = "";
        glassMb = "";
        glassMbExp = "";
        var rows = $("#" + mDrawGlProperty).datagrid("getRows");
        $.each(rows,
        function(i, row) {
            var idx = $("#" + mDrawGlProperty).datagrid("getRowIndex", row);
            ObjId = rows[i].ObjId;
            WExp = rows[i].WExp;
            HExp = rows[i].HExp;
            CntExp = rows[i].CntExp;
            glassExp = rows[i].glassExp;
            glassGyExp = rows[i].glassGyExp;
            glassDbExp = rows[i].glassDbExp;
            glassMbExp = rows[i].glassMbExp;
            var objMtype;
            if (ObjId.length > 0 && $("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype") != mDrawFlag_Custom_CornerMaterial) {
                if ($("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype") == mDrawFlag_Win || $("#" + mDrawFlag_SvgId + " #" + ObjId).parents("[mtype=" + mDrawFlag_Win + "]").length > 0) {
                    objMtype = mDrawFlag_Win;
                    node = $("#" + ObjId)[0];
                    if (isEmptyOrNull(node)) {
                        jQuery.messager.alert("提示:", "第" + (Number(i) + 1).toString() + "行玻璃已经没有关联的图形，请重新生成数据！", "error");
                        setTimeout(function() {
                            $.messager.progress("close")
                        },
                        1);
                        return false
                    }
                    pNode = node.parentNode;
                    while (!isEmptyOrNull(pNode)) {
                        var mtype = pNode.getAttribute("mtype");
                        if (mtype == "win") {
                            WinId = pNode.getAttribute("id");
                            break
                        }
                        pNode = pNode.parentNode
                    }
                    nodeFrame = $("#" + WinId + " [mtype='" + mDrawFlag_FrameRect + "']")[0];
                    xcxlId = $("#" + WinId + " [mtype='" + mDrawFlag_FrameRect + "']").attr("mxcxlid")
                } else {
                    if ($("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype") == mDrawFlag_Custom_arc) {
                        objMtype = mDrawFlag_Custom_arc;
                        WinId = ObjId;
                        nodeFrame = $("#" + mDrawFlag_SvgId + " #" + WinId)[0];
                        xcxlId = $("#" + WinId).attr("mxcxlid")
                    }
                }
                if (isEmptyOrNull(xcxlId)) {
                    jQuery.messager.alert("提示:", "请点击 框 对象，然后设置 系列结构 属性，才能生成公式！", "info");
                    return
                }
                if (xcxlId != last_xcxlId) {
                    mcflId = MicroDraw_genData_getMcflIdByXcxlid(xcxlId);
                    if (isEmptyOrNull(mcflId)) {
                        jQuery.messager.alert("提示:", "当前窗型的 系列结构已经不存在，请重新选择！", "info");
                        return
                    }
                    xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(xcxlId);
                    xcxljgJson = eval("(" + xcxljgStr + ")")
                } else {
                    xcxlId = last_xcxlId;
                    mcflId = last_mcflId;
                    xcxljgJson = last_xcxljgJson
                }
                W = MicroDraw_genData_calcExp(mcflId, WExp, ObjId, xcxljgJson);
                H = MicroDraw_genData_calcExp(mcflId, HExp, ObjId, xcxljgJson);
                Cnt = MicroDraw_genData_calcExp(mcflId, CntExp, ObjId, xcxljgJson);
                glass = MicroDraw_genData_calcExp(mcflId, glassExp, ObjId, xcxljgJson);
                glassGy = MicroDraw_genData_calcExp(mcflId, glassGyExp, ObjId, xcxljgJson);
                glassDb = MicroDraw_genData_calcExp(mcflId, glassDbExp, ObjId, xcxljgJson);
                glassMb = MicroDraw_genData_calcExp(mcflId, glassMbExp, ObjId, xcxljgJson);
                $("#" + mDrawGlProperty).datagrid("updateRow", {
                    index: idx,
                    row: {
                        W: W,
                        H: H,
                        Cnt: Cnt,
                        Glass: glass,
                        glassGy: glassGy,
                        glassDb: glassDb,
                        glassMb: glassMb
                    }
                });
                last_xcxlId = xcxlId;
                last_mcflId = mcflId;
                last_xcxljgJson = xcxljgJson
            } else {
                if (isEmptyOrNull(WExp)) {
                    W = rows[i].W
                } else {
                    W = MicroDraw_genData_calcExp(0, WExp, "", "")
                }
                if (isEmptyOrNull(HExp)) {
                    H = rows[i].H
                } else {
                    H = MicroDraw_genData_calcExp(0, HExp, "", "")
                }
                if (isEmptyOrNull(CntExp)) {
                    Cnt = rows[i].Cnt
                } else {
                    Cnt = MicroDraw_genData_calcExp(0, CntExp, "", "")
                }
                if (isEmptyOrNull(glassExp)) {
                    glass = rows[i].glass
                } else {
                    glass = MicroDraw_genData_calcExp(0, glassExp, "", "")
                }
                if (isEmptyOrNull(glassGyExp)) {
                    glassGy = rows[i].glassGy
                } else {
                    glassGy = MicroDraw_genData_calcExp(0, glassGyExp, "", "")
                }
                if (isEmptyOrNull(glassDbExp)) {
                    glassDb = rows[i].glassDb
                } else {
                    glassDb = MicroDraw_genData_calcExp(0, glassDbExp, "", "")
                }
                if (isEmptyOrNull(glassMbExp)) {
                    glassMb = rows[i].glassMb
                } else {
                    glassMb = MicroDraw_genData_calcExp(0, glassMbExp, "", "")
                }
                $("#" + mDrawGlProperty).datagrid("updateRow", {
                    index: idx,
                    row: {
                        W: W,
                        H: H,
                        Cnt: Cnt,
                        Glass: glass,
                        glassGy: glassGy,
                        glassDb: glassDb,
                        glassMb: glassMb
                    }
                })
            }
        })
    }
    MicroXCtime(MicroTest_sdate, "玻璃 ");
    if (OrderRouteRefreshObj.isWj) {
        var rows = $("#" + mDrawWjProperty).datagrid("getRows");
        $.each(rows,
        function(i, row) {
            var idx = $("#" + mDrawWjProperty).datagrid("getRowIndex", row);
            ObjId = rows[i].ObjId;
            CntExp = rows[i].CntExp;
            CntExp2 = rows[i].CntExp2;
            Cnt = 0;
            var objMtype;
            if (ObjId.length > 0 && $("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype") != mDrawFlag_Custom_CornerMaterial) {
                if ($("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype") == mDrawFlag_Win || $("#" + mDrawFlag_SvgId + " #" + ObjId).parents("[mtype=" + mDrawFlag_Win + "]").length > 0) {
                    objMtype = mDrawFlag_Win;
                    WinId = ObjId;
                    nodeFrame = $("#" + WinId + " [mtype='" + mDrawFlag_FrameRect + "']")[0];
                    xcxlId = $("#" + WinId + " [mtype='" + mDrawFlag_FrameRect + "']").attr("mxcxlid")
                } else {
                    if ($("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype") == mDrawFlag_Custom_arc) {
                        objMtype = mDrawFlag_Custom_arc;
                        WinId = ObjId;
                        nodeFrame = $("#" + mDrawFlag_SvgId + " #" + WinId)[0];
                        xcxlId = $("#" + WinId).attr("mxcxlid")
                    }
                }
                if (isEmptyOrNull(xcxlId)) {
                    jQuery.messager.alert("提示:", "请点击 框 对象，然后设置 系列结构 属性，才能生成公式！", "info");
                    return
                }
                if (xcxlId != last_xcxlId) {
                    mcflId = MicroDraw_genData_getMcflIdByXcxlid(xcxlId);
                    if (isEmptyOrNull(mcflId)) {
                        jQuery.messager.alert("提示:", "当前窗型的 系列结构已经不存在，请重新选择！", "info");
                        return
                    }
                    xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(xcxlId);
                    xcxljgJson = eval("(" + xcxljgStr + ")")
                } else {
                    xcxlId = last_xcxlId;
                    mcflId = last_mcflId;
                    xcxljgJson = last_xcxljgJson
                }
                switch (mcflId) {
                case "1":
                    if ($(nodeFrame).length > 0) {
                        var obj = nodeFrame;
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    }
                    $("#" + WinId + " [mtype='" + mDrawFlag_TingH + "']").each(function(i, obj) {
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    });
                    $("#" + WinId + " [mtype='" + mDrawFlag_TingV + "']").each(function(i, obj) {
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    });
                    if (objMtype == mDrawFlag_Custom_arc) {
                        for (var ii = 0; ii < $.Micro.ConvToNum($("#" + WinId).attr("mtingcnt")).length; ii++) {
                            temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, WinId, xcxljgJson));
                            Cnt = Number(Cnt) + Number(temCnt)
                        }
                    }
                    $("#" + WinId + " [mtype='" + mDrawFlag_Glass + "']").each(function(i, obj) {
                        var tobj;
                        if (objMtype == mDrawFlag_Win) {
                            tobj = obj
                        } else {
                            if (objMtype == mDrawFlag_Custom_arc) {
                                tobj = $("#" + WinId)[0]
                            }
                        }
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, tobj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    });
                    $("#" + WinId + " [mtype='" + mDrawFlag_Pkc + "']").each(function(i, obj) {
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    });
                    $("#" + WinId + " [mtype='" + mDrawFlag_Dkc + "']").each(function(i, obj) {
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    });
                    break;
                case "2":
                    if ($(nodeFrame).length > 0) {
                        var obj = nodeFrame;
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    }
                    $("#" + WinId + " [mtype='" + mDrawFlag_TingH + "']").each(function(i, obj) {
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    });
                    $("#" + WinId + " [mtype='" + mDrawFlag_TingV + "']").each(function(i, obj) {
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    });
                    if (objMtype == mDrawFlag_Custom_arc) {
                        for (var ii = 0; ii < $.Micro.ConvToNum($("#" + WinId).attr("mtingcnt")).length; ii++) {
                            temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, WinId, xcxljgJson));
                            Cnt = Number(Cnt) + Number(temCnt)
                        }
                    }
                    $("#" + WinId + " [mtype='" + mDrawFlag_Glass + "']").each(function(i, obj) {
                        var tobj;
                        if (objMtype == mDrawFlag_Win) {
                            tobj = obj
                        } else {
                            if (objMtype == mDrawFlag_Custom_arc) {
                                tobj = $("#" + WinId)[0]
                            }
                        }
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, tobj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    });
                    $("#" + WinId + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(i, obj) {
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    });
                    break;
                case "3":
                    $("#" + WinId + " [mtype='" + mDrawFlag_FrameRect + "']").each(function(i, obj) {
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    });
                    $("#" + WinId + " [mtype='" + mDrawFlag_TingH + "']").each(function(i, obj) {
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    });
                    $("#" + WinId + " [mtype='" + mDrawFlag_TingV + "']").each(function(i, obj) {
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    });
                    $("#" + WinId + " [mtype='" + mDrawFlag_Glass + "']").each(function(i, obj) {
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    });
                    $("#" + WinId + " [mtype='" + mDrawFlag_Pkc + "']").each(function(i, obj) {
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    });
                    $("#" + WinId + " [mtype='" + mDrawFlag_Dkc + "']").each(function(i, obj) {
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    });
                    break;
                case "4":
                    if ($(nodeFrame).length > 0) {
                        var obj = nodeFrame;
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    }
                    $("#" + WinId + " [mtype='" + mDrawFlag_TingH + "']").each(function(i, obj) {
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    });
                    $("#" + WinId + " [mtype='" + mDrawFlag_TingV + "']").each(function(i, obj) {
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    });
                    if (objMtype == mDrawFlag_Custom_arc) {
                        for (var ii = 0; ii < $.Micro.ConvToNum($("#" + WinId).attr("mtingcnt")).length; ii++) {
                            temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, WinId, xcxljgJson));
                            Cnt = Number(Cnt) + Number(temCnt)
                        }
                    }
                    $("#" + WinId + " [mtype='" + mDrawFlag_Glass + "']").each(function(i, obj) {
                        var tobj;
                        if (objMtype == mDrawFlag_Win) {
                            tobj = obj
                        } else {
                            if (objMtype == mDrawFlag_Custom_arc) {
                                tobj = $("#" + WinId)[0]
                            }
                        }
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, tobj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    });
                    $("#" + WinId + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(i, obj) {
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    });
                    break;
                case "5":
                    $("#" + WinId + " [mtype='" + mDrawFlag_FrameRect + "']").each(function(i, obj) {
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    });
                    $("#" + WinId + " [mtype='" + mDrawFlag_TingH + "']").each(function(i, obj) {
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    });
                    $("#" + WinId + " [mtype='" + mDrawFlag_TingV + "']").each(function(i, obj) {
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    });
                    $("#" + WinId + " [mtype='" + mDrawFlag_Glass + "']").each(function(i, obj) {
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    });
                    $("#" + WinId + " [mtype*='" + mDrawFlag_Zdm + "']").each(function(i, obj) {
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    });
                    break;
                default:
                    break
                }
                if (!isEmptyOrNull(CntExp2)) {
                    CntExp2 = replaceAll(CntExp2, " RES ", Cnt.toString());
                    Cnt = Number(MicroDraw_genData_calcExp(0, CntExp2, "", ""))
                }
                $("#" + mDrawWjProperty).datagrid("updateRow", {
                    index: idx,
                    row: {
                        Cnt: Cnt
                    }
                });
                bgyOptExp = rows[i].bgyOptExp;
                if (bgyOptExp && bgyOptExp.length > 0) {
                    var FrameObjId = $(nodeFrame).attr("id");
                    if (isEmptyOrNull(xcxlId)) {
                        var CNT = MicroBudget_getPropertyValue(mBudgetWinProperty, "cnt");
                        bgyOptExp = replaceAll(bgyOptExp, "CNT", CNT);
                        $.each(rows,
                        function(j, rs) {
                            bgyOptExp = replaceAll(bgyOptExp, rs.optId, rs.optVal)
                        });
                        bgyOpt = eval(bgyOptExp)
                    } else {
                        bgyOpt = MicroDraw_genData_calcExp(mcflId, bgyOptExp, FrameObjId, xcxljgJson)
                    }
                    $("#" + mDrawWjProperty).datagrid("updateRow", {
                        index: idx,
                        row: {
                            bgyOpt: bgyOpt
                        }
                    })
                }
                last_xcxlId = xcxlId;
                last_mcflId = mcflId;
                last_xcxljgJson = xcxljgJson
            } else {
                if (isEmptyOrNull(CntExp)) {
                    Cnt = rows[i].Cnt
                } else {
                    temCnt = Number(MicroDraw_genData_calcExp(0, CntExp, "", ""));
                    Cnt = Number(Cnt) + Number(temCnt)
                }
                if (!isEmptyOrNull(CntExp2)) {
                    CntExp2 = replaceAll(CntExp2, " RES ", Cnt.toString());
                    Cnt = Number(MicroDraw_genData_calcExp(0, CntExp2, "", ""))
                }
                $("#" + mDrawWjProperty).datagrid("updateRow", {
                    index: idx,
                    row: {
                        Cnt: Cnt
                    }
                })
            }
        })
    }
    MicroXCtime(MicroTest_sdate, "配件 ");
    if (OrderRouteRefreshObj.isRoute) { (function() {
            if ($.Micro.IsEmpty(xcxlId)) {
                return
            }
            var routeRows = $("#" + mDrawRouteProperty).datagrid("getRows");
            var i = 0;
            while (i < routeRows.length) {
                var row = routeRows[i];
                var Proce = row.Proce;
                var ProceType = row.ProceType;
                if (Proce.indexOf("排水孔") > -1) {
                    $("#" + mDrawRouteProperty).datagrid("deleteRow", i)
                } else {
                    i++
                }
                routeRows = $("#" + mDrawRouteProperty).datagrid("getRows")
            }
            lf_createRouteData({
                xcxlId: xcxlId,
                DatasType: "B"
            });
            $("#" + mDrawRouteProperty).datagrid("sort", {
                sortName: "Numx,ObjId,xcxljgid,Seq",
                sortOrder: "asc,asc,asc,asc",
                remoteSort: false
            })
        })();
        var rows = $("#" + mDrawRouteProperty).datagrid("getRows");
        var row;
        $.each(rows,
        function(i, row) {
            var idx = $("#" + mDrawRouteProperty).datagrid("getRowIndex", row);
            ObjId = rows[i].ObjId;
            xExp = rows[i].xExp;
            yExp = rows[i].yExp;
            zExp = rows[i].zExp;
            TemplateExp = rows[i].TemplateExp;
            var PlineExp = rows[i].PlineExp;
            var BEnableExp = rows[i].BEnableExp;
            var Pline, BEnable;
            if (ObjId.length > 0 && $("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype") != mDrawFlag_Custom_CornerMaterial && $("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype") != mDrawFlag_Custom_CornerMaterial_h) {
                if ($("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype") == mDrawFlag_Win || $("#" + mDrawFlag_SvgId + " #" + ObjId).parents("[mtype=" + mDrawFlag_Win + "]").length > 0) {
                    objMtype = mDrawFlag_Win;
                    node = $("#" + ObjId)[0];
                    if (isEmptyOrNull(node)) {
                        jQuery.messager.alert("提示:", "第" + (Number(i) + 1).toString() + "行型材已经没有关联的图形，请重新生成数据！", "error");
                        setTimeout(function() {
                            $.messager.progress("close")
                        },
                        1);
                        return false
                    }
                    pNode = node.parentNode;
                    while (!isEmptyOrNull(pNode)) {
                        var mtype = pNode.getAttribute("mtype");
                        if (mtype == "win") {
                            WinId = pNode.getAttribute("id");
                            break
                        }
                        pNode = pNode.parentNode
                    }
                    nodeFrame = $("#" + WinId + " [mtype='" + mDrawFlag_FrameRect + "']")[0];
                    xcxlId = $("#" + WinId + " [mtype='" + mDrawFlag_FrameRect + "']").attr("mxcxlid")
                } else {
                    if ($("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype") == mDrawFlag_Custom_arc) {
                        objMtype = mDrawFlag_Custom_arc;
                        WinId = ObjId;
                        nodeFrame = $("#" + mDrawFlag_SvgId + " #" + WinId)[0];
                        xcxlId = $("#" + WinId).attr("mxcxlid")
                    }
                }
                if (isEmptyOrNull(xcxlId)) {
                    jQuery.messager.alert("提示:", "请点击 框 对象，然后设置 系列结构 属性，才能生成公式！", "info");
                    return
                }
                if (xcxlId != last_xcxlId) {
                    mcflId = MicroDraw_genData_getMcflIdByXcxlid(xcxlId);
                    if (isEmptyOrNull(mcflId)) {
                        jQuery.messager.alert("提示:", "当前窗型的 系列结构已经不存在，请重新选择！", "info");
                        return
                    }
                    xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(xcxlId);
                    xcxljgJson = eval("(" + xcxljgStr + ")")
                } else {
                    xcxlId = last_xcxlId;
                    mcflId = last_mcflId;
                    xcxljgJson = last_xcxljgJson
                }
                x = MicroDraw_genData_calcExp(mcflId, xExp, ObjId, xcxljgJson, "", "", {
                    dgid: mDrawRouteProperty,
                    row: row,
                    rowindex: idx
                });
                y = MicroDraw_genData_calcExp(mcflId, yExp, ObjId, xcxljgJson, "", "", {
                    dgid: mDrawRouteProperty,
                    row: row,
                    rowindex: idx
                });
                z = MicroDraw_genData_calcExp(mcflId, zExp, ObjId, xcxljgJson, "", "", {
                    dgid: mDrawRouteProperty,
                    row: row,
                    rowindex: idx
                });
                Template = MicroDraw_genData_calcExp(mcflId, TemplateExp, ObjId, xcxljgJson, "", "", {
                    dgid: mDrawRouteProperty,
                    row: row,
                    rowindex: idx
                });
                Pline = MicroDraw_genData_calcExp(mcflId, PlineExp, ObjId, xcxljgJson, "", "", {
                    dgid: mDrawRouteProperty,
                    row: row,
                    rowindex: idx
                });
                BEnable = MicroDraw_genData_calcExp(mcflId, BEnableExp, ObjId, xcxljgJson, "", "", {
                    dgid: mDrawRouteProperty,
                    row: row,
                    rowindex: idx
                });
                var row = {
                    x: x,
                    y: y,
                    z: z,
                    Template: Template,
                    Pline: Pline,
                    BEnable: BEnable
                };
                $("#" + mDrawRouteProperty).datagrid("updateRow", {
                    index: idx,
                    row: row
                });
                last_xcxlId = xcxlId;
                last_mcflId = mcflId;
                last_xcxljgJson = xcxljgJson
            } else {
                if (isEmptyOrNull(xExp)) {
                    x = rows[i].x
                } else {
                    x = MicroDraw_genData_calcExp(0, xExp, "", "")
                }
                if (isEmptyOrNull(yExp)) {
                    y = rows[i].y
                } else {
                    y = MicroDraw_genData_calcExp(0, yExp, "", "")
                }
                if (isEmptyOrNull(zExp)) {
                    z = rows[i].z
                } else {
                    z = MicroDraw_genData_calcExp(0, zExp, "", "")
                }
                if (isEmptyOrNull(TemplateExp)) {
                    Template = rows[i].Template
                } else {
                    Template = MicroDraw_genData_calcExp(0, TemplateExp, "", "")
                }
                if (isEmptyOrNull(PlineExp)) {
                    Pline = rows[i].Pline
                } else {
                    Pline = MicroDraw_genData_calcExp(0, PlineExp, "", "")
                }
                if (isEmptyOrNull(BEnableExp)) {
                    BEnable = rows[i].BEnable
                } else {
                    BEnable = MicroDraw_genData_calcExp(0, BEnableExp, "", "")
                }
                row = {
                    x: x,
                    y: y,
                    z: z,
                    Template: Template,
                    Pline: Pline,
                    BEnable: BEnable
                };
                $("#" + mDrawRouteProperty).datagrid("updateRow", {
                    index: idx,
                    row: row
                })
            }
        })
    }
    MicroXCtime(MicroTest_sdate, "工艺路线 ");
    if (OrderRouteRefreshObj.isCp) {
        ObjId = "";
        W = "";
        WExp = "";
        H = "";
        HExp = "";
        Cnt = "";
        CntExp = "";
        var rows = $("#" + mDrawCpProperty).datagrid("getRows");
        $.each(rows,
        function(i, row) {
            var idx = $("#" + mDrawCpProperty).datagrid("getRowIndex", row);
            ObjId = rows[i].ObjId;
            WExp = rows[i].WExp;
            HExp = rows[i].HExp;
            CntExp = rows[i].CntExp;
            var objMtype;
            if (ObjId.length > 0 && $("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype") != mDrawFlag_Custom_CornerMaterial) {
                if ($("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype") == mDrawFlag_Win || $("#" + mDrawFlag_SvgId + " #" + ObjId).parents("[mtype=" + mDrawFlag_Win + "]").length > 0) {
                    objMtype = mDrawFlag_Win;
                    node = $("#" + ObjId)[0];
                    if (isEmptyOrNull(node)) {
                        setTimeout(function() {
                            $.messager.progress("close")
                        },
                        1);
                        return false
                    }
                    pNode = node.parentNode;
                    while (!isEmptyOrNull(pNode)) {
                        var mtype = pNode.getAttribute("mtype");
                        if (mtype == "win") {
                            WinId = pNode.getAttribute("id");
                            break
                        }
                        pNode = pNode.parentNode
                    }
                    nodeFrame = $("#" + WinId + " [mtype='" + mDrawFlag_FrameRect + "']")[0];
                    xcxlId = $("#" + WinId + " [mtype='" + mDrawFlag_FrameRect + "']").attr("mxcxlid")
                } else {
                    if ($("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype") == mDrawFlag_Custom_arc) {
                        objMtype = mDrawFlag_Custom_arc;
                        WinId = ObjId;
                        nodeFrame = $("#" + mDrawFlag_SvgId + " #" + WinId)[0];
                        xcxlId = $("#" + WinId).attr("mxcxlid")
                    }
                }
                if (isEmptyOrNull(xcxlId)) {
                    jQuery.messager.alert("提示:", "请点击 框 对象，然后设置 系列结构 属性，才能生成公式！", "info");
                    return
                }
                if (xcxlId != last_xcxlId) {
                    mcflId = MicroDraw_genData_getMcflIdByXcxlid(xcxlId);
                    if (isEmptyOrNull(mcflId)) {
                        jQuery.messager.alert("提示:", "当前窗型的 系列结构已经不存在，请重新选择！", "info");
                        return
                    }
                    xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(xcxlId);
                    xcxljgJson = eval("(" + xcxljgStr + ")")
                } else {
                    xcxlId = last_xcxlId;
                    mcflId = last_mcflId;
                    xcxljgJson = last_xcxljgJson
                }
                W = MicroDraw_genData_calcExp(mcflId, WExp, ObjId, xcxljgJson);
                H = MicroDraw_genData_calcExp(mcflId, HExp, ObjId, xcxljgJson);
                Cnt = MicroDraw_genData_calcExp(mcflId, CntExp, ObjId, xcxljgJson);
                $("#" + mDrawCpProperty).datagrid("updateRow", {
                    index: idx,
                    row: {
                        W: W,
                        H: H,
                        Cnt: Cnt
                    }
                });
                last_xcxlId = xcxlId;
                last_mcflId = mcflId;
                last_xcxljgJson = xcxljgJson
            } else {
                if (isEmptyOrNull(WExp)) {
                    W = rows[i].W
                } else {
                    W = MicroDraw_genData_calcExp(0, WExp, "", "")
                }
                if (isEmptyOrNull(HExp)) {
                    H = rows[i].H
                } else {
                    H = MicroDraw_genData_calcExp(0, HExp, "", "")
                }
                if (isEmptyOrNull(CntExp)) {
                    Cnt = rows[i].Cnt
                } else {
                    Cnt = MicroDraw_genData_calcExp(0, CntExp, "", "")
                }
                $("#" + mDrawCpProperty).datagrid("updateRow", {
                    index: idx,
                    row: {
                        W: W,
                        H: H,
                        Cnt: Cnt
                    }
                })
            }
        })
    }
    MicroXCtime(MicroTest_sdate, "成品 ");
    if (OrderRouteRefreshObj.isBj) {
        ObjId = "";
        TotalMoneyExp = "";
        TotalMoney = 0;
        var rows = $("#" + mDrawBjProperty).datagrid("getRows");
        $.each(rows,
        function(i, row) {
            var idx = $("#" + mDrawBjProperty).datagrid("getRowIndex", row);
            ObjId = rows[i].ObjId;
            TotalMoneyExp = rows[i].TotalMoneyExp;
            TotalMoney = 0;
            bjAreaExp = rows[i].bjAreaExp;
            bjArea = 0;
            bjPriceExp = rows[i].bjPriceExp;
            bjPrice = 0;
            BjDescExp = rows[i].BjDescExp;
            BjDesc = "";
            CntExp2 = rows[i].CntExp2;
            CalcFlag = rows[i].CalcFlag;
            var objMtype;
            if (ObjId.length > 0 && $.inArray($("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype"), [mDrawFlag_Custom_CornerMaterial, mDrawFlag_Custom_CornerMaterial_h]) == -1) {
                if ($("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype") == mDrawFlag_Win || $("#" + mDrawFlag_SvgId + " #" + ObjId).parents("[mtype=" + mDrawFlag_Win + "]").length > 0) {
                    objMtype = mDrawFlag_Win;
                    WinId = ObjId;
                    nodeFrame = $("#" + WinId + " [mtype='" + mDrawFlag_FrameRect + "']")[0];
                    xcxlId = $("#" + WinId + " [mtype='" + mDrawFlag_FrameRect + "']").attr("mxcxlid")
                } else {
                    if ($("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype") == mDrawFlag_Custom_arc) {
                        objMtype = mDrawFlag_Custom_arc;
                        WinId = ObjId;
                        nodeFrame = $("#" + mDrawFlag_SvgId + " #" + WinId)[0];
                        xcxlId = $("#" + WinId).attr("mxcxlid")
                    }
                }
                if (isEmptyOrNull(xcxlId)) {
                    return
                }
                if (xcxlId != last_xcxlId) {
                    mcflId = MicroDraw_genData_getMcflIdByXcxlid(xcxlId);
                    if (isEmptyOrNull(mcflId)) {
                        jQuery.messager.alert("提示:", "当前窗型的 系列结构 已经不存在，请重新选择！", "info");
                        return
                    }
                    xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(xcxlId);
                    xcxljgJson = eval("(" + xcxljgStr + ")")
                } else {
                    xcxlId = last_xcxlId;
                    mcflId = last_mcflId;
                    xcxljgJson = last_xcxljgJson
                }
                if ($(nodeFrame).length > 0) {
                    var obj = nodeFrame;
                    tempBjDesc = MicroDraw_genData_calcExp(mcflId, BjDescExp, obj.getAttribute("id"), xcxljgJson, true);
                    var expOrig = BjDescExp;
                    var exp = tempBjDesc;
                    var expVal;
                    try {
                        tempBjDesc = eval(tempBjDesc);
                        expVal = tempBjDesc
                    } catch(exception) {
                        jQuery.messager.alert("提示:", "公式计算错误！<br/>原公式：" + expOrig + "  转换后：" + exp + " 存在异常！<br/>" + exception, "error");
                        throw "";
                        expVal = tempBjDesc = ""
                    }
                    if (expVal == NaN || expVal == undefined) {
                        if (!isEmptyOrNull(expOrig)) {
                            jQuery.messager.alert("提示:", "计算结果错误！<br/>原公式：" + expOrig + "<br/>" + exp + " 公式的计算结果为：" + expVal + " <br/>请纠正！", "error")
                        }
                        expVal = tempBjDesc = ""
                    }
                }
                switch (true) {
                case mcflId == "1" || mcflId == "3": $.each(WinIds,
                    function(wi, wid) {
                        if (WinIds.length > 1 && (CalcFlag == 2 || CalcFlag == 3)) {
                            WinId = wid;
                            nodeFrame = nodeFrames[wi].get(0);
                            objMtype = $("#" + mDrawFlag_SvgId + " #" + WinId).attr("mtype")
                        }
                        if ($(nodeFrame).length > 0) {
                            var obj = nodeFrame;
                            temMoney = Number(MicroDraw_genData_calcExp(mcflId, TotalMoneyExp, obj.getAttribute("id"), xcxljgJson));
                            TotalMoney = Number(TotalMoney) + Number(temMoney);
                            temBjArea = Number(MicroDraw_genData_calcExp(mcflId, bjAreaExp, obj.getAttribute("id"), xcxljgJson));
                            bjArea = Number(bjArea) + Number(temBjArea);
                            temBjPrice = Number(MicroDraw_genData_calcExp(mcflId, bjPriceExp, obj.getAttribute("id"), xcxljgJson));
                            if (wi == 0) {
                                bjPrice = Number(bjPrice) + Number(temBjPrice)
                            }
                        }
                        if (CalcFlag == 0) {
                            return false
                        } else {
                            if (CalcFlag == 2) {
                                return true
                            }
                        }
                        $("#" + WinId + " [mtype='" + mDrawFlag_TingH + "']").each(function(i, obj) {
                            temMoney = Number(MicroDraw_genData_calcExp(mcflId, TotalMoneyExp, obj.getAttribute("id"), xcxljgJson));
                            TotalMoney = Number(TotalMoney) + Number(temMoney);
                            temBjArea = Number(MicroDraw_genData_calcExp(mcflId, bjAreaExp, obj.getAttribute("id"), xcxljgJson));
                            bjArea = Number(bjArea) + Number(temBjArea);
                            temBjPrice = Number(MicroDraw_genData_calcExp(mcflId, bjPriceExp, obj.getAttribute("id"), xcxljgJson));
                            if (wi == 0) {
                                bjPrice = Number(bjPrice) + Number(temBjPrice)
                            }
                        });
                        $("#" + WinId + " [mtype='" + mDrawFlag_TingV + "']").each(function(i, obj) {
                            temMoney = Number(MicroDraw_genData_calcExp(mcflId, TotalMoneyExp, obj.getAttribute("id"), xcxljgJson));
                            TotalMoney = Number(TotalMoney) + Number(temMoney);
                            temBjArea = Number(MicroDraw_genData_calcExp(mcflId, bjAreaExp, obj.getAttribute("id"), xcxljgJson));
                            bjArea = Number(bjArea) + Number(temBjArea);
                            temBjPrice = Number(MicroDraw_genData_calcExp(mcflId, bjPriceExp, obj.getAttribute("id"), xcxljgJson));
                            if (wi == 0) {
                                bjPrice = Number(bjPrice) + Number(temBjPrice)
                            }
                        });
                        if (objMtype == mDrawFlag_Custom_arc) {
                            for (var ii = 0; ii < $.Micro.ConvToNum($("#" + WinId).attr("mtingcnt")).length; ii++) {
                                temMoney = Number(MicroDraw_genData_calcExp(mcflId, TotalMoneyExp, WinId, xcxljgJson));
                                TotalMoney = Number(TotalMoney) + Number(temMoney);
                                temBjArea = Number(MicroDraw_genData_calcExp(mcflId, bjAreaExp, WinId, xcxljgJson));
                                bjArea = Number(bjArea) + Number(temBjArea);
                                temBjPrice = Number(MicroDraw_genData_calcExp(mcflId, bjPriceExp, WinId, xcxljgJson));
                                if (wi == 0) {
                                    bjPrice = Number(bjPrice) + Number(temBjPrice)
                                }
                            }
                        }
                        $("#" + WinId + " [mtype='" + mDrawFlag_Glass + "']").each(function(i, obj) {
                            var tobj;
                            if (objMtype == mDrawFlag_Win) {
                                tobj = obj
                            } else {
                                if (objMtype == mDrawFlag_Custom_arc) {
                                    tobj = $("#" + WinId)[0]
                                }
                            }
                            temMoney = Number(MicroDraw_genData_calcExp(mcflId, TotalMoneyExp, tobj.getAttribute("id"), xcxljgJson));
                            TotalMoney = Number(TotalMoney) + Number(temMoney);
                            temBjArea = Number(MicroDraw_genData_calcExp(mcflId, bjAreaExp, tobj.getAttribute("id"), xcxljgJson));
                            bjArea = Number(bjArea) + Number(temBjArea);
                            temBjPrice = Number(MicroDraw_genData_calcExp(mcflId, bjPriceExp, tobj.getAttribute("id"), xcxljgJson));
                            if (wi == 0) {
                                bjPrice = Number(bjPrice) + Number(temBjPrice)
                            }
                        });
                        $("#" + WinId + " [mtype='" + mDrawFlag_Pkc + "']").each(function(i, obj) {
                            temMoney = Number(MicroDraw_genData_calcExp(mcflId, TotalMoneyExp, obj.getAttribute("id"), xcxljgJson));
                            TotalMoney = Number(TotalMoney) + Number(temMoney);
                            temBjArea = Number(MicroDraw_genData_calcExp(mcflId, bjAreaExp, obj.getAttribute("id"), xcxljgJson));
                            bjArea = Number(bjArea) + Number(temBjArea);
                            temBjPrice = Number(MicroDraw_genData_calcExp(mcflId, bjPriceExp, obj.getAttribute("id"), xcxljgJson));
                            if (wi == 0) {
                                bjPrice = Number(bjPrice) + Number(temBjPrice)
                            }
                        });
                        $("#" + WinId + " [mtype='" + mDrawFlag_Dkc + "']").each(function(i, obj) {
                            temMoney = Number(MicroDraw_genData_calcExp(mcflId, TotalMoneyExp, obj.getAttribute("id"), xcxljgJson));
                            TotalMoney = Number(TotalMoney) + Number(temMoney);
                            temBjArea = Number(MicroDraw_genData_calcExp(mcflId, bjAreaExp, obj.getAttribute("id"), xcxljgJson));
                            bjArea = Number(bjArea) + Number(temBjArea);
                            temBjPrice = Number(MicroDraw_genData_calcExp(mcflId, bjPriceExp, obj.getAttribute("id"), xcxljgJson));
                            if (wi == 0) {
                                bjPrice = Number(bjPrice) + Number(temBjPrice)
                            }
                        });
                        if (CalcFlag != 3) {
                            return false
                        }
                    });
                    break;
                case mcflId == "2" || mcflId == "4": $.each(WinIds,
                    function(wi, wid) {
                        if (WinIds.length > 1 && (CalcFlag == 2 || CalcFlag == 3)) {
                            WinId = wid;
                            nodeFrame = nodeFrames[wi].get(0);
                            objMtype = $("#" + mDrawFlag_SvgId + " #" + WinId).attr("mtype")
                        }
                        if ($(nodeFrame).length > 0) {
                            var obj = nodeFrame;
                            temMoney = Number(MicroDraw_genData_calcExp(mcflId, TotalMoneyExp, obj.getAttribute("id"), xcxljgJson));
                            TotalMoney = Number(TotalMoney) + Number(temMoney);
                            temBjArea = Number(MicroDraw_genData_calcExp(mcflId, bjAreaExp, obj.getAttribute("id"), xcxljgJson));
                            bjArea = Number(bjArea) + Number(temBjArea);
                            temBjPrice = Number(MicroDraw_genData_calcExp(mcflId, bjPriceExp, obj.getAttribute("id"), xcxljgJson));
                            if (wi == 0) {
                                bjPrice = Number(bjPrice) + Number(temBjPrice)
                            }
                        }
                        if (CalcFlag == 0) {
                            return false
                        } else {
                            if (CalcFlag == 2) {
                                return true
                            }
                        }
                        $("#" + WinId + " [mtype='" + mDrawFlag_TingH + "']").each(function(i, obj) {
                            temMoney = Number(MicroDraw_genData_calcExp(mcflId, TotalMoneyExp, obj.getAttribute("id"), xcxljgJson));
                            TotalMoney = Number(TotalMoney) + Number(temMoney);
                            temBjArea = Number(MicroDraw_genData_calcExp(mcflId, bjAreaExp, obj.getAttribute("id"), xcxljgJson));
                            bjArea = Number(bjArea) + Number(temBjArea);
                            temBjPrice = Number(MicroDraw_genData_calcExp(mcflId, bjPriceExp, obj.getAttribute("id"), xcxljgJson));
                            if (wi == 0) {
                                bjPrice = Number(bjPrice) + Number(temBjPrice)
                            }
                        });
                        $("#" + WinId + " [mtype='" + mDrawFlag_TingV + "']").each(function(i, obj) {
                            temMoney = Number(MicroDraw_genData_calcExp(mcflId, TotalMoneyExp, obj.getAttribute("id"), xcxljgJson));
                            TotalMoney = Number(TotalMoney) + Number(temMoney);
                            temBjArea = Number(MicroDraw_genData_calcExp(mcflId, bjAreaExp, obj.getAttribute("id"), xcxljgJson));
                            bjArea = Number(bjArea) + Number(temBjArea);
                            temBjPrice = Number(MicroDraw_genData_calcExp(mcflId, bjPriceExp, obj.getAttribute("id"), xcxljgJson));
                            if (wi == 0) {
                                bjPrice = Number(bjPrice) + Number(temBjPrice)
                            }
                        });
                        if (objMtype == mDrawFlag_Custom_arc) {
                            for (var ii = 0; ii < $.Micro.ConvToNum($("#" + WinId).attr("mtingcnt")).length; ii++) {
                                temMoney = Number(MicroDraw_genData_calcExp(mcflId, TotalMoneyExp, WinId, xcxljgJson));
                                TotalMoney = Number(TotalMoney) + Number(temMoney);
                                temBjArea = Number(MicroDraw_genData_calcExp(mcflId, bjAreaExp, WinId, xcxljgJson));
                                bjArea = Number(bjArea) + Number(temBjArea);
                                temBjPrice = Number(MicroDraw_genData_calcExp(mcflId, bjPriceExp, WinId, xcxljgJson));
                                if (wi == 0) {
                                    bjPrice = Number(bjPrice) + Number(temBjPrice)
                                }
                            }
                        }
                        $("#" + WinId + " [mtype='" + mDrawFlag_Glass + "']").each(function(i, obj) {
                            var tobj;
                            if (objMtype == mDrawFlag_Win) {
                                tobj = obj
                            } else {
                                if (objMtype == mDrawFlag_Custom_arc) {
                                    tobj = $("#" + WinId)[0]
                                }
                            }
                            temMoney = Number(MicroDraw_genData_calcExp(mcflId, TotalMoneyExp, tobj.getAttribute("id"), xcxljgJson));
                            TotalMoney = Number(TotalMoney) + Number(temMoney);
                            temBjArea = Number(MicroDraw_genData_calcExp(mcflId, bjAreaExp, tobj.getAttribute("id"), xcxljgJson));
                            bjArea = Number(bjArea) + Number(temBjArea);
                            temBjPrice = Number(MicroDraw_genData_calcExp(mcflId, bjPriceExp, tobj.getAttribute("id"), xcxljgJson));
                            if (wi == 0) {
                                bjPrice = Number(bjPrice) + Number(temBjPrice)
                            }
                        });
                        $("#" + WinId + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(i, obj) {
                            temMoney = Number(MicroDraw_genData_calcExp(mcflId, TotalMoneyExp, obj.getAttribute("id"), xcxljgJson));
                            TotalMoney = Number(TotalMoney) + Number(temMoney);
                            temBjArea = Number(MicroDraw_genData_calcExp(mcflId, bjAreaExp, obj.getAttribute("id"), xcxljgJson));
                            bjArea = Number(bjArea) + Number(temBjArea);
                            temBjPrice = Number(MicroDraw_genData_calcExp(mcflId, bjPriceExp, obj.getAttribute("id"), xcxljgJson));
                            if (wi == 0) {
                                bjPrice = Number(bjPrice) + Number(temBjPrice)
                            }
                        });
                        if (CalcFlag != 3) {
                            return false
                        }
                    });
                    break;
                case mcflId == "5": $.each(WinIds,
                    function(wi, wid) {
                        if (WinIds.length > 1 && (CalcFlag == 2 || CalcFlag == 3)) {
                            WinId = wid;
                            nodeFrame = nodeFrames[wi].get(0);
                            objMtype = $("#" + mDrawFlag_SvgId + " #" + WinId).attr("mtype")
                        }
                        if ($(nodeFrame).length > 0) {
                            var obj = nodeFrame;
                            temMoney = Number(MicroDraw_genData_calcExp(mcflId, TotalMoneyExp, obj.getAttribute("id"), xcxljgJson));
                            TotalMoney = Number(TotalMoney) + Number(temMoney);
                            temBjArea = Number(MicroDraw_genData_calcExp(mcflId, bjAreaExp, obj.getAttribute("id"), xcxljgJson));
                            bjArea = Number(bjArea) + Number(temBjArea);
                            temBjPrice = Number(MicroDraw_genData_calcExp(mcflId, bjPriceExp, obj.getAttribute("id"), xcxljgJson));
                            if (wi == 0) {
                                bjPrice = Number(bjPrice) + Number(temBjPrice)
                            }
                        }
                        if (CalcFlag == 0) {
                            return false
                        } else {
                            if (CalcFlag == 2) {
                                return true
                            }
                        }
                        $("#" + WinId + " [mtype='" + mDrawFlag_TingH + "']").each(function(i, obj) {
                            temMoney = Number(MicroDraw_genData_calcExp(mcflId, TotalMoneyExp, obj.getAttribute("id"), xcxljgJson));
                            TotalMoney = Number(TotalMoney) + Number(temMoney);
                            temBjArea = Number(MicroDraw_genData_calcExp(mcflId, bjAreaExp, obj.getAttribute("id"), xcxljgJson));
                            bjArea = Number(bjArea) + Number(temBjArea);
                            temBjPrice = Number(MicroDraw_genData_calcExp(mcflId, bjPriceExp, obj.getAttribute("id"), xcxljgJson));
                            if (wi == 0) {
                                bjPrice = Number(bjPrice) + Number(temBjPrice)
                            }
                        });
                        $("#" + WinId + " [mtype='" + mDrawFlag_TingV + "']").each(function(i, obj) {
                            temMoney = Number(MicroDraw_genData_calcExp(mcflId, TotalMoneyExp, obj.getAttribute("id"), xcxljgJson));
                            TotalMoney = Number(TotalMoney) + Number(temMoney);
                            temBjArea = Number(MicroDraw_genData_calcExp(mcflId, bjAreaExp, obj.getAttribute("id"), xcxljgJson));
                            bjArea = Number(bjArea) + Number(temBjArea);
                            temBjPrice = Number(MicroDraw_genData_calcExp(mcflId, bjPriceExp, obj.getAttribute("id"), xcxljgJson));
                            if (wi == 0) {
                                bjPrice = Number(bjPrice) + Number(temBjPrice)
                            }
                        });
                        if (objMtype == mDrawFlag_Custom_arc) {
                            for (var ii = 0; ii < $.Micro.ConvToNum($("#" + WinId).attr("mtingcnt")).length; ii++) {
                                temMoney = Number(MicroDraw_genData_calcExp(mcflId, TotalMoneyExp, WinId, xcxljgJson));
                                TotalMoney = Number(TotalMoney) + Number(temMoney);
                                temBjArea = Number(MicroDraw_genData_calcExp(mcflId, bjAreaExp, WinId, xcxljgJson));
                                bjArea = Number(bjArea) + Number(temBjArea);
                                temBjPrice = Number(MicroDraw_genData_calcExp(mcflId, bjPriceExp, WinId, xcxljgJson));
                                if (wi == 0) {
                                    bjPrice = Number(bjPrice) + Number(temBjPrice)
                                }
                            }
                        }
                        $("#" + WinId + " [mtype='" + mDrawFlag_Glass + "']").each(function(i, obj) {
                            var tobj;
                            if (objMtype == mDrawFlag_Win) {
                                tobj = obj
                            } else {
                                if (objMtype == mDrawFlag_Custom_arc) {
                                    tobj = $("#" + WinId)[0]
                                }
                            }
                            temMoney = Number(MicroDraw_genData_calcExp(mcflId, TotalMoneyExp, tobj.getAttribute("id"), xcxljgJson));
                            TotalMoney = Number(TotalMoney) + Number(temMoney);
                            temBjArea = Number(MicroDraw_genData_calcExp(mcflId, bjAreaExp, tobj.getAttribute("id"), xcxljgJson));
                            bjArea = Number(bjArea) + Number(temBjArea);
                            temBjPrice = Number(MicroDraw_genData_calcExp(mcflId, bjPriceExp, tobj.getAttribute("id"), xcxljgJson));
                            if (wi == 0) {
                                bjPrice = Number(bjPrice) + Number(temBjPrice)
                            }
                        });
                        $("#" + WinId + " [mtype*='" + mDrawFlag_Zdm + "']").each(function(i, obj) {
                            temMoney = Number(MicroDraw_genData_calcExp(mcflId, TotalMoneyExp, obj.getAttribute("id"), xcxljgJson));
                            TotalMoney = Number(TotalMoney) + Number(temMoney);
                            temBjArea = Number(MicroDraw_genData_calcExp(mcflId, bjAreaExp, obj.getAttribute("id"), xcxljgJson));
                            bjArea = Number(bjArea) + Number(temBjArea);
                            temBjPrice = Number(MicroDraw_genData_calcExp(mcflId, bjPriceExp, obj.getAttribute("id"), xcxljgJson));
                            if (wi == 0) {
                                bjPrice = Number(bjPrice) + Number(temBjPrice)
                            }
                        });
                        if (CalcFlag != 3) {
                            return false
                        }
                    });
                    break;
                default:
                    break
                }
                if (!isEmptyOrNull(CntExp2)) {
                    CntExp2 = replaceAll(CntExp2, " RES ", TotalMoney.toString());
                    TotalMoney = Number(MicroDraw_genData_calcExp(0, CntExp2, "", ""))
                }
                if (isEmptyOrNull(tempBjDesc)) {
                    tempBjDesc = rows[i].Name + TotalMoney.toFixed(2)
                }
                BjDesc = BjDesc + " " + tempBjDesc;
                $("#" + mDrawBjProperty).datagrid("updateRow", {
                    index: idx,
                    row: {
                        TotalMoney: TotalMoney.toFixed(2),
                        BjDesc: BjDesc,
                        bjArea: bjArea,
                        bjPrice: bjPrice
                    }
                });
                last_xcxlId = xcxlId;
                last_mcflId = mcflId;
                last_xcxljgJson = xcxljgJson
            } else {
                temMoney = Number(MicroDraw_genData_calcExp(0, TotalMoneyExp, "", ""));
                TotalMoney = Number(TotalMoney) + Number(temMoney);
                temBjArea = Number(MicroDraw_genData_calcExp(0, bjAreaExp, "", ""));
                bjArea = Number(bjArea) + Number(temBjArea);
                temBjPrice = Number(MicroDraw_genData_calcExp(0, bjPriceExp, "", ""));
                bjPrice = Number(bjPrice) + Number(temBjPrice);
                tempBjDesc = MicroDraw_genData_calcExp(0, BjDescExp, "", "");
                if (isEmptyOrNull(tempBjDesc)) {
                    tempBjDesc = rows[i].Name + TotalMoney.toFixed(2)
                }
                BjDesc = BjDesc + " " + tempBjDesc;
                $("#" + mDrawBjProperty).datagrid("updateRow", {
                    index: idx,
                    row: {
                        TotalMoney: TotalMoney.toFixed(2),
                        BjDesc: BjDesc,
                        bjArea: bjArea,
                        bjPrice: bjPrice
                    }
                })
            }
        })
    }
    MicroXCtime(MicroTest_sdate, "报价 ");
    if (OrderRouteRefreshObj.isPack) {
        ObjId = "";
        CntExp = "";
        Cnt = 0;
        var rows = $("#" + mDrawLabelProperty).datagrid("getRows");
        $.each(rows,
        function(i, row) {
            var idx = $("#" + mDrawLabelProperty).datagrid("getRowIndex", row);
            ObjId = rows[i].ObjId;
            CntExp = rows[i].CntExp;
            Cnt = 0;
            var objMtype;
            if (ObjId.length > 0 && $("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype") != mDrawFlag_Custom_CornerMaterial) {
                if ($("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype") == mDrawFlag_Win || $("#" + mDrawFlag_SvgId + " #" + ObjId).parents("[mtype=" + mDrawFlag_Win + "]").length > 0) {
                    objMtype = mDrawFlag_Win;
                    WinId = ObjId;
                    nodeFrame = $("#" + WinId + " [mtype='" + mDrawFlag_FrameRect + "']")[0];
                    xcxlId = $("#" + WinId + " [mtype='" + mDrawFlag_FrameRect + "']").attr("mxcxlid")
                } else {
                    if ($("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype") == mDrawFlag_Custom_arc) {
                        objMtype = mDrawFlag_Custom_arc;
                        WinId = ObjId;
                        nodeFrame = $("#" + mDrawFlag_SvgId + " #" + WinId)[0];
                        xcxlId = $("#" + WinId).attr("mxcxlid")
                    }
                }
                if (isEmptyOrNull(xcxlId)) {
                    return
                }
                if (xcxlId != last_xcxlId) {
                    mcflId = MicroDraw_genData_getMcflIdByXcxlid(xcxlId);
                    if (isEmptyOrNull(mcflId)) {
                        jQuery.messager.alert("提示:", "当前窗型的 系列结构 已经不存在，请重新选择！", "info");
                        return
                    }
                    xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(xcxlId);
                    xcxljgJson = eval("(" + xcxljgStr + ")")
                } else {
                    xcxlId = last_xcxlId;
                    mcflId = last_mcflId;
                    xcxljgJson = last_xcxljgJson
                }
                switch (true) {
                case mcflId == "1" || mcflId == "3": if ($(nodeFrame).length > 0) {
                        var obj = nodeFrame;
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    }
                    break;
                case mcflId == "2" || mcflId == "4": if ($(nodeFrame).length > 0) {
                        var obj = nodeFrame;
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    }
                    break;
                case mcflId == "5": if ($(nodeFrame).length > 0) {
                        var obj = nodeFrame;
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    }
                    break;
                default:
                    break
                }
                $("#" + mDrawLabelProperty).datagrid("updateRow", {
                    index: idx,
                    row: {
                        Cnt: Cnt
                    }
                });
                last_xcxlId = xcxlId;
                last_mcflId = mcflId;
                last_xcxljgJson = xcxljgJson
            } else {
                temCnt = Number(MicroDraw_genData_calcExp(0, CntExp, "", ""));
                Cnt = Number(Cnt) + Number(temCnt);
                $("#" + mDrawLabelProperty).datagrid("updateRow", {
                    index: idx,
                    row: {
                        Cnt: Cnt
                    }
                })
            }
        })
    }
    if (OrderRouteRefreshObj.isCost) {
        ObjId = "";
        CntExp = "";
        Cnt = 0;
        var rows = $("#" + mDrawCostProperty).datagrid("getRows");
        $.each(rows,
        function(i, row) {
            var idx = $("#" + mDrawCostProperty).datagrid("getRowIndex", row);
            ObjId = rows[i].ObjId;
            CntExp = rows[i].exp;
            Cnt = 0;
            var objMtype;
            if (ObjId.length > 0 && $("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype") != mDrawFlag_Custom_CornerMaterial) {
                if ($("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype") == mDrawFlag_Win || $("#" + mDrawFlag_SvgId + " #" + ObjId).parents("[mtype=" + mDrawFlag_Win + "]").length > 0) {
                    objMtype = mDrawFlag_Win;
                    WinId = ObjId;
                    nodeFrame = $("#" + WinId + " [mtype='" + mDrawFlag_FrameRect + "']")[0];
                    xcxlId = $("#" + WinId + " [mtype='" + mDrawFlag_FrameRect + "']").attr("mxcxlid")
                } else {
                    if ($("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype") == mDrawFlag_Custom_arc) {
                        objMtype = mDrawFlag_Custom_arc;
                        WinId = ObjId;
                        nodeFrame = $("#" + mDrawFlag_SvgId + " #" + WinId)[0];
                        xcxlId = $("#" + WinId).attr("mxcxlid")
                    }
                }
                if (isEmptyOrNull(xcxlId)) {
                    return
                }
                if (xcxlId != last_xcxlId) {
                    mcflId = MicroDraw_genData_getMcflIdByXcxlid(xcxlId);
                    if (isEmptyOrNull(mcflId)) {
                        jQuery.messager.alert("提示:", "当前窗型的 系列结构 已经不存在，请重新选择！", "info");
                        return
                    }
                    xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(xcxlId);
                    xcxljgJson = eval("(" + xcxljgStr + ")")
                } else {
                    xcxlId = last_xcxlId;
                    mcflId = last_mcflId;
                    xcxljgJson = last_xcxljgJson
                }
                switch (true) {
                case mcflId == "1" || mcflId == "3": if ($(nodeFrame).length > 0) {
                        var obj = nodeFrame;
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    }
                    break;
                case mcflId == "2" || mcflId == "4": if ($(nodeFrame).length > 0) {
                        var obj = nodeFrame;
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    }
                    break;
                case mcflId == "5": if ($(nodeFrame).length > 0) {
                        var obj = nodeFrame;
                        temCnt = Number(MicroDraw_genData_calcExp(mcflId, CntExp, obj.getAttribute("id"), xcxljgJson));
                        Cnt = Number(Cnt) + Number(temCnt)
                    }
                    break;
                default:
                    break
                }
                $("#" + mDrawCostProperty).datagrid("updateRow", {
                    index: idx,
                    row: {
                        Price: Cnt
                    }
                });
                last_xcxlId = xcxlId;
                last_mcflId = mcflId;
                last_xcxljgJson = xcxljgJson
            } else {
                temCnt = Number(MicroDraw_genData_calcExp(0, CntExp, "", ""));
                Cnt = Number(Cnt) + Number(temCnt);
                $("#" + mDrawCostProperty).datagrid("updateRow", {
                    index: idx,
                    row: {
                        Price: Cnt
                    }
                })
            }
        })
    }
    MicroDraw_calcTotal();
    MicroDraw_optChangeEvent();
    MicroBudget_WEB_ORDER_genData("toorder", 0, "all");
    var mtobj = $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_FrameRect + "'][coorinshow='Y']");
    var coorinshow = "N";
    if (mtobj.length > 0) {
        coorinshow = "Y"
    }
    if (coorinshow == "Y") {
        MicroDraw_ShowCoordinate()
    }
    MicroXCtime(MicroTest_sdate, "计算完毕 ")
}
function MicroDraw_calcTotal() {
    switch (mVersion) {
    case "DRAW":
    case "DRAW_M":
    case "DRAW_JX":
        return;
        break;
    default:
    }
    $("#" + mDrawOptProperty).datagrid("reloadFooter");
    var F = 0;
    if ($("#" + mDrawPrProperty)[0] == undefined) {
        return
    }
    var E = $("#" + mDrawPrProperty).datagrid("getRows");
    $.each(E,
    function(H, I) {
        var J = $("#" + mDrawPrProperty).datagrid("getRowIndex", I);
        F = Number(F) + Number(E[J]["Cnt"])
    });
    if (F >= 0) {
        var E = $("#" + mDrawPrProperty).datagrid("getFooterRows");
        E[0]["Cnt"] = F;
        $("#" + mDrawPrProperty).datagrid("reloadFooter")
    }
    var B = 0;
    var E = $("#" + mDrawGlProperty).datagrid("getRows");
    $.each(E,
    function(H, I) {
        var J = $("#" + mDrawGlProperty).datagrid("getRowIndex", I);
        B = Number(B) + Number(E[J]["Cnt"])
    });
    if (B >= 0) {
        var E = $("#" + mDrawGlProperty).datagrid("getFooterRows");
        E[0]["Cnt"] = B;
        $("#" + mDrawGlProperty).datagrid("reloadFooter")
    }
    var C = 0;
    var E = $("#" + mDrawWjProperty).datagrid("getRows");
    $.each(E,
    function(H, I) {
        var J = $("#" + mDrawWjProperty).datagrid("getRowIndex", I);
        C = Number(C) + Number(E[J]["Cnt"])
    });
    if (C >= 0) {
        var E = $("#" + mDrawWjProperty).datagrid("getFooterRows");
        E[0]["Cnt"] = C;
        $("#" + mDrawWjProperty).datagrid("reloadFooter")
    }
    var G = 0;
    var E = $("#" + mDrawCpProperty).datagrid("getRows");
    $.each(E,
    function(H, I) {
        var J = $("#" + mDrawCpProperty).datagrid("getRowIndex", I);
        G = Number(G) + Number(E[J]["Cnt"])
    });
    if (G >= 0) {
        var E = $("#" + mDrawCpProperty).datagrid("getFooterRows");
        E[0]["Cnt"] = G;
        $("#" + mDrawCpProperty).datagrid("reloadFooter")
    }
    var D = 0;
    var E = $("#" + mDrawBjProperty).datagrid("getRows");
    $.each(E,
    function(H, I) {
        var J = $("#" + mDrawBjProperty).datagrid("getRowIndex", I);
        D = Number(D) + Number(E[J]["TotalMoney"])
    });
    if (D >= 0) {
        var E = $("#" + mDrawBjProperty).datagrid("getFooterRows");
        E[0]["TotalMoney"] = D;
        $("#" + mDrawBjProperty).datagrid("reloadFooter")
    }
    if ($("#" + mWEB_ORDER_DrawBjProperty).length > 0) {
        var D = 0;
        var E = $("#" + mWEB_ORDER_DrawBjProperty).datagrid("getRows");
        $.each(E,
        function(H, I) {
            var J = $("#" + mWEB_ORDER_DrawBjProperty).datagrid("getRowIndex", I);
            D = Number(D) + Number(E[J]["TotalMoney"])
        });
        if (D >= 0) {
            var E = $("#" + mWEB_ORDER_DrawBjProperty).datagrid("getFooterRows");
            E[0]["TotalMoney"] = D;
            $("#" + mWEB_ORDER_DrawBjProperty).datagrid("reloadFooter")
        }
    }
    var A = 0;
    var E = $("#" + mDrawLabelProperty).datagrid("getRows");
    $.each(E,
    function(H, I) {
        var J = $("#" + mDrawLabelProperty).datagrid("getRowIndex", I);
        A = Number(A) + Number(E[J]["Cnt"])
    });
    if (A >= 0) {
        var E = $("#" + mDrawLabelProperty).datagrid("getFooterRows");
        E[0]["Cnt"] = A;
        $("#" + mDrawLabelProperty).datagrid("reloadFooter")
    }
    var D = 0;
    var E = $("#" + mDrawCostProperty).datagrid("getRows");
    $.each(E,
    function(H, I) {
        var J = $("#" + mDrawCostProperty).datagrid("getRowIndex", I);
        D = Number(D) + Number(E[J]["Price"])
    });
    if (D >= 0) {
        var E = $("#" + mDrawCostProperty).datagrid("getFooterRows");
        E[0]["Price"] = D.toFixed(2);
        $("#" + mDrawCostProperty).datagrid("reloadFooter")
    }
    if ($("#" + mWEB_ORDER_DrawCostProperty).length > 0) {
        var D = 0;
        var E = $("#" + mWEB_ORDER_DrawCostProperty).datagrid("getRows");
        $.each(E,
        function(H, I) {
            var J = $("#" + mWEB_ORDER_DrawCostProperty).datagrid("getRowIndex", I);
            D = Number(D) + Number(E[J]["Price"])
        });
        if (D >= 0) {
            var E = $("#" + mWEB_ORDER_DrawCostProperty).datagrid("getFooterRows");
            E[0]["Price"] = D.toFixed(2);
            $("#" + mWEB_ORDER_DrawCostProperty).datagrid("reloadFooter")
        }
    }
}
function MicroDraw_setWinColor(svgId, prColor, glColor, wallColor) {
    $("#" + svgId + " [mtype='" + mDrawFlag_FrameRect + "']").attr("prcolor", MicroDraw_ReturnColorText(prColor));
    $("#" + svgId + " [mtype='" + mDrawFlag_FrameRect + "']").each(function(i, o) {
        node_r1 = $("#" + svgId + " #" + o.id + "_r1")[0];
        node_r1.setAttribute("fill", prColor);
        node_r2 = $("#" + svgId + " #" + o.id + "_r2")[0];
        node_r2.setAttribute("fill", "white");
        node_rh = $("#" + svgId + " #" + o.id + "_rh")[0];
        if (!isEmptyOrNull(node_rh)) {
            node_rh.setAttribute("fill", "white")
        }
        $("#" + svgId + " #" + o.id + "_lf,#" + svgId + " #" + o.id + "_rf").attr("fill", "white")
    });
    $("#" + svgId + " [mtype='" + mDrawFlag_Area + "']").each(function(i, o) {
        node_r1 = $("#" + svgId + " #" + o.id + "_r1")[0];
        node_r1.setAttribute("fill", "white")
    });
    $("#" + svgId + " [mtype='" + mDrawFlag_Glass + "']").each(function(i, o) {
        node_r1 = $("#" + svgId + " #" + o.id + "_r1")[0];
        if ($(node_r1).length > 0) {
            node_r1.setAttribute("fill", prColor)
        }
    });
    var polygonObjs = [mDrawFlag_Custom_polygon, mDrawFlag_Custom_qj_lt, mDrawFlag_Custom_qj_rt, mDrawFlag_Custom_qj_rb, mDrawFlag_Custom_qj_lb, mDrawFlag_Custom_qj_tm, mDrawFlag_Custom_qj_rm, mDrawFlag_Custom_qj_bm, mDrawFlag_Custom_qj_lm, mDrawFlag_Custom_qj_lx, mDrawFlag_Custom_qj_rx, mDrawFlag_Custom_qj_lrx];
    for (var i = 0; i < polygonObjs.length; i++) {
        $("#" + svgId + " [mtype='" + polygonObjs[i] + "']").each(function(i, o) {
            $.each($(this).find("polygon,rect,path"),
            function() {
                var oriFill = $(this).attr("fill");
                var p_oriFill = $(this).parent().attr("mfill");
                if ($.Micro.IsEmpty(p_oriFill)) {
                    p_oriFill = ""
                }
                if (!$.Micro.isInArray($.Micro.colorVal(oriFill).hex, ["white", "#ffffff"]) && $.Micro.IsEmpty($(this).parent().attr("mtype")) || $.Micro.isInArray($(this).parent().attr("mtype"), polygonObjs)) {
                    if ($.Micro.colorVal(p_oriFill).hex == $.Micro.colorVal(mDrawProductColor).hex) {
                        $(this).attr("fill", prColor)
                    }
                }
            })
        })
    }
    $("#" + svgId + " [mtype='" + mDrawFlag_Custom_arc + "']").each(function(i, o) {
        var oriFill = $(this).attr("mfill");
        if ($.Micro.colorVal(oriFill).hex == $.Micro.colorVal(mDrawProductColor).hex) {
            $(this).find('[id*="_g1"]').find("path").attr("fill", prColor);
            $(this).find('[id*="_ting"]').find("path,polygon").attr("fill", prColor);
            $(this).find("[mtype=" + mDrawFlag_Custom_arc_bf + "]").find("path").attr("fill", prColor)
        }
        $(this).find('[id*="_g2"]').find("path").attr("fill", glColor)
    });
    $("#" + svgId + " [mtype='" + mDrawFlag_FrameArc + "']").each(function(i, o) {
        $("#" + svgId + " #" + o.id + "_g1 path").attr("fill", prColor);
        $("#" + svgId + " #" + o.id + "_g2 path").attr("fill", "white");
        $("#" + svgId + " #" + o.id + "_g3 path").attr("fill", prColor);
        $("#" + svgId + " #" + o.id + "_ting").find("path,polygon").attr("fill", prColor);
        $("#" + svgId + " #" + o.id + "_yx").find("path,polygon").attr("fill", prColor)
    });
    $("#" + svgId + " [mtype='" + mDrawFlag_TingV + "']").each(function(i, o) {
        node_r1 = $("#" + svgId + " #" + o.id + "_r1")[0];
        node_r1.setAttribute("fill", prColor)
    });
    $("#" + svgId + " [mtype='" + mDrawFlag_TingH + "']").each(function(i, o) {
        node_r1 = $("#" + svgId + " #" + o.id + "_r1")[0];
        node_r1.setAttribute("fill", prColor)
    });
    $("#" + svgId + " [mtype='" + mDrawFlag_Pkc + "']").each(function(i, o) {
        var myt = o.getAttribute("myt");
        if (isEmptyOrNull(myt)) {
            myt = ""
        }
        if (myt == "Y") {
            node_r1 = $("#" + svgId + " #" + o.id + "_r1")[0];
            node_r1.setAttribute("fill", prColor);
            node_r2 = $("#" + svgId + " #" + o.id + "_r2")[0];
            node_r2.setAttribute("fill", prColor)
        } else {
            node_r1 = $("#" + svgId + " #" + o.id + "_r1")[0];
            node_r1.setAttribute("fill", prColor)
        }
    });
    $("#" + svgId + " [mtype='" + mDrawFlag_Dkc + "']").each(function(i, o) {
        var myt = o.getAttribute("mfanhasyt");
        if (isEmptyOrNull(myt)) {
            myt = ""
        }
        $("#" + svgId + " #" + o.id + " rect").each(function(k, ko) {
            if (! (ko.id.indexOf("_bg") > -1)) {
                var koId = ko.id;
                if (koId.indexOf("_k1") > -1) {
                    node = $("#" + svgId + " #" + ko.id)[0];
                    node.setAttribute("fill", "white")
                } else {
                    if (myt == "Y") {
                        if (ko.id.indexOf("_r1") > -1) {
                            node = $("#" + svgId + " #" + ko.id)[0];
                            node.setAttribute("fill", prColor)
                        }
                        if (ko.id.indexOf("_r2") > -1) {
                            node = $("#" + svgId + " #" + ko.id)[0];
                            node.setAttribute("fill", prColor)
                        }
                    } else {
                        if (ko.id.indexOf("_r1") > -1) {
                            node = $("#" + svgId + " #" + ko.id)[0];
                            node.setAttribute("fill", prColor)
                        }
                    }
                }
            }
        })
    });
    $("#" + svgId + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(i, o) {
        var myt = o.getAttribute("mfanhasyt");
        if (isEmptyOrNull(myt)) {
            myt = ""
        }
        $("#" + svgId + " #" + o.id + " rect").each(function(k, ko) {
            if (! (ko.id.indexOf("_bg") > -1)) {
                var koId = ko.id;
                if (koId.indexOf("_k1") > -1) {
                    node = $("#" + svgId + " #" + ko.id)[0];
                    node.setAttribute("fill", "white")
                } else {
                    if (myt == "Y") {
                        if (ko.id.indexOf("_r1") > -1) {
                            node = $("#" + svgId + " #" + ko.id)[0];
                            node.setAttribute("fill", prColor)
                        }
                        if (ko.id.indexOf("_r2") > -1) {
                            node = $("#" + svgId + " #" + ko.id)[0];
                            node.setAttribute("fill", prColor)
                        }
                    } else {
                        if (ko.id.indexOf("_r1") > -1) {
                            node = $("#" + svgId + " #" + ko.id)[0];
                            node.setAttribute("fill", prColor)
                        }
                    }
                }
            }
        })
    });
    $("#" + svgId + " [mtype*='" + mDrawFlag_Zdm + "']").each(function(i, o) {
        var myt = o.getAttribute("mfanhasyt");
        if (isEmptyOrNull(myt)) {
            myt = ""
        }
        $("#" + svgId + " #" + o.id + " rect").each(function(k, ko) {
            if (! (ko.id.indexOf("_bg") > -1)) {
                var koId = ko.id;
                if (koId.indexOf("_k1") > -1) {
                    node = $("#" + svgId + " #" + ko.id)[0];
                    node.setAttribute("fill", "white")
                } else {
                    if (myt == "Y") {
                        if (ko.id.indexOf("_r1") > -1) {
                            node = $("#" + svgId + " #" + ko.id)[0];
                            node.setAttribute("fill", prColor)
                        }
                        if (ko.id.indexOf("_r2") > -1) {
                            node = $("#" + svgId + " #" + ko.id)[0];
                            node.setAttribute("fill", prColor)
                        }
                    } else {
                        if (ko.id.indexOf("_r1") > -1) {
                            node = $("#" + svgId + " #" + ko.id)[0];
                            node.setAttribute("fill", prColor)
                        }
                    }
                }
            }
        })
    });
    $("#" + svgId + " [mtype='" + mDrawFlag_Glass + "']").each(function(i, o) {
        var myt = o.getAttribute("myt");
        if (isEmptyOrNull(myt)) {
            myt = ""
        }
        if (myt == "Y") {
            node_r2 = $("#" + svgId + " #" + o.id + "_r2")[0];
            if ($(node_r2).length > 0) {
                node_r2.setAttribute("fill", glColor)
            }
            var tarc = $("#" + svgId + " #" + o.id).parents("[mtype=" + mDrawFlag_Custom_arc + "]");
            tarc.find("[id=" + tarc.attr("id") + "_g2]").find("path").attr("fill", glColor)
        } else {
            node_r1 = $("#" + o.id + "_r1")[0];
            if ($(node_r1).length > 0) {
                node_r1.setAttribute("fill", glColor)
            }
            var tarc = $("#" + svgId + " #" + o.id).parents("[mtype=" + mDrawFlag_Custom_arc + "]");
            tarc.find("[id=" + tarc.attr("id") + "_g2]").find("path").attr("fill", glColor)
        }
        node_txtr = $("#" + svgId + " #" + o.id + "_txtr")[0];
        if (!isEmptyOrNull(node_txtr)) {
            node_txtr.setAttribute("fill", glColor);
            if (!mDraw_GlassFlagRectBorder) {
                node_txtr.setAttribute("stroke", glColor)
            }
        }
    });
    $("#" + svgId + " [mtype='" + mDrawFlag_Pkc + "']").each(function(i, o) {
        var myt = o.getAttribute("myt");
        if (isEmptyOrNull(myt)) {
            myt = ""
        }
        if (myt == "Y") {
            node_r3 = $("#" + svgId + " #" + o.id + "_r3")[0];
            node_r3.setAttribute("fill", glColor)
        } else {
            node_r2 = $("#" + svgId + " #" + o.id + "_r2")[0];
            node_r2.setAttribute("fill", glColor)
        }
        node_txtr = $("#" + svgId + " #" + o.id + "_txtr")[0];
        if (!isEmptyOrNull(node_txtr)) {
            node_txtr.setAttribute("fill", glColor);
            if (!mDraw_GlassFlagRectBorder) {
                node_txtr.setAttribute("stroke", glColor)
            }
        }
    });
    $("#" + svgId + " [mtype='" + mDrawFlag_Dkc + "']").each(function(i, o) {
        var myt = o.getAttribute("mfanhasyt");
        if (isEmptyOrNull(myt)) {
            myt = ""
        }
        $("#" + svgId + " #" + o.id + " rect").each(function(k, ko) {
            if (! (ko.id.indexOf("_bg") > -1)) {
                if (myt == "Y") {
                    if (ko.id.indexOf("_r3") > -1) {
                        node = $("#" + svgId + " #" + ko.id)[0];
                        node.setAttribute("fill", glColor)
                    }
                    if (ko.id.indexOf("_r2") > -1) {
                        node = $("#" + svgId + " #" + ko.parentNode.getAttribute("id") + "_r3")[0];
                        if (isEmptyOrNull(node)) {
                            node = $("#" + ko.id)[0];
                            node.setAttribute("fill", glColor)
                        }
                    }
                } else {
                    if (ko.id.indexOf("_r2") > -1) {
                        node = $("#" + svgId + " #" + ko.id)[0];
                        node.setAttribute("fill", glColor)
                    }
                }
                if (ko.id.indexOf("_r1") > -1) {
                    var pId = ko.parentNode.parentNode.getAttribute("id");
                    var node_txtr = $("#" + svgId + " #" + pId + "_txtr")[0];
                    if (!isEmptyOrNull(node_txtr)) {
                        var node_txt = $("#" + svgId + " #" + pId + "_txt")[0];
                        node_txtr.setAttribute("fill", glColor);
                        if (!mDraw_GlassFlagRectBorder) {
                            node_txtr.setAttribute("stroke", glColor)
                        }
                    }
                }
            }
        })
    });
    $("#" + svgId + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(i, o) {
        var myt = o.getAttribute("mfanhasyt");
        if (isEmptyOrNull(myt)) {
            myt = ""
        }
        $("#" + svgId + " #" + o.id + " rect").each(function(k, ko) {
            if (! (ko.id.indexOf("_bg") > -1)) {
                if (myt == "Y") {
                    if (ko.id.indexOf("_r3") > -1) {
                        node = $("#" + svgId + " #" + ko.id)[0];
                        node.setAttribute("fill", glColor)
                    }
                    if (ko.id.indexOf("_r2") > -1) {
                        node = $("#" + svgId + " #" + ko.parentNode.getAttribute("id") + "_r3")[0];
                        if (isEmptyOrNull(node)) {
                            node = $("#" + ko.id)[0];
                            node.setAttribute("fill", glColor)
                        }
                    }
                } else {
                    if (ko.id.indexOf("_r2") > -1) {
                        node = $("#" + svgId + " #" + ko.id)[0];
                        node.setAttribute("fill", glColor)
                    }
                }
                if (ko.id.indexOf("_r1") > -1) {
                    var pId = ko.parentNode.parentNode.getAttribute("id");
                    var node_txtr = $("#" + svgId + " #" + pId + "_txtr")[0];
                    if (!isEmptyOrNull(node_txtr)) {
                        var node_txt = $("#" + svgId + " #" + pId + "_txt")[0];
                        node_txtr.setAttribute("fill", glColor);
                        if (!mDraw_GlassFlagRectBorder) {
                            node_txtr.setAttribute("stroke", glColor)
                        }
                    }
                }
            }
        })
    });
    $("#" + svgId + " [mtype*='" + mDrawFlag_Zdm + "']").each(function(i, o) {
        var myt = o.getAttribute("mfanhasyt");
        if (isEmptyOrNull(myt)) {
            myt = ""
        }
        $("#" + svgId + " #" + o.id + " rect").each(function(k, ko) {
            if (! (ko.id.indexOf("_bg") > -1)) {
                if (myt == "Y") {
                    if (ko.id.indexOf("_r3") > -1) {
                        node = $("#" + svgId + " #" + ko.id)[0];
                        node.setAttribute("fill", glColor)
                    }
                    if (ko.id.indexOf("_r2") > -1) {
                        node = $("#" + svgId + " #" + ko.parentNode.getAttribute("id") + "_r3")[0];
                        if (isEmptyOrNull(node)) {
                            node = $("#" + svgId + " #" + ko.id)[0];
                            node.setAttribute("fill", glColor)
                        }
                    }
                } else {
                    if (ko.id.indexOf("_r2") > -1) {
                        node = $("#" + svgId + " #" + ko.id)[0];
                        node.setAttribute("fill", glColor)
                    }
                }
                if (ko.id.indexOf("_r1") > -1) {
                    var pId = ko.parentNode.parentNode.getAttribute("id");
                    var node_txtr = $("#" + svgId + " #" + pId + "_txtr")[0];
                    if (!isEmptyOrNull(node_txtr)) {
                        var node_txt = $("#" + svgId + " #" + pId + "_txt")[0];
                        node_txtr.setAttribute("fill", glColor);
                        if (!mDraw_GlassFlagRectBorder) {
                            node_txtr.setAttribute("stroke", glColor)
                        }
                    }
                }
            }
        })
    });
    $("#" + svgId + " [fill='" + mDrawProductColor + "']").each(function(i, o) {
        o.setAttribute("fill", prColor)
    });
    $("#" + svgId + " [fill='" + mDrawGlassColor + "']").each(function(i, o) {
        o.setAttribute("fill", glColor)
    });
    $("#" + svgId + " [fill='" + mDrawWallColor + "']").each(function(i, o) {
        o.setAttribute("fill", wallColor)
    });
    $.each($("#" + svgId + " [mgdbelongto]"),
    function() {
        $.Micro.Attr($(this).find('rect[fill!="none"][fill!="transparent"]'), "fill", prColor)
    });
    $("#" + svgId + " [mtype='" + mDrawFlag_Custom_CornerMaterial + "'],#" + svgId + " [mtype='" + mDrawFlag_Custom_CornerMaterial_h + "']").each(function(i, o) {
        $(this).find("rect").attr("fill", prColor)
    });
    $("#" + svgId + " [mtype=" + mDrawFlag_Cornergdpic + "]").each(function(i, o) {
        $(this).attr("fill", prColor);
        $(this).find("path").attr("fill", prColor)
    });
    $.each($("#" + svgId + " g[mtag]"),
    function() {
        $.each($(this).find("rect,path"),
        function() {
            if ($(this).attr("system") != "1") {
                $(this).attr("fill", prColor)
            }
        })
    });
    $("#" + svgId + " [mtype='" + mDrawFlag_Louver + "']").each(function(i, o) {
        $("#" + svgId + " #" + o.id + "_r1,#" + svgId + " #" + o.id + "_r2").attr("fill", prColor);
        with($("#" + svgId + " #" + o.id + "_louverBg")) {
            if (length > 0) {
                attr("fill", "white")
            }
        }
    });
    $("#" + svgId + " [mtype='" + mDrawFlag_FrameArcs + "']").attr("prcolor", MicroDraw_ReturnColorText(prColor));
    $.each($("#" + svgId).find("[mtype=" + mDrawFlag_FrameArcs + "],[mtype=" + mDrawFlag_FrameArcsTingH + "],[mtype=" + mDrawFlag_FrameArcsTingV + "]").find("path"),
    function() {
        if (!$.Micro.IsEmpty($(this).attr("fill"))) {
            $(this).attr("fill", prColor)
        }
    });
    $.each($("#" + svgId).find("[mtype=" + mDrawFlag_ArcsGlass + "]").find("path"),
    function() {
        if (!$.Micro.IsEmpty($(this).attr("fill"))) {
            if ($(this).attr("tag") == "glass") {
                $(this).attr("fill", glColor)
            } else {
                if ($(this).parents("[tag=yt]").length > 0) {
                    $(this).attr("fill", prColor)
                }
            }
        }
    });
    $.each($("#" + svgId).find("[mtype=" + mDrawFlag_ArcsPkc + "],[mtype=" + mDrawFlag_ArcsDkc + "]").find("path"),
    function() {
        if (!$.Micro.IsEmpty($(this).attr("fill")) && $(this).attr("fill") !== "none") {
            if ($(this).attr("tag") == "glass") {
                $(this).attr("fill", glColor)
            } else {
                if ($(this).parents("[tag=yt]").length > 0 || $.inArray($(this).attr("tag"), ["tF", "bF", "lF", "rF"]) > -1) {
                    $(this).attr("fill", prColor)
                }
            }
        }
    })
}
function MicroDraw_ReturnColor(C) {
    var B = $.Micro.IsEmpty(C) ? mDrawProductColor: C;
    B = $.Micro.colorVal(B).hex;
    if (B.indexOf("#") == -1) {
        for (var A = 0; A < mDrawPrColors.length; A++) {
            if (B == mDrawPrColors[A].text) {
                B = mDrawPrColors[A].value;
                break
            }
        }
        if (B.indexOf("#") == -1) {
            B = $.Micro.colorVal(mDrawProductColor).hex
        }
    }
    return B
}
function MicroDraw_ReturnColorText(C) {
    var B = $.Micro.IsEmpty(C) ? mDrawProductColor: C;
    B = $.Micro.colorVal(B).hex.toUpperCase();
    for (var A = 0; A < mDrawPrColors.length; A++) {
        if (B == mDrawPrColors[A].value.toUpperCase()) {
            B = mDrawPrColors[A].text;
            break
        }
    }
    return B
}
function MicroDraw_getXcxlValueByObjId(ObjId, type, name, col) {
    if (ObjId == mDrawFlag_SvgId) {
        return ""
    }
    var winNode, winId, nodeFrame;
    if ($("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype") == mDrawFlag_Win) {
        winNode = $("#" + ObjId);
        nodeFrame = winNode.find("[mtype=" + mDrawFlag_FrameRect + "]")[0]
    } else {
        if ($("#" + mDrawFlag_SvgId + " #" + ObjId).parents("[mtype=" + mDrawFlag_Win + "]").length > 0) {
            winNode = $("#" + mDrawFlag_SvgId + " #" + ObjId).parents('[mtype="' + mDrawFlag_Win + '"]');
            nodeFrame = winNode.find("[mtype=" + mDrawFlag_FrameRect + "]")[0]
        } else {
            if ($("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype") == mDrawFlag_Custom_arc) {
                winNode = $("#" + ObjId);
                nodeFrame = $("#" + ObjId)[0]
            }
        }
    }
    if ($(nodeFrame).length == 0) {
        return ""
    }
    var xcxlId = nodeFrame.getAttribute("mxcxlid");
    if (isEmptyOrNull(xcxlId)) {
        return ""
    }
    var mcflId = MicroDraw_genData_getMcflIdByXcxlid(xcxlId);
    if (isEmptyOrNull(mcflId)) {
        return ""
    }
    var xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(xcxlId);
    if (isEmptyOrNull(xcxljgStr)) {
        return ""
    }
    var xcxljgJson = eval("(" + xcxljgStr + ")");
    var retVal = MicroDraw_getData_getXcxljgData(xcxljgJson, type, name, col);
    return retVal
}
function MicroDraw_getTlcTingKind(K) {
    tingNode = $("#" + K)[0];
    mtype = tingNode.getAttribute("mtype");
    mkind = tingNode.getAttribute("mkind");
    if (mtype == mDrawFlag_TingV) {
        var B = tingNode.getAttribute("mlid");
        var E = tingNode.getAttribute("mrid");
        var N = B.split(",");
        var L = E.split(",");
        var I = "";
        var F = "";
        for (j = 0; j < N.length; j++) {
            if (N[j].length > 0) {
                var H = $("#" + N[j])[0];
                if (H.getAttribute("mtype").substr(0, 3) == mDrawFlag_Tlc) {
                    I = mDrawFlag_Tlc
                }
            }
        }
        for (k = 0; k < L.length; k++) {
            if (L[k].length > 0) {
                var H = $("#" + L[k])[0];
                if (H.getAttribute("mtype").substr(0, 3) == mDrawFlag_Tlc) {
                    F = mDrawFlag_Tlc
                }
            }
        }
        if (mkind == "N") {
            return "竖挺,,"
        } else {
            if (mkind == "BB") {
                return "双边封,,"
            } else {
                if (mkind == "LB") {
                    return "转角双边封,,"
                } else {
                    if (mkind == "BG") {
                        if (I == "" && F == mDrawFlag_Tlc) {
                            return "边封固定,G,B"
                        } else {
                            if (I == mDrawFlag_Tlc && F == "") {
                                return "边封固定,B,G"
                            }
                        }
                    } else {
                        if (mkind == "LG") {
                            if (I == "" && F == mDrawFlag_Tlc) {
                                return "转角边封固定,G,B"
                            } else {
                                if (I == mDrawFlag_Tlc && F == "") {
                                    return "转角边封固定,B,G"
                                }
                            }
                        } else {
                            if (mkind == "GG") {
                                return "转角双固定,,"
                            }
                        }
                    }
                }
            }
        }
    } else {
        if (mtype == mDrawFlag_TingH) {
            var D = tingNode.getAttribute("mtid");
            var G = tingNode.getAttribute("mbid");
            var C = D.split(",");
            var M = G.split(",");
            var J = "";
            var A = "";
            for (j = 0; j < C.length; j++) {
                if (C[j].length > 0) {
                    var H = $("#" + C[j])[0];
                    if (H.getAttribute("mtype").substr(0, 3) == mDrawFlag_Tlc) {
                        J = mDrawFlag_Tlc
                    }
                }
            }
            for (k = 0; k < M.length; k++) {
                if (M[k].length > 0) {
                    var H = $("#" + M[k])[0];
                    if (H.getAttribute("mtype").substr(0, 3) == mDrawFlag_Tlc) {
                        A = mDrawFlag_Tlc
                    }
                }
            }
            if (J == "" && A == "") {
                return "横挺,,"
            }
            if (J == "" && A == mDrawFlag_Tlc) {
                return "上滑上固,,"
            } else {
                if (J == mDrawFlag_Tlc && A == "") {
                    return "下滑下固,,"
                } else {
                    if (J == mDrawFlag_Tlc && A == mDrawFlag_Tlc) {
                        return "上下滑,,"
                    }
                }
            }
        }
    }
    return ""
}
function MicroDraw_getTlcFrameKind(C) {
    var B = "G";
    var A = "G";
    $("#" + C + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(D, E) {
        var F = E.getAttribute("mlid");
        if (isEmptyOrNull(F)) {
            B = "B"
        }
    });
    $("#" + C + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(D, E) {
        var F = E.getAttribute("mrid");
        if (isEmptyOrNull(F)) {
            A = "B"
        }
    });
    return B + "," + A
}
function MicroDraw_getTlcObjType(F) {
    var C = $("#" + F)[0];
    var A = C.getAttribute("mtype");
    var E = "";
    switch (A) {
    case mDrawFlag_FrameRect:
        E = "框";
        break;
    case mDrawFlag_Glass:
        E = "固玻";
        break;
    case mDrawFlag_TingV:
        E = "竖挺";
        break;
    case mDrawFlag_TingH:
        E = "横挺";
        break;
    case mDrawFlag_Custom_arc:
        E = "弧顶";
        break;
    default:
        var D = C.getAttribute("mfanswflag");
        var B = C.getAttribute("mtldir");
        if (B == "lr") {
            switch (A) {
            case "tlc_2_ff_01":
            case "tlc_2_ff_10":
                if (D.indexOf("1") >= 0) {
                    E = "2推1纱"
                } else {
                    E = "2推"
                }
                break;
            case "tlc_2_kf_01":
            case "tlc_2_fk_01":
                E = "1轨1推";
                break;
            case "tlc_2_gf_01":
            case "tlc_2_gf_10":
                E = "1推1固";
                if ($("#" + F + " [mtype=sw]").length > 0) {
                    E = "1推1固1纱"
                }
                break;
            case "tlc_2_fg_01":
            case "tlc_2_fg_10":
                E = "1推1固";
                if ($("#" + F + " [mtype=sw]").length > 0) {
                    E = "1推1固1纱"
                }
                break;
            case "tlc_3_fff_010":
            case "tlc_3_fff_101":
                E = "3推";
                break;
            case "tlc_3_fff_011":
            case "tlc_3_fff_100":
            case "tlc_3_fff_001":
            case "tlc_3_fff_110":
                if (D.indexOf("1") >= 0) {
                    E = "3推带收口1纱"
                } else {
                    E = "3推带收口"
                }
                break;
            case "tlc_3_fff_012":
            case "tlc_3_fff_210":
                E = "3轨3推";
                break;
            case "tlc_3_fgf_010":
            case "tlc_3_fgf_101":
                E = "2推1固";
                break;
            case "tlc_4_ffff_0110":
            case "tlc_4_ffff_1001":
                if (D.indexOf("1") >= 0) {
                    E = "4推2纱"
                } else {
                    E = "4推"
                }
                break;
            case "tlc_4_kffk_0110":
            case "tlc_4_ffkk_1100":
            case "tlc_4_kkff_0011":
                E = "1轨2推";
                break;
            case "tlc_4_gffg_0110":
            case "tlc_4_gffg_1001":
                E = "2推2固";
                if ($("#" + F + " [mtype=sw]").length > 0) {
                    E = "2推2固2纱"
                }
                break;
            case "tlc_6_ffffff_012210":
            case "tlc_6_ffffff_210012":
                E = "6推";
                break
            }
        } else {
            switch (A) {
            case "tlc_2_ff_01":
                E = "上下推";
                break;
            case "tlc_2_gf_01":
                E = "上固下推";
                break;
            case "tlc_2_fg_01":
                E = "上推下固";
                break
            }
        }
        break
    }
    return E
}
function MicroDraw_getTlmTingKind(G) {
    tingNode = $("#" + G)[0];
    mtype = tingNode.getAttribute("mtype");
    mkind = tingNode.getAttribute("mkind");
    if (mtype == mDrawFlag_TingV) {
        if (mkind == "N") {
            return "竖挺,,"
        } else {
            if (mkind == "L") {
                return "转角,,"
            }
        }
    } else {
        if (mtype == mDrawFlag_TingH) {
            var C = tingNode.getAttribute("mtid");
            var E = tingNode.getAttribute("mbid");
            var B = C.split(",");
            var D = E.split(",");
            var H = "";
            var A = "";
            for (j = 0; j < B.length; j++) {
                if (B[j].length > 0) {
                    var F = $("#" + B[j])[0];
                    if (F.getAttribute("mtype").substr(0, 3) == mDrawFlag_Tlc) {
                        H = mDrawFlag_Tlc
                    }
                }
            }
            for (k = 0; k < D.length; k++) {
                if (D[k].length > 0) {
                    var F = $("#" + D[k])[0];
                    if (F.getAttribute("mtype").substr(0, 3) == mDrawFlag_Tlc) {
                        A = mDrawFlag_Tlc
                    }
                }
            }
            if (H == "" && A == "") {
                return "横挺,,"
            }
            if (H == "" && A == mDrawFlag_Tlc) {
                return "固上轨,,"
            }
        }
    }
    return ""
}
function MicroDraw_checkBeforeSave() {
    var temCnt = 0;
    var Cnt = 0;
    var retMsg = "";
    var currObj = null;
    var LimitObjs = $.Micro.MergeObjs([$("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_FrameRect + "']"), $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_TingH + "']"), $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_TingV + "']"), $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Glass + "']"), $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Pkc + "']"), $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Dkc + "']"), $("#" + mDrawFlag_SvgId + " [mtype*='" + mDrawFlag_Tlc + "']"), $("#" + mDrawFlag_SvgId + " [mtype*='" + mDrawFlag_Zdm + "']"), $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_arc + "']")]);
    $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_FrameRect + "'],#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_Custom_arc + "]").each(function(j, obj) {
        var node = $(obj)[0];
        var xcxlid = node.getAttribute("mxcxlid");
        if (isEmptyOrNull(xcxlid)) {
            return true
        }
        var mcflId = MicroDraw_genData_getMcflIdByXcxlid(xcxlid);
        if (isEmptyOrNull(mcflId)) {
            return true
        }
        var xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(xcxlid);
        var xcxljgJson = eval("(" + xcxljgStr + ")");
        temCnt = 0;
        Cnt = 0;
        $.each(xcxljgJson,
        function(k, o) {
            if (o.type == "C") {
                $.each(LimitObjs,
                function(i, lobj) {
                    if (lobj.length == 0) {
                        return true
                    }
                    if (lobj.parents("[mtype=" + mDrawFlag_Custom_arc + "]").length > 0) {
                        lobj = lobj.parents("[mtype=" + mDrawFlag_Custom_arc + "]")
                    }
                    temCnt = Number(MicroDraw_genData_calcExp(mcflId, o.EXP, lobj.attr("id"), xcxljgJson));
                    if (temCnt > 0) {
                        retMsg = o.prid;
                        currObj = lobj;
                        return false
                    }
                });
                if (temCnt > 0) {
                    return false
                }
            }
        });
        if (temCnt > 0) {
            return false
        }
    });
    if (temCnt > 0) {
        if (currObj && currObj.length > 0) {
            var ligntObj = null;
            with(currObj) {
                switch (attr("mtype")) {
                case mDrawFlag_FrameRect:
                case mDrawFlag_TingH:
                case mDrawFlag_TingV:
                case mDrawFlag_Glass:
                case mDrawFlag_Pkc:
                case mDrawFlag_Dkc:
                case mDrawFlag_Tlc:
                case mDrawFlag_Zdm:
                    ligntObj = find("rect[id*='_r']");
                    break;
                case mDrawFlag_Custom_arc:
                    ligntObj = find("path[id*='_p']");
                    break
                }
            }
            if (ligntObj && ligntObj.length > 0) {
                ligntObj.attr("fill", "red")
            }
        }
        jQuery.messager.alert("提示:", retMsg, "warning");
        return false
    } else {
        return true
    }
}
function MicroDraw_showOptValList(rowIdx) {
    var rows = $("#" + getDrawOptPropertyName()).datagrid("getRows");
    if (rows[rowIdx].optListExp.length == 0) {
        var list = [];
        var arr = rows[rowIdx].optList.split(",");
        $.each(arr,
        function(i, o) {
            var obj = {
                id: o,
                text: o
            };
            list.push(obj)
        })
    } else {
        var optListExp = rows[rowIdx].optListExp;
        var ls_start, ls_cur;
        var li_startIdx = 0,
        li_endIdx = 0;
        var lb_find;
        var list = [];
        var indexArr = [];
        for (i = 0; i < optListExp.length; i++) {
            if (optListExp.substr(i, 1) == "'" || optListExp.substr(i, 1) == '"') {
                ls_cur = optListExp.substr(i, 1);
                if (isEmptyOrNull(ls_start)) {
                    ls_start = ls_cur;
                    li_startIdx = i;
                    continue
                } else {
                    if (ls_start == ls_cur) {
                        li_endIdx = i;
                        lb_find = false;
                        for (j = 0; j < list.length; j++) {
                            if (list[j].data == optListExp.substr(li_startIdx, li_endIdx - li_startIdx + 1)) {
                                lb_find = true
                            }
                        }
                        if (!lb_find) {
                            var _index = MicroDraw_newConstTag(li_startIdx, li_endIdx, indexArr);
                            var obj = {
                                startIdx: li_startIdx,
                                endIdx: li_endIdx,
                                index: _index,
                                data: optListExp.substr(li_startIdx, li_endIdx - li_startIdx + 1)
                            };
                            list.push(obj)
                        }
                        ls_start = "";
                        ls_cur = "";
                        li_startIdx = 0;
                        li_endIdx = 0
                    }
                }
            }
        }
        if (ls_start.length > 0) {
            jQuery.messager.alert("提示:", "选项内容公式包含非法字符串", "info");
            return
        }
        $.each(list,
        function(k, o) {
            optListExp = replaceAll(optListExp, o.data, o.index)
        });
        var frameObjs = $.Micro.MergeObjs([$("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_FrameRect + "']"), $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_arc + "']")]);
        var frameObj = frameObjs[0];
        var xcxlId = frameObj.attr("mxcxlid");
        var ObjId = frameObj.attr("id");
        if (isEmptyOrNull(xcxlId)) {
            $.each(rows,
            function(i, r) {
                if (i != rowIdx) {
                    optListExp = replaceAll(optListExp, r.optId, r.optVal)
                }
            })
        } else {
            mcflId = MicroDraw_genData_getMcflIdByXcxlid(xcxlId);
            if (isEmptyOrNull(mcflId)) {
                jQuery.messager.alert("提示:", "当前窗型的 系列结构已经不存在，请重新选择！", "info");
                return
            }
            xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(xcxlId);
            xcxljgJson = eval("(" + xcxljgStr + ")");
            optListExp = MicroDraw_genData_calcExp(mcflId, optListExp, ObjId, xcxljgJson, true)
        }
        $.each(list,
        function(k, o) {
            optListExp = replaceAll(optListExp, o.index, o.data)
        });
        var listVal = eval(optListExp);
        if (listVal.length > 0) {
            var list = [];
            var arr = listVal.split(",");
            $.each(arr,
            function(i, o) {
                if (! (o.substr(0, 1) == "'" || o.substr(0, 1) == '"')) {
                    o = '"' + o + '"'
                }
                var obj = {
                    id: o,
                    text: o
                };
                list.push(obj)
            })
        }
    }
    var isEditStatus = $("#" + getDrawOptPropertyName()).datagrid("checkRowEditStatus", rowIdx);
    var oldVal = "";
    if (isEditStatus) {
        var ed = $("#" + getDrawOptPropertyName()).datagrid("getEditor", {
            index: rowIdx,
            field: "optVal"
        });
        oldVal = $(ed.target).combobox("getValue");
        var oldText = $(ed.target).combobox("getText");
        $(ed.target).combobox({
            data: list
        })
    } else {
        oldVal = rows[rowIdx].optVal
    }
    var tmpVal;
    var bHasVal = false;
    if (isEmptyOrNull(optListExp)) {
        tmpVal = oldVal
    } else {
        if (isEmptyOrNull(list)) {
            tmpVal = ""
        } else {
            if (list.length == 1) {
                tmpVal = list[0].id
            } else {
                $.each(list,
                function(i, obj) {
                    if (obj.id == oldVal) {
                        bHasVal = true;
                        return false
                    }
                });
                if (bHasVal) {
                    tmpVal = oldVal
                } else {
                    tmpVal = ""
                }
            }
        }
    }
    if (isEditStatus) {
        $(ed.target).combobox("setValue", tmpVal);
        rows[rowIdx].optVal = tmpVal
    } else {
        $("#" + getDrawOptPropertyName()).datagrid("updateRow", {
            index: rowIdx,
            row: {
                optVal: tmpVal
            }
        })
    }
}
function MicroDraw_showDrawObjValList(rowIdx) {
    var objRow = $("#" + mDrawObjProperty).propertygrid("getRows")[rowIdx];
    var name = objRow.name;
    if (name != "玻璃规格" && name != "玻璃工艺" && name != "面玻" && name != "底玻") {
        return
    }
    var optRow;
    var optListExp = "";
    var optList = "";
    switch (name) {
    case "玻璃规格":
        optRow = MicroBudget_getColProperty(mDrawOptProperty, "optId", "MGG");
        break;
    case "玻璃工艺":
        optRow = MicroBudget_getColProperty(mDrawOptProperty, "optId", "MGY");
        break;
    case "面玻":
        optRow = MicroBudget_getColProperty(mDrawOptProperty, "optId", "MMB");
        break;
    case "底玻":
        optRow = MicroBudget_getColProperty(mDrawOptProperty, "optId", "MDB");
        break;
    default:
        break
    }
    optListExp = optRow.optListExp;
    optList = optRow.optList;
    var objOGG = MicroBudget_getColProperty(mDrawObjProperty, "name", "玻璃规格").value;
    var objOGY = MicroBudget_getColProperty(mDrawObjProperty, "name", "玻璃工艺").value;
    var objOMB = MicroBudget_getColProperty(mDrawObjProperty, "name", "面玻").value;
    var objODB = MicroBudget_getColProperty(mDrawObjProperty, "name", "底玻").value;
    if ($.Micro.IsEmpty(objOGG)) {
        objOGG = ""
    }
    if ($.Micro.IsEmpty(objOGY)) {
        objOGY = ""
    }
    if ($.Micro.IsEmpty(objOMB)) {
        objOMB = ""
    }
    if ($.Micro.IsEmpty(objODB)) {
        objODB = ""
    }
    if (optListExp.length == 0) {
        var list = [];
        var arr = optList.split(",");
        $.each(arr,
        function(i, o) {
            var obj = {};
            switch (name) {
            case "玻璃规格":
                obj = {
                    id: o,
                    glass: o
                };
                break;
            case "玻璃工艺":
                obj = {
                    id: o,
                    GlassTech: o
                };
                break;
            case "面玻":
                obj = {
                    id: o,
                    GlassTexture: o
                };
                break;
            case "底玻":
                obj = {
                    id: o,
                    GlassTexture: o
                };
                break;
            default:
                var obj = {
                    id: o,
                    text: o
                };
                break
            }
            list.push(obj)
        })
    } else {
        optListExp = replaceAll(optListExp, "MGG", '"' + objOGG + '"');
        optListExp = replaceAll(optListExp, "OGG", '"' + objOGG + '"');
        optListExp = replaceAll(optListExp, "MGY", '"' + objOGY + '"');
        optListExp = replaceAll(optListExp, "OGY", '"' + objOGY + '"');
        optListExp = replaceAll(optListExp, "MMB", '"' + objOMB + '"');
        optListExp = replaceAll(optListExp, "OMB", '"' + objOMB + '"');
        optListExp = replaceAll(optListExp, "MDB", '"' + objODB + '"');
        optListExp = replaceAll(optListExp, "ODB", '"' + objODB + '"');
        var ls_start, ls_cur;
        var li_startIdx = 0,
        li_endIdx = 0;
        var lb_find;
        var list = [];
        var indexArr = [];
        for (i = 0; i < optListExp.length; i++) {
            if (optListExp.substr(i, 1) == "'" || optListExp.substr(i, 1) == '"') {
                ls_cur = optListExp.substr(i, 1);
                if (isEmptyOrNull(ls_start)) {
                    ls_start = ls_cur;
                    li_startIdx = i;
                    continue
                } else {
                    if (ls_start == ls_cur) {
                        li_endIdx = i;
                        lb_find = false;
                        for (j = 0; j < list.length; j++) {
                            if (list[j].data == optListExp.substr(li_startIdx, li_endIdx - li_startIdx + 1)) {
                                lb_find = true
                            }
                        }
                        if (!lb_find) {
                            var _index = MicroDraw_newConstTag(li_startIdx, li_endIdx, indexArr);
                            var obj = {
                                startIdx: li_startIdx,
                                endIdx: li_endIdx,
                                index: _index,
                                data: optListExp.substr(li_startIdx, li_endIdx - li_startIdx + 1)
                            };
                            list.push(obj)
                        }
                        ls_start = "";
                        ls_cur = "";
                        li_startIdx = 0;
                        li_endIdx = 0
                    }
                }
            }
        }
        if (ls_start.length > 0) {
            jQuery.messager.alert("提示:", "选项内容公式包含非法字符串", "info");
            return
        }
        $.each(list,
        function(k, o) {
            optListExp = replaceAll(optListExp, o.data, o.index)
        });
        var frameObjs = $.Micro.MergeObjs([$("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_FrameRect + "']"), $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_arc + "']")]);
        var frameObj = frameObjs[0];
        var xcxlId = frameObj.attr("mxcxlid");
        var ObjId = frameObj.attr("id");
        if (isEmptyOrNull(xcxlId)) {
            $.each(rows,
            function(i, r) {
                if (i != rowIdx) {
                    optListExp = replaceAll(optListExp, r.optId, r.optVal)
                }
            })
        } else {
            mcflId = MicroDraw_genData_getMcflIdByXcxlid(xcxlId);
            if (isEmptyOrNull(mcflId)) {
                jQuery.messager.alert("提示:", "当前窗型的 系列结构已经不存在，请重新选择！", "info");
                return
            }
            xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(xcxlId);
            xcxljgJson = eval("(" + xcxljgStr + ")");
            optListExp = MicroDraw_genData_calcExp(mcflId, optListExp, ObjId, xcxljgJson, true)
        }
        $.each(list,
        function(k, o) {
            optListExp = replaceAll(optListExp, o.index, o.data)
        });
        var listVal = eval(optListExp);
        if (listVal.length > 0) {
            var list = [];
            var arr = listVal.split(",");
            $.each(arr,
            function(i, o) {
                var obj = {};
                switch (name) {
                case "玻璃规格":
                    obj = {
                        id: o,
                        glass: o
                    };
                    break;
                case "玻璃工艺":
                    obj = {
                        id: o,
                        GlassTech: o
                    };
                    break;
                case "面玻":
                    obj = {
                        id: o,
                        GlassTexture: o
                    };
                    break;
                case "底玻":
                    obj = {
                        id: o,
                        GlassTexture: o
                    };
                    break;
                default:
                    var obj = {
                        id: o,
                        text: o
                    };
                    break
                }
                list.push(obj)
            })
        }
    }
    var ed = $("#" + mDrawObjProperty).propertygrid("getEditor", {
        index: rowIdx,
        field: "value"
    });
    var oldVal = $(ed.target).combobox("getValue");
    if ((list && list.length <= 0) || (list && list.length > 0 && $.Micro.IsEmpty(list[0].id))) {
        switch (name) {
        case "玻璃规格":
            list = mPublicGlList;
            break;
        case "玻璃工艺":
            list = mPublicGlassTech;
            break;
        case "面玻":
            list = mPublicGlassTexture;
            break;
        case "底玻":
            list = mPublicGlassTexture;
            break;
        default:
            break
        }
    }
    $(ed.target).combobox({
        data:
        list
    });
    var tmpVal;
    var bHasVal = false;
    if (isEmptyOrNull(optListExp)) {
        tmpVal = oldVal
    } else {
        if (isEmptyOrNull(list)) {
            tmpVal = ""
        } else {
            if (list.length == 1) {
                tmpVal = list[0].id
            } else {
                $.each(list,
                function(i, obj) {
                    if (obj.id == oldVal) {
                        bHasVal = true;
                        return false
                    }
                });
                if (bHasVal) {
                    tmpVal = oldVal
                } else {
                    tmpVal = ""
                }
            }
        }
    }
    $(ed.target).combobox("setValue", tmpVal);
    objRow.optVal = tmpVal
}
function MicroDraw_closeEditor() {
    var B = $("#" + mDrawOptProperty).datagrid("getRows");
    $.each(B,
    function(C, D) {
        var E = $("#" + mDrawOptProperty).datagrid("getRowIndex", D);
        $("#" + mDrawOptProperty).datagrid("endEdit", E)
    });
    var B = $("#" + mDrawPrProperty).datagrid("getRows");
    $.each(B,
    function(C, D) {
        var E = $("#" + mDrawPrProperty).datagrid("getRowIndex", D);
        $("#" + mDrawPrProperty).datagrid("endEdit", E)
    });
    var B = $("#" + mDrawGlProperty).datagrid("getRows");
    $.each(B,
    function(C, D) {
        var E = $("#" + mDrawGlProperty).datagrid("getRowIndex", D);
        $("#" + mDrawGlProperty).datagrid("endEdit", E)
    });
    var B = $("#" + mDrawWjProperty).datagrid("getRows");
    $.each(B,
    function(C, D) {
        var E = $("#" + mDrawWjProperty).datagrid("getRowIndex", D);
        $("#" + mDrawWjProperty).datagrid("endEdit", E)
    });
    var B = $("#" + mDrawCpProperty).datagrid("getRows");
    $.each(B,
    function(C, D) {
        var E = $("#" + mDrawCpProperty).datagrid("getRowIndex", D);
        $("#" + mDrawCpProperty).datagrid("endEdit", E)
    });
    var B = $("#" + mDrawBjProperty).datagrid("getRows");
    $.each(B,
    function(C, D) {
        var E = $("#" + mDrawBjProperty).datagrid("getRowIndex", D);
        $("#" + mDrawBjProperty).datagrid("endEdit", E)
    });
    var B = $("#" + mDrawLabelProperty).datagrid("getRows");
    $.each(B,
    function(C, D) {
        var E = $("#" + mDrawLabelProperty).datagrid("getRowIndex", D);
        $("#" + mDrawLabelProperty).datagrid("endEdit", E)
    });
    var B = $("#" + mDrawCostProperty).datagrid("getRows");
    $.each(B,
    function(C, D) {
        var E = $("#" + mDrawCostProperty).datagrid("getRowIndex", D);
        $("#" + mDrawCostProperty).datagrid("endEdit", E)
    });
    var B = $("#" + mDrawRouteProperty).datagrid("getRows");
    $.each(B,
    function(C, D) {
        var E = $("#" + mDrawRouteProperty).datagrid("getRowIndex", D);
        $("#" + mDrawRouteProperty).datagrid("endEdit", E)
    });
    try {
        Micro_EndEditDatagrid($("#" + mWEB_ORDER_DrawOptProperty), "datagrid");
        Micro_EndEditDatagrid($("#" + mWEB_ORDER_DrawBjProperty), "datagrid");
        Micro_EndEditDatagrid($("#" + mWEB_ORDER_DrawCostProperty), "datagrid");
        Micro_DelDatagridData($("#" + mWEB_ORDER_DrawObjProperty), "propertygrid")
    } catch(A) {}
    MicroDraw_calcTotal()
}
function MicroDraw_addObjIdToCustomObjList(A) {
    if (isEmptyOrNull(mDrawCustomObjList)) {
        mDrawCustomObjList = A
    } else {
        if (mDrawCustomObjList.indexOf(A) == -1) {
            mDrawCustomObjList = mDrawCustomObjList + "," + A
        }
    }
}
function MicroDraw_getArcDataInfo(e, g, p, E, C, Ak, J) {
    e = Number(e);
    g = Number(g);
    p = Number(p);
    E = Number(E);
    C = Number(C);
    if (Ak == "Y") {
        p = Number(p) + (2 * Number(C) / Number(mDrawPixelPerM)) * 1000
    }
    J = $.Micro.IsEmpty(J) ? 0 : Number(J);
    var b = (((Number(p) / 1000) * Number(mDrawPixelPerM) / 2) * ((Number(p) / 1000) * Number(mDrawPixelPerM) / 2) + ((Number(E) / 1000) * Number(mDrawPixelPerM)) * ((Number(E) / 1000) * Number(mDrawPixelPerM))) / (2 * ((Number(E) / 1000) * Number(mDrawPixelPerM)));
    var r = Number(e) + (Number(p) / 1000) * Number(mDrawPixelPerM);
    var q = "M" + e.toString() + " " + g.toString() + " A " + b.toString() + " " + b.toString() + ",0,0,1," + r.toString() + " " + g.toString();
    var A = (Number(p) / 1000) * Number(mDrawPixelPerM);
    var U = Number(b) - Number(C);
    var Al = 0;
    var An = Number(E) / 1000 * Number(mDrawPixelPerM);
    var Ae = Number(e) + A / 2;
    var u = Number(g) + b - An;
    var t, Ad;
    var Af = MicroDraw_Line_RoundCOP(Al, An, b, b, b);
    var S, V;
    var N = Number(Af.x1);
    var P = Number(Af.x2);
    if (N < P) {
        S = N;
        V = P
    } else {
        S = P;
        V = N
    }
    t = Number(e) - S;
    Ad = Number(g) - An;
    var n = 0,
    o = 0;
    var B, O, D, f, v, F;
    var Ap = MicroDraw_Line_RoundCOP(Al, An, b, b, U);
    var l = Number(Ap.x1);
    var w = Number(Ap.x2);
    if (l < w) {
        n = l;
        o = w
    } else {
        n = w;
        o = l
    }
    B = Number(e) + (n - S);
    v = B;
    D = r - (V - o);
    O = Number(g);
    F = O;
    f = O;
    var Z = "M" + B.toString() + " " + O.toString() + " A " + U.toString() + " " + U.toString() + ",0,0,1," + D.toString() + " " + f.toString();
    n = Number(e) + Number(C);
    o = r - Number(C);
    B = n;
    var Ah = Ae;
    var R = u;
    O = u - Math.sqrt(U * U - (B - Ae) * (B - Ae));
    D = o;
    f = O;
    var s = "M" + B.toString() + " " + O.toString() + " A " + U.toString() + " " + U.toString() + ",0,0,1," + D.toString() + " " + f.toString();
    B = e;
    O = u - Math.sqrt(U * U - (B - Ae) * (B - Ae));
    D = r;
    f = O;
    var Ai = "M" + B.toString() + " " + O.toString() + " A " + U.toString() + " " + U.toString() + ",0,0,1," + D.toString() + " " + f.toString();
    S = Number(e) + Number(C);
    V = r - Number(C);
    B = S;
    O = u - Math.sqrt(b * b - (B - Ae) * (B - Ae));
    r = V;
    YendOut = O;
    var Ac = "M" + B.toString() + " " + O.toString() + " A " + b.toString() + " " + b.toString() + ",0,0,1," + r.toString() + " " + YendOut.toString();
    B = e;
    O = u - Math.sqrt(b * b - (B - Ae) * (B - Ae));
    r = V;
    YendOut = O;
    var Aj = "M" + B.toString() + " " + O.toString() + " A " + b.toString() + " " + b.toString() + ",0,0,1," + r.toString() + " " + YendOut.toString();
    var Aa = {};
    if (J != 0) {
        var L = Al;
        var Q = 144 + J;
        var Ab = MicroDraw_Line_RoundCOP(L, Q, b, b, U);
        var K, Ao;
        var a = Q;
        var c = Number(Ab.x1);
        var I = Number(Ab.x2);
        if (c < I) {
            K = c;
            Ao = I
        } else {
            K = I;
            Ao = c
        }
        var G = K + t;
        var Ag = a + Ad;
        var M = (Ao - K) / mDrawPixelPerM * 1000;
        var Am = Q / mDrawPixelPerM * 1000;
        Aa = MicroDraw_getArcDataInfo(G, Ag, M, Am, C, Ak)
    }
    return {
        arcOut_d: $.MicroSVG.UnifiedSVGPath(q),
        arcIn_d: $.MicroSVG.UnifiedSVGPath(Z),
        farcIn_d: $.MicroSVG.UnifiedSVGPath(s),
        farcIn_Ld: $.MicroSVG.UnifiedSVGPath(Ai),
        farcOut_d: $.MicroSVG.UnifiedSVGPath(Ac),
        farcOut_Ld: $.MicroSVG.UnifiedSVGPath(Aj),
        ROut: Number(b),
        RIn: Number(U),
        cx: Number(Ae),
        cy: Number(u),
        arcInX: Number(v),
        arcInY: Number(F),
        ArcDataInfo2: Aa
    }
}
function MicroDraw_getPolygonDataInfo(E, F, N, P, O, D, C) {
    var Z, V, l, m, M, S, R, G;
    var e;
    Z = E;
    V = F;
    if (Number(N) > 0 && Number(P) == 0) {
        var Q = (Number(N) / 1000) * mDrawPixelPerM;
        l = Number(Z) + Number(Q);
        m = V;
        M = l;
        S = Number(m) + Number(O);
        R = Z;
        G = S
    } else {
        if (Number(N) == 0 && Number(P) > 0) {
            var g = (Number(P) / 1000) * mDrawPixelPerM;
            l = Number(Z) + Number(O);
            m = V;
            M = l;
            S = Number(m) + Number(g);
            R = Z;
            G = S
        } else {
            var Q = (Number(N) / 1000) * mDrawPixelPerM;
            var g = (Number(P) / 1000) * mDrawPixelPerM - 10;
            var A = (Number(N) / 1000) * mDrawPixelPerM;
            var K = (Number(P) / 1000) * mDrawPixelPerM;
            var L = Math.sqrt(Math.pow(Number(A), 2) + Math.pow(Number(K), 2));
            var J = O;
            var I = Math.acos(Number(A) / Number(L)) * 180 / Math.PI;
            var f = Number(J) / Math.cos(Number(I) * Math.PI / 180);
            if (D == "L") {
                l = Number(Z) + Number(Q);
                m = Number(V) + Number(g);
                M = l;
                S = Number(m) + Number(f);
                R = Z;
                G = Number(V) + Number(f)
            } else {
                if (D == "R") {
                    l = Number(Z);
                    m = Number(V) + Number(f);
                    M = Number(l) - Number(Q);
                    S = Number(m) + Number(g);
                    R = M;
                    G = Number(S) - Number(f)
                } else {
                    l = Number(Z) + Number(Q);
                    m = V;
                    M = l;
                    S = Number(m) + Number(O);
                    R = Z;
                    G = S;
                    jQuery.messager.alert("提示:", "宽度，高度都大于0，但未设置顷斜方向，请设置!", "info")
                }
            }
        }
    }
    var U = C.split(",");
    if (!isNaN(U[0])) {
        Z = (Number(Z) + Number(U[0])).toString()
    }
    if (!isNaN(U[1])) {
        V = (Number(V) + Number(U[1])).toString()
    }
    if (!isNaN(U[2])) {
        l = (Number(l) + Number(U[2])).toString()
    }
    if (!isNaN(U[3])) {
        m = (Number(m) + Number(U[3])).toString()
    }
    if (!isNaN(U[4])) {
        M = (Number(M) + Number(U[4])).toString()
    }
    if (!isNaN(U[5])) {
        S = (Number(S) + Number(U[5])).toString()
    }
    if (!isNaN(U[6])) {
        R = (Number(R) + Number(U[6])).toString()
    }
    if (!isNaN(U[7])) {
        G = (Number(G) + Number(U[7])).toString()
    }
    e = "" + Z + "," + V + " " + l + "," + m + " " + M + "," + S + " " + R + "," + G + "";
    return e
}
function MicroDraw_getRulerDataInfo(D, E, Y, Z, K) {
    var T = "";
    var A = 10;
    var X = 3;
    var U, N, R, M, S, L, W, P;
    var G, Q;
    if (Number(D) != Number(Y) && Number(E) == Number(Z)) {
        txtPx = parseInt(Number(K)).toString().length * mDrawCoordinateCharPx * mDrawSvgViewBox;
        U = D.toString();
        N = (Number(E) - Number(A)).toString();
        R = D.toString();
        M = (Number(Z) + Number(A)).toString();
        S = Y.toString();
        L = (Number(E) - Number(A)).toString();
        W = Y.toString();
        P = (Number(Z) + Number(A)).toString();
        G = (Number(D) + (Number(Y) - Number(D)) / 2 - Number(txtPx) / 2).toString();
        Q = (Number(E) - Number(X)).toString();
        T = D + "," + E + "," + Y + "," + Z + "," + U + "," + N + "," + R + "," + M + "," + S + "," + L + "," + W + "," + P + "," + G + "," + Q
    } else {
        if (Number(D) == Number(Y) && Number(E) != Number(Z)) {
            txtPx = parseInt(Number(K)).toString().length * mDrawCoordinateCharPx * mDrawSvgViewBox;
            U = (Number(D) - Number(A)).toString();
            N = E.toString();
            R = (Number(D) + Number(A)).toString();
            M = E.toString();
            S = (Number(D) - Number(A)).toString();
            L = Z.toString();
            W = (Number(D) + Number(A)).toString();
            P = Z.toString();
            G = (Number(D) + Number(X)).toString();
            Q = (Number(E) + (Number(Z) - Number(E)) / 2 + Number(mDrawCoordinateCharPx)).toString();
            T = D + "," + E + "," + Y + "," + Z + "," + U + "," + N + "," + R + "," + M + "," + S + "," + L + "," + W + "," + P + "," + G + "," + Q
        } else {
            if (Number(D) != Number(Y) && Number(E) != Number(Z)) {
                txtPx = 3 * mDrawCoordinateCharPx * mDrawSvgViewBox;
                var J = Math.abs(Number(D) - Number(Y));
                var H = Math.abs(Number(E) - Number(Z));
                var I = Math.sqrt(Math.pow(Number(J), 2) + Math.pow(Number(H), 2));
                var F = Number(A);
                var O = Math.acos(Number(J) / Number(I)) * 180 / Math.PI;
                var V = F * Math.cos((Number(90) - Number(O)) * Math.PI / 180);
                var C = Math.sqrt(Math.pow(Number(F), 2) - Math.pow(Number(V), 2));
                if (Number(Y) > Number(D)) {
                    U = Number(D) + Number(V);
                    N = Number(E) - Number(C);
                    R = Number(D) - Number(V);
                    M = Number(E) + Number(C);
                    S = Number(Y) + Number(V);
                    L = Number(Z) - Number(C);
                    W = Number(Y) - Number(V);
                    P = Number(Z) + Number(C);
                    G = (Number(D) + (Number(Y) - Number(D)) / 2 + 2).toString();
                    Q = (Number(E) + (Number(Z) - Number(E)) / 2 - 2).toString()
                } else {
                    U = Number(D) + Number(V);
                    N = Number(E) + Number(C);
                    R = Number(D) - Number(V);
                    M = Number(E) - Number(C);
                    S = Number(Y) + Number(V);
                    L = Number(Z) + Number(C);
                    W = Number(Y) - Number(V);
                    P = Number(Z) - Number(C);
                    G = (Number(D) + (Number(Y) - Number(D)) / 2 - 2).toString();
                    Q = (Number(E) + (Number(Z) - Number(E)) / 2 + txtPx).toString()
                }
                T = D + "," + E + "," + Y + "," + Z + "," + U + "," + N + "," + R + "," + M + "," + S + "," + L + "," + W + "," + P + "," + G + "," + Q
            } else {
                T = ""
            }
        }
    }
    return T
}
function MicroDraw_AutoRuler(A) {
    var B = $("#" + mDrawFlag_SvgId)[0];
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
        B = $("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]')[0]
    }
    if (isEmptyOrNull(A)) {
        $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_ruler + "']").each(function(C, D) {
            var E = D.parentNode;
            var F = D.getAttribute("mrulermaster");
            if (!isEmptyOrNull(F)) {
                if ($("#" + mDrawFlag_SvgId + " #" + F).parents("[mtype=" + mDrawFlag_Cornergdpic + "]").length == 0) {
                    E.removeChild(D)
                }
            }
        });
        $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_controlPoint + "']").each(function(C, D) {
            var E = D.parentNode;
            E.removeChild(D)
        });
        $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_arc + "']").each(function(c, f) {
            var W = $("#" + f.id)[0].getAttribute("customRuler") ? $("#" + f.id)[0].getAttribute("customRuler") : $("#" + f.id)[0].getAttribute("customruler");
            if (W == 0) {
                return true
            }
            var U = $("#" + f.id)[0];
            var Q = $("#" + f.id + "_p1")[0];
            var D = U.getAttribute("mheight");
            var e = U.getAttribute("mwidth");
            d = Q.getAttribute("d");
            d = replaceAll(d, "M", "");
            d = replaceAll(d, " A ", ",");
            d = replaceAll(d, " ", ",");
            var F, n, E, m, C, l;
            var p = d.split(",");
            F = Number(p[0]);
            n = p[1];
            C = Number(p[7]);
            l = p[8];
            E = Number(F) + (Number(C) - Number(F)) / 2;
            m = Number(n) - (Number(U.getAttribute("mheight")) / 1000) * Number(mDrawPixelPerM);
            var H = MicroDraw_GUID();
            var r = document.createElementNS(mDrawSvgNS, "g");
            var S = e;
            r.setAttributeNS(null, "id", H);
            r.setAttributeNS(null, "mtype", mDrawFlag_Custom_ruler);
            r.setAttributeNS(null, "mstroke", "#000000");
            r.setAttributeNS(null, "mstrokewidth", "1px");
            r.setAttributeNS(null, "mtext", S);
            r.setAttributeNS(null, "mrulermaster", f.id);
            B.appendChild(r);
            var J = $("#" + H).html();
            var O, P, G, R;
            var M, Z, K, Y, L, X, N, b;
            var q, a;
            var V = MicroDraw_getRulerDataInfo(F, m - Number(10), C, m - Number(10), S);
            var p = V.split(",");
            O = p[0];
            P = p[1];
            G = p[2];
            R = p[3];
            M = p[4];
            Z = p[5];
            K = p[6];
            Y = p[7];
            L = p[8];
            X = p[9];
            N = p[10];
            b = p[11];
            q = p[12];
            a = p[13];
            J = J + "<line id='" + H + "_l1' x1='" + M.toString() + "' y1='" + Z.toString() + "' x2='" + K.toString() + "' y2='" + Y.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
            J = J + "<line id='" + H + "_l2' x1='" + O.toString() + "' y1='" + P.toString() + "' x2='" + G.toString() + "' y2='" + R.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
            J = J + "<line id='" + H + "_l3' x1='" + L.toString() + "' y1='" + X.toString() + "' x2='" + N.toString() + "' y2='" + b.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
            J = J + "<text id='" + H + "_t' x='" + q.toString() + "' y='" + a.toString() + "' font-size='16' fill='#000000' writing-mode='lr' font-weight='400'";
            if (isPcUserAgent()) {
                J = J + " onDblClick"
            } else {
                J = J + " onClick"
            }
            J = J + "='MicroDraw_ShowCoordinate_doubleClickText(this)'>" + S + "</text>";
            $("#" + H).html(J);
            var H = MicroDraw_GUID();
            var r = document.createElementNS(mDrawSvgNS, "g");
            var S = D;
            r.setAttributeNS(null, "id", H);
            r.setAttributeNS(null, "mtype", mDrawFlag_Custom_ruler);
            r.setAttributeNS(null, "mstroke", "#000000");
            r.setAttributeNS(null, "mstrokewidth", "1px");
            r.setAttributeNS(null, "mtext", S);
            r.setAttributeNS(null, "mrulermaster", f.id);
            B.appendChild(r);
            var J = $("#" + H).html();
            var O, P, G, R;
            var M, Z, K, Y, L, X, N, b;
            var q, a;
            var V = MicroDraw_getRulerDataInfo(F - Number(40), m, F - Number(40), n, S);
            var p = V.split(",");
            O = p[0];
            P = p[1];
            G = p[2];
            R = p[3];
            M = p[4];
            Z = p[5];
            K = p[6];
            Y = p[7];
            L = p[8];
            X = p[9];
            N = p[10];
            b = p[11];
            q = p[12];
            a = p[13];
            var T = $("#" + A).attr("mbframe");
            var I = $("#" + A).attr("mtotallen");
            if (T == "Y" && I == "Y") {
                R = Number(R) + mDrawThickTing;
                X = Number(X) + mDrawThickTing;
                b = Number(b) + mDrawThickTing
            }
            J = J + "<line id='" + H + "_l1' x1='" + M.toString() + "' y1='" + Z.toString() + "' x2='" + K.toString() + "' y2='" + Y.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
            J = J + "<line id='" + H + "_l2' x1='" + O.toString() + "' y1='" + P.toString() + "' x2='" + G.toString() + "' y2='" + R.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
            J = J + "<line id='" + H + "_l3' x1='" + L.toString() + "' y1='" + X.toString() + "' x2='" + N.toString() + "' y2='" + b.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
            J = J + "<text id='" + H + "_t' x='" + q.toString() + "' y='" + a.toString() + "' font-size='16' fill='#000000' writing-mode='lr' font-weight='400'";
            if (isPcUserAgent()) {
                J = J + " onDblClick"
            } else {
                J = J + " onClick"
            }
            J = J + "='MicroDraw_ShowCoordinate_doubleClickText(this)'>" + S + "</text>";
            $("#" + H).html(J)
        });
        $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_polygon + "']").each(function(f, m) {
            var Y = $("#" + m.id)[0].getAttribute("customRuler") ? $("#" + m.id)[0].getAttribute("customRuler") : $("#" + m.id)[0].getAttribute("customruler");
            if (Y == 0) {
                return true
            }
            if ($(this).parents("[mtype=" + mDrawFlag_Cornergdpic + "]").length > 0) {
                return true
            }
            var W = $("#" + m.id)[0];
            var L = $("#" + m.id + "_p")[0];
            var D = W.getAttribute("mheight");
            var l = W.getAttribute("mwidth");
            points = L.getAttribute("points");
            var O, P, F, G, p, q, U, V;
            var n = points.split(" ");
            var T;
            T = n[0].split(",");
            O = T[0];
            P = T[1];
            T = n[1].split(",");
            F = T[0];
            G = T[1];
            T = n[2].split(",");
            p = T[0];
            q = T[1];
            T = n[3].split(",");
            U = T[0];
            V = T[1];
            var E = 0;
            var I = 0;
            var Q = 0;
            var R = 0;
            if (E == 0 && I == 0 && Q == 0 && R == 0) {
                E = 100000000;
                I = 100000000;
                Q = 0;
                R = 0
            }
            if (E > Number(O)) {
                E = Number(O)
            }
            if (I > Number(P)) {
                I = Number(P)
            }
            if (E > Number(F)) {
                E = Number(F)
            }
            if (I > Number(G)) {
                I = Number(G)
            }
            if (E > Number(p)) {
                E = Number(p)
            }
            if (I > Number(q)) {
                I = Number(q)
            }
            if (E > Number(U)) {
                E = Number(U)
            }
            if (I > Number(V)) {
                I = Number(V)
            }
            if (Q < Number(O)) {
                Q = Number(O)
            }
            if (R < Number(P)) {
                R = Number(P)
            }
            if (Q < Number(F)) {
                Q = Number(F)
            }
            if (R < Number(G)) {
                R = Number(G)
            }
            if (Q < Number(p)) {
                Q = Number(p)
            }
            if (R < Number(q)) {
                R = Number(q)
            }
            if (Q < Number(U)) {
                Q = Number(U)
            }
            if (R < Number(V)) {
                R = Number(V)
            }
            if (Number(D) == 0 && Number(l) > 0) {
                var J = MicroDraw_GUID();
                var s = document.createElementNS(mDrawSvgNS, "g");
                var S = l;
                s.setAttributeNS(null, "id", J);
                s.setAttributeNS(null, "mtype", mDrawFlag_Custom_ruler);
                s.setAttributeNS(null, "mstroke", "#000000");
                s.setAttributeNS(null, "mstrokewidth", "1px");
                s.setAttributeNS(null, "mtext", S);
                s.setAttributeNS(null, "mrulermaster", m.id);
                B.appendChild(s);
                var H = $("#" + J).html();
                var O, P, F, G;
                var M, b, K, a, C, Z, N, e;
                var r, c;
                var X = MicroDraw_getRulerDataInfo(E, I - Number(20), Q, I - Number(20), S);
                var n = X.split(",");
                O = n[0];
                P = n[1];
                F = n[2];
                G = n[3];
                M = n[4];
                b = n[5];
                K = n[6];
                a = n[7];
                C = n[8];
                Z = n[9];
                N = n[10];
                e = n[11];
                r = n[12];
                c = n[13];
                H = H + "<line id='" + J + "_l1' x1='" + M.toString() + "' y1='" + b.toString() + "' x2='" + K.toString() + "' y2='" + a.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                H = H + "<line id='" + J + "_l2' x1='" + O.toString() + "' y1='" + P.toString() + "' x2='" + F.toString() + "' y2='" + G.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                H = H + "<line id='" + J + "_l3' x1='" + C.toString() + "' y1='" + Z.toString() + "' x2='" + N.toString() + "' y2='" + e.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                H = H + "<text id='" + J + "_t' x='" + r.toString() + "' y='" + c.toString() + "' font-size='16' fill='#000000' writing-mode='lr' font-weight='400'>" + S + "</text>";
                $("#" + J).html(H)
            } else {
                if (Number(D) > 0 && Number(l) == 0) {
                    var J = MicroDraw_GUID();
                    var s = document.createElementNS(mDrawSvgNS, "g");
                    var S = D;
                    s.setAttributeNS(null, "id", J);
                    s.setAttributeNS(null, "mtype", mDrawFlag_Custom_ruler);
                    s.setAttributeNS(null, "mstroke", "#000000");
                    s.setAttributeNS(null, "mstrokewidth", "1px");
                    s.setAttributeNS(null, "mtext", S);
                    s.setAttributeNS(null, "mrulermaster", m.id);
                    B.appendChild(s);
                    var H = $("#" + J).html();
                    var O, P, F, G;
                    var M, b, K, a, C, Z, N, e;
                    var r, c;
                    var X = MicroDraw_getRulerDataInfo(E - Number(40), I, E - Number(40), R, S);
                    var n = X.split(",");
                    O = n[0];
                    P = n[1];
                    F = n[2];
                    G = n[3];
                    M = n[4];
                    b = n[5];
                    K = n[6];
                    a = n[7];
                    C = n[8];
                    Z = n[9];
                    N = n[10];
                    e = n[11];
                    r = n[12];
                    c = n[13];
                    H = H + "<line id='" + J + "_l1' x1='" + M.toString() + "' y1='" + b.toString() + "' x2='" + K.toString() + "' y2='" + a.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                    H = H + "<line id='" + J + "_l2' x1='" + O.toString() + "' y1='" + P.toString() + "' x2='" + F.toString() + "' y2='" + G.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                    H = H + "<line id='" + J + "_l3' x1='" + C.toString() + "' y1='" + Z.toString() + "' x2='" + N.toString() + "' y2='" + e.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                    H = H + "<text id='" + J + "_t' x='" + r.toString() + "' y='" + c.toString() + "' font-size='16' fill='#000000' writing-mode='lr' font-weight='400'>" + S + "</text>";
                    $("#" + J).html(H)
                } else {
                    if (Number(D) > 0 && Number(l) > 0) {
                        var J = MicroDraw_GUID();
                        var s = document.createElementNS(mDrawSvgNS, "g");
                        var S = l;
                        s.setAttributeNS(null, "id", J);
                        s.setAttributeNS(null, "mtype", mDrawFlag_Custom_ruler);
                        s.setAttributeNS(null, "mstroke", "#000000");
                        s.setAttributeNS(null, "mstrokewidth", "1px");
                        s.setAttributeNS(null, "mtext", S);
                        s.setAttributeNS(null, "mrulermaster", m.id);
                        B.appendChild(s);
                        var H = $("#" + J).html();
                        var O, P, F, G;
                        var M, b, K, a, C, Z, N, e;
                        var r, c;
                        var X = MicroDraw_getRulerDataInfo(E, I - Number(20), Q, I - Number(20), S);
                        var n = X.split(",");
                        O = n[0];
                        P = n[1];
                        F = n[2];
                        G = n[3];
                        M = n[4];
                        b = n[5];
                        K = n[6];
                        a = n[7];
                        C = n[8];
                        Z = n[9];
                        N = n[10];
                        e = n[11];
                        r = n[12];
                        c = n[13];
                        H = H + "<line id='" + J + "_l1' x1='" + M.toString() + "' y1='" + b.toString() + "' x2='" + K.toString() + "' y2='" + a.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                        H = H + "<line id='" + J + "_l2' x1='" + O.toString() + "' y1='" + P.toString() + "' x2='" + F.toString() + "' y2='" + G.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                        H = H + "<line id='" + J + "_l3' x1='" + C.toString() + "' y1='" + Z.toString() + "' x2='" + N.toString() + "' y2='" + e.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                        H = H + "<text id='" + J + "_t' x='" + r.toString() + "' y='" + c.toString() + "' font-size='16' fill='#000000' writing-mode='lr' font-weight='400'>" + S + "</text>";
                        $("#" + J).html(H);
                        var J = MicroDraw_GUID();
                        var s = document.createElementNS(mDrawSvgNS, "g");
                        var S = D;
                        s.setAttributeNS(null, "id", J);
                        s.setAttributeNS(null, "mtype", mDrawFlag_Custom_ruler);
                        s.setAttributeNS(null, "mstroke", "#000000");
                        s.setAttributeNS(null, "mstrokewidth", "1px");
                        s.setAttributeNS(null, "mtext", S);
                        s.setAttributeNS(null, "mrulermaster", m.id);
                        $("#" + mDrawFlag_SvgId)[0].appendChild(s);
                        var H = $("#" + J).html();
                        var O, P, F, G;
                        var M, b, K, a, C, Z, N, e;
                        var r, c;
                        var X = MicroDraw_getRulerDataInfo(Q + Number(10), I, Q + Number(10), R, S);
                        var n = X.split(",");
                        O = n[0];
                        P = n[1];
                        F = n[2];
                        G = n[3];
                        M = n[4];
                        b = n[5];
                        K = n[6];
                        a = n[7];
                        C = n[8];
                        Z = n[9];
                        N = n[10];
                        e = n[11];
                        r = n[12];
                        c = n[13];
                        H = H + "<line id='" + J + "_l1' x1='" + M.toString() + "' y1='" + b.toString() + "' x2='" + K.toString() + "' y2='" + a.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                        H = H + "<line id='" + J + "_l2' x1='" + O.toString() + "' y1='" + P.toString() + "' x2='" + F.toString() + "' y2='" + G.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                        H = H + "<line id='" + J + "_l3' x1='" + C.toString() + "' y1='" + Z.toString() + "' x2='" + N.toString() + "' y2='" + e.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                        H = H + "<text id='" + J + "_t' x='" + r.toString() + "' y='" + c.toString() + "' font-size='16' fill='#000000' writing-mode='lr' font-weight='400'>" + S + "</text>";
                        $("#" + J).html(H)
                    }
                }
            }
        });
        MicroDraw_ShowFrameArcCoor(A)
    } else {
        $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_ruler + "']").each(function(C, D) {
            var E = D.parentNode;
            var F = D.getAttribute("mrulermaster");
            if (A == F) {
                if (!isEmptyOrNull(F)) {
                    E.removeChild(D)
                }
            }
        });
        $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_controlPoint + "']").each(function(C, D) {
            var E = D.parentNode;
            E.removeChild(D)
        });
        $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_arc + "']").each(function(c, f) {
            var W = $("#" + A)[0].getAttribute("customRuler") ? $("#" + A)[0].getAttribute("customRuler") : $("#" + A)[0].getAttribute("customruler");
            if (W == 1) {
                if (f.id == A) {
                    var U = $("#" + f.id)[0];
                    var Q = $("#" + f.id + "_p1")[0];
                    var D = U.getAttribute("mheight");
                    var e = U.getAttribute("mwidth");
                    d = Q.getAttribute("d");
                    d = replaceAll(d, "M", "");
                    d = replaceAll(d, " A ", ",");
                    d = replaceAll(d, " ", ",");
                    var F, n, E, m, C, l;
                    var p = d.split(",");
                    F = Number(p[0]);
                    n = p[1];
                    C = Number(p[7]);
                    l = p[8];
                    E = Number(F) + (Number(C) - Number(F)) / 2;
                    m = Number(n) - (Number(U.getAttribute("mheight")) / 1000) * Number(mDrawPixelPerM);
                    var H = MicroDraw_GUID();
                    var r = document.createElementNS(mDrawSvgNS, "g");
                    var S = e;
                    r.setAttributeNS(null, "id", H);
                    r.setAttributeNS(null, "mtype", mDrawFlag_Custom_ruler);
                    r.setAttributeNS(null, "mstroke", "#000000");
                    r.setAttributeNS(null, "mstrokewidth", "1px");
                    r.setAttributeNS(null, "mtext", S);
                    r.setAttributeNS(null, "mrulermaster", f.id);
                    r.setAttributeNS(null, "moptid", "mwidth");
                    r.setAttributeNS(null, "moptvalexp", "VAL");
                    r.setAttributeNS(null, "moptidbelongtoobj", f.id);
                    B.appendChild(r);
                    var J = $("#" + H).html();
                    var O, P, G, R;
                    var M, Z, K, Y, L, X, N, b;
                    var q, a;
                    var V = MicroDraw_getRulerDataInfo(F, m - Number(10), C, m - Number(10), S);
                    var p = V.split(",");
                    O = p[0];
                    P = p[1];
                    G = p[2];
                    R = p[3];
                    M = p[4];
                    Z = p[5];
                    K = p[6];
                    Y = p[7];
                    L = p[8];
                    X = p[9];
                    N = p[10];
                    b = p[11];
                    q = p[12];
                    a = p[13];
                    J = J + "<line id='" + H + "_l1' x1='" + M.toString() + "' y1='" + Z.toString() + "' x2='" + K.toString() + "' y2='" + Y.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                    J = J + "<line id='" + H + "_l2' x1='" + O.toString() + "' y1='" + P.toString() + "' x2='" + G.toString() + "' y2='" + R.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                    J = J + "<line id='" + H + "_l3' x1='" + L.toString() + "' y1='" + X.toString() + "' x2='" + N.toString() + "' y2='" + b.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                    J = J + "<text id='" + H + "_t' x='" + q.toString() + "' y='" + a.toString() + "' font-size='16' fill='#000000' writing-mode='lr' font-weight='400'";
                    if (isPcUserAgent()) {
                        J = J + " onDblClick"
                    } else {
                        J = J + " onClick"
                    }
                    J = J + "='MicroDraw_ShowCoordinate_doubleClickText(this)'>" + S + "</text>";
                    $("#" + H).html(J);
                    var H = MicroDraw_GUID();
                    var r = document.createElementNS(mDrawSvgNS, "g");
                    var S = D;
                    r.setAttributeNS(null, "id", H);
                    r.setAttributeNS(null, "mtype", mDrawFlag_Custom_ruler);
                    r.setAttributeNS(null, "mstroke", "#000000");
                    r.setAttributeNS(null, "mstrokewidth", "1px");
                    r.setAttributeNS(null, "mtext", S);
                    r.setAttributeNS(null, "mrulermaster", f.id);
                    r.setAttributeNS(null, "moptid", "mheight");
                    r.setAttributeNS(null, "moptvalexp", "VAL");
                    r.setAttributeNS(null, "moptidbelongtoobj", f.id);
                    B.appendChild(r);
                    var J = $("#" + H).html();
                    var O, P, G, R;
                    var M, Z, K, Y, L, X, N, b;
                    var q, a;
                    var V = MicroDraw_getRulerDataInfo(F - Number(40), m, F - Number(40), n, S);
                    var p = V.split(",");
                    O = p[0];
                    P = p[1];
                    G = p[2];
                    R = p[3];
                    M = p[4];
                    Z = p[5];
                    K = p[6];
                    Y = p[7];
                    L = p[8];
                    X = p[9];
                    N = p[10];
                    b = p[11];
                    q = p[12];
                    a = p[13];
                    var T = $("#" + A).attr("mbframe");
                    var I = $("#" + A).attr("mtotallen");
                    if (T == "Y" && I == "Y") {
                        R = Number(R) + mDrawThickTing;
                        X = Number(X) + mDrawThickTing;
                        b = Number(b) + mDrawThickTing
                    }
                    J = J + "<line id='" + H + "_l1' x1='" + M.toString() + "' y1='" + Z.toString() + "' x2='" + K.toString() + "' y2='" + Y.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                    J = J + "<line id='" + H + "_l2' x1='" + O.toString() + "' y1='" + P.toString() + "' x2='" + G.toString() + "' y2='" + R.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                    J = J + "<line id='" + H + "_l3' x1='" + L.toString() + "' y1='" + X.toString() + "' x2='" + N.toString() + "' y2='" + b.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                    J = J + "<text id='" + H + "_t' x='" + q.toString() + "' y='" + a.toString() + "' font-size='16' fill='#000000' writing-mode='lr' font-weight='400'";
                    if (isPcUserAgent()) {
                        J = J + " onDblClick"
                    } else {
                        J = J + " onClick"
                    }
                    J = J + "='MicroDraw_ShowCoordinate_doubleClickText(this)'>" + S + "</text>";
                    $("#" + H).html(J)
                }
            }
        });
        $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_polygon + "']").each(function(f, m) {
            var Y = $("#" + A)[0].getAttribute("customRuler") ? $("#" + A)[0].getAttribute("customRuler") : $("#" + A)[0].getAttribute("customruler");
            if (Y == 1) {
                if (m.id == A) {
                    var W = $("#" + m.id)[0];
                    var L = $("#" + m.id + "_p")[0];
                    var D = W.getAttribute("mheight");
                    var l = W.getAttribute("mwidth");
                    points = L.getAttribute("points");
                    var O, P, F, G, p, q, U, V;
                    var n = points.split(" ");
                    var T;
                    T = n[0].split(",");
                    O = T[0];
                    P = T[1];
                    T = n[1].split(",");
                    F = T[0];
                    G = T[1];
                    T = n[2].split(",");
                    p = T[0];
                    q = T[1];
                    T = n[3].split(",");
                    U = T[0];
                    V = T[1];
                    var E = 0;
                    var I = 0;
                    var Q = 0;
                    var R = 0;
                    if (E == 0 && I == 0 && Q == 0 && R == 0) {
                        E = 100000000;
                        I = 100000000;
                        Q = 0;
                        R = 0
                    }
                    if (E > Number(O)) {
                        E = Number(O)
                    }
                    if (I > Number(P)) {
                        I = Number(P)
                    }
                    if (E > Number(F)) {
                        E = Number(F)
                    }
                    if (I > Number(G)) {
                        I = Number(G)
                    }
                    if (E > Number(p)) {
                        E = Number(p)
                    }
                    if (I > Number(q)) {
                        I = Number(q)
                    }
                    if (E > Number(U)) {
                        E = Number(U)
                    }
                    if (I > Number(V)) {
                        I = Number(V)
                    }
                    if (Q < Number(O)) {
                        Q = Number(O)
                    }
                    if (R < Number(P)) {
                        R = Number(P)
                    }
                    if (Q < Number(F)) {
                        Q = Number(F)
                    }
                    if (R < Number(G)) {
                        R = Number(G)
                    }
                    if (Q < Number(p)) {
                        Q = Number(p)
                    }
                    if (R < Number(q)) {
                        R = Number(q)
                    }
                    if (Q < Number(U)) {
                        Q = Number(U)
                    }
                    if (R < Number(V)) {
                        R = Number(V)
                    }
                    if (Number(D) == 0 && Number(l) > 0) {
                        var J = MicroDraw_GUID();
                        var s = document.createElementNS(mDrawSvgNS, "g");
                        var S = l;
                        s.setAttributeNS(null, "id", J);
                        s.setAttributeNS(null, "mtype", mDrawFlag_Custom_ruler);
                        s.setAttributeNS(null, "mstroke", "#000000");
                        s.setAttributeNS(null, "mstrokewidth", "1px");
                        s.setAttributeNS(null, "mtext", S);
                        s.setAttributeNS(null, "mrulermaster", m.id);
                        B.appendChild(s);
                        var H = $("#" + J).html();
                        var O, P, F, G;
                        var M, b, K, a, C, Z, N, e;
                        var r, c;
                        var X = MicroDraw_getRulerDataInfo(E, I - Number(20), Q, I - Number(20), S);
                        var n = X.split(",");
                        O = n[0];
                        P = n[1];
                        F = n[2];
                        G = n[3];
                        M = n[4];
                        b = n[5];
                        K = n[6];
                        a = n[7];
                        C = n[8];
                        Z = n[9];
                        N = n[10];
                        e = n[11];
                        r = n[12];
                        c = n[13];
                        H = H + "<line id='" + J + "_l1' x1='" + M.toString() + "' y1='" + b.toString() + "' x2='" + K.toString() + "' y2='" + a.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                        H = H + "<line id='" + J + "_l2' x1='" + O.toString() + "' y1='" + P.toString() + "' x2='" + F.toString() + "' y2='" + G.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                        H = H + "<line id='" + J + "_l3' x1='" + C.toString() + "' y1='" + Z.toString() + "' x2='" + N.toString() + "' y2='" + e.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                        H = H + "<text id='" + J + "_t' x='" + r.toString() + "' y='" + c.toString() + "' font-size='16' fill='#000000' writing-mode='lr' font-weight='400'>" + S + "</text>";
                        $("#" + J).html(H)
                    } else {
                        if (Number(D) > 0 && Number(l) == 0) {
                            var J = MicroDraw_GUID();
                            var s = document.createElementNS(mDrawSvgNS, "g");
                            var S = D;
                            s.setAttributeNS(null, "id", J);
                            s.setAttributeNS(null, "mtype", mDrawFlag_Custom_ruler);
                            s.setAttributeNS(null, "mstroke", "#000000");
                            s.setAttributeNS(null, "mstrokewidth", "1px");
                            s.setAttributeNS(null, "mtext", S);
                            s.setAttributeNS(null, "mrulermaster", m.id);
                            B.appendChild(s);
                            var H = $("#" + J).html();
                            var O, P, F, G;
                            var M, b, K, a, C, Z, N, e;
                            var r, c;
                            var X = MicroDraw_getRulerDataInfo(E - Number(40), I, E - Number(40), R, S);
                            var n = X.split(",");
                            O = n[0];
                            P = n[1];
                            F = n[2];
                            G = n[3];
                            M = n[4];
                            b = n[5];
                            K = n[6];
                            a = n[7];
                            C = n[8];
                            Z = n[9];
                            N = n[10];
                            e = n[11];
                            r = n[12];
                            c = n[13];
                            H = H + "<line id='" + J + "_l1' x1='" + M.toString() + "' y1='" + b.toString() + "' x2='" + K.toString() + "' y2='" + a.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                            H = H + "<line id='" + J + "_l2' x1='" + O.toString() + "' y1='" + P.toString() + "' x2='" + F.toString() + "' y2='" + G.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                            H = H + "<line id='" + J + "_l3' x1='" + C.toString() + "' y1='" + Z.toString() + "' x2='" + N.toString() + "' y2='" + e.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                            H = H + "<text id='" + J + "_t' x='" + r.toString() + "' y='" + c.toString() + "' font-size='16' fill='#000000' writing-mode='lr' font-weight='400'>" + S + "</text>";
                            $("#" + J).html(H)
                        } else {
                            if (Number(D) > 0 && Number(l) > 0) {
                                var J = MicroDraw_GUID();
                                var s = document.createElementNS(mDrawSvgNS, "g");
                                var S = l;
                                s.setAttributeNS(null, "id", J);
                                s.setAttributeNS(null, "mtype", mDrawFlag_Custom_ruler);
                                s.setAttributeNS(null, "mstroke", "#000000");
                                s.setAttributeNS(null, "mstrokewidth", "1px");
                                s.setAttributeNS(null, "mtext", S);
                                s.setAttributeNS(null, "mrulermaster", m.id);
                                B.appendChild(s);
                                var H = $("#" + J).html();
                                var O, P, F, G;
                                var M, b, K, a, C, Z, N, e;
                                var r, c;
                                var X = MicroDraw_getRulerDataInfo(E, I - Number(20), Q, I - Number(20), S);
                                var n = X.split(",");
                                O = n[0];
                                P = n[1];
                                F = n[2];
                                G = n[3];
                                M = n[4];
                                b = n[5];
                                K = n[6];
                                a = n[7];
                                C = n[8];
                                Z = n[9];
                                N = n[10];
                                e = n[11];
                                r = n[12];
                                c = n[13];
                                H = H + "<line id='" + J + "_l1' x1='" + M.toString() + "' y1='" + b.toString() + "' x2='" + K.toString() + "' y2='" + a.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                                H = H + "<line id='" + J + "_l2' x1='" + O.toString() + "' y1='" + P.toString() + "' x2='" + F.toString() + "' y2='" + G.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                                H = H + "<line id='" + J + "_l3' x1='" + C.toString() + "' y1='" + Z.toString() + "' x2='" + N.toString() + "' y2='" + e.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                                H = H + "<text id='" + J + "_t' x='" + r.toString() + "' y='" + c.toString() + "' font-size='16' fill='#000000' writing-mode='lr' font-weight='400'>" + S + "</text>";
                                $("#" + J).html(H);
                                var J = MicroDraw_GUID();
                                var s = document.createElementNS(mDrawSvgNS, "g");
                                var S = D;
                                s.setAttributeNS(null, "id", J);
                                s.setAttributeNS(null, "mtype", mDrawFlag_Custom_ruler);
                                s.setAttributeNS(null, "mstroke", "#000000");
                                s.setAttributeNS(null, "mstrokewidth", "1px");
                                s.setAttributeNS(null, "mtext", S);
                                s.setAttributeNS(null, "mrulermaster", m.id);
                                B.appendChild(s);
                                var H = $("#" + J).html();
                                var O, P, F, G;
                                var M, b, K, a, C, Z, N, e;
                                var r, c;
                                var X = MicroDraw_getRulerDataInfo(Q + Number(10), I, Q + Number(10), R, S);
                                var n = X.split(",");
                                O = n[0];
                                P = n[1];
                                F = n[2];
                                G = n[3];
                                M = n[4];
                                b = n[5];
                                K = n[6];
                                a = n[7];
                                C = n[8];
                                Z = n[9];
                                N = n[10];
                                e = n[11];
                                r = n[12];
                                c = n[13];
                                H = H + "<line id='" + J + "_l1' x1='" + M.toString() + "' y1='" + b.toString() + "' x2='" + K.toString() + "' y2='" + a.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                                H = H + "<line id='" + J + "_l2' x1='" + O.toString() + "' y1='" + P.toString() + "' x2='" + F.toString() + "' y2='" + G.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                                H = H + "<line id='" + J + "_l3' x1='" + C.toString() + "' y1='" + Z.toString() + "' x2='" + N.toString() + "' y2='" + e.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
                                H = H + "<text id='" + J + "_t' x='" + r.toString() + "' y='" + c.toString() + "' font-size='16' fill='#000000' writing-mode='lr' font-weight='400'>" + S + "</text>";
                                $("#" + J).html(H)
                            }
                        }
                    }
                }
            }
        });
        MicroDraw_ShowFrameArcCoor(A)
    }
}
function MicroDraw_getTlcXywh(H) {
    var F, I, B, C;
    F = 100000000;
    I = 100000000;
    B = 0;
    C = 0;
    for (var E = 1; E < 10; E++) {
        var G = $("#" + H + "_fan" + E.toString() + "_r1")[0];
        if (isEmptyOrNull(G)) {
            G = $("#" + H + "_fan" + E.toString() + "_k1")[0]
        }
        if (!isEmptyOrNull(G)) {
            if (Number(F) > Number(G.getAttribute("x"))) {
                F = Number(G.getAttribute("x"))
            }
            if (Number(B) < (Number(G.getAttribute("x")) + Number(G.getAttribute("width")))) {
                B = (Number(G.getAttribute("x")) + Number(G.getAttribute("width")))
            }
            if (Number(I) > Number(G.getAttribute("y"))) {
                I = Number(G.getAttribute("y"))
            }
            if (Number(C) < (Number(G.getAttribute("y")) + Number(G.getAttribute("height")))) {
                C = (Number(G.getAttribute("y")) + Number(G.getAttribute("height")))
            }
        }
    }
    var J, K, A, D;
    J = F;
    K = I;
    A = Number(B) - Number(F);
    D = Number(C) - Number(I);
    return J.toString() + "," + K.toString() + "," + A.toString() + "," + D.toString()
}
function MicroDraw_setCoorXYtext(svgId, extOpt) {
    var keepScale = false;
    if (extOpt) {
        keepScale = extOpt.keepScale
    }
    if (keepScale) {
        return
    }
    var defaultSize = 24;
    var autoSize = defaultSize;
    var oriSize = 9;
    var scaleObj = $("#" + svgId).children(":first");
    var transform = scaleObj.attr("transform") || "scale(1)";
    try {
        transform = $.MicroSVG.getMatrix(transform);
        var matrix = transform.matrix;
        var scale = Number(matrix[0]) || 1;
        if (scale == 1) {
            return
        }
        autoSize = parseInt(oriSize / scale);
        autoSize = (autoSize > defaultSize ? autoSize: defaultSize);
        if (autoSize > 45) {
            autoSize = 45
        }
    } catch(e) {
        console.log(e.name + ":" + e.message)
    }
    $("#" + svgId + " [mtype='" + mDrawFlag_CoorX + "'] text").each(function(i, o) {
        o.setAttribute("font-size", autoSize);
        var transform = $(o).attr("transform");
        $(o).attr("transform", ["matrix(1,0,0,1,-10,5)", transform].join(" "))
    });
    $("#" + svgId + " [mtype='" + mDrawFlag_CoorY + "'] text").each(function(i, o) {
        o.setAttribute("font-size", autoSize);
        var transform = $(o).attr("transform");
        $(o).attr("transform", ["matrix(1,0,0,1,3,10)", transform].join(" "))
    });
    $.each($("#" + svgId + ' [mtype="' + mDrawFlag_combCoorX + '"] text'),
    function() {
        with($(this)[0]) {
            setAttribute("font-size", autoSize);
            setAttribute("font-weight", "700")
        }
        var transform = $(this).attr("transform");
        $(this).attr("transform", ["matrix(1,0,0,1,-10,5)", transform].join(" "))
    });
    $.each($("#" + svgId + ' [mtype="' + mDrawFlag_combCoorY + '"] text'),
    function() {
        with($(this)[0]) {
            setAttribute("font-size", autoSize);
            setAttribute("font-weight", "700")
        }
        var transform = $(this).attr("transform");
        $(this).attr("transform", ["matrix(1,0,0,1,3,10)", transform].join(" "))
    });
    $("#" + svgId + " [mtype='" + mDrawFlag_Custom_ruler + "'][moptid=mwidth] text").each(function(i, o) {
        o.setAttribute("font-size", autoSize);
        var transform = $(o).attr("transform");
        $(o).attr("transform", ["matrix(1,0,0,1,-10,0)", transform].join(" "))
    });
    $("#" + svgId + " [mtype='" + mDrawFlag_Custom_ruler + "'][moptid=mheight] text").each(function(i, o) {
        o.setAttribute("font-size", autoSize);
        var transform = $(o).attr("transform");
        $(o).attr("transform", ["matrix(1,0,0,1,0,5)", transform].join(" "))
    });
    $("#" + svgId + " [mtype='" + mDrawFlag_Custom_ruler + "'][mbelongtofanid] text").each(function(i, o) {
        o.setAttribute("font-size", (autoSize - 2))
    })
}
function MicroDraw_glass_resize(Aj, O, AI, An, At) {
    if ($("#" + Aj).parents("[mtype=" + mDrawFlag_Custom_arc + "]").length > 0) {
        return true
    }
    if ($("#" + Aj).parents("[mtype=" + mDrawFlag_FrameArc + "]").length > 0) {
        return true
    }
    var T = $("#" + Aj)[0];
    var c = $("#" + Aj + "_r1")[0];
    var b = $("#" + Aj + "_r2")[0];
    var Y = $("#" + Aj + "_l1")[0];
    var X = $("#" + Aj + "_l2")[0];
    var W = $("#" + Aj + "_l3")[0];
    var J = $("#" + Aj + "_t1")[0];
    var Am = $("#" + Aj + "_t2")[0];
    var H = $("#" + Aj + "_t3")[0];
    var G = $("#" + Aj + "_t4")[0];
    if ($(T).length == 0 || $(c).length == 0 || $(b).length == 0 || $(Y).length == 0 || $(X).length == 0 || $(W).length == 0 || $(J).length == 0 || $(Am).length == 0 || $(H).length == 0 || $(G).length == 0) {
        jQuery.messager.alert("提示:", "发现窗型有异常，请重新绘画；否则生成的数据有误!", "error");
        return
    }
    var Ae = T.parentNode;
    var g;
    var f;
    var Al = Ae.getAttribute("mtype");
    if (isEmptyOrNull(Al)) {
        Al = ""
    }
    if (Al == mDrawFlag_Win) {
        g = $("#" + Ae.getAttribute("id") + " [mtype^='frame']")[0];
        f = $("#" + g.getAttribute("id") + "_r2")[0]
    }
    var AG = T.getAttribute("mlid");
    var v = T.getAttribute("mrid");
    var q = T.getAttribute("mtid");
    var Ac = T.getAttribute("mbid");
    var s, Aa, t, Ab;
    if (AG.length > 0) {
        var F = $("#" + AG)[0];
        s = Number($("#" + F.getAttribute("id") + "_r1")[0].getAttribute("x")) + Number($("#" + F.getAttribute("id") + "_r1")[0].getAttribute("width"))
    } else {
        if (Ae.getAttribute("id") == mDrawFlag_SvgId) {
            s = c.getAttribute("x")
        } else {
            s = f.getAttribute("x")
        }
    }
    if (v.length > 0) {
        var As = $("#" + v)[0];
        Aa = Number($("#" + As.getAttribute("id") + "_r1")[0].getAttribute("x"))
    } else {
        if (Ae.getAttribute("id") == mDrawFlag_SvgId) {
            Aa = Number(c.getAttribute("x")) + Number(c.getAttribute("width"))
        } else {
            Aa = Number(f.getAttribute("x")) + Number(f.getAttribute("width"))
        }
    }
    if (q.length > 0) {
        var n = $("#" + q)[0];
        t = Number($("#" + n.getAttribute("id") + "_r1")[0].getAttribute("y")) + Number($("#" + n.getAttribute("id") + "_r1")[0].getAttribute("height"))
    } else {
        if (Ae.getAttribute("id") == mDrawFlag_SvgId) {
            t = c.getAttribute("y")
        } else {
            t = f.getAttribute("y")
        }
    }
    if (Ac.length > 0) {
        var w = $("#" + Ac)[0];
        Ab = Number($("#" + w.getAttribute("id") + "_r1")[0].getAttribute("y"))
    } else {
        if (Ae.getAttribute("id") == mDrawFlag_SvgId) {
            Ab = Number(c.getAttribute("y")) + Number(c.getAttribute("height"))
        } else {
            Ab = Number(f.getAttribute("y")) + Number(f.getAttribute("height"))
        }
    }
    s = Number(s) + Number(O);
    t = Number(t) + Number(AI);
    Aa = Number(Aa) + Number(An);
    Ab = Number(Ab) + Number(At);
    if ($("#" + Aj).parents('[mtype="' + mDrawFlag_Win + '"]').length <= 0) {
        var AA = T.getAttribute("mcx_exp");
        var AC = T.getAttribute("mcy_exp");
        var Ar = T.getAttribute("mcwidth_exp");
        var Q = T.getAttribute("mcheight_exp");
        var Ap = Number(Aa) - Number(s);
        var AH = Number(Ab) - Number(t);
        if (isEmptyOrNull(AA)) {
            AA = ""
        }
        if (isEmptyOrNull(AC)) {
            AC = ""
        }
        if (isEmptyOrNull(Ar)) {
            Ar = ""
        }
        if (isEmptyOrNull(Q)) {
            Q = ""
        }
        if (AA.length > 0) {
            s = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, AA, "", "")) / 1000
        }
        if (AC.length > 0) {
            t = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, AC, "", "")) / 1000
        }
        Aa = Number(s) + Number(Ap);
        Ab = Number(t) + Number(AH);
        if (Ar.length > 0) {
            Aa = Number(s) + Number(Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, Ar, "", "")) / 1000)
        }
        if (Q.length > 0) {
            Ab = Number(t) + Number(Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, Q, "", "")) / 1000)
        }
    }
    c.setAttribute("x", s);
    c.setAttribute("y", t);
    var L = Number(Aa) - Number(s);
    var Ad = Number(Ab) - Number(t);
    if (L < 1) {
        L = 1
    }
    if (Ad < 1) {
        Ad = 1
    }
    c.setAttribute("width", L);
    c.setAttribute("height", Ad);
    b.setAttribute("x", Number(s) + Number(mDrawSvgViewBox * mDrawThickYt));
    b.setAttribute("y", Number(t) + Number(mDrawSvgViewBox * mDrawThickYt));
    var L = (Number(Aa) - Number(s)) - 2 * Number(mDrawSvgViewBox * mDrawThickYt);
    var Ad = (Number(Ab) - Number(t)) - 2 * Number(mDrawSvgViewBox * mDrawThickYt);
    if (L < 1) {
        L = 1
    }
    if (Ad < 1) {
        Ad = 1
    }
    b.setAttribute("width", L);
    b.setAttribute("height", Ad);
    var V = mDrawGlassDiff * mDrawSvgViewBox;
    Y.setAttribute("x1", Number(b.getAttribute("x")) + Number(b.getAttribute("width")) / 2 - V);
    Y.setAttribute("y1", Number(b.getAttribute("y")) + Number(b.getAttribute("height")) / 2);
    Y.setAttribute("x2", Number(b.getAttribute("x")) + Number(b.getAttribute("width")) / 2);
    Y.setAttribute("y2", Number(b.getAttribute("y")) + Number(b.getAttribute("height")) / 2 - V);
    X.setAttribute("x1", Number(b.getAttribute("x")) + Number(b.getAttribute("width")) / 2 - V);
    X.setAttribute("y1", Number(b.getAttribute("y")) + Number(b.getAttribute("height")) / 2 + V);
    X.setAttribute("x2", Number(b.getAttribute("x")) + Number(b.getAttribute("width")) / 2 + V);
    X.setAttribute("y2", Number(b.getAttribute("y")) + Number(b.getAttribute("height")) / 2 - V);
    W.setAttribute("x1", Number(b.getAttribute("x")) + Number(b.getAttribute("width")) / 2);
    W.setAttribute("y1", Number(b.getAttribute("y")) + Number(b.getAttribute("height")) / 2 + V);
    W.setAttribute("x2", Number(b.getAttribute("x")) + Number(b.getAttribute("width")) / 2 + V);
    W.setAttribute("y2", Number(b.getAttribute("y")) + Number(b.getAttribute("height")) / 2);
    var Ay = Number(mDrawSvgViewBox * mDrawThickYt);
    var u = Number(mDrawSvgViewBox * mDrawThickTing);
    var Ai = s;
    var R = t;
    var K = Number(Aa) - Number(s);
    var AE = Number(Ab) - Number(t);
    if (L < 1) {
        L = 1
    }
    if (Ad < 1) {
        Ad = 1
    }
    var s, Aa, Ax, o;
    var t, Ab, a, p;
    var Au, Aw, A, Aq;
    var Ah, Ak, AF, Ao;
    s = Ai;
    t = R;
    Au = Number(Ai) + Number(Ay);
    Ah = Number(R) + Number(Ay);
    Aa = Number(Ai) + Number(K);
    Ab = R;
    Aw = Number(Ai) + Number(K) - Number(Ay);
    Ak = Number(R) + Number(Ay);
    Ax = (Number(Ai) + Number(K));
    a = (Number(R) + Number(AE));
    A = (Number(Ai) + Number(K) - Number(Ay));
    AF = (Number(R) + Number(AE) - Number(Ay));
    o = Ai;
    p = (Number(R) + Number(AE));
    Aq = (Number(Ai) + Number(Ay));
    Ao = (Number(R) + Number(AE) - Number(Ay));
    var Av = T.getAttribute("myt");
    if (Av == "Y") {
        J.setAttribute("style", "display:inline");
        Am.setAttribute("style", "display:inline");
        H.setAttribute("style", "display:inline");
        G.setAttribute("style", "display:inline");
        b.setAttribute("style", "display:inline");
        var m = T.getAttribute("mytpjstyle");
        switch (m) {
        case "45":
            J.setAttribute("x1", s);
            J.setAttribute("y1", t);
            J.setAttribute("x2", Au);
            J.setAttribute("y2", Ah);
            Am.setAttribute("x1", Aa);
            Am.setAttribute("y1", Ab);
            Am.setAttribute("x2", Aw);
            Am.setAttribute("y2", Ak);
            H.setAttribute("x1", Ax);
            H.setAttribute("y1", a);
            H.setAttribute("x2", A);
            H.setAttribute("y2", AF);
            G.setAttribute("x1", o);
            G.setAttribute("y1", p);
            G.setAttribute("x2", Aq);
            G.setAttribute("y2", Ao);
            break;
        case "V":
            J.setAttribute("x1", Au);
            J.setAttribute("y1", t);
            J.setAttribute("x2", Au);
            J.setAttribute("y2", Ah);
            Am.setAttribute("x1", Aw);
            Am.setAttribute("y1", Ab);
            Am.setAttribute("x2", Aw);
            Am.setAttribute("y2", Ak);
            H.setAttribute("x1", A);
            H.setAttribute("y1", a);
            H.setAttribute("x2", A);
            H.setAttribute("y2", AF);
            G.setAttribute("x1", Aq);
            G.setAttribute("y1", p);
            G.setAttribute("x2", Aq);
            G.setAttribute("y2", Ao);
            break;
        case "H":
            J.setAttribute("x1", s);
            J.setAttribute("y1", Ah);
            J.setAttribute("x2", Au);
            J.setAttribute("y2", Ah);
            Am.setAttribute("x1", Aa);
            Am.setAttribute("y1", Ak);
            Am.setAttribute("x2", Aw);
            Am.setAttribute("y2", Ak);
            H.setAttribute("x1", Ax);
            H.setAttribute("y1", AF);
            H.setAttribute("x2", A);
            H.setAttribute("y2", AF);
            G.setAttribute("x1", o);
            G.setAttribute("y1", Ao);
            G.setAttribute("x2", Aq);
            G.setAttribute("y2", Ao);
            break
        }
    } else {
        J.setAttribute("style", "display:none");
        Am.setAttribute("style", "display:none");
        H.setAttribute("style", "display:none");
        G.setAttribute("style", "display:none");
        b.setAttribute("style", "display:none")
    }
    var AB = T.getAttribute("mfhl");
    if ($.Micro.IsEmpty(AB)) {
        AB = "N"
    }
    $(T).find("[mtype=" + mDrawFlag_Fhl + "]").remove();
    if (AB == "Y") {
        var AK = 16;
        var Ag = s + (Av == "Y" ? Ay: 0);
        var Af = t + (Av == "Y" ? Ay: 0);
        var AD = s + Number($(c).attr("width")) - (Av == "Y" ? Ay: 0);
        var I = t + Number($(c).attr("height")) - (Av == "Y" ? Ay: 0);
        var l = Ag + AK;
        var r = Af;
        var S;
        var B, e;
        S = {
            mtype: mDrawFlag_Fhl
        };
        B = $.MicroSVG.makeSVG("g", S);
        $("#" + Aj).append($(B));
        while (l + Ay <= AD) {
            S = {
                "x1": l,
                "y1": r,
                "x2": l,
                "y2": I,
                "stroke": "#000",
                "stroke-width": "1px"
            };
            e = $.MicroSVG.makeSVG("line", S);
            $(B).append($(e));
            l += Ay;
            S = {
                "x1": l,
                "y1": r,
                "x2": l,
                "y2": I,
                "stroke": "#000",
                "stroke-width": "1px"
            };
            e = $.MicroSVG.makeSVG("line", S);
            $(B).append($(e));
            l += AK
        }
    }
    var D = $("#" + Aj + "_txtr")[0];
    var E = $("#" + Aj + "_txt")[0];
    if (!isEmptyOrNull(D)) {
        D.setAttribute("x", Number(Ai) + Number(Ay) + Number(4));
        D.setAttribute("y", Number(R) + Number(AE) - Number(Ay) - Number(18) - Number(4));
        E.setAttribute("x", Number(Ai) + Number(Ay) + Number(8));
        E.setAttribute("y", Number(R) + Number(AE) - Number(Ay) - Number(8))
    }
    var M = T.getAttribute("mutext");
    var AJ = T.getAttribute("mdtext");
    var P = T.getAttribute("mltext");
    var Z = T.getAttribute("mrtext");
    $("#" + Aj + "_txt_def_u,#" + Aj + "_txt_def_d,#" + Aj + "_txt_def_l,#" + Aj + "_txt_def_r").remove();
    var S;
    var N;
    var C, Az;
    if (!$.Micro.IsEmpty(M)) {
        C = Number(Ai) + K / 2;
        Az = Number(R) + (Ay + u) * 2;
        S = {
            id: Aj + "_txt_def_u",
            x: C,
            y: Az,
            "font-size": "16",
            "font-weight": "400",
            "fill": "#FF0000"
        };
        N = $.MicroSVG.makeSVG("text", S);
        N.textContent = M;
        $("#" + Aj).append($(N));
        var U = $.MicroSVG.getSVGRect($(N));
        $(N).attr("x", C - U.width / 2)
    }
    if (!$.Micro.IsEmpty(AJ)) {
        C = Number(Ai) + K / 2;
        Az = Number(R) + AE - (Ay + u);
        S = {
            id: Aj + "_txt_def_d",
            x: C,
            y: Az,
            "font-size": "16",
            "font-weight": "400",
            "fill": "#FF0000"
        };
        N = $.MicroSVG.makeSVG("text", S);
        N.textContent = AJ;
        $("#" + Aj).append($(N));
        var U = $.MicroSVG.getSVGRect($(N));
        $(N).attr("x", C - U.width / 2)
    }
    if (!$.Micro.IsEmpty(P)) {
        C = Number(Ai) + (Ay + u);
        Az = Number(R) + AE / 2;
        S = {
            id: Aj + "_txt_def_l",
            x: C,
            y: Az,
            "font-size": "16",
            "font-weight": "400",
            "fill": "#FF0000",
        };
        N = $.MicroSVG.makeSVG("text", S);
        N.textContent = P;
        $("#" + Aj).append($(N))
    }
    if (!$.Micro.IsEmpty(Z)) {
        C = Number(Ai) + K - (Ay + u);
        Az = Number(R) + AE / 2;
        S = {
            id: Aj + "_txt_def_r",
            x: C,
            y: Az,
            "font-size": "16",
            "font-weight": "400",
            "fill": "#FF0000",
        };
        N = $.MicroSVG.makeSVG("text", S);
        N.textContent = Z;
        $("#" + Aj).append($(N));
        var U = $.MicroSVG.getSVGRect($(N));
        $(N).attr("x", C - U.width)
    }
}
function MicroDraw_pkc_resize(AX, f, Bu, Z, A7) {
    var Aa = $("#" + AX)[0];
    var AE = $(Aa).attr("mzsstyle");
    if ($.Micro.IsEmpty(AE)) {
        AE = mDrawFlag_PK_zsStyle[0].id
    }
    var Ao = $("#" + AX + "_r1")[0];
    var An = $("#" + AX + "_r2")[0];
    var Am = $("#" + AX + "_r3")[0];
    var Ah = $("#" + AX + "_l1")[0];
    var Ag = $("#" + AX + "_l2")[0];
    var Af = $("#" + AX + "_l3")[0];
    var Ae = $("#" + AX + "_l4")[0];
    var AM = $("#" + AX + "_y1")[0];
    var AL = $("#" + AX + "_y2")[0];
    var AK = $("#" + AX + "_y3")[0];
    var Bs = $("#" + AX + "_y4")[0];
    var Ap = $("#" + AX + "_f1")[0];
    var AS = $("#" + AX + "_f2")[0];
    var AR = $("#" + AX + "_f3")[0];
    var By = $("#" + AX + "_f4")[0];
    var U = $("#" + AX + "_h1")[0];
    var T = $("#" + AX + "_h2")[0];
    $(Aa).find("[id=" + AX + "_h3]").remove();
    $(Aa).find("[id=" + AX + "_h4]").remove();
    var AP = Aa.parentNode;
    var Ar;
    var Aq;
    var AZ = AP.getAttribute("mtype");
    if (isEmptyOrNull(AZ)) {
        AZ = ""
    }
    if (AZ == mDrawFlag_Win) {
        Ar = $("#" + AP.getAttribute("id") + " [mtype^='frame']")[0];
        Aq = $("#" + Ar.getAttribute("id") + "_r2")[0]
    }
    var Br = Aa.getAttribute("mlid");
    var AG = Aa.getAttribute("mrid");
    var AA = Aa.getAttribute("mtid");
    var AN = Aa.getAttribute("mbid");
    var AC, AJ, AD, Au;
    if (Br.length > 0) {
        var P = $("#" + Br)[0];
        AC = Number($("#" + P.getAttribute("id") + "_r1")[0].getAttribute("x")) + Number($("#" + P.getAttribute("id") + "_r1")[0].getAttribute("width"))
    } else {
        if (AP.getAttribute("id") == mDrawFlag_SvgId) {
            AC = Ao.getAttribute("x")
        } else {
            AC = Aq.getAttribute("x")
        }
    }
    if (AG.length > 0) {
        var A6 = $("#" + AG)[0];
        AJ = Number($("#" + A6.getAttribute("id") + "_r1")[0].getAttribute("x"))
    } else {
        if (AP.getAttribute("id") == mDrawFlag_SvgId) {
            AJ = Number(Ao.getAttribute("x")) + Number(Ao.getAttribute("width"))
        } else {
            AJ = Number(Aq.getAttribute("x")) + Number(Aq.getAttribute("width"))
        }
    }
    if (AA.length > 0) {
        var Av = $("#" + AA)[0];
        AD = Number($("#" + Av.getAttribute("id") + "_r1")[0].getAttribute("y")) + Number($("#" + Av.getAttribute("id") + "_r1")[0].getAttribute("height"))
    } else {
        if (AP.getAttribute("id") == mDrawFlag_SvgId) {
            AD = Ao.getAttribute("y")
        } else {
            AD = Aq.getAttribute("y")
        }
    }
    if (AN.length > 0) {
        var AI = $("#" + AN)[0];
        Au = Number($("#" + AI.getAttribute("id") + "_r1")[0].getAttribute("y"))
    } else {
        if (AP.getAttribute("id") == mDrawFlag_SvgId) {
            Au = Number(Ao.getAttribute("y")) + Number(Ao.getAttribute("height"))
        } else {
            Au = Number(Aq.getAttribute("y")) + Number(Aq.getAttribute("height"))
        }
    }
    AC = Number(AC) + Number(f);
    AD = Number(AD) + Number(Bu);
    AJ = Number(AJ) + Number(Z);
    Au = Number(Au) + Number(A7);
    if ($("#" + AX).parents('[mtype="' + mDrawFlag_Win + '"]').length <= 0) {
        var Bl = Aa.getAttribute("mcx_exp");
        var Bn = Aa.getAttribute("mcy_exp");
        var A5 = Aa.getAttribute("mcwidth_exp");
        var n = Aa.getAttribute("mcheight_exp");
        var A2 = Number(AJ) - Number(AC);
        var Bt = Number(Au) - Number(AD);
        if (isEmptyOrNull(Bl)) {
            Bl = ""
        }
        if (isEmptyOrNull(Bn)) {
            Bn = ""
        }
        if (isEmptyOrNull(A5)) {
            A5 = ""
        }
        if (isEmptyOrNull(n)) {
            n = ""
        }
        if (Bl.length > 0) {
            AC = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, Bl, "", "")) / 1000
        }
        if (Bn.length > 0) {
            AD = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, Bn, "", "")) / 1000
        }
        AJ = Number(AC) + Number(A2);
        Au = Number(AD) + Number(Bt);
        if (A5.length > 0) {
            AJ = Number(AC) + Number(Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, A5, "", "")) / 1000)
        }
        if (n.length > 0) {
            Au = Number(AD) + Number(Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, n, "", "")) / 1000)
        }
    }
    Ao.setAttribute("x", AC);
    Ao.setAttribute("y", AD);
    Ao.setAttribute("width", Number(AJ) - Number(AC));
    Ao.setAttribute("height", Number(Au) - Number(AD));
    An.setAttribute("x", Number(AC) + Number(mDrawSvgViewBox * mDrawThickFan));
    An.setAttribute("y", Number(AD) + Number(mDrawSvgViewBox * mDrawThickFan));
    An.setAttribute("width", (Number(AJ) - Number(AC)) - 2 * Number(mDrawSvgViewBox * mDrawThickFan));
    An.setAttribute("height", (Number(Au) - Number(AD)) - 2 * Number(mDrawSvgViewBox * mDrawThickFan));
    Am.setAttribute("x", Number(AC) + Number(mDrawSvgViewBox * mDrawThickFan) + Number(mDrawSvgViewBox * mDrawThickYt));
    Am.setAttribute("y", Number(AD) + Number(mDrawSvgViewBox * mDrawThickFan) + Number(mDrawSvgViewBox * mDrawThickYt));
    Am.setAttribute("width", (Number(AJ) - Number(AC)) - 2 * Number(mDrawSvgViewBox * mDrawThickFan) - 2 * Number(mDrawSvgViewBox * mDrawThickYt));
    Am.setAttribute("height", (Number(Au) - Number(AD)) - 2 * Number(mDrawSvgViewBox * mDrawThickFan) - 2 * Number(mDrawSvgViewBox * mDrawThickYt));
    var Ai = Number(mDrawSvgViewBox * mDrawThickFan);
    var Bh = Number(mDrawSvgViewBox * mDrawThickYt);
    var AY = Number(mDrawSvgViewBox * mDrawThickTing);
    var AC, AJ, Bg, Ax;
    var AD, Au, At, Ay;
    var A9, Be, D, A4;
    var AU, m, Bq, A1;
    var AH, AQ, Ba, a;
    var L, Aw, AV, H;
    var AW, p, Y, Bp;
    AW = AC;
    p = AD;
    Y = Number(AJ) - Number(AC);
    Bp = Number(Au) - Number(AD);
    AC = AC;
    AD = AD;
    A9 = (Number(AW) + Number(Ai));
    AU = (Number(p) + Number(Ai));
    AH = (Number(AW) + Number(Ai) + Number(Bh));
    L = (Number(p) + Number(Ai) + Number(Bh));
    AJ = (Number(AW) + Number(Y));
    Au = p;
    Be = (Number(AW) + Number(Y) - Number(Ai));
    m = (Number(p) + Number(Ai));
    AQ = (Number(AW) + Number(Y) - Number(Ai) - Number(Bh));
    Aw = (Number(p) + Number(Ai) + Number(Bh));
    Bg = (Number(AW) + Number(Y));
    At = (Number(p) + Number(Bp));
    D = (Number(AW) + Number(Y) - Number(Ai));
    Bq = (Number(p) + Number(Bp) - Number(Ai));
    Ba = (Number(AW) + Number(Y) - Number(Ai) - Number(Bh));
    AV = (Number(p) + Number(Bp) - Number(Ai) - Number(Bh));
    Ax = AW;
    Ay = (Number(p) + Number(Bp));
    A4 = (Number(AW) + Number(Ai));
    A1 = (Number(p) + Number(Bp) - Number(Ai));
    a = (Number(AW) + Number(Ai) + Number(Bh));
    H = (Number(p) + Number(Bp) - Number(Ai) - Number(Bh));
    var E = $("#" + AX)[0].getAttribute("mfanpjstyle");
    switch (E) {
    case "45":
        Ah.setAttribute("x1", AC);
        Ah.setAttribute("y1", AD);
        Ah.setAttribute("x2", A9);
        Ah.setAttribute("y2", AU);
        Ag.setAttribute("x1", AJ);
        Ag.setAttribute("y1", Au);
        Ag.setAttribute("x2", Be);
        Ag.setAttribute("y2", m);
        Af.setAttribute("x1", Bg);
        Af.setAttribute("y1", At);
        Af.setAttribute("x2", D);
        Af.setAttribute("y2", Bq);
        Ae.setAttribute("x1", Ax);
        Ae.setAttribute("y1", Ay);
        Ae.setAttribute("x2", A4);
        Ae.setAttribute("y2", A1);
        break;
    case "V":
        Ah.setAttribute("x1", A9);
        Ah.setAttribute("y1", AD);
        Ah.setAttribute("x2", A9);
        Ah.setAttribute("y2", AU);
        Ag.setAttribute("x1", Be);
        Ag.setAttribute("y1", Au);
        Ag.setAttribute("x2", Be);
        Ag.setAttribute("y2", m);
        Af.setAttribute("x1", D);
        Af.setAttribute("y1", At);
        Af.setAttribute("x2", D);
        Af.setAttribute("y2", Bq);
        Ae.setAttribute("x1", A4);
        Ae.setAttribute("y1", Ay);
        Ae.setAttribute("x2", A4);
        Ae.setAttribute("y2", A1);
        break;
    default:
        Ah.setAttribute("x1", AC);
        Ah.setAttribute("y1", AD);
        Ah.setAttribute("x2", A9);
        Ah.setAttribute("y2", AU);
        Ag.setAttribute("x1", AJ);
        Ag.setAttribute("y1", Au);
        Ag.setAttribute("x2", Be);
        Ag.setAttribute("y2", m);
        Af.setAttribute("x1", Bg);
        Af.setAttribute("y1", At);
        Af.setAttribute("x2", D);
        Af.setAttribute("y2", Bq);
        Ae.setAttribute("x1", Ax);
        Ae.setAttribute("y1", Ay);
        Ae.setAttribute("x2", A4);
        Ae.setAttribute("y2", A1);
        break
    }
    var Bb = $("#" + AX)[0].getAttribute("myt");
    if (Bb == "Y") {
        AM.setAttribute("style", "display:inline");
        AL.setAttribute("style", "display:inline");
        AK.setAttribute("style", "display:inline");
        Bs.setAttribute("style", "display:inline");
        Am.setAttribute("style", "display:inline");
        var Bi = $("#" + AX)[0].getAttribute("mytpjstyle");
        switch (Bi) {
        case "45":
            AM.setAttribute("x1", A9);
            AM.setAttribute("y1", AU);
            AM.setAttribute("x2", AH);
            AM.setAttribute("y2", L);
            AL.setAttribute("x1", Be);
            AL.setAttribute("y1", m);
            AL.setAttribute("x2", AQ);
            AL.setAttribute("y2", Aw);
            AK.setAttribute("x1", D);
            AK.setAttribute("y1", Bq);
            AK.setAttribute("x2", Ba);
            AK.setAttribute("y2", AV);
            Bs.setAttribute("x1", A4);
            Bs.setAttribute("y1", A1);
            Bs.setAttribute("x2", a);
            Bs.setAttribute("y2", H);
            break;
        case "V":
            AM.setAttribute("x1", AH);
            AM.setAttribute("y1", AU);
            AM.setAttribute("x2", AH);
            AM.setAttribute("y2", L);
            AL.setAttribute("x1", AQ);
            AL.setAttribute("y1", m);
            AL.setAttribute("x2", AQ);
            AL.setAttribute("y2", Aw);
            AK.setAttribute("x1", Ba);
            AK.setAttribute("y1", Bq);
            AK.setAttribute("x2", Ba);
            AK.setAttribute("y2", AV);
            Bs.setAttribute("x1", a);
            Bs.setAttribute("y1", A1);
            Bs.setAttribute("x2", a);
            Bs.setAttribute("y2", H);
            break;
        case "H":
            AM.setAttribute("x1", A9);
            AM.setAttribute("y1", L);
            AM.setAttribute("x2", AH);
            AM.setAttribute("y2", L);
            AL.setAttribute("x1", Be);
            AL.setAttribute("y1", Aw);
            AL.setAttribute("x2", AQ);
            AL.setAttribute("y2", Aw);
            AK.setAttribute("x1", D);
            AK.setAttribute("y1", AV);
            AK.setAttribute("x2", Ba);
            AK.setAttribute("y2", AV);
            Bs.setAttribute("x1", A4);
            Bs.setAttribute("y1", H);
            Bs.setAttribute("x2", a);
            Bs.setAttribute("y2", H);
            break
        }
    } else {
        AM.setAttribute("style", "display:none");
        AL.setAttribute("style", "display:none");
        AK.setAttribute("style", "display:none");
        Bs.setAttribute("style", "display:none");
        Am.setAttribute("style", "display:none")
    }
    Ap.setAttribute("style", "display:none");
    AS.setAttribute("style", "display:none");
    AR.setAttribute("style", "display:none");
    By.setAttribute("style", "display:none");
    AR.setAttribute("stroke-dasharray", "3,3");
    By.setAttribute("stroke-dasharray", "3,3");
    var Ad = Number(4) * Number(mDrawSvgViewBox);
    var Bf = Number(16) * Number(mDrawSvgViewBox);
    var Bc = Number(18) * Number(mDrawSvgViewBox);
    var Q = Number(4) * Number(mDrawSvgViewBox);
    var e = $("#" + AX)[0].getAttribute("mopendir");
    $(Aa).find('[mtag="mzsstyle"]').remove();
    $(Aa).find("[id=" + AX + "_h1]").remove();
    $(Aa).find("[id=" + AX + "_h2]").remove();
    var Bj;
    switch (e) {
    case "R":
        Ap.setAttribute("style", "display:inline");
        AS.setAttribute("style", "display:inline");
        Ap.setAttribute("x1", AH);
        Ap.setAttribute("x2", AQ);
        Ap.setAttribute("y1", L);
        Ap.setAttribute("y2", (Number(p) + Number(Bp) / 2));
        AS.setAttribute("x1", AQ);
        AS.setAttribute("x2", a);
        AS.setAttribute("y1", (Number(p) + Number(Bp) / 2));
        AS.setAttribute("y2", H);
        switch (AE) {
        case "1":
            var Bk = 5;
            var Bo = Number(Bp) / 2;
            var As = Bk;
            var Bv = (Number(AC) + mDrawThickFan);
            Bj = {
                "mtag": "mzsstyle"
            };
            var AB = $($.MicroSVG.makeSVG("g", Bj));
            $(Aa).append(AB);
            Bj = {
                id: AX + "_h2",
                x: (Bv - mDrawThickFan / 2),
                y: (AD + Number(Bp) / 4 + Bo / 6 - mDrawThickTing / 2),
                width: (mDrawThickFan + mDrawThickTing + mDrawThickFan / 2) * Number(mDrawSvgViewBox),
                height: Bk * Number(mDrawSvgViewBox),
                "fill": mDrawProductColor,
                "stroke": "#000000"
            };
            AB.append($.MicroSVG.makeSVG("rect", Bj));
            Bj = {
                id: AX + "_h3",
                x: (Bv - mDrawThickFan / 2),
                y: (AD + Number(Bp) / 4 + Bo * 5 / 6 - mDrawThickTing / 2),
                width: (mDrawThickFan + mDrawThickTing + mDrawThickFan / 2) * Number(mDrawSvgViewBox),
                height: Bk * Number(mDrawSvgViewBox),
                "fill": mDrawProductColor,
                "stroke": "#000000"
            };
            AB.append($.MicroSVG.makeSVG("rect", Bj));
            Bj = {
                id: AX + "_h1",
                x: (Bv + mDrawThickFan * 2 - As),
                y: (AD + Number(Bp) / 4),
                width: As * Number(mDrawSvgViewBox),
                height: Bo * Number(mDrawSvgViewBox),
                "fill": mDrawProductColor,
                "stroke": "#000000"
            };
            AB.append($.MicroSVG.makeSVG("rect", Bj));
            break;
        case "2":
            var Bo = (Number(Ai) + 2) * 2;
            var As = (Number(Y) - Number(Ai) * 2);
            var AO = (Number(AD) + Number(Bp) / 2 - Bo / 2);
            var Bv = (Number(AC) + 4 + (Number(Ai) * 3) * Number(mDrawSvgViewBox));
            Bj = {
                "mtag": "mzsstyle"
            };
            var AB = $($.MicroSVG.makeSVG("g", Bj));
            $(Aa).append(AB);
            Bj = {
                id: AX + "_h1",
                x: (Number(AC) + Number(Ai) * Number(mDrawSvgViewBox)),
                y: AO,
                width: As * Number(mDrawSvgViewBox),
                height: Bo * Number(mDrawSvgViewBox),
                "fill": mDrawProductColor,
                "stroke": "#000000"
            };
            AB.append($.MicroSVG.makeSVG("rect", Bj));
            Bj = {
                id: AX + "_l1",
                x1: Bv,
                y1: AO,
                x2: Bv,
                y2: (AO + Bo),
                "stroke": "#000000"
            };
            AB.append($.MicroSVG.makeSVG("line", Bj));
            Bj = {
                id: AX + "_t1",
                x: (Number(AC) + 4 + Number(Ai) * Number(mDrawSvgViewBox)),
                y: (Number(AD) + Number(Bp) / 2 + Bo / 4),
                "font-size": "16",
                "font-weight": "700",
                "fill": "#000000"
            };
            var Bx = $.MicroSVG.makeSVG("text", Bj);
            Bx.textContent = "拉";
            AB.append(Bx);
            break;
        case "3":
            var Bo = (Number(Ai) + 2) * 2;
            var As = (Number(Y) - Number(Ai) * 2 + Number(Ai));
            var Bk = 4;
            var BB = 12;
            var AO = (Number(AD) + Number(Bp) / 2 - BB);
            var Bv = (Number(AC) - 4 + (Number(Ai) + As - Number(Ai) * 2) * Number(mDrawSvgViewBox));
            Bj = {
                "mtag": "mzsstyle"
            };
            var AB = $($.MicroSVG.makeSVG("g", Bj));
            $(Aa).append(AB);
            Bj = {
                id: AX + "_h1",
                x: (Number(AC) + Number(Ai) / 2 * Number(mDrawSvgViewBox)),
                y: AO,
                width: As * Number(mDrawSvgViewBox),
                height: Bk * Number(mDrawSvgViewBox),
                "fill": "#FFFFFF",
                "stroke": "#000000",
                rx: "2",
                ry: "2",
                system: "1"
            };
            AB.append($.MicroSVG.makeSVG("rect", Bj));
            Bj = {
                id: AX + "_h2",
                x: (Number(AC) + Number(Ai) / 2 * Number(mDrawSvgViewBox) + As / 4),
                y: AO,
                width: As / 2 * Number(mDrawSvgViewBox),
                height: Bk * Number(mDrawSvgViewBox),
                "fill": mDrawProductColor,
                "stroke": "#000000"
            };
            AB.append($.MicroSVG.makeSVG("rect", Bj));
            Bj = {
                id: AX + "_h3",
                x: (Number(AC) + Number(Ai) / 2 * Number(mDrawSvgViewBox)),
                y: (AO + BB * 2 - Bk),
                width: As * Number(mDrawSvgViewBox),
                height: Bk * Number(mDrawSvgViewBox),
                "fill": "#FFFFFF",
                "stroke": "#000000",
                rx: "2",
                ry: "2",
                system: "1"
            };
            AB.append($.MicroSVG.makeSVG("rect", Bj));
            Bj = {
                id: AX + "_h4",
                x: (Number(AC) + Number(Ai) / 2 * Number(mDrawSvgViewBox) + As / 4),
                y: (AO + BB * 2 - Bk),
                width: As / 2 * Number(mDrawSvgViewBox),
                height: Bk * Number(mDrawSvgViewBox),
                "fill": mDrawProductColor,
                "stroke": "#000000"
            };
            AB.append($.MicroSVG.makeSVG("rect", Bj));
            break;
        default:
            Bj = {
                id: AX + "_h1",
                x: (Number(AC) + Number(Ai) / 2 - Number(Ad) / 2),
                y: (Number(AD) + Number(Bp) / 2 - Number(Bf) / 2),
                width: Ad,
                height: Bf,
                "fill": "#000000",
                "stroke": "#000000"
            };
            $(Aa).append($($.MicroSVG.makeSVG("rect", Bj)));
            Bj = {
                id: AX + "_h2",
                x: (Number(AC) + Number(Ai) / 2 - Number(Ad) / 2),
                y: (Number(AD) + Number(Bp) / 2 - Number(Ad) / 2),
                width: Bc,
                height: Q,
                "fill": "#000000",
                "stroke": "#000000"
            };
            $(Aa).append($($.MicroSVG.makeSVG("rect", Bj)))
        }
        break;
    case "L":
        Ap.setAttribute("style", "display:inline");
        AS.setAttribute("style", "display:inline");
        Ap.setAttribute("x1", AQ);
        Ap.setAttribute("y1", Aw);
        Ap.setAttribute("x2", AH);
        Ap.setAttribute("y2", (Number(p) + Number(Bp) / 2));
        AS.setAttribute("x1", AH);
        AS.setAttribute("y1", (Number(p) + Number(Bp) / 2));
        AS.setAttribute("x2", Ba);
        AS.setAttribute("y2", AV);
        switch (AE) {
        case "1":
            var Bk = 5;
            var Bo = Number(Bp) / 2;
            var As = Bk;
            var Bv = (Number(AC) + Number(Y) * Number(mDrawSvgViewBox) - mDrawThickFan * 2 - mDrawThickTing);
            Bj = {
                "mtag": "mzsstyle"
            };
            var AB = $($.MicroSVG.makeSVG("g", Bj));
            $(Aa).append(AB);
            Bj = {
                id: AX + "_h2",
                x: Bv,
                y: (AD + Number(Bp) / 4 + Bo / 6 - mDrawThickTing / 2),
                width: (mDrawThickFan + mDrawThickTing + mDrawThickFan / 2) * Number(mDrawSvgViewBox),
                height: Bk * Number(mDrawSvgViewBox),
                "fill": mDrawProductColor,
                "stroke": "#000000"
            };
            AB.append($.MicroSVG.makeSVG("rect", Bj));
            Bj = {
                id: AX + "_h3",
                x: Bv,
                y: (AD + Number(Bp) / 4 + Bo * 5 / 6 - mDrawThickTing / 2),
                width: (mDrawThickFan + mDrawThickTing + mDrawThickFan / 2) * Number(mDrawSvgViewBox),
                height: Bk * Number(mDrawSvgViewBox),
                "fill": mDrawProductColor,
                "stroke": "#000000"
            };
            AB.append($.MicroSVG.makeSVG("rect", Bj));
            Bj = {
                id: AX + "_h1",
                x: (Bv - 2),
                y: (AD + Number(Bp) / 4),
                width: As * Number(mDrawSvgViewBox),
                height: Bo * Number(mDrawSvgViewBox),
                "fill": mDrawProductColor,
                "stroke": "#000000"
            };
            AB.append($.MicroSVG.makeSVG("rect", Bj));
            break;
        case "2":
            var Bo = (Number(Ai) + 2) * 2;
            var As = (Number(Y) - Number(Ai) * 2);
            var AO = (Number(AD) + Number(Bp) / 2 - Bo / 2);
            var Bv = (Number(AC) - 4 + (Number(Ai) + As - Number(Ai) * 2) * Number(mDrawSvgViewBox));
            Bj = {
                "mtag": "mzsstyle"
            };
            var AB = $($.MicroSVG.makeSVG("g", Bj));
            $(Aa).append(AB);
            Bj = {
                id: AX + "_h1",
                x: (Number(AC) + Number(Ai) * Number(mDrawSvgViewBox)),
                y: AO,
                width: As * Number(mDrawSvgViewBox),
                height: Bo * Number(mDrawSvgViewBox),
                "fill": mDrawProductColor,
                "stroke": "#000000"
            };
            AB.append($.MicroSVG.makeSVG("rect", Bj));
            Bj = {
                id: AX + "_l1",
                x1: Bv,
                y1: AO,
                x2: Bv,
                y2: (AO + Bo),
                "stroke": "#000000"
            };
            AB.append($.MicroSVG.makeSVG("line", Bj));
            Bj = {
                id: AX + "_t1",
                x: (Number(AC) + (Number(Ai) + As - Number(Ai) * 2) * Number(mDrawSvgViewBox)),
                y: (Number(AD) + Number(Bp) / 2 + Bo / 4),
                "font-size": "16",
                "font-weight": "700",
                "fill": "#000000"
            };
            var Bx = $.MicroSVG.makeSVG("text", Bj);
            Bx.textContent = "拉";
            AB.append(Bx);
            break;
        case "3":
            var Bo = (Number(Ai) + 2) * 2;
            var As = (Number(Y) - Number(Ai) * 2 + Number(Ai));
            var Bk = 4;
            var BB = 12;
            var AO = (Number(AD) + Number(Bp) / 2 - BB);
            var Bv = (Number(AC) - 4 + (Number(Ai) + As - Number(Ai) * 2) * Number(mDrawSvgViewBox));
            Bj = {
                "mtag": "mzsstyle"
            };
            var AB = $($.MicroSVG.makeSVG("g", Bj));
            $(Aa).append(AB);
            Bj = {
                id: AX + "_h1",
                x: (Number(AC) + Number(Ai) / 2 * Number(mDrawSvgViewBox)),
                y: AO,
                width: As * Number(mDrawSvgViewBox),
                height: Bk * Number(mDrawSvgViewBox),
                "fill": "#FFFFFF",
                "stroke": "#000000",
                rx: "2",
                ry: "2",
                system: "1"
            };
            AB.append($.MicroSVG.makeSVG("rect", Bj));
            Bj = {
                id: AX + "_h2",
                x: (Number(AC) + Number(Ai) / 2 * Number(mDrawSvgViewBox) + As / 4),
                y: AO,
                width: As / 2 * Number(mDrawSvgViewBox),
                height: Bk * Number(mDrawSvgViewBox),
                "fill": mDrawProductColor,
                "stroke": "#000000"
            };
            AB.append($.MicroSVG.makeSVG("rect", Bj));
            Bj = {
                id: AX + "_h3",
                x: (Number(AC) + Number(Ai) / 2 * Number(mDrawSvgViewBox)),
                y: (AO + BB * 2 - Bk),
                width: As * Number(mDrawSvgViewBox),
                height: Bk * Number(mDrawSvgViewBox),
                "fill": "#FFFFFF",
                "stroke": "#000000",
                rx: "2",
                ry: "2",
                system: "1"
            };
            AB.append($.MicroSVG.makeSVG("rect", Bj));
            Bj = {
                id: AX + "_h4",
                x: (Number(AC) + Number(Ai) / 2 * Number(mDrawSvgViewBox) + As / 4),
                y: (AO + BB * 2 - Bk),
                width: As / 2 * Number(mDrawSvgViewBox),
                height: Bk * Number(mDrawSvgViewBox),
                "fill": mDrawProductColor,
                "stroke": "#000000"
            };
            AB.append($.MicroSVG.makeSVG("rect", Bj));
            break;
        default:
            Bj = {
                id: AX + "_h1",
                x: (Number(Be) + Number(Ai) / 2 - Number(Ad) / 2),
                y: (Number(AD) + Number(Bp) / 2 - Number(Bf) / 2),
                width: Ad,
                height: Bf,
                "fill": "#000000",
                "stroke": "#000000"
            };
            $(Aa).append($($.MicroSVG.makeSVG("rect", Bj)));
            Bj = {
                id: AX + "_h2",
                x: (Number(Ba) + Number(Ai) / 2 - Number(Ad) / 2) - Bc + Ad,
                y: (Number(AD) + Number(Bp) / 2 - Number(Ad) / 2),
                width: Bc,
                height: Q,
                "fill": "#000000",
                "stroke": "#000000"
            };
            $(Aa).append($($.MicroSVG.makeSVG("rect", Bj)))
        }
        break;
    case "B":
        Ap.setAttribute("style", "display:inline");
        AS.setAttribute("style", "display:inline");
        Ap.setAttribute("x1", AH);
        Ap.setAttribute("y1", L);
        Ap.setAttribute("x2", (Number(AW) + Number(Y) / 2));
        Ap.setAttribute("y2", H);
        AS.setAttribute("x1", (Number(AW) + Number(Y) / 2));
        AS.setAttribute("y1", H);
        AS.setAttribute("x2", AQ);
        AS.setAttribute("y2", Aw);
        Bj = {
            id: AX + "_h1",
            x: (Number(AW) + Number(Y) / 2 - Number(Bf) / 2),
            y: (Number(p) + Number(Ai) / 2 - Number(Ad) / 2),
            width: Bf,
            height: Ad,
            "fill": "#000000",
            "stroke": "#000000"
        };
        $(Aa).append($($.MicroSVG.makeSVG("rect", Bj)));
        Bj = {
            id: AX + "_h2",
            x: (Number(AW) + Number(Y) / 2) - Q / 2,
            y: (Number(p) + Number(Ai) / 2 - Number(Ad) / 2),
            width: Q,
            height: Bc,
            "fill": "#000000",
            "stroke": "#000000"
        };
        $(Aa).append($($.MicroSVG.makeSVG("rect", Bj)));
        break;
    case "T":
        Ap.setAttribute("style", "display:inline");
        AS.setAttribute("style", "display:inline");
        Ap.setAttribute("x1", a);
        Ap.setAttribute("y1", H);
        Ap.setAttribute("x2", (Number(AW) + Number(Y) / 2));
        Ap.setAttribute("y2", L);
        AS.setAttribute("x1", (Number(AW) + Number(Y) / 2));
        AS.setAttribute("y1", L);
        AS.setAttribute("x2", Ba);
        AS.setAttribute("y2", AV);
        Bj = {
            id: AX + "_h1",
            x: (Number(AW) + Number(Y) / 2 - Number(Bf) / 2),
            y: (Number(p) + Number(Bp) - Number(Ai) / 2 - Number(Ad) / 2),
            width: Bf,
            height: Ad,
            "fill": "#000000",
            "stroke": "#000000"
        };
        $(Aa).append($($.MicroSVG.makeSVG("rect", Bj)));
        Bj = {
            id: AX + "_h2",
            x: (Number(AW) + Number(Y) / 2) - Q / 2,
            y: (Number(p) + Number(Bp) - Number(Ai) / 2 - Bc + Number(Ad) / 2),
            width: Q,
            height: Bc,
            "fill": "#000000",
            "stroke": "#000000"
        };
        $(Aa).append($($.MicroSVG.makeSVG("rect", Bj)));
        break;
    case "RB":
        Ap.setAttribute("style", "display:inline");
        AS.setAttribute("style", "display:inline");
        AR.setAttribute("style", "display:inline");
        By.setAttribute("style", "display:inline");
        Ap.setAttribute("x1", AH);
        Ap.setAttribute("x2", AQ);
        Ap.setAttribute("y1", L);
        Ap.setAttribute("y2", (Number(p) + Number(Bp) / 2));
        AS.setAttribute("x1", AQ);
        AS.setAttribute("x2", a);
        AS.setAttribute("y1", (Number(p) + Number(Bp) / 2));
        AS.setAttribute("y2", H);
        AR.setAttribute("x1", AH);
        AR.setAttribute("y1", L);
        AR.setAttribute("x2", (Number(AW) + Number(Y) / 2));
        AR.setAttribute("y2", H);
        By.setAttribute("x1", (Number(AW) + Number(Y) / 2));
        By.setAttribute("y1", H);
        By.setAttribute("x2", AQ);
        By.setAttribute("y2", Aw);
        Bj = {
            id: AX + "_h1",
            x: (Number(AC) + Number(Ai) / 2 - Number(Ad) / 2),
            y: (Number(AD) + Number(Bp) / 2 - Number(Bf) / 2),
            width: Ad,
            height: Bf,
            "fill": "#000000",
            "stroke": "#000000"
        };
        $(Aa).append($($.MicroSVG.makeSVG("rect", Bj)));
        Bj = {
            id: AX + "_h2",
            x: (Number(AC) + Number(Ai) / 2 - Number(Ad) / 2),
            y: (Number(AD) + Number(Bp) / 2 - Number(Ad) / 2),
            width: Bc,
            height: Q,
            "fill": "#000000",
            "stroke": "#000000"
        };
        $(Aa).append($($.MicroSVG.makeSVG("rect", Bj)));
        break;
    case "RT":
        Ap.setAttribute("style", "display:inline");
        AS.setAttribute("style", "display:inline");
        AR.setAttribute("style", "display:inline");
        By.setAttribute("style", "display:inline");
        Ap.setAttribute("x1", AH);
        Ap.setAttribute("x2", AQ);
        Ap.setAttribute("y1", L);
        Ap.setAttribute("y2", (Number(p) + Number(Bp) / 2));
        AS.setAttribute("x1", AQ);
        AS.setAttribute("x2", a);
        AS.setAttribute("y1", (Number(p) + Number(Bp) / 2));
        AS.setAttribute("y2", H);
        AR.setAttribute("x1", a);
        AR.setAttribute("y1", H);
        AR.setAttribute("x2", (Number(AW) + Number(Y) / 2));
        AR.setAttribute("y2", L);
        By.setAttribute("x1", (Number(AW) + Number(Y) / 2));
        By.setAttribute("y1", L);
        By.setAttribute("x2", Ba);
        By.setAttribute("y2", AV);
        Bj = {
            id: AX + "_h1",
            x: (Number(AC) + Number(Ai) / 2 - Number(Ad) / 2),
            y: (Number(AD) + Number(Bp) / 2 - Number(Bf) / 2),
            width: Ad,
            height: Bf,
            "fill": "#000000",
            "stroke": "#000000"
        };
        $(Aa).append($($.MicroSVG.makeSVG("rect", Bj)));
        Bj = {
            id: AX + "_h2",
            x: (Number(AC) + Number(Ai) / 2 - Number(Ad) / 2),
            y: (Number(AD) + Number(Bp) / 2 - Number(Ad) / 2),
            width: Bc,
            height: Q,
            "fill": "#000000",
            "stroke": "#000000"
        };
        $(Aa).append($($.MicroSVG.makeSVG("rect", Bj)));
        break;
    case "LB":
        Ap.setAttribute("style", "display:inline");
        AS.setAttribute("style", "display:inline");
        AR.setAttribute("style", "display:inline");
        By.setAttribute("style", "display:inline");
        Ap.setAttribute("x1", AQ);
        Ap.setAttribute("y1", Aw);
        Ap.setAttribute("x2", AH);
        Ap.setAttribute("y2", (Number(p) + Number(Bp) / 2));
        AS.setAttribute("x1", AH);
        AS.setAttribute("y1", (Number(p) + Number(Bp) / 2));
        AS.setAttribute("x2", Ba);
        AS.setAttribute("y2", AV);
        AR.setAttribute("x1", AH);
        AR.setAttribute("y1", L);
        AR.setAttribute("x2", (Number(AW) + Number(Y) / 2));
        AR.setAttribute("y2", H);
        By.setAttribute("x1", (Number(AW) + Number(Y) / 2));
        By.setAttribute("y1", H);
        By.setAttribute("x2", AQ);
        By.setAttribute("y2", Aw);
        Bj = {
            id: AX + "_h1",
            x: (Number(Be) + Number(Ai) / 2 - Number(Ad) / 2),
            y: (Number(AD) + Number(Bp) / 2 - Number(Bf) / 2),
            width: Ad,
            height: Bf,
            "fill": "#000000",
            "stroke": "#000000"
        };
        $(Aa).append($($.MicroSVG.makeSVG("rect", Bj)));
        Bj = {
            id: AX + "_h2",
            x: (Number(Ba) + Number(Ai) / 2 - Number(Ad) / 2) - Bc + Ad,
            y: (Number(AD) + Number(Bp) / 2 - Number(Ad) / 2),
            width: Bc,
            height: Q,
            "fill": "#000000",
            "stroke": "#000000"
        };
        $(Aa).append($($.MicroSVG.makeSVG("rect", Bj)));
        break;
    case "LT":
        Ap.setAttribute("style", "display:inline");
        AS.setAttribute("style", "display:inline");
        AR.setAttribute("style", "display:inline");
        By.setAttribute("style", "display:inline");
        Ap.setAttribute("x1", AQ);
        Ap.setAttribute("y1", Aw);
        Ap.setAttribute("x2", AH);
        Ap.setAttribute("y2", (Number(p) + Number(Bp) / 2));
        AS.setAttribute("x1", AH);
        AS.setAttribute("y1", (Number(p) + Number(Bp) / 2));
        AS.setAttribute("x2", Ba);
        AS.setAttribute("y2", AV);
        AR.setAttribute("x1", a);
        AR.setAttribute("y1", H);
        AR.setAttribute("x2", (Number(AW) + Number(Y) / 2));
        AR.setAttribute("y2", L);
        By.setAttribute("x1", (Number(AW) + Number(Y) / 2));
        By.setAttribute("y1", L);
        By.setAttribute("x2", Ba);
        By.setAttribute("y2", AV);
        Bj = {
            id: AX + "_h1",
            x: (Number(Be) + Number(Ai) / 2 - Number(Ad) / 2),
            y: (Number(AD) + Number(Bp) / 2 - Number(Bf) / 2),
            width: Ad,
            height: Bf,
            "fill": "#000000",
            "stroke": "#000000"
        };
        $(Aa).append($($.MicroSVG.makeSVG("rect", Bj)));
        Bj = {
            id: AX + "_h2",
            x: (Number(Ba) + Number(Ai) / 2 - Number(Ad) / 2) - Bc + Ad,
            y: (Number(AD) + Number(Bp) / 2 - Number(Ad) / 2),
            width: Bc,
            height: Q,
            "fill": "#000000",
            "stroke": "#000000"
        };
        $(Aa).append($($.MicroSVG.makeSVG("rect", Bj)));
        break;
    case "PT":
        Ap.setAttribute("style", "display:inline");
        AS.setAttribute("style", "display:inline");
        Ap.setAttribute("x1", AH);
        Ap.setAttribute("x2", Ba);
        Ap.setAttribute("y1", L);
        Ap.setAttribute("y2", AV);
        AS.setAttribute("x1", AQ);
        AS.setAttribute("x2", a);
        AS.setAttribute("y1", Aw);
        AS.setAttribute("y2", H);
        Bj = {
            id: AX + "_h1",
            x: (Number(AC) + Number(Ai) / 2 - Number(Ad) / 2),
            y: (Number(AD) + Number(Bp) / 2 - Number(Bf) / 2),
            width: Ad,
            height: Bf,
            "fill": "#000000",
            "stroke": "#000000"
        };
        $(Aa).append($($.MicroSVG.makeSVG("rect", Bj)));
        Bj = {
            id: AX + "_h2",
            x: (Number(AC) + Number(Ai) / 2 - Number(Ad) / 2),
            y: (Number(AD) + Number(Bp) / 2 - Number(Ad) / 2),
            width: Bc,
            height: Q,
            "fill": "#000000",
            "stroke": "#000000"
        };
        $(Aa).append($($.MicroSVG.makeSVG("rect", Bj)));
        Bj = {
            id: AX + "_h3",
            x: (Number(Be) + Number(Ai) / 2 - Number(Ad) / 2),
            y: (Number(AD) + Number(Bp) / 2 - Number(Bf) / 2),
            width: Ad,
            height: Bf,
            "fill": "#000000",
            "stroke": "#000000"
        };
        $(Aa).append($($.MicroSVG.makeSVG("rect", Bj)));
        Bj = {
            id: AX + "_h4",
            x: (Number(Ba) + Number(Ai) / 2 - Number(Ad) / 2) - Bc + Ad,
            y: (Number(AD) + Number(Bp) / 2 - Number(Ad) / 2),
            width: Bc,
            height: Q,
            "fill": "#000000",
            "stroke": "#000000"
        };
        $(Aa).append($($.MicroSVG.makeSVG("rect", Bj)));
        break
    }
    $("[mtype='" + mDrawFlag_Sw + "']").each(function(g, l) {
        var r = l.parentNode;
        if (r.id == AX) {
            r.removeChild(l)
        }
    });
    var t = $("#" + AX)[0].getAttribute("msw");
    if (t == "Y") {
        var BC = 5;
        var C = 8;
        if (Bb == "Y") {
            var BA = (Ba - a) / (Number(BC) * mDrawSvgViewBox)
        } else {
            var BA = (D - A4) / (Number(BC) * mDrawSvgViewBox)
        }
        var A8 = document.createElementNS(mDrawSvgNS, "g");
        A8.setAttributeNS(null, "mtype", mDrawFlag_Sw);
        if (Bb == "Y") {
            switch (e) {
            case "T":
                for (i = 1; i < C; i++) {
                    var A3 = document.createElementNS(mDrawSvgNS, "line");
                    A3.setAttributeNS(null, "x1", Number(a));
                    A3.setAttributeNS(null, "y1", Number(L) + Number(i) * Number(BC * mDrawSvgViewBox));
                    A3.setAttributeNS(null, "x2", Number(Ba));
                    A3.setAttributeNS(null, "y2", Number(Aw) + Number(i) * Number(BC * mDrawSvgViewBox));
                    A3.setAttributeNS(null, "stroke", "black");
                    A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    A8.appendChild(A3);
                    Aa.appendChild(A8)
                }
                for (i = 1; i < BA; i++) {
                    var A3 = document.createElementNS(mDrawSvgNS, "line");
                    A3.setAttributeNS(null, "x1", Number(a) + Number(i) * Number(BC * mDrawSvgViewBox));
                    A3.setAttributeNS(null, "y1", Number(L));
                    A3.setAttributeNS(null, "x2", Number(a) + Number(i) * Number(BC * mDrawSvgViewBox));
                    A3.setAttributeNS(null, "y2", Number(Aw) + Number(C - 1) * Number(BC * mDrawSvgViewBox));
                    A3.setAttributeNS(null, "stroke", "black");
                    A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    A8.appendChild(A3);
                    Aa.appendChild(A8)
                }
                break;
            default:
                for (i = 1; i < C; i++) {
                    var A3 = document.createElementNS(mDrawSvgNS, "line");
                    A3.setAttributeNS(null, "x1", Number(a));
                    A3.setAttributeNS(null, "y1", Number(H) - Number(i) * Number(BC * mDrawSvgViewBox));
                    A3.setAttributeNS(null, "x2", Number(Ba));
                    A3.setAttributeNS(null, "y2", Number(AV) - Number(i) * Number(BC * mDrawSvgViewBox));
                    A3.setAttributeNS(null, "stroke", "black");
                    A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    A8.appendChild(A3);
                    Aa.appendChild(A8)
                }
                for (i = 1; i < BA; i++) {
                    var A3 = document.createElementNS(mDrawSvgNS, "line");
                    A3.setAttributeNS(null, "x1", Number(a) + Number(i) * Number(BC * mDrawSvgViewBox));
                    A3.setAttributeNS(null, "y1", Number(H));
                    A3.setAttributeNS(null, "x2", Number(a) + Number(i) * Number(BC * mDrawSvgViewBox));
                    A3.setAttributeNS(null, "y2", Number(AV) - Number(C - 1) * Number(BC * mDrawSvgViewBox));
                    A3.setAttributeNS(null, "stroke", "black");
                    A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    A8.appendChild(A3);
                    Aa.appendChild(A8)
                }
            }
        } else {
            switch (e) {
            case "T":
                for (i = 1; i < C; i++) {
                    var A3 = document.createElementNS(mDrawSvgNS, "line");
                    A3.setAttributeNS(null, "x1", Number(A4));
                    A3.setAttributeNS(null, "y1", Number(AU) + Number(i) * Number(BC * mDrawSvgViewBox));
                    A3.setAttributeNS(null, "x2", Number(D));
                    A3.setAttributeNS(null, "y2", Number(m) + Number(i) * Number(BC * mDrawSvgViewBox));
                    A3.setAttributeNS(null, "stroke", "black");
                    A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    A8.appendChild(A3);
                    Aa.appendChild(A8)
                }
                for (i = 1; i < BA; i++) {
                    var A3 = document.createElementNS(mDrawSvgNS, "line");
                    A3.setAttributeNS(null, "x1", Number(A4) + Number(i) * Number(BC * mDrawSvgViewBox));
                    A3.setAttributeNS(null, "y1", Number(AU));
                    A3.setAttributeNS(null, "x2", Number(A4) + Number(i) * Number(BC * mDrawSvgViewBox));
                    A3.setAttributeNS(null, "y2", Number(m) + Number(C - 1) * Number(BC * mDrawSvgViewBox));
                    A3.setAttributeNS(null, "stroke", "black");
                    A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    A8.appendChild(A3);
                    Aa.appendChild(A8)
                }
                break;
            default:
                for (i = 1; i < C; i++) {
                    var A3 = document.createElementNS(mDrawSvgNS, "line");
                    A3.setAttributeNS(null, "x1", Number(A4));
                    A3.setAttributeNS(null, "y1", Number(A1) - Number(i) * Number(BC * mDrawSvgViewBox));
                    A3.setAttributeNS(null, "x2", Number(D));
                    A3.setAttributeNS(null, "y2", Number(Bq) - Number(i) * Number(BC * mDrawSvgViewBox));
                    A3.setAttributeNS(null, "stroke", "black");
                    A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    A8.appendChild(A3);
                    Aa.appendChild(A8)
                }
                for (i = 1; i < BA; i++) {
                    var A3 = document.createElementNS(mDrawSvgNS, "line");
                    A3.setAttributeNS(null, "x1", Number(A4) + Number(i) * Number(BC * mDrawSvgViewBox));
                    A3.setAttributeNS(null, "y1", Number(A1));
                    A3.setAttributeNS(null, "x2", Number(A4) + Number(i) * Number(BC * mDrawSvgViewBox));
                    A3.setAttributeNS(null, "y2", Number(Bq) - Number(C - 1) * Number(BC * mDrawSvgViewBox));
                    A3.setAttributeNS(null, "stroke", "black");
                    A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    A8.appendChild(A3);
                    Aa.appendChild(A8)
                }
            }
        }
    }
    $("[mtype='" + mDrawFlag_Fdt + "']").each(function(g, l) {
        var r = l.parentNode;
        if (r.id == AX) {
            r.removeChild(l)
        }
    });
    var AF = $("#" + AX)[0].getAttribute("mfdt");
    var s = Number($("#" + AX).attr("mfdtstyle"));
    if (isNaN(s)) {
        s = 1
    }
    if (AF == "Y") {
        var w = mDrawPixelPerM * 22.5 / 1000;
        var Bd = mDrawPixelPerM * 110 / 1000;
        var Bz = 0;
        var Ak, B;
        var Aj, S;
        if (t == "Y") {
            if (e == "T") {
                Aj = Number(L) + Number(C) * Number(BC * mDrawSvgViewBox);
                S = Number(H)
            } else {
                Aj = Number(L);
                S = Number(H) - Number(C) * Number(BC * mDrawSvgViewBox)
            }
        } else {
            Aj = Number(L);
            S = Number(H)
        }
        if (Bb == "Y") {
            Ak = AH;
            B = AQ
        } else {
            Ak = A9;
            B = Be
        }
        var A8 = document.createElementNS(mDrawSvgNS, "g");
        A8.setAttributeNS(null, "mtype", mDrawFlag_Fdt);
        switch (s) {
        case 1:
            var F = S;
            var u = (Number(Number(H)) - Number(Aj));
            var G = Bd * 2 * mDrawSvgViewBox * 4 / 5;
            var V = Bd * 2 * mDrawSvgViewBox * 3 / 5;
            var o = 0;
            var J;
            var AT;
            switch (e) {
            case "L":
            case "LT":
            case "LB":
                Bz = Aj + u / 2;
                var W = Bz;
                J = Bz - Bd * mDrawSvgViewBox;
                while (Number(Bz) < Number(F)) {
                    var A3 = document.createElementNS(mDrawSvgNS, "line");
                    A3.setAttributeNS(null, "x1", Number(Ak));
                    if (o == 0) {
                        A3.setAttributeNS(null, "y1", Number(Bz) + w * mDrawSvgViewBox);
                        A3.setAttributeNS(null, "x2", Number(B) - G);
                        A3.setAttributeNS(null, "y2", Number(Bz) + w * mDrawSvgViewBox)
                    } else {
                        A3.setAttributeNS(null, "y1", Number(Bz));
                        A3.setAttributeNS(null, "x2", Number(B));
                        A3.setAttributeNS(null, "y2", Number(Bz))
                    }
                    A3.setAttributeNS(null, "stroke", "black");
                    A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    A8.appendChild(A3);
                    Aa.appendChild(A8);
                    var A3 = document.createElementNS(mDrawSvgNS, "line");
                    A3.setAttributeNS(null, "x1", Number(Ak));
                    if (o == 0) {
                        A3.setAttributeNS(null, "y1", Number(Bz) + Number(w * mDrawSvgViewBox) + w * mDrawSvgViewBox);
                        A3.setAttributeNS(null, "x2", Number(B) - G);
                        A3.setAttributeNS(null, "y2", Number(Bz) + Number(w * mDrawSvgViewBox) + w * mDrawSvgViewBox)
                    } else {
                        A3.setAttributeNS(null, "y1", Number(Bz) + Number(w * mDrawSvgViewBox));
                        A3.setAttributeNS(null, "x2", Number(B));
                        A3.setAttributeNS(null, "y2", Number(Bz) + Number(w * mDrawSvgViewBox))
                    }
                    A3.setAttributeNS(null, "stroke", "black");
                    A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    A8.appendChild(A3);
                    Aa.appendChild(A8);
                    o++;
                    Bz = Bz + Number(w * mDrawSvgViewBox) + Number(Bd * mDrawSvgViewBox)
                }
                Bz = W - Bd * mDrawSvgViewBox;
                var Ac = Aj;
                AT = W + (w + Bd) * mDrawSvgViewBox;
                while (Number(Bz) > Number(Ac)) {
                    var A3 = document.createElementNS(mDrawSvgNS, "line");
                    A3.setAttributeNS(null, "x1", Number(Ak));
                    A3.setAttributeNS(null, "y1", Number(Bz));
                    A3.setAttributeNS(null, "x2", Number(B));
                    A3.setAttributeNS(null, "y2", Number(Bz));
                    A3.setAttributeNS(null, "stroke", "black");
                    A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    A8.appendChild(A3);
                    Aa.appendChild(A8);
                    var A3 = document.createElementNS(mDrawSvgNS, "line");
                    A3.setAttributeNS(null, "x1", Number(Ak));
                    A3.setAttributeNS(null, "y1", Number(Bz) - Number(w * mDrawSvgViewBox));
                    A3.setAttributeNS(null, "x2", Number(B));
                    A3.setAttributeNS(null, "y2", Number(Bz) - Number(w * mDrawSvgViewBox));
                    A3.setAttributeNS(null, "stroke", "black");
                    A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    A8.appendChild(A3);
                    Aa.appendChild(A8);
                    Bz = Bz - Number(w * mDrawSvgViewBox) - Number(Bd * mDrawSvgViewBox)
                }
                var A3 = document.createElementNS(mDrawSvgNS, "line");
                A3.setAttributeNS(null, "x1", Number(B) - G);
                A3.setAttributeNS(null, "y1", J);
                A3.setAttributeNS(null, "x2", Number(B) - G);
                A3.setAttributeNS(null, "y2", AT);
                A3.setAttributeNS(null, "stroke", "black");
                A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                A8.appendChild(A3);
                Aa.appendChild(A8);
                var A3 = document.createElementNS(mDrawSvgNS, "line");
                A3.setAttributeNS(null, "x1", Number(B) - G + w * mDrawSvgViewBox);
                A3.setAttributeNS(null, "y1", J);
                A3.setAttributeNS(null, "x2", Number(B) - G + w * mDrawSvgViewBox);
                A3.setAttributeNS(null, "y2", AT);
                A3.setAttributeNS(null, "stroke", "black");
                A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                A8.appendChild(A3);
                Aa.appendChild(A8);
                break;
            case "R":
            case "RT":
            case "RB":
                Bz = Aj + u / 2;
                var W = Bz;
                J = Bz - Bd * mDrawSvgViewBox;
                while (Number(Bz) < Number(F)) {
                    var A3 = document.createElementNS(mDrawSvgNS, "line");
                    A3.setAttributeNS(null, "x2", Number(B));
                    if (o == 0) {
                        A3.setAttributeNS(null, "x1", Number(Ak) + G);
                        A3.setAttributeNS(null, "y1", Number(Bz) + w * mDrawSvgViewBox);
                        A3.setAttributeNS(null, "y2", Number(Bz) + w * mDrawSvgViewBox)
                    } else {
                        A3.setAttributeNS(null, "x1", Number(Ak));
                        A3.setAttributeNS(null, "y1", Number(Bz));
                        A3.setAttributeNS(null, "y2", Number(Bz))
                    }
                    A3.setAttributeNS(null, "stroke", "black");
                    A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    A8.appendChild(A3);
                    Aa.appendChild(A8);
                    var A3 = document.createElementNS(mDrawSvgNS, "line");
                    A3.setAttributeNS(null, "x2", Number(B));
                    if (o == 0) {
                        A3.setAttributeNS(null, "x1", Number(Ak) + G);
                        A3.setAttributeNS(null, "y1", Number(Bz) + Number(w * mDrawSvgViewBox) + w * mDrawSvgViewBox);
                        A3.setAttributeNS(null, "y2", Number(Bz) + Number(w * mDrawSvgViewBox) + w * mDrawSvgViewBox)
                    } else {
                        A3.setAttributeNS(null, "x1", Number(Ak));
                        A3.setAttributeNS(null, "y1", Number(Bz) + Number(w * mDrawSvgViewBox));
                        A3.setAttributeNS(null, "y2", Number(Bz) + Number(w * mDrawSvgViewBox))
                    }
                    A3.setAttributeNS(null, "stroke", "black");
                    A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    A8.appendChild(A3);
                    Aa.appendChild(A8);
                    o++;
                    Bz = Bz + Number(w * mDrawSvgViewBox) + Number(Bd * mDrawSvgViewBox)
                }
                Bz = W - Bd * mDrawSvgViewBox;
                var Ac = Aj;
                AT = W + (w + Bd) * mDrawSvgViewBox;
                while (Number(Bz) > Number(Ac)) {
                    var A3 = document.createElementNS(mDrawSvgNS, "line");
                    A3.setAttributeNS(null, "x1", Number(Ak));
                    A3.setAttributeNS(null, "y1", Number(Bz));
                    A3.setAttributeNS(null, "x2", Number(B));
                    A3.setAttributeNS(null, "y2", Number(Bz));
                    A3.setAttributeNS(null, "stroke", "black");
                    A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    A8.appendChild(A3);
                    Aa.appendChild(A8);
                    var A3 = document.createElementNS(mDrawSvgNS, "line");
                    A3.setAttributeNS(null, "x1", Number(Ak));
                    A3.setAttributeNS(null, "y1", Number(Bz) - Number(w * mDrawSvgViewBox));
                    A3.setAttributeNS(null, "x2", Number(B));
                    A3.setAttributeNS(null, "y2", Number(Bz) - Number(w * mDrawSvgViewBox));
                    A3.setAttributeNS(null, "stroke", "black");
                    A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    A8.appendChild(A3);
                    Aa.appendChild(A8);
                    Bz = Bz - Number(w * mDrawSvgViewBox) - Number(Bd * mDrawSvgViewBox)
                }
                var A3 = document.createElementNS(mDrawSvgNS, "line");
                A3.setAttributeNS(null, "x1", Number(Ak) + G - w * mDrawSvgViewBox);
                A3.setAttributeNS(null, "y1", J);
                A3.setAttributeNS(null, "x2", Number(Ak) + G - w * mDrawSvgViewBox);
                A3.setAttributeNS(null, "y2", AT);
                A3.setAttributeNS(null, "stroke", "black");
                A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                A8.appendChild(A3);
                Aa.appendChild(A8);
                var A3 = document.createElementNS(mDrawSvgNS, "line");
                A3.setAttributeNS(null, "x1", Number(Ak) + G);
                A3.setAttributeNS(null, "y1", J);
                A3.setAttributeNS(null, "x2", Number(Ak) + G);
                A3.setAttributeNS(null, "y2", AT);
                A3.setAttributeNS(null, "stroke", "black");
                A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                A8.appendChild(A3);
                Aa.appendChild(A8);
                break;
            case "T":
                Bz = S - Number(10 * mDrawSvgViewBox);
                var W = Bz;
                var o = 0;
                var K = Number(Ak) + (Number(B) - Number(Ak)) / 2 - V;
                var q = Number(Ak) + (Number(B) - Number(Ak)) / 2 + V - 5;
                while (Number(Bz) > Number(Aj)) {
                    var A3 = document.createElementNS(mDrawSvgNS, "line");
                    A3.setAttributeNS(null, "x1", Number(Ak));
                    A3.setAttributeNS(null, "y1", Number(Bz));
                    if (o == 0) {
                        A3.setAttributeNS(null, "x2", Number(K))
                    } else {
                        A3.setAttributeNS(null, "x2", Number(B))
                    }
                    A3.setAttributeNS(null, "y2", Number(Bz));
                    A3.setAttributeNS(null, "stroke", "black");
                    A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    A8.appendChild(A3);
                    Aa.appendChild(A8);
                    if (o == 0) {
                        var A3 = document.createElementNS(mDrawSvgNS, "line");
                        A3.setAttributeNS(null, "x1", Number(q) + w * mDrawSvgViewBox);
                        A3.setAttributeNS(null, "y1", Number(Bz));
                        A3.setAttributeNS(null, "x2", Number(B));
                        A3.setAttributeNS(null, "y2", Number(Bz));
                        A3.setAttributeNS(null, "stroke", "black");
                        A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                        A8.appendChild(A3);
                        Aa.appendChild(A8)
                    }
                    var A3 = document.createElementNS(mDrawSvgNS, "line");
                    A3.setAttributeNS(null, "x1", Number(Ak));
                    A3.setAttributeNS(null, "y1", Number(Bz) - Number(w * mDrawSvgViewBox));
                    if (o == 0) {
                        A3.setAttributeNS(null, "x2", Number(K))
                    } else {
                        A3.setAttributeNS(null, "x2", Number(B))
                    }
                    A3.setAttributeNS(null, "y2", Number(Bz) - Number(w * mDrawSvgViewBox));
                    A3.setAttributeNS(null, "stroke", "black");
                    A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    A8.appendChild(A3);
                    Aa.appendChild(A8);
                    if (o == 0) {
                        var A3 = document.createElementNS(mDrawSvgNS, "line");
                        A3.setAttributeNS(null, "x1", Number(q) + w * mDrawSvgViewBox);
                        A3.setAttributeNS(null, "y1", Number(Bz) - Number(w * mDrawSvgViewBox));
                        A3.setAttributeNS(null, "x2", Number(B));
                        A3.setAttributeNS(null, "y2", Number(Bz) - Number(w * mDrawSvgViewBox));
                        A3.setAttributeNS(null, "stroke", "black");
                        A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                        A8.appendChild(A3);
                        Aa.appendChild(A8)
                    }
                    o++;
                    Bz = Bz - Number(w * mDrawSvgViewBox) - Number(Bd * mDrawSvgViewBox)
                }
                var A3 = document.createElementNS(mDrawSvgNS, "line");
                A3.setAttributeNS(null, "x1", K);
                A3.setAttributeNS(null, "y1", W - (Bd + w) * mDrawSvgViewBox);
                A3.setAttributeNS(null, "x2", K);
                A3.setAttributeNS(null, "y2", S);
                A3.setAttributeNS(null, "stroke", "black");
                A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                A8.appendChild(A3);
                Aa.appendChild(A8);
                var A3 = document.createElementNS(mDrawSvgNS, "line");
                A3.setAttributeNS(null, "x1", K + w * mDrawSvgViewBox);
                A3.setAttributeNS(null, "y1", W - (Bd + w) * mDrawSvgViewBox);
                A3.setAttributeNS(null, "x2", K + w * mDrawSvgViewBox);
                A3.setAttributeNS(null, "y2", S);
                A3.setAttributeNS(null, "stroke", "black");
                A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                A8.appendChild(A3);
                Aa.appendChild(A8);
                var A3 = document.createElementNS(mDrawSvgNS, "line");
                A3.setAttributeNS(null, "x1", q);
                A3.setAttributeNS(null, "y1", W - (Bd + w) * mDrawSvgViewBox);
                A3.setAttributeNS(null, "x2", q);
                A3.setAttributeNS(null, "y2", S);
                A3.setAttributeNS(null, "stroke", "black");
                A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                A8.appendChild(A3);
                Aa.appendChild(A8);
                var A3 = document.createElementNS(mDrawSvgNS, "line");
                A3.setAttributeNS(null, "x1", q + w * mDrawSvgViewBox);
                A3.setAttributeNS(null, "y1", W - (Bd + w) * mDrawSvgViewBox);
                A3.setAttributeNS(null, "x2", q + w * mDrawSvgViewBox);
                A3.setAttributeNS(null, "y2", S);
                A3.setAttributeNS(null, "stroke", "black");
                A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                A8.appendChild(A3);
                Aa.appendChild(A8);
                break;
            case "B":
                Bz = Aj + Number(10 * mDrawSvgViewBox);
                var W = Bz;
                var o = 0;
                var K = Number(Ak) + (Number(B) - Number(Ak)) / 2 - V;
                var q = Number(Ak) + (Number(B) - Number(Ak)) / 2 + V - 5;
                while (Number(Bz) < Number(S)) {
                    var A3 = document.createElementNS(mDrawSvgNS, "line");
                    A3.setAttributeNS(null, "x1", Number(Ak));
                    A3.setAttributeNS(null, "y1", Number(Bz));
                    if (o == 0) {
                        A3.setAttributeNS(null, "x2", Number(K))
                    } else {
                        A3.setAttributeNS(null, "x2", Number(B))
                    }
                    A3.setAttributeNS(null, "y2", Number(Bz));
                    A3.setAttributeNS(null, "stroke", "black");
                    A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    A8.appendChild(A3);
                    Aa.appendChild(A8);
                    if (o == 0) {
                        var A3 = document.createElementNS(mDrawSvgNS, "line");
                        A3.setAttributeNS(null, "x1", Number(q) + w * mDrawSvgViewBox);
                        A3.setAttributeNS(null, "y1", Number(Bz));
                        A3.setAttributeNS(null, "x2", Number(B));
                        A3.setAttributeNS(null, "y2", Number(Bz));
                        A3.setAttributeNS(null, "stroke", "black");
                        A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                        A8.appendChild(A3);
                        Aa.appendChild(A8)
                    }
                    var A3 = document.createElementNS(mDrawSvgNS, "line");
                    A3.setAttributeNS(null, "x1", Number(Ak));
                    A3.setAttributeNS(null, "y1", Number(Bz) + Number(w * mDrawSvgViewBox));
                    if (o == 0) {
                        A3.setAttributeNS(null, "x2", Number(K))
                    } else {
                        A3.setAttributeNS(null, "x2", Number(B))
                    }
                    A3.setAttributeNS(null, "y2", Number(Bz) + Number(w * mDrawSvgViewBox));
                    A3.setAttributeNS(null, "stroke", "black");
                    A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                    A8.appendChild(A3);
                    Aa.appendChild(A8);
                    if (o == 0) {
                        var A3 = document.createElementNS(mDrawSvgNS, "line");
                        A3.setAttributeNS(null, "x1", Number(q) + w * mDrawSvgViewBox);
                        A3.setAttributeNS(null, "y1", Number(Bz) + Number(w * mDrawSvgViewBox));
                        A3.setAttributeNS(null, "x2", Number(B));
                        A3.setAttributeNS(null, "y2", Number(Bz) + Number(w * mDrawSvgViewBox));
                        A3.setAttributeNS(null, "stroke", "black");
                        A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                        A8.appendChild(A3);
                        Aa.appendChild(A8)
                    }
                    Bz = Bz + Number(w * mDrawSvgViewBox) + Number(Bd * mDrawSvgViewBox);
                    o++
                }
                var A3 = document.createElementNS(mDrawSvgNS, "line");
                A3.setAttributeNS(null, "x1", K);
                A3.setAttributeNS(null, "y1", W + (Bd + w) * mDrawSvgViewBox);
                A3.setAttributeNS(null, "x2", K);
                A3.setAttributeNS(null, "y2", Aj);
                A3.setAttributeNS(null, "stroke", "black");
                A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                A8.appendChild(A3);
                Aa.appendChild(A8);
                var A3 = document.createElementNS(mDrawSvgNS, "line");
                A3.setAttributeNS(null, "x1", K + w * mDrawSvgViewBox);
                A3.setAttributeNS(null, "y1", W + (Bd + w) * mDrawSvgViewBox);
                A3.setAttributeNS(null, "x2", K + w * mDrawSvgViewBox);
                A3.setAttributeNS(null, "y2", Aj);
                A3.setAttributeNS(null, "stroke", "black");
                A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                A8.appendChild(A3);
                Aa.appendChild(A8);
                var A3 = document.createElementNS(mDrawSvgNS, "line");
                A3.setAttributeNS(null, "x1", q);
                A3.setAttributeNS(null, "y1", W + (Bd + w) * mDrawSvgViewBox);
                A3.setAttributeNS(null, "x2", q);
                A3.setAttributeNS(null, "y2", Aj);
                A3.setAttributeNS(null, "stroke", "black");
                A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                A8.appendChild(A3);
                Aa.appendChild(A8);
                var A3 = document.createElementNS(mDrawSvgNS, "line");
                A3.setAttributeNS(null, "x1", q + w * mDrawSvgViewBox);
                A3.setAttributeNS(null, "y1", W + (Bd + w) * mDrawSvgViewBox);
                A3.setAttributeNS(null, "x2", q + w * mDrawSvgViewBox);
                A3.setAttributeNS(null, "y2", Aj);
                A3.setAttributeNS(null, "stroke", "black");
                A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                A8.appendChild(A3);
                Aa.appendChild(A8);
                break
            }
            break;
        case 2:
            Bz = Aj + Number(Bd * mDrawSvgViewBox);
            while (Number(Bz) < Number(S)) {
                var A3 = document.createElementNS(mDrawSvgNS, "line");
                A3.setAttributeNS(null, "x1", Number(Ak));
                A3.setAttributeNS(null, "y1", Number(Bz));
                A3.setAttributeNS(null, "x2", Number(B));
                A3.setAttributeNS(null, "y2", Number(Bz));
                A3.setAttributeNS(null, "stroke", "black");
                A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                A8.appendChild(A3);
                Aa.appendChild(A8);
                var A3 = document.createElementNS(mDrawSvgNS, "line");
                A3.setAttributeNS(null, "x1", Number(Ak));
                A3.setAttributeNS(null, "y1", Number(Bz) + Number(w * mDrawSvgViewBox));
                A3.setAttributeNS(null, "x2", Number(B));
                A3.setAttributeNS(null, "y2", Number(Bz) + Number(w * mDrawSvgViewBox));
                A3.setAttributeNS(null, "stroke", "black");
                A3.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
                A8.appendChild(A3);
                Aa.appendChild(A8);
                Bz = Bz + Number(w * mDrawSvgViewBox) + Number(Bd * mDrawSvgViewBox)
            }
            break
        }
    }
    MicroDraw_drawGlassFhl({
        objId: AX,
        returnType: ""
    });
    var N = $("#" + AX + "_txtr")[0];
    var O = $("#" + AX + "_txt")[0];
    if (!isEmptyOrNull(N)) {
        N.setAttribute("x", Number(AW) + Number(Ai) + Number(Bh) + Number(4));
        N.setAttribute("y", Number(p) + Number(Bp) - Number(Ai) - Number(Bh) - Number(18) - Number(4));
        O.setAttribute("x", Number(AW) + Number(Ai) + Number(Bh) + Number(8));
        O.setAttribute("y", Number(p) + Number(Bp) - Number(Ai) - Number(Bh) - Number(8));
        var I = N.parentNode;
        I.appendChild(N);
        I.appendChild(O)
    }
    $("[mtype='" + mDrawFlag_PkcFanH + "']").each(function(g, l) {
        var r = l.parentNode;
        if (r.id == AX) {
            r.removeChild(l)
        }
    });
    var Az = $("#" + AX)[0].getAttribute("mzhgap");
    var M = $("#" + AX)[0].getAttribute("mzhtype");
    if (isEmptyOrNull(M)) {
        M = ""
    }
    if (isEmptyOrNull(Az)) {
        Az = "600"
    }
    switch (M) {
    case "无":
        break;
    case "1根":
        var A8 = document.createElementNS(mDrawSvgNS, "g");
        A8.setAttributeNS(null, "mtype", mDrawFlag_PkcFanH);
        A8.setAttributeNS(null, "mfill", mDrawProductColor);
        A8.setAttributeNS(null, "mstroke", "#000000");
        A8.setAttributeNS(null, "mstrokewidth", "1px");
        var A = Number(A9);
        var X = Number(AU) + Number(Number(A1) - Number(AU)) / 2 - Number(mDrawThickTing) / 2;
        var R = Number(Be) - Number(A9);
        var Bm = document.createElementNS(mDrawSvgNS, "rect");
        Bm.setAttributeNS(null, "x", A);
        Bm.setAttributeNS(null, "y", X);
        Bm.setAttributeNS(null, "width", R);
        Bm.setAttributeNS(null, "height", mDrawThickTing);
        Bm.setAttributeNS(null, "fill", mDrawProductColor);
        Bm.setAttributeNS(null, "stroke", "black");
        Bm.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        A8.appendChild(Bm);
        Aa.appendChild(A8);
        break;
    case "2根":
        var A8 = document.createElementNS(mDrawSvgNS, "g");
        A8.setAttributeNS(null, "mtype", mDrawFlag_PkcFanH);
        A8.setAttributeNS(null, "mfill", mDrawProductColor);
        A8.setAttributeNS(null, "mstroke", "#000000");
        A8.setAttributeNS(null, "mstrokewidth", "1px");
        var A = Number(A9);
        var X = Number(AU) + Number(Number(A1) - Number(AU)) / 2 - Number(mDrawThickTing) / 2 - mDrawPixelPerM * Number(Az) / 1000 / 2;
        var R = Number(Be) - Number(A9);
        var Bm = document.createElementNS(mDrawSvgNS, "rect");
        Bm.setAttributeNS(null, "x", A);
        Bm.setAttributeNS(null, "y", X);
        Bm.setAttributeNS(null, "width", R);
        Bm.setAttributeNS(null, "height", mDrawThickTing);
        Bm.setAttributeNS(null, "fill", mDrawProductColor);
        Bm.setAttributeNS(null, "stroke", "black");
        Bm.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        A8.appendChild(Bm);
        Aa.appendChild(A8);
        var A = Number(A9);
        var X = Number(AU) + Number(Number(A1) - Number(AU)) / 2 - Number(mDrawThickTing) / 2 + mDrawPixelPerM * Number(Az) / 1000 / 2;
        var R = Number(Be) - Number(A9);
        var Bm = document.createElementNS(mDrawSvgNS, "rect");
        Bm.setAttributeNS(null, "x", A);
        Bm.setAttributeNS(null, "y", X);
        Bm.setAttributeNS(null, "width", R);
        Bm.setAttributeNS(null, "height", mDrawThickTing);
        Bm.setAttributeNS(null, "fill", mDrawProductColor);
        Bm.setAttributeNS(null, "stroke", "black");
        Bm.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        A8.appendChild(Bm);
        Aa.appendChild(A8);
        break;
    case "3根":
        var A8 = document.createElementNS(mDrawSvgNS, "g");
        A8.setAttributeNS(null, "mtype", mDrawFlag_PkcFanH);
        A8.setAttributeNS(null, "mfill", mDrawProductColor);
        A8.setAttributeNS(null, "mstroke", "#000000");
        A8.setAttributeNS(null, "mstrokewidth", "1px");
        var A = Number(A9);
        var X = Number(AU) + Number(Number(A1) - Number(AU) - 3 * Number(mDrawThickTing)) / 4;
        var R = Number(Be) - Number(A9);
        var Bm = document.createElementNS(mDrawSvgNS, "rect");
        Bm.setAttributeNS(null, "x", A);
        Bm.setAttributeNS(null, "y", X);
        Bm.setAttributeNS(null, "width", R);
        Bm.setAttributeNS(null, "height", mDrawThickTing);
        Bm.setAttributeNS(null, "fill", mDrawProductColor);
        Bm.setAttributeNS(null, "stroke", "black");
        Bm.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        A8.appendChild(Bm);
        Aa.appendChild(A8);
        var A = Number(A9);
        var X = Number(AU) + Number(Number(A1) - Number(AU)) / 2 - Number(mDrawThickTing) / 2;
        var R = Number(Be) - Number(A9);
        var Bm = document.createElementNS(mDrawSvgNS, "rect");
        Bm.setAttributeNS(null, "x", A);
        Bm.setAttributeNS(null, "y", X);
        Bm.setAttributeNS(null, "width", R);
        Bm.setAttributeNS(null, "height", mDrawThickTing);
        Bm.setAttributeNS(null, "fill", mDrawProductColor);
        Bm.setAttributeNS(null, "stroke", "black");
        Bm.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        A8.appendChild(Bm);
        Aa.appendChild(A8);
        var A = Number(A9);
        var X = Number(AU) + Number(Number(A1) - Number(AU)) / 2 - Number(mDrawThickTing) / 2 + Number(mDrawThickTing) / 2 + Number(Number(A1) - Number(AU) - 3 * Number(mDrawThickTing)) / 4;
        var R = Number(Be) - Number(A9);
        var Bm = document.createElementNS(mDrawSvgNS, "rect");
        Bm.setAttributeNS(null, "x", A);
        Bm.setAttributeNS(null, "y", X);
        Bm.setAttributeNS(null, "width", R);
        Bm.setAttributeNS(null, "height", mDrawThickTing);
        Bm.setAttributeNS(null, "fill", mDrawProductColor);
        Bm.setAttributeNS(null, "stroke", "black");
        Bm.setAttributeNS(null, "stroke-width", mDrawSvgViewBox + "px");
        A8.appendChild(Bm);
        Aa.appendChild(A8);
        break
    }
    var b = Aa.getAttribute("mutext");
    var Bw = Aa.getAttribute("mdtext");
    var A0 = Aa.getAttribute("mltext");
    var Al = Aa.getAttribute("mrtext");
    $("#" + AX + "_txt_def_u,#" + AX + "_txt_def_d,#" + AX + "_txt_def_l,#" + AX + "_txt_def_r").remove();
    var v;
    var c;
    var Bv, AO;
    if (!$.Micro.IsEmpty(b)) {
        Bv = Number(AW) + Y / 2;
        AO = Number(p) + (Bh + AY) * 2 + Ai;
        v = {
            id: AX + "_txt_def_u",
            x: Bv,
            y: AO,
            "font-size": "16",
            "font-weight": "400",
            "fill": "#FF0000"
        };
        c = $.MicroSVG.makeSVG("text", v);
        c.textContent = b;
        $("#" + AX).append($(c));
        var Ab = $.MicroSVG.getSVGRect($(c));
        $(c).attr("x", Bv - Ab.width / 2)
    }
    if (!$.Micro.IsEmpty(Bw)) {
        Bv = Number(AW) + Y / 2;
        AO = Number(p) + Bp - (Bh + AY + Ai);
        v = {
            id: AX + "_txt_def_d",
            x: Bv,
            y: AO,
            "font-size": "16",
            "font-weight": "400",
            "fill": "#FF0000"
        };
        c = $.MicroSVG.makeSVG("text", v);
        c.textContent = Bw;
        $("#" + AX).append($(c));
        var Ab = $.MicroSVG.getSVGRect($(c));
        $(c).attr("x", Bv - Ab.width / 2)
    }
    if (!$.Micro.IsEmpty(A0)) {
        Bv = Number(AW) + (Bh + AY + Ai);
        AO = Number(p) + Bp / 2;
        v = {
            id: AX + "_txt_def_l",
            x: Bv,
            y: AO,
            "font-size": "16",
            "font-weight": "400",
            "fill": "#FF0000",
        };
        c = $.MicroSVG.makeSVG("text", v);
        c.textContent = A0;
        $("#" + AX).append($(c))
    }
    if (!$.Micro.IsEmpty(Al)) {
        Bv = Number(AW) + Y - (Bh + AY + Ai);
        AO = Number(p) + Bp / 2;
        v = {
            id: AX + "_txt_def_r",
            x: Bv,
            y: AO,
            "font-size": "16",
            "font-weight": "400",
            "fill": "#FF0000",
        };
        c = $.MicroSVG.makeSVG("text", v);
        c.textContent = Al;
        $("#" + AX).append($(c));
        var Ab = $.MicroSVG.getSVGRect($(c));
        $(c).attr("x", Bv - Ab.width)
    }
}
function MicroDraw_tlc_resize(Q, P, M, J, Ax) {
    var v = $("#" + Q)[0].parentNode;
    var K = $("#" + Q + "_bg")[0];
    var Aw = v.getAttribute("id");
    var Z;
    var At = Q;
    var Ak, Al, Ap, Ar;
    var R, o, Ad, A;
    var Am, Ao, Aa, p;
    var a, W, f, U, AG, q, Ag, C, e, AF, l, Ae, AC, Au, r, X, Ai, D, AH, O, N, Aj, Ay;
    var g, AK, S, L;
    var Ah, F;
    var I = $("#" + Q)[0];
    var AD = I.attributes;
    for (var Y = 0; Y < AD.length; Y++) {
        switch (AD[Y].name) {
        case "mtldir":
            Z = AD[Y].value;
            break;
        case "mx":
            R = AD[Y].value;
            break;
        case "my":
            o = AD[Y].value;
            break;
        case "mwidth":
            Ad = AD[Y].value;
            break;
        case "mheight":
            A = AD[Y].value;
            break;
        case "mlid":
            Am = AD[Y].value;
            break;
        case "mrid":
            Ao = AD[Y].value;
            break;
        case "mtid":
            Aa = AD[Y].value;
            break;
        case "mbid":
            p = AD[Y].value;
            break;
        case "mfancnt":
            a = AD[Y].value;
            break;
        case "mfantype":
            W = AD[Y].value;
            break;
        case "mfanlayer":
            f = AD[Y].value;
            break;
        case "mfanoffset":
            U = AD[Y].value;
            break;
        case "mfantlcflag":
            AG = AD[Y].value;
            break;
        case "mfanswflag":
            q = AD[Y].value;
            break;
        case "mfanpjstyle":
            Ag = AD[Y].value;
            break;
        case "mfanhasyt":
            C = AD[Y].value;
            break;
        case "mfanytpjstyle":
            e = AD[Y].value;
            break;
        case "mgdshowstyle":
            Ai = AD[Y].value;
            break;
        case "mgdid":
            D = AD[Y].value;
            break;
        case "mgdscale":
            AH = AD[Y].value;
            break;
        case "mglass":
            AF = AD[Y].value;
            break;
        case "msa":
            l = AD[Y].value;
            break;
        case "mtech":
            Ae = AD[Y].value;
            break;
        case "mdb":
            AC = AD[Y].value;
            break;
        case "mmb":
            Au = AD[Y].value;
            break;
        case "mfanls":
            r = AD[Y].value;
            break;
        case "mfanlsstate":
            X = AD[Y].value;
            break;
        case "mcx":
            O = AD[Y].value;
            break;
        case "mcy":
            N = AD[Y].value;
            break;
        case "mcwidth":
            Aj = AD[Y].value;
            break;
        case "mcheight":
            Ay = AD[Y].value;
            break;
        case "mjscoor":
            g = AD[Y].value;
            break;
        case "mjscooroffset":
            AK = AD[Y].value;
            break;
        case "mjsldheight":
            S = AD[Y].value;
            break;
        case "mjsctheight":
            L = AD[Y].value;
            break;
        case "mcx_exp":
            Az = AD[Y].value;
            break;
        case "mcy_exp":
            AB = AD[Y].value;
            break;
        case "mcwidth_exp":
            Av = AD[Y].value;
            break;
        case "mcheight_exp":
            T = AD[Y].value;
            break;
        case "mfancoorshow":
            Ah = AD[Y].value;
            break;
        case "mfanwidth":
            F = AD[Y].value;
            break;
        default:
            break
        }
    }
    var u, Ac, t, Ab;
    var Af = v;
    var n;
    var m;
    var An = Af.getAttribute("mtype");
    if (isEmptyOrNull(An)) {
        An = ""
    }
    if (An == mDrawFlag_Win) {
        n = $("#" + Af.getAttribute("id") + " [mtype^='frame']")[0];
        m = $("#" + n.getAttribute("id") + "_r2")[0]
    }
    if (Aa.length > 0) {
        var AE = $("#" + Aa)[0];
        MicroDraw_Redraw_tingH(AE.getAttribute("id"));
        var B = $("#" + AE.getAttribute("id") + "_r1")[0];
        u = Number(B.getAttribute("y")) + Number(B.getAttribute("height"))
    } else {
        if (An == mDrawFlag_Win) {
            u = m.getAttribute("y")
        }
    }
    if (p.length > 0) {
        var AA = $("#" + p)[0];
        MicroDraw_Redraw_tingH(AA.getAttribute("id"));
        var AJ = $("#" + AA.getAttribute("id") + "_r1")[0];
        Ac = Number(AJ.getAttribute("y"))
    } else {
        if (An == mDrawFlag_Win) {
            Ac = Number(m.getAttribute("y")) + Number(m.getAttribute("height"))
        }
    }
    if (Am.length > 0) {
        var b = $("#" + Am)[0];
        MicroDraw_Redraw_tingV(b.getAttribute("id"));
        var H = $("#" + b.getAttribute("id") + "_r1")[0];
        t = Number(H.getAttribute("x")) + Number(H.getAttribute("width"))
    } else {
        if (An == mDrawFlag_Win) {
            t = m.getAttribute("x")
        }
    }
    if (Ao.length > 0) {
        var V = $("#" + Ao)[0];
        MicroDraw_Redraw_tingV(V.getAttribute("id"));
        var As = $("#" + V.getAttribute("id") + "_r1")[0];
        Ab = Number(As.getAttribute("x"))
    } else {
        if (An == mDrawFlag_Win) {
            Ab = Number(m.getAttribute("x")) + Number(m.getAttribute("width"))
        }
    }
    var An = Af.getAttribute("mtype");
    if (isEmptyOrNull(An)) {
        An = ""
    }
    if (An != mDrawFlag_Win) {
        var G = MicroDraw_getTlcXywh(Q);
        var s = G.split(",");
        Ak = Number(s[0]);
        Al = Number(s[1]);
        Ap = Number(s[2]);
        Ar = Number(s[3])
    } else {
        Ak = t;
        Al = u;
        Ap = Ab - t;
        Ar = Ac - u
    }
    Ak = Number(Ak) + Number(P);
    Al = Number(Al) + Number(M);
    Ap = Number(Ap) + Number(J);
    Ar = Number(Ar) + Number(Ax);
    if ($("#" + Q).parents('[mtype="' + mDrawFlag_Win + '"]').length <= 0) {
        var Az = $("#" + Q)[0].getAttribute("mcx_exp");
        var AB = $("#" + Q)[0].getAttribute("mcy_exp");
        var Av = $("#" + Q)[0].getAttribute("mcwidth_exp");
        var T = $("#" + Q)[0].getAttribute("mcheight_exp");
        if (isEmptyOrNull(Az)) {
            Az = ""
        }
        if (isEmptyOrNull(AB)) {
            AB = ""
        }
        if (isEmptyOrNull(Av)) {
            Av = ""
        }
        if (isEmptyOrNull(T)) {
            T = ""
        }
        if (Az.length > 0) {
            Ak = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, Az, "", "")) / 1000
        }
        if (AB.length > 0) {
            Al = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, AB, "", "")) / 1000
        }
        if (Av.length > 0) {
            Ap = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, Av, "", "")) / 1000
        }
        if (T.length > 0) {
            Ar = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, T, "", "")) / 1000
        }
    }
    var E = $("#" + At + "_txt")[0];
    var c = $("#" + At + "_txt2")[0];
    var AI = "";
    if (!isEmptyOrNull(E)) {
        AI = E.textContent
    }
    if (!isEmptyOrNull(c)) {
        AI = [AI];
        AI.push(c.textContent)
    }
    var Aq = MicroDraw_getPropertyExp(At);
    v.removeChild(I);
    MicroDraw_Tlc_Add(Aw, Z, At, Ak, Al, Ap, Ar, R, o, Ad, A, Am, Ao, Aa, p, a, W, f, U, AG, q, Ag, C, e, AF, AI, l, Ae, AC, Au, r, X, Ai, D, AH, Az, AB, Av, T, g, AK, S, L, Ah, F);
    MicroDraw_setPropertyExp(At, Aq);
    if (!isEmptyOrNull(O)) {
        $("#" + At)[0].setAttribute("mcx", O)
    }
    if (!isEmptyOrNull(N)) {
        $("#" + At)[0].setAttribute("mcy", N)
    }
    if (!isEmptyOrNull(Aj)) {
        $("#" + At)[0].setAttribute("mcwidth", Aj)
    }
    if (!isEmptyOrNull(Ay)) {
        $("#" + At)[0].setAttribute("mcheight", Ay)
    }
}
function MicroDraw_zdm_resize(Q, P, M, J, Ax) {
    var u = $("#" + Q)[0].parentNode;
    var K = $("#" + Q + "_bg")[0];
    var Aw = u.getAttribute("id");
    var Z;
    var As = Q;
    var Aj, Ak, Ao, Aq;
    var R, n, Ac, A;
    var Al, An, v, o;
    var At, AI, a, W, e, U, AF, p, Af, C, c, AE, g, Ad, AB, Au, q, X, E, Ah, D, AG, O, N, Ai, Ag;
    var f, AK, S, L;
    var I = $("#" + Q)[0];
    var AC = I.attributes;
    for (var Y = 0; Y < AC.length; Y++) {
        switch (AC[Y].name) {
        case "mtldir":
            Z = AC[Y].value;
            break;
        case "mlscnt":
            At = AC[Y].value;
            break;
        case "mrscnt":
            AI = AC[Y].value;
            break;
        case "mgdopendir":
            E = AC[Y].value;
            break;
        case "mx":
            R = AC[Y].value;
            break;
        case "my":
            n = AC[Y].value;
            break;
        case "mwidth":
            Ac = AC[Y].value;
            break;
        case "mheight":
            A = AC[Y].value;
            break;
        case "mlid":
            Al = AC[Y].value;
            break;
        case "mrid":
            An = AC[Y].value;
            break;
        case "mtid":
            v = AC[Y].value;
            break;
        case "mbid":
            o = AC[Y].value;
            break;
        case "mfancnt":
            a = AC[Y].value;
            break;
        case "mfantype":
            W = AC[Y].value;
            break;
        case "mfanlayer":
            e = AC[Y].value;
            break;
        case "mfanoffset":
            U = AC[Y].value;
            break;
        case "mfantlcflag":
            AF = AC[Y].value;
            break;
        case "mfanswflag":
            p = AC[Y].value;
            break;
        case "mfanpjstyle":
            Af = AC[Y].value;
            break;
        case "mfanhasyt":
            C = AC[Y].value;
            break;
        case "mfanytpjstyle":
            c = AC[Y].value;
            break;
        case "mgdshowstyle":
            Ah = AC[Y].value;
            break;
        case "mgdid":
            D = AC[Y].value;
            break;
        case "mgdscale":
            AG = AC[Y].value;
            break;
        case "mglass":
            AE = AC[Y].value;
            break;
        case "msa":
            g = AC[Y].value;
            break;
        case "mtech":
            Ad = AC[Y].value;
            break;
        case "mdb":
            AB = AC[Y].value;
            break;
        case "mmb":
            Au = AC[Y].value;
            break;
        case "mfanls":
            q = AC[Y].value;
            break;
        case "mfanlsstate":
            X = AC[Y].value;
            break;
        case "mcx":
            O = AC[Y].value;
            break;
        case "mcy":
            N = AC[Y].value;
            break;
        case "mcwidth":
            Ai = AC[Y].value;
            break;
        case "mcheight":
            Ag = AC[Y].value;
            break;
        case "mjscoor":
            f = AC[Y].value;
            break;
        case "mjscooroffset":
            AK = AC[Y].value;
            break;
        case "mjsldheight":
            S = AC[Y].value;
            break;
        case "mjsctheight":
            L = AC[Y].value;
            break;
        case "mcx_exp":
            Ay = AC[Y].value;
            break;
        case "mcy_exp":
            AA = AC[Y].value;
            break;
        case "mcwidth_exp":
            Av = AC[Y].value;
            break;
        case "mcheight_exp":
            T = AC[Y].value;
            break;
        default:
            break
        }
    }
    var t, Ab, s, Aa;
    var Ae = u;
    var m;
    var l;
    var Am = Ae.getAttribute("mtype");
    if (isEmptyOrNull(Am)) {
        Am = ""
    }
    if (Am == mDrawFlag_Win) {
        m = $("#" + Ae.getAttribute("id") + " [mtype^='frame']")[0];
        l = $("#" + m.getAttribute("id") + "_r2")[0]
    }
    if (v.length > 0) {
        var AD = $("#" + v)[0];
        MicroDraw_Redraw_tingH(AD.getAttribute("id"));
        var B = $("#" + AD.getAttribute("id") + "_r1")[0];
        t = Number(B.getAttribute("y")) + Number(B.getAttribute("height"))
    } else {
        if (Am == mDrawFlag_Win) {
            t = l.getAttribute("y")
        }
    }
    if (o.length > 0) {
        var Az = $("#" + o)[0];
        MicroDraw_Redraw_tingH(Az.getAttribute("id"));
        var AJ = $("#" + Az.getAttribute("id") + "_r1")[0];
        Ab = Number(AJ.getAttribute("y"))
    } else {
        if (Am == mDrawFlag_Win) {
            Ab = Number(l.getAttribute("y")) + Number(l.getAttribute("height"))
        }
    }
    if (Al.length > 0) {
        var b = $("#" + Al)[0];
        MicroDraw_Redraw_tingV(b.getAttribute("id"));
        var H = $("#" + b.getAttribute("id") + "_r1")[0];
        s = Number(H.getAttribute("x")) + Number(H.getAttribute("width"))
    } else {
        if (Am == mDrawFlag_Win) {
            s = l.getAttribute("x")
        }
    }
    if (An.length > 0) {
        var V = $("#" + An)[0];
        MicroDraw_Redraw_tingV(V.getAttribute("id"));
        var Ar = $("#" + V.getAttribute("id") + "_r1")[0];
        Aa = Number(Ar.getAttribute("x"))
    } else {
        if (Am == mDrawFlag_Win) {
            Aa = Number(l.getAttribute("x")) + Number(l.getAttribute("width"))
        }
    }
    var Am = Ae.getAttribute("mtype");
    if (isEmptyOrNull(Am)) {
        Am = ""
    }
    if (Am != mDrawFlag_Win) {
        var G = MicroDraw_getTlcXywh(Q);
        var r = G.split(",");
        Aj = Number(r[0]);
        Ak = Number(r[1]);
        Ao = Number(r[2]);
        Aq = Number(r[3])
    } else {
        Aj = s;
        Ak = t;
        Ao = Aa - s;
        Aq = Ab - t
    }
    Aj = Number(Aj) + Number(P);
    Ak = Number(Ak) + Number(M);
    Ao = Number(Ao) + Number(J);
    Aq = Number(Aq) + Number(Ax);
    if ($("#" + Q).parents('[mtype="' + mDrawFlag_Win + '"]').length <= 0) {
        var Ay = $("#" + Q)[0].getAttribute("mcx_exp");
        var AA = $("#" + Q)[0].getAttribute("mcy_exp");
        var Av = $("#" + Q)[0].getAttribute("mcwidth_exp");
        var T = $("#" + Q)[0].getAttribute("mcheight_exp");
        if (isEmptyOrNull(Ay)) {
            Ay = ""
        }
        if (isEmptyOrNull(AA)) {
            AA = ""
        }
        if (isEmptyOrNull(Av)) {
            Av = ""
        }
        if (isEmptyOrNull(T)) {
            T = ""
        }
        if (Ay.length > 0) {
            Aj = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, Ay, "", "")) / 1000
        }
        if (AA.length > 0) {
            Ak = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, AA, "", "")) / 1000
        }
        if (Av.length > 0) {
            Ao = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, Av, "", "")) / 1000
        }
        if (T.length > 0) {
            Aq = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, T, "", "")) / 1000
        }
    }
    var F = $("#" + As + "_txt")[0];
    var AH = "";
    if (!isEmptyOrNull(F)) {
        AH = F.textContent
    }
    var Ap = MicroDraw_getPropertyExp(As);
    u.removeChild(I);
    MicroDraw_Zdm_Add(Aw, At, AI, As, Aj, Ak, Ao, Aq, R, n, Ac, A, Al, An, v, o, Number(At) + Number(AI), W, e, U, Af, C, c, AE, AH, Ad, AB, Au, E, Ah, D, AG, Ay, AA, Av, T);
    MicroDraw_setPropertyExp(As, Ap);
    if (!isEmptyOrNull(O)) {
        $("#" + As)[0].setAttribute("mcx", O)
    }
    if (!isEmptyOrNull(N)) {
        $("#" + As)[0].setAttribute("mcy", N)
    }
    if (!isEmptyOrNull(Ai)) {
        $("#" + As)[0].setAttribute("mcwidth", Ai)
    }
    if (!isEmptyOrNull(Ag)) {
        $("#" + As)[0].setAttribute("mcheight", Ag)
    }
}
function MicroDraw_dkc_resize(Ab, V, Aa, O, AL) {
    var l = $("#" + Ab)[0];
    var Al = $("#" + Ab)[0].parentNode;
    var P = $("#" + Ab + "_bg")[0];
    var AK = Al.getAttribute("id");
    var m;
    var AH = Ab;
    var Ay, Az, AD, AF;
    var X, Ac, Ar, B;
    var AA, AC, Ao, Ad;
    var o, e, r, b, AX, Q, Au, E, A, AW, v, W, AT, g, Af, AP, U, T, Ax, Av, Aw, G, AZ, AN;
    var u, F, s, Ah, A2, Y, R, A0, f, K, An;
    var AM, AI;
    var S, AY, Ae, t;
    var Ai, n;
    var N = $("#" + Ab)[0];
    var AU = N.attributes;
    for (var AG = 0; AG < AU.length; AG++) {
        switch (AU[AG].name) {
        case "mtldir":
            m = AU[AG].value;
            break;
        case "mx":
            X = AU[AG].value;
            break;
        case "my":
            Ac = AU[AG].value;
            break;
        case "mwidth":
            Ar = AU[AG].value;
            break;
        case "mheight":
            B = AU[AG].value;
            break;
        case "mlid":
            AA = AU[AG].value;
            break;
        case "mrid":
            AC = AU[AG].value;
            break;
        case "mtid":
            Ao = AU[AG].value;
            break;
        case "mbid":
            Ad = AU[AG].value;
            break;
        case "mfancnt":
            o = AU[AG].value;
            break;
        case "mfantype":
            e = AU[AG].value;
            break;
        case "mfanlayer":
            r = AU[AG].value;
            break;
        case "mfanoffset":
            b = AU[AG].value;
            break;
        case "mfantlcflag":
            AX = AU[AG].value;
            break;
        case "mfanswflag":
            Q = AU[AG].value;
            break;
        case "mfanpjstyle":
            Au = AU[AG].value;
            break;
        case "mfanhasyt":
            E = AU[AG].value;
            break;
        case "mfanytpjstyle":
            A = AU[AG].value;
            break;
        case "mfdt":
            u = AU[AG].value;
            break;
        case "mchange":
            F = AU[AG].value;
            break;
        case "mjs":
            Ah = AU[AG].value;
            break;
        case "mjscoor":
            s = AU[AG].value;
            break;
        case "mjscooroffset":
            A2 = AU[AG].value;
            break;
        case "mjsldheight":
            Y = AU[AG].value;
            break;
        case "mjsctheight":
            R = AU[AG].value;
            break;
        case "mgdopendir":
            mgdopendir = AU[AG].value;
            break;
        case "mgdglasstxt":
            A0 = AU[AG].value;
            break;
        case "mgdswtxt":
            f = AU[AG].value;
            break;
        case "mzhtype":
            K = AU[AG].value;
            break;
        case "mzhgap":
            An = AU[AG].value;
            break;
        case "mglass":
            AW = AU[AG].value;
            break;
        case "msa":
            v = AU[AG].value;
            break;
        case "mtech":
            W = AU[AG].value;
            break;
        case "mdb":
            AT = AU[AG].value;
            break;
        case "mmb":
            g = AU[AG].value;
            break;
        case "mfanls":
            Af = AU[AG].value;
            break;
        case "mfanlsstate":
            AP = AU[AG].value;
            break;
        case "mleftcoor":
            AM = AU[AG].value;
            break;
        case "mleftwidth":
            AI = AU[AG].value;
            break;
        case "mgdshowstyle":
            Aw = AU[AG].value;
            break;
        case "mgdid":
            G = AU[AG].value;
            break;
        case "mgdscale":
            AZ = AU[AG].value;
            break;
        case "mcx":
            U = AU[AG].value;
            break;
        case "mcy":
            T = AU[AG].value;
            break;
        case "mcwidth":
            Ax = AU[AG].value;
            break;
        case "mcheight":
            Av = AU[AG].value;
            break;
        case "mfdtstyle":
            AN = AU[AG].value;
            break;
        case "mutext":
            S = AU[AG].value;
            break;
        case "mdtext":
            AY = AU[AG].value;
            break;
        case "mltext":
            Ae = AU[AG].value;
            break;
        case "mrtext":
            t = AU[AG].value;
            break;
        case "mglassfhl":
            Ai = AU[AG].value;
            break;
        case "mglassfhlheight":
            n = AU[AG].value;
            break;
        default:
            break
        }
    }
    var Ak, Aq, Aj, Ap;
    var At = Al;
    var AO;
    var p;
    var q = Number(mDrawSvgViewBox * mDrawThickFan);
    var D = Number(mDrawSvgViewBox * mDrawThickYt);
    var Am = Number(mDrawSvgViewBox * mDrawThickTing);
    var AB = At.getAttribute("mtype");
    if (isEmptyOrNull(AB)) {
        AB = ""
    }
    if (AB == mDrawFlag_Win) {
        AO = $("#" + At.getAttribute("id") + " [mtype^='frame']")[0];
        p = $("#" + AO.getAttribute("id") + "_r2")[0]
    }
    if (Ao.length > 0) {
        var AV = $("#" + Ao)[0];
        MicroDraw_Redraw_tingH(AV.getAttribute("id"));
        var C = $("#" + AV.getAttribute("id") + "_r1")[0];
        Ak = Number(C.getAttribute("y")) + Number(C.getAttribute("height"))
    } else {
        if (AB == mDrawFlag_Win) {
            Ak = p.getAttribute("y")
        }
    }
    if (Ad.length > 0) {
        var AR = $("#" + Ad)[0];
        MicroDraw_Redraw_tingH(AR.getAttribute("id"));
        var A1 = $("#" + AR.getAttribute("id") + "_r1")[0];
        Aq = Number(A1.getAttribute("y"))
    } else {
        if (AB == mDrawFlag_Win) {
            Aq = Number(p.getAttribute("y")) + Number(p.getAttribute("height"))
        }
    }
    if (AA.length > 0) {
        var H = $("#" + AA)[0];
        MicroDraw_Redraw_tingV(H.getAttribute("id"));
        var M = $("#" + H.getAttribute("id") + "_r1")[0];
        Aj = Number(M.getAttribute("x")) + Number(M.getAttribute("width"))
    } else {
        if (AB == mDrawFlag_Win) {
            Aj = p.getAttribute("x")
        }
    }
    if (AC.length > 0) {
        var c = $("#" + AC)[0];
        MicroDraw_Redraw_tingV(c.getAttribute("id"));
        var Ag = $("#" + c.getAttribute("id") + "_r1")[0];
        Ap = Number(Ag.getAttribute("x"))
    } else {
        if (AB == mDrawFlag_Win) {
            Ap = Number(p.getAttribute("x")) + Number(p.getAttribute("width"))
        }
    }
    var AB = At.getAttribute("mtype");
    if (isEmptyOrNull(AB)) {
        AB = ""
    }
    if (AB != mDrawFlag_Win) {
        var L = MicroDraw_getTlcXywh(Ab);
        var As = L.split(",");
        Ay = Number(As[0]);
        Az = Number(As[1]);
        AD = Number(As[2]);
        AF = Number(As[3])
    } else {
        Ay = Aj;
        Az = Ak;
        AD = Ap - Aj;
        AF = Aq - Ak
    }
    Ay = Number(Ay) + Number(V);
    Az = Number(Az) + Number(Aa);
    AD = Number(AD) + Number(O);
    AF = Number(AF) + Number(AL);
    if ($("#" + Ab).parents('[mtype="' + mDrawFlag_Win + '"]').length <= 0) {
        var AQ = $("#" + Ab)[0].getAttribute("mcx_exp");
        var AS = $("#" + Ab)[0].getAttribute("mcy_exp");
        var AJ = $("#" + Ab)[0].getAttribute("mcwidth_exp");
        var a = $("#" + Ab)[0].getAttribute("mcheight_exp");
        if (isEmptyOrNull(AQ)) {
            AQ = ""
        }
        if (isEmptyOrNull(AS)) {
            AS = ""
        }
        if (isEmptyOrNull(AJ)) {
            AJ = ""
        }
        if (isEmptyOrNull(a)) {
            a = ""
        }
        if (AQ.length > 0) {
            Ay = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, AQ, "", "")) / 1000
        }
        if (AS.length > 0) {
            Az = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, AS, "", "")) / 1000
        }
        if (AJ.length > 0) {
            AD = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, AJ, "", "")) / 1000
        }
        if (a.length > 0) {
            AF = Number(mDrawPixelPerM) * Number(MicroDraw_genData_calcExp(0, a, "", "")) / 1000
        }
    }
    var I = $("#" + AH + "_txt")[0];
    var Z = "";
    if (!isEmptyOrNull(I)) {
        Z = I.textContent
    }
    var J = $(l).attr("mzsstyle");
    var AE = MicroDraw_getPropertyExp(AH);
    Al.removeChild(N);
    MicroDraw_Dkc_Add(AK, AH, Ay, Az, AD, AF, X, Ac, Ar, B, AA, AC, Ao, Ad, o, e, r, b, AX, Q, Au, E, A, u, F, Ah, s, A2, Y, R, mgdopendir, A0, f, K, An, AW, Z, v, W, AT, g, AM, AI, AQ, AS, AJ, a, Aw, G, AZ, AN, S, AY, Ae, t, J, Ai, n);
    MicroDraw_setPropertyExp(AH, AE);
    if (!isEmptyOrNull(U)) {
        $("#" + AH)[0].setAttribute("mcx", U)
    }
    if (!isEmptyOrNull(T)) {
        $("#" + AH)[0].setAttribute("mcy", T)
    }
    if (!isEmptyOrNull(Ax)) {
        $("#" + AH)[0].setAttribute("mcwidth", Ax)
    }
    if (!isEmptyOrNull(Av)) {
        $("#" + AH)[0].setAttribute("mcheight", Av)
    }
}
function MicroDraw_reflashGlassFlag() {
    var A = 0;
    $("#" + mDrawFlag_SvgId + " [id*='_txtr']").each(function(H, K) {
        var C = K.parentNode.getAttribute("id");
        var I = $("#" + C + "_txt")[0];
        if (!isEmptyOrNull(I)) {
            var G = $("#" + C);
            var B = G.parents("[mtype=" + mDrawFlag_Win + "]");
            var D = B.find("[mtype=" + mDrawFlag_FrameArc + "]");
            var F = Number(G.attr("mx"));
            var E = Number(G.attr("my"));
            if (F == 0 && E == 0 && D.length > 0) {
                var J = $.Micro.ConvToNum(D.attr("mtingcnt"));
                if (J > 0) {
                    I.textContent = "";
                    $(K).attr("stroke-width", "0");
                    $("#" + C + "_l1").hide();
                    $("#" + C + "_l2").hide();
                    $("#" + C + "_l3").hide();
                    return true
                }
            }
            $(K).attr("stroke-width", "1");
            A = Number(A) + 1;
            I.textContent = mDraw_GlassFlag + A.toString()
        }
    });
    $.each($("#" + mDrawFlag_SvgId).find("[mtype=" + mDrawFlag_WinArcs + "] text[tag=glassfan]"),
    function(B, C) {
        A = Number(A) + 1;
        C.textContent = mDraw_GlassFlag + A; (function() {
            $(C).parent().find("[tag=glassfanBg]").remove();
            return;
            var J = $.MicroSVG.getSVGRect($(C));
            var I = J.x;
            var H = J.y;
            var D = $.MicroSVG.ToCanvasPoint($("#" + mDrawFlag_SvgId), I, H);
            var G = J.width;
            var E = J.height;
            attrs = {
                "tag": "glassfanBg",
                x: D.x,
                y: D.y,
                width: G,
                height: E,
                "fill": mDrawGlassColor,
                "stroke": "none"
            };
            var F = $($.MicroSVG.makeSVG("rect", attrs));
            F.insertBefore($(C))
        })()
    });
    A = 0;
    $("#" + mDrawFlag_SvgId + " [id*='_txtg']").each(function(H, K) {
        var C = K.parentNode.getAttribute("id");
        var I = $("#" + C + "_txt2")[0];
        if (!isEmptyOrNull(I)) {
            var G = $("#" + C);
            var B = G.parents("[mtype=" + mDrawFlag_Win + "]");
            var D = B.find("[mtype=" + mDrawFlag_FrameArc + "]");
            var F = Number(G.attr("mx"));
            var E = Number(G.attr("my"));
            if (F == 0 && E == 0 && D.length > 0) {
                var J = $.Micro.ConvToNum(D.attr("mtingcnt"));
                if (J > 0) {
                    I.textContent = "";
                    $(K).attr("stroke-width", "0");
                    $("#" + C + "_l1").hide();
                    $("#" + C + "_l2").hide();
                    $("#" + C + "_l3").hide();
                    return true
                }
            }
            $(K).attr("stroke-width", "1");
            A = Number(A) + 1;
            I.textContent = mDraw_GlassFlag_TlcG + A.toString()
        }
    })
}
function MicroDraw_getPkcKSW(objId) {
    if (isEmptyOrNull(objId)) {
        return 0
    }
    var node = $("#" + objId)[0];
    if (isEmptyOrNull(node)) {
        return 0
    }
    var nodeType = node.getAttribute("mtype");
    if (! (nodeType == mDrawFlag_Pkc || nodeType == mDrawFlag_Dkc || nodeType.substr(0, 3) == mDrawFlag_Tlc)) {
        return 0
    }
    var nodeWin = $("#" + objId).parents('[mtype="' + mDrawFlag_Win + '"]')[0];
    var nodeFrame = $("#" + nodeWin.getAttribute("id") + ' [mtype="' + mDrawFlag_FrameRect + '"]')[0];
    var nodeWall = $("#" + mDrawFlag_SvgId + ' [mwallbelongto="' + nodeFrame.getAttribute("id") + '"]')[0];
    var mjscoor = node.getAttribute("mjscoor");
    var mjscooroffset = node.getAttribute("mjscooroffset");
    var mjsldheight = node.getAttribute("mjsldheight");
    var mjsctheight = node.getAttribute("mjsctheight");
    var my = node.getAttribute("my");
    var mh = node.getAttribute("mheight");
    var H = nodeFrame.getAttribute("mheight");
    switch (mVersion) {
    case "DRAW":
    case "DRAW_M":
    case "DRAW_JX":
        break;
    default:
        var rows = $("#" + getDrawOptPropertyName()).datagrid("getRows");
        $.each(rows,
        function(i, r) {
            mjsldheight = replaceAll(mjsldheight, r.optId, r.optVal);
            mjsctheight = replaceAll(mjsctheight, r.optId, r.optVal)
        })
    }
    var X = $("#" + nodeFrame.getAttribute("id") + "_r1")[0].getAttribute("x");
    var W = $("#" + nodeFrame.getAttribute("id") + "_r1")[0].getAttribute("width");
    mjscooroffset = replaceAll(mjscooroffset, "W", W);
    mjscooroffset = replaceAll(mjscooroffset, "X", X);
    var xOrig = eval(mjscooroffset);
    var subVal = 0;
    var djl = 0;
    var mbid = node.getAttribute("mbid");
    var xcxlId = nodeFrame.getAttribute("mxcxlid");
    if (!isEmptyOrNull(xcxlId)) {
        var xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(xcxlId);
        var xcxljgJson = eval("(" + xcxljgStr + ")");
        if (nodeType.substr(0, 3) == mDrawFlag_Tlc) {
            djl = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "搭接量", "prid");
            subVal = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "下滑高度", "prid");
            if (!isEmptyOrNull(mbid)) {
                var tingNode = $("#" + mbid)[0];
                var BCZDZ = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "标尺中对中", "prid");
                var tingKind = MicroDraw_getTlcTingKind(mbid);
                var mtl = tingNode.getAttribute("mtl");
                if (mtl != 0) {
                    subVal = Number(mtl)
                } else {
                    if (tingKind.length > 0) {
                        var tingArr = tingKind.split(",");
                        if (tingArr[0] == "横挺") {
                            subVal = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2
                        } else {
                            if (tingArr[0] == "下滑下固") {
                                if (BCZDZ == "Y") {
                                    subVal = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "下滑下固高度", "prid") / 2
                                } else {
                                    subVal = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "下滑下固高度", "prid")
                                }
                            } else {
                                if (tingArr[0] == "上下滑") {
                                    subVal = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上下滑上高度", "prid")
                                }
                            }
                        }
                    }
                }
            }
        } else {
            djl = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "搭接量", "prid");
            subVal = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "框宽度", "prid");
            if (!isEmptyOrNull(mbid)) {
                var tingNode = $("#" + mbid)[0];
                var mkind = tingNode.getAttribute("mkind");
                var mtl = tingNode.getAttribute("mtl");
                if (mtl != 0) {
                    subVal = Number(mtl)
                } else {
                    if (mkind == "N") {
                        subVal = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2
                    } else {
                        if (mkind == "Y") {
                            subVal = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "加强中挺宽度", "prid")) / 2
                        } else {
                            if (mkind == "Z") {
                                subVal = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "Z中挺宽度", "prid")) / 2
                            }
                        }
                    }
                }
            }
        }
    }
    var CombRelation = MicroDraw_getCombObjsRelation($(nodeWin).attr("id"), "b");
    var comBottomHeight = 0;
    for (var i = 0; i < CombRelation.length; i++) {
        var tobj = $("#" + mDrawFlag_SvgId + " #" + CombRelation[i]);
        var mtype = tobj.attr("mtype");
        var msize;
        var screen_height, real_height;
        var sizeObj = null;
        if (mtype == mDrawFlag_Win) {
            sizeObj = tobj.find("[mtype=" + mDrawFlag_FrameRect + "]")
        } else {
            if (mtype == mDrawFlag_Custom_CornerMaterial) {
                sizeObj = tobj
            }
        }
        if (sizeObj) {
            real_height = Number(sizeObj.attr("mheight"));
            comBottomHeight += real_height
        }
    }
    var lockText = Number(mh) - ((Number(H) - Number(my)) - (Number(mjsldheight) - Number(mjsctheight))) - Number(subVal) + Number(djl) - comBottomHeight;
    lockText = lockText.toFixed(2);
    return lockText
}
function MicroDraw_getPkcFHL(objId) {
    var ksw = MicroDraw_getPkcKSW(objId);
    if (ksw > 0) {
        if (isEmptyOrNull(objId)) {
            return 0
        }
        var node = $("#" + objId)[0];
        if (isEmptyOrNull(node)) {
            return 0
        }
        var nodeType = node.getAttribute("mtype");
        if (! (nodeType == mDrawFlag_Pkc || nodeType == mDrawFlag_Dkc)) {
            return 0
        }
        var nodeWin = $("#" + objId).parents('[mtype="' + mDrawFlag_Win + '"]')[0];
        var nodeFrame = $("#" + nodeWin.getAttribute("id") + ' [mtype="' + mDrawFlag_FrameRect + '"]')[0];
        var nodeWall = $("#" + mDrawFlag_SvgId + ' [mwallbelongto="' + nodeFrame.getAttribute("id") + '"]')[0];
        var xcxlId = nodeFrame.getAttribute("mxcxlid");
        if (!isEmptyOrNull(xcxlId)) {
            var xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(xcxlId);
            var xcxljgJson = eval("(" + xcxljgStr + ")");
            fdljl = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "防护栏减量", "prid");
            var obj = nodeFrame;
            var ObjId = obj.getAttribute("id");
            var mcflId = MicroDraw_genData_getMcflIdByXcxlid(xcxlId);
            var fhlexp = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "防护栏减量", "optValExp");
            if (fhlexp.length > 0) {
                fdljl = MicroDraw_genData_calcExp(mcflId, fhlexp, ObjId, xcxljgJson)
            }
            if (isEmptyOrNull(fdljl)) {
                fdljl = 0
            }
            return (ksw - fdljl).toFixed(2)
        }
    }
    return 0
}
function getLDGD() {
    var node = $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Pkc + "']").last().get(0);
    if (isEmptyOrNull(node)) {
        node = $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Dkc + "']").last().get(0);
        if (isEmptyOrNull(node)) {
            node = $("#" + mDrawFlag_SvgId + " [mtype^='" + mDrawFlag_Tlc + "']").last().get(0);
            if (isEmptyOrNull(node)) {
                return 0
            }
        }
    }
    var objId = node.getAttribute("id");
    var nodeWin = $("#" + objId).parents('[mtype="' + mDrawFlag_Win + '"]')[0];
    var nodeFrame = $("#" + nodeWin.getAttribute("id") + ' [mtype="' + mDrawFlag_FrameRect + '"]')[0];
    var nodeWall = $("#" + mDrawFlag_SvgId + ' [mwallbelongto="' + nodeFrame.getAttribute("id") + '"]')[0];
    var nodeType = node.getAttribute("mtype");
    var mjscoor = node.getAttribute("mjscoor");
    var mjscooroffset = node.getAttribute("mjscooroffset");
    var mjsctheight = 0;
    var my = node.getAttribute("my");
    var mh = node.getAttribute("mheight");
    var H = nodeFrame.getAttribute("mheight");
    var rows = $("#" + getDrawOptPropertyName()).datagrid("getRows");
    $.each(rows,
    function(i, r) {
        if (r.optId == "CTH") {
            mjsctheight = r.optVal;
            return false
        }
    });
    if (isEmptyOrNull(mjsctheight)) {
        mjsctheight = 0
    }
    var TSubVal = 0;
    var BSubVal = 0;
    var djl = 0;
    var mtid = node.getAttribute("mtid");
    var mbid = node.getAttribute("mbid");
    var xcxlId = nodeFrame.getAttribute("mxcxlid");
    if (!isEmptyOrNull(xcxlId)) {
        var xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(xcxlId);
        var xcxljgJson = eval("(" + xcxljgStr + ")");
        if (nodeType.substr(0, 3) == mDrawFlag_Tlc) {
            djl = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "搭接量", "prid");
            BSubVal = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "下滑高度", "prid");
            TSubVal = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上滑高度", "prid");
            if (!isEmptyOrNull(mtid)) {
                var tingNode = $("#" + mtid)[0];
                var BCZDZ = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "标尺中对中", "prid");
                var tingKind = MicroDraw_getTlcTingKind(mtid);
                var mtl = tingNode.getAttribute("mtl");
                if (mtl != 0) {
                    TSubVal = Number(mtl)
                } else {
                    if (tingKind.length > 0) {
                        var tingArr = tingKind.split(",");
                        if (tingArr[0] == "横挺") {
                            TSubVal = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2
                        } else {
                            if (tingArr[0] == "上滑上固") {
                                if (BCZDZ == "Y") {
                                    TSubVal = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上滑上固高度", "prid") / 2
                                } else {
                                    TSubVal = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上滑上固高度", "prid")
                                }
                            } else {
                                if (tingArr[0] == "上下滑") {
                                    TSubVal = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上下滑上高度", "prid")
                                }
                            }
                        }
                    }
                }
            }
            if (!isEmptyOrNull(mbid)) {
                var tingNode = $("#" + mbid)[0];
                var BCZDZ = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "标尺中对中", "prid");
                var tingKind = MicroDraw_getTlcTingKind(mbid);
                var mtl = tingNode.getAttribute("mtl");
                if (mtl != 0) {
                    BSubVal = Number(mtl)
                } else {
                    if (tingKind.length > 0) {
                        var tingArr = tingKind.split(",");
                        if (tingArr[0] == "横挺") {
                            BSubVal = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2
                        } else {
                            if (tingArr[0] == "下滑下固") {
                                if (BCZDZ == "Y") {
                                    BSubVal = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "下滑下固高度", "prid") / 2
                                } else {
                                    BSubVal = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "下滑下固高度", "prid")
                                }
                            } else {
                                if (tingArr[0] == "上下滑") {
                                    BSubVal = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上下滑上高度", "prid")
                                }
                            }
                        }
                    }
                }
            }
        } else {
            djl = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "搭接量", "prid");
            BSubVal = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "框宽度", "prid");
            TSubVal = BSubVal;
            if (!isEmptyOrNull(mtid)) {
                var tingNode = $("#" + mtid)[0];
                var mkind = tingNode.getAttribute("mkind");
                var mtl = tingNode.getAttribute("mtl");
                if (mtl != 0) {
                    TSubVal = Number(mtl)
                } else {
                    if (mkind == "N") {
                        TSubVal = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2
                    } else {
                        if (mkind == "Y") {
                            TSubVal = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "加强中挺宽度", "prid")) / 2
                        } else {
                            if (mkind == "Z") {
                                TSubVal = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "Z中挺宽度", "prid")) / 2
                            }
                        }
                    }
                }
            }
            if (!isEmptyOrNull(mbid)) {
                var tingNode = $("#" + mbid)[0];
                var mkind = tingNode.getAttribute("mkind");
                var mtl = tingNode.getAttribute("mtl");
                if (mtl != 0) {
                    BSubVal = Number(mtl)
                } else {
                    if (mkind == "N") {
                        BSubVal = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2
                    } else {
                        if (mkind == "Y") {
                            BSubVal = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "加强中挺宽度", "prid")) / 2
                        } else {
                            if (mkind == "Z") {
                                BSubVal = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "Z中挺宽度", "prid")) / 2
                            }
                        }
                    }
                }
            }
        }
    }
    H = Number(H);
    my = Number(my);
    mh = Number(mh);
    TSubVal = Number(TSubVal);
    BSubVal = Number(BSubVal);
    djl = Number(djl);
    mjsctheight = Number(mjsctheight);
    var CombRelation = MicroDraw_getCombObjsRelation($(nodeWin).attr("id"), "b");
    var comBottomHeight = 0;
    for (var i = 0; i < CombRelation.length; i++) {
        var tobj = $("#" + mDrawFlag_SvgId + " #" + CombRelation[i]);
        var mtype = tobj.attr("mtype");
        var msize;
        var screen_height, real_height;
        var sizeObj = null;
        if (mtype == mDrawFlag_Win) {
            sizeObj = tobj.find("[mtype=" + mDrawFlag_FrameRect + "]")
        } else {
            if (mtype == mDrawFlag_Custom_CornerMaterial) {
                sizeObj = tobj
            }
        }
        if (sizeObj) {
            real_height = Number(sizeObj.attr("mheight"));
            comBottomHeight += real_height
        }
    }
    var mjsldheight = (mh - TSubVal - BSubVal) / 2 + BSubVal + (H - my - mh) + mjsctheight + comBottomHeight;
    if (mjsldheight <= 1500) {
        return mjsldheight
    } else {
        mjsldheight = 300 - djl + BSubVal + (H - my - mh) + mjsctheight + comBottomHeight;
        if (mjsldheight > 1500) {
            return mjsldheight
        } else {
            return 1500
        }
    }
}
function MicroDraw_addPkcHandleCoorY(objId) {
    var svgNode = document.getElementById(mDrawFlag_SvgId);
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
        svgNode = $("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]')[0]
    }
    if (isEmptyOrNull(objId)) {
        jQuery.messager.alert("提示:", "当前没有选中的对象，不能增加执手标尺!", "warning");
        return
    }
    var node = $("#" + objId)[0];
    if (isEmptyOrNull(node)) {
        jQuery.messager.alert("提示:", "当前没有选中的对象，不能增加执手标尺!", "warning");
        return
    }
    var nodeType = node.getAttribute("mtype");
    if (isEmptyOrNull(nodeType)) {
        nodeType = ""
    }
    if (! (nodeType == mDrawFlag_Pkc || nodeType == mDrawFlag_Dkc || nodeType.substr(0, 3) == mDrawFlag_Tlc)) {
        jQuery.messager.alert("提示:", "平开扇对象才可以增加执手!", "warning");
        return
    }
    if ($("#" + objId).parents('[mtype="' + mDrawFlag_Win + '"]').length == 0) {
        return
    }
    var nodeWin = $("#" + objId).parents('[mtype="' + mDrawFlag_Win + '"]')[0];
    var nodeFrame = $("#" + nodeWin.getAttribute("id") + ' [mtype="' + mDrawFlag_FrameRect + '"]')[0];
    var nodeWall = $("#" + mDrawFlag_SvgId + ' [mwallbelongto="' + nodeFrame.getAttribute("id") + '"]')[0];
    var mjscoor = node.getAttribute("mjscoor");
    var mjscooroffset = node.getAttribute("mjscooroffset");
    var mjsldheight = node.getAttribute("mjsldheight");
    var mjsctheight = node.getAttribute("mjsctheight");
    var my = node.getAttribute("my");
    var mh = node.getAttribute("mheight");
    var H = nodeFrame.getAttribute("mheight");
    var mfdt = node.getAttribute("mfdt");
    var mopendir = node.getAttribute("mopendir");
    if (isEmptyOrNull(mjscoor)) {
        return
    }
    switch (mVersion) {
    case "DRAW":
    case "DRAW_M":
    case "DRAW_JX":
        break;
    default:
        var rows = $("#" + getDrawOptPropertyName()).datagrid("getRows");
        $.each(rows,
        function(i, r) {
            mjsldheight = replaceAll(mjsldheight, r.optId, r.optVal);
            mjsctheight = replaceAll(mjsctheight, r.optId, r.optVal)
        })
    }
    var X = $("#" + nodeFrame.getAttribute("id") + "_r1")[0].getAttribute("x");
    var W = $("#" + nodeFrame.getAttribute("id") + "_r1")[0].getAttribute("width");
    mjscooroffset = replaceAll(mjscooroffset, "W", W);
    mjscooroffset = replaceAll(mjscooroffset, "X", X);
    var xOrig = eval(mjscooroffset);
    if (mjscoor != "Y") {
        return
    }
    var lockText = MicroDraw_getPkcKSW(objId);
    var fhlText = MicroDraw_getPkcFHL(objId);
    if (!isEmptyOrNull(nodeFrame)) {
        var guid = MicroDraw_GUID();
        var g = document.createElementNS(mDrawSvgNS, "g");
        g.setAttributeNS(null, "id", guid);
        g.setAttributeNS(null, "mtype", mDrawFlag_Custom_text);
        g.setAttributeNS(null, "mfontsize", "16");
        g.setAttributeNS(null, "mtext", "锁位:" + lockText);
        g.setAttributeNS(null, "mfill", "#000000");
        g.setAttributeNS(null, "mdir", "lr");
        g.setAttributeNS(null, "mfontweight", "400");
        g.setAttributeNS(null, "mbelongtofanid", objId);
        svgNode.appendChild(g);
        var customStr = $("#" + guid).html();
        if (nodeType == mDrawFlag_Pkc) {
            if (mfdt == "Y" && (mopendir != "T" && mopendir != "B")) {
                customStr = customStr + "<text id='" + guid + "_fhl_t' x='" + (Number(xOrig) + 80).toString() + "' y='" + (Number($("#" + objId + "_r1")[0].getAttribute("y")) + Number($("#" + objId + "_r1")[0].getAttribute("height")) / 2 - 33).toString() + "' font-size='18' text-anchor='end' fill='#000000' writing-mode='lr' font-weight='400' style='font-weight:bold;'>防护栏:" + fhlText + "</text>"
            }
            customStr = customStr + "<text id='" + guid + "_t' x='" + (Number(xOrig) + 60).toString() + "' y='" + (Number($("#" + objId + "_r1")[0].getAttribute("y")) + Number($("#" + objId + "_r1")[0].getAttribute("height")) / 2 - 10).toString() + "' font-size='18' text-anchor='end' fill='#000000' writing-mode='lr' font-weight='400' style='font-weight:bold;'>锁位:" + lockText + "</text>"
        } else {
            if (nodeType == mDrawFlag_Dkc) {
                customStr = customStr + "<text id='" + guid + "_t' x='" + (Number(xOrig) + 50).toString() + "' y='" + (Number($("#" + objId + "_bg")[0].getAttribute("y")) + Number($("#" + objId + "_bg")[0].getAttribute("height")) / 2 - 10).toString() + "' font-size='16' text-anchor='end' fill='#000000' writing-mode='lr' font-weight='400'>锁位:" + lockText + "</text>"
            } else {
                if (nodeType.substr(0, 3) == mDrawFlag_Tlc) {
                    customStr = customStr + "<text id='" + guid + "_t' x='" + (Number(xOrig) + 50).toString() + "' y='" + (Number($("#" + objId + "_bg")[0].getAttribute("y")) + Number($("#" + objId + "_bg")[0].getAttribute("height")) / 2 - 10).toString() + "' font-size='16' text-anchor='end' fill='#000000' writing-mode='lr' font-weight='400'>锁位:" + lockText + "</text>"
                }
            }
        }
        $("#" + guid).html(customStr);
        var yFrom = 0;
        var yEnd = 0;
        var oriYFrom;
        if (nodeType == mDrawFlag_Pkc) {
            yFrom = Number($("#" + objId + "_r1")[0].getAttribute("y")) + Number($("#" + objId + "_r1")[0].getAttribute("height")) / 2;
            yEnd = Number($("#" + nodeFrame.getAttribute("id") + "_r1")[0].getAttribute("y")) + Number($("#" + nodeFrame.getAttribute("id") + "_r1")[0].getAttribute("height"))
        } else {
            if (nodeType == mDrawFlag_Dkc) {
                yFrom = Number($("#" + objId + "_bg")[0].getAttribute("y")) + Number($("#" + objId + "_bg")[0].getAttribute("height")) / 2;
                yEnd = Number($("#" + nodeFrame.getAttribute("id") + "_r1")[0].getAttribute("y")) + Number($("#" + nodeFrame.getAttribute("id") + "_r1")[0].getAttribute("height"))
            } else {
                if (nodeType.substr(0, 3) == mDrawFlag_Tlc) {
                    yFrom = Number($("#" + objId + "_bg")[0].getAttribute("y")) + Number($("#" + objId + "_bg")[0].getAttribute("height")) / 2;
                    yEnd = Number($("#" + nodeFrame.getAttribute("id") + "_r1")[0].getAttribute("y")) + Number($("#" + nodeFrame.getAttribute("id") + "_r1")[0].getAttribute("height"))
                }
            }
        }
        oriYFrom = yFrom;
        var text = (Number(mjsldheight) - Number(mjsctheight)).toFixed(2);
        var guid = MicroDraw_GUID();
        var g = document.createElementNS(mDrawSvgNS, "g");
        g.setAttributeNS(null, "id", guid);
        g.setAttributeNS(null, "mtype", mDrawFlag_Custom_ruler);
        g.setAttributeNS(null, "mstroke", "#000000");
        g.setAttributeNS(null, "mstrokewidth", "1px");
        g.setAttributeNS(null, "mtext", text);
        g.setAttributeNS(null, "mbelongtofanid", objId);
        svgNode.appendChild(g);
        var customStr = $("#" + guid).html();
        var x1, y1, x2, y2;
        var xx1, yy1, xx2, yy2, xx3, yy3, xx4, yy4;
        var tx1, ty1;
        var ArrStr = MicroDraw_getRulerDataInfo(xOrig, yFrom, xOrig, yEnd, text);
        var Arr = ArrStr.split(",");
        x1 = Arr[0];
        y1 = Arr[1];
        x2 = Arr[2];
        y2 = Arr[3];
        xx1 = Arr[4];
        yy1 = Arr[5];
        xx2 = Arr[6];
        yy2 = Arr[7];
        xx3 = Arr[8];
        yy3 = Arr[9];
        xx4 = Arr[10];
        yy4 = Arr[11];
        tx1 = Arr[12];
        ty1 = Arr[13];
        var CombRelation = MicroDraw_getCombObjsRelation($(nodeWin).attr("id"), "b");
        var new_y = Number(yy4);
        var new_text = Number(text);
        for (var i = 0; i < CombRelation.length; i++) {
            var tobj = $("#" + mDrawFlag_SvgId + " #" + CombRelation[i]);
            var mtype = tobj.attr("mtype");
            var msize;
            var screen_height, real_height;
            var sizeObj = null;
            if (mtype == mDrawFlag_Win) {
                sizeObj = tobj.find("[mtype=" + mDrawFlag_FrameRect + "]")
            } else {
                if (mtype == mDrawFlag_Custom_CornerMaterial) {
                    sizeObj = tobj
                }
            }
            if (sizeObj) {
                msize = $.MicroSVG.getSVGRect(sizeObj);
                screen_height = msize.height;
                real_height = Number(sizeObj.attr("mheight"));
                new_y += screen_height
            }
        }
        y2 = new_y;
        yy3 = new_y;
        yy4 = new_y;
        text = new_text;
        y1 = Number(y1);
        ty1 = y1 + (y2 - y1) / 2;
        customStr = customStr + "<line id='" + guid + "_l1' x1='" + xx1.toString() + "' y1='" + yy1.toString() + "' x2='" + xx2.toString() + "' y2='" + yy2.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
        customStr = customStr + "<line id='" + guid + "_l2' x1='" + x1.toString() + "' y1='" + y1.toString() + "' x2='" + x2.toString() + "' y2='" + y2.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
        customStr = customStr + "<line id='" + guid + "_l3' x1='" + xx3.toString() + "' y1='" + yy3.toString() + "' x2='" + xx4.toString() + "' y2='" + yy4.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
        customStr = customStr + "<text id='" + guid + "_t' x='" + tx1.toString() + "' y='" + ty1.toString() + "' font-size='16' fill='#000000' writing-mode='lr' font-weight='400'>" + text + "</text>";
        $("#" + guid).html(customStr);
        var showWallRuler = function(tFrame, objId) {
            var nodeFrame = tFrame.get(0);
            var nodeWall = $("#" + mDrawFlag_SvgId + " [mwallbelongto=" + tFrame.attr("id") + "]").get(0);
            var yFrom = Number($("#" + nodeFrame.getAttribute("id") + "_r1")[0].getAttribute("y")) + Number($("#" + nodeFrame.getAttribute("id") + "_r1")[0].getAttribute("height"));
            var yEnd = Number($("#" + nodeWall.getAttribute("id") + "_r")[0].getAttribute("y")) + Number($("#" + nodeWall.getAttribute("id") + "_r")[0].getAttribute("height"));
            var text = Number(mjsctheight);
            var guid = MicroDraw_GUID();
            var g = document.createElementNS(mDrawSvgNS, "g");
            g.setAttributeNS(null, "id", guid);
            g.setAttributeNS(null, "mtype", mDrawFlag_Custom_ruler);
            g.setAttributeNS(null, "mstroke", "#000000");
            g.setAttributeNS(null, "mstrokewidth", "1px");
            g.setAttributeNS(null, "mtext", text);
            g.setAttributeNS(null, "mbelongtofanid", objId);
            svgNode.appendChild(g);
            var customStr = $("#" + guid).html();
            var x1, y1, x2, y2;
            var xx1, yy1, xx2, yy2, xx3, yy3, xx4, yy4;
            var tx1, ty1;
            var ArrStr = MicroDraw_getRulerDataInfo(xOrig, yFrom, xOrig, yEnd, text);
            var Arr = ArrStr.split(",");
            x1 = Arr[0];
            y1 = Arr[1];
            x2 = Arr[2];
            y2 = Arr[3];
            xx1 = Arr[4];
            yy1 = Arr[5];
            xx2 = Arr[6];
            yy2 = Arr[7];
            xx3 = Arr[8];
            yy3 = Arr[9];
            xx4 = Arr[10];
            yy4 = Arr[11];
            tx1 = Arr[12];
            ty1 = Arr[13];
            customStr = customStr + "<line id='" + guid + "_l1' x1='" + xx1.toString() + "' y1='" + yy1.toString() + "' x2='" + xx2.toString() + "' y2='" + yy2.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
            customStr = customStr + "<line id='" + guid + "_l2' x1='" + x1.toString() + "' y1='" + y1.toString() + "' x2='" + x2.toString() + "' y2='" + y2.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
            customStr = customStr + "<line id='" + guid + "_l3' x1='" + xx3.toString() + "' y1='" + yy3.toString() + "' x2='" + xx4.toString() + "' y2='" + yy4.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
            customStr = customStr + "<text id='" + guid + "_t' x='" + tx1.toString() + "' y='" + ty1.toString() + "' font-size='16' fill='#000000' writing-mode='lr' font-weight='400'>" + text + "</text>";
            var xDIV = 40;
            var ArrStr = MicroDraw_getRulerDataInfo((xOrig + xDIV), oriYFrom, (xOrig + xDIV), yEnd, mjsldheight);
            var Arr = ArrStr.split(",");
            x1 = Arr[0];
            y1 = Arr[1];
            x2 = Arr[2];
            y2 = Arr[3];
            xx1 = Arr[4];
            yy1 = Arr[5];
            xx2 = Arr[6];
            yy2 = Arr[7];
            xx3 = Arr[8];
            yy3 = Arr[9];
            xx4 = Arr[10];
            yy4 = Arr[11];
            tx1 = Arr[12];
            ty1 = Arr[13];
            customStr = customStr + "<line id='" + guid + "_l1' x1='" + xx1.toString() + "' y1='" + yy1.toString() + "' x2='" + xx2.toString() + "' y2='" + yy2.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
            customStr = customStr + "<line id='" + guid + "_l2' x1='" + x1.toString() + "' y1='" + y1.toString() + "' x2='" + x2.toString() + "' y2='" + y2.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
            customStr = customStr + "<line id='" + guid + "_l3' x1='" + xx3.toString() + "' y1='" + yy3.toString() + "' x2='" + xx4.toString() + "' y2='" + yy4.toString() + "' stroke='#000000' stroke-width='1px' pointer-events='all'/>";
            customStr = customStr + "<text id='" + guid + "_t' x='" + tx1.toString() + "' y='" + ty1.toString() + "' font-size='16' fill='#000000' writing-mode='lr' font-weight='400'>" + mjsldheight + "</text>";
            $("#" + guid).html(customStr)
        };
        if (!isEmptyOrNull(nodeWall)) {
            showWallRuler($(nodeFrame), objId)
        } else {
            if (CombRelation.length > 0) {
                var startIndex = CombRelation.length - 1;
                var bottomWin = $("#" + mDrawFlag_SvgId + " #" + CombRelation[startIndex]);
                var tWin = bottomWin;
                var tFrame = tWin.find('[mtype="' + mDrawFlag_FrameRect + '"]');
                var tWall = $("#" + mDrawFlag_SvgId + ' [mwallbelongto="' + tFrame.attr("id") + '"]');
                var mTypes = [mDrawFlag_Pkc, mDrawFlag_Dkc, mDrawFlag_Tlc];
                var tobjId;
                var mjsctHeight;
                if (tWall.length > 0) {
                    while ($.Micro.IsEmpty(mjsctHeight)) {
                        for (var i = 0; i < mTypes.length; i++) {
                            var tc = tWin.find("[mtype*=" + mTypes[i] + "]");
                            if (tc.length > 0) {
                                tobjId = tc.attr("id");
                                mjsctHeight = tc.attr("mjsctheight");
                                break
                            }
                        }
                        startIndex--;
                        if (startIndex >= 0) {
                            tWin = $("#" + mDrawFlag_SvgId + " #" + CombRelation[startIndex])
                        } else {
                            break
                        }
                    }
                    if (!$.Micro.IsEmpty(mjsctHeight)) {
                        showWallRuler(tFrame, tobjId)
                    }
                }
            }
        }
    }
}
function MicroDraw_reflashHandleCoorY() {
    $("#" + mDrawFlag_SvgId + " [mbelongtofanid]").each(function(A, B) {
        var C = B.getAttribute("mbelongtofanid");
        $("#" + B.id)[0].parentNode.removeChild(B)
    });
    $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Pkc + "']").each(function(A, B) {
        var C = B.id;
        MicroDraw_addPkcHandleCoorY(C)
    });
    $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Dkc + "']").each(function(A, B) {
        var C = B.id;
        MicroDraw_addPkcHandleCoorY(C)
    });
    $("#" + mDrawFlag_SvgId + " [mtype^='" + mDrawFlag_Tlc + "']").each(function(A, B) {
        var C = B.id;
        MicroDraw_addPkcHandleCoorY(C)
    });
    MicroDraw_3DShowcombwins(true)
}
function MicroDraw_reflashHandle(C) {
    if (C.length == 0) {
        return true
    }
    var A = C.attr("mjs");
    if ($.Micro.IsEmpty(A)) {
        A = "Y"
    }
    var B = $.Micro.MergeArr([C.find('rect[id*="_h"]'), C.find("[mtag=mzsstyle]"), C.find("[tag=js]")]);
    $.each(B,
    function() {
        if (A == "Y") {
            $(this).show()
        } else {
            $(this).hide()
        }
    })
}
function MicroDraw_autoGdPic() {
    var E = 14;
    var D = 0;
    var B = 30;
    var A = 4;
    var C = 10;
    var G = 14;
    var F = document.getElementById(mDrawFlag_SvgId);
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
        F = $("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]')[0]
    }
    $("#" + mDrawFlag_SvgId + " [mgdbelongto]").each(function(H, I) {
        I.parentNode.removeChild(I)
    });
    $("#" + mDrawFlag_SvgId + " [mgdtxtbelongto]").remove();
    $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Win + "']").each(function(Am, l) {
        var c = l.id;
        var w = $("#" + c)[0];
        var a = MicroDraw_ReturnColor($("#" + mDrawFlag_SvgId + " [prcolor]:first").attr("prcolor"));
        var Ao = $("#" + c + " [mtype='" + mDrawFlag_FrameRect + "']")[0];
        var R = Ao.getAttribute("id");
        var X = Ao.getAttribute("mgdpic");
        var r = Ao.getAttribute("mgdpicwj");
        var Ab = $("#" + R + "_r1")[0].getAttribute("x");
        var Ac = $("#" + R + "_r1")[0].getAttribute("y");
        var T = $("#" + R + "_r1")[0].getAttribute("width");
        var Y = $("#" + R + "_r1")[0].getAttribute("height");
        var Aa = $("#" + c).find("[mtype*=tlc],[mtype*=zdm],[mtype*=dkc],[mtype*=pkc]");
        var N = MicroDraw_GetObjProperty(Aa.attr("id"), "mgdshowstyle");
        if ($.Micro.IsEmpty(N)) {
            N = 0
        }
        var m = (X == "Y");
        m = m && (N == 0);
        if (m) {
            var W = 120;
            var U = $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_FrameRect + "'][coorinshow='Y']");
            var O = "N";
            if (U.length > 0) {
                O = "Y";
                W = 170
            }
            var J = $("#" + mDrawFlag_SvgId + " [mwallbelongto='" + R + "']")[0];
            if (isEmptyOrNull(J)) {
                if ($("#" + c + " [mtype*='" + mDrawFlag_Tlc + "']").length > 0) {
                    D = Number(Ac) + Number(Y) + W
                } else {
                    D = Number(Ac) + Number(Y) + W
                }
            } else {
                var u = $("#" + J.getAttribute("id") + "_r")[0].getAttribute("y");
                var q = $("#" + J.getAttribute("id") + "_r")[0].getAttribute("height");
                if ($("#" + c + " [mtype*='" + mDrawFlag_Tlc + "']").length > 0) {
                    D = Number(Ac) + Number(Y) + Number(q) + W
                } else {
                    D = Number(Ac) + Number(Y) + Number(q) + W
                }
            }
            var L = MicroDraw_GUID();
            var H = document.createElementNS(mDrawSvgNS, "g");
            var v = L;
            F.appendChild(H);
            H.setAttributeNS(null, "id", L);
            H.setAttributeNS(null, "mtype", mDrawFlag_Custom_g);
            H.setAttributeNS(null, "mgdbelongto", R);
            var Ad = $("#" + mDrawFlag_SvgId + " [mtldir='lr']").attr("id");
            var I = "";
            if (!isEmptyOrNull(Ad)) {
                I = MicroDraw_getTlcObjType(Ad)
            }
            if ($("#" + c + " [mtype*='" + mDrawFlag_Tlc + "']").length > 0) {
                if ($("#" + c + " [mfanswflag*='1']").length > 0) {
                    B = 50
                } else {
                    B = 40;
                    if ($("#" + c + " [mfantype*='k,f']").length > 0) {
                        B = 30
                    }
                    if ($("#" + c + " [mfantype*='f,k']").length > 0) {
                        B = 30
                    }
                    if ($("#" + c + " [mtype*='tlc_3_fff_012']").length > 0) {
                        B = 50
                    }
                    if ($("#" + c + " [mtype*='tlc_3_fff_210']").length > 0) {
                        B = 50
                    }
                    if ($("#" + c + " [mtype*='tlc_4_kffk_0110']").length > 0) {
                        B = 30
                    }
                    if ($("#" + c + " [mtype*='tlc_4_ffkk_1100']").length > 0) {
                        B = 30
                    }
                    if ($("#" + c + " [mtype*='tlc_4_kkff_0011']").length > 0) {
                        B = 30
                    }
                    if ($("#" + c + " [mtype*='tlc_6_ffffff_012210']").length > 0) {
                        B = 50
                    }
                    if ($("#" + c + " [mtype*='tlc_6_ffffff_210012']").length > 0) {
                        B = 50
                    }
                }
                var L = MicroDraw_GUID();
                var Ar = document.createElementNS(mDrawSvgNS, "g");
                Ar.setAttributeNS(null, "id", L);
                Ar.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                Ar.setAttributeNS(null, "mfill", a);
                Ar.setAttributeNS(null, "mstroke", "#000000");
                Ar.setAttributeNS(null, "mstrokewidth", "1px");
                H.appendChild(Ar);
                var Q = $("#" + L).html();
                Q = Q + "<rect id='" + L + "_r' x='" + Ab + "' y='" + D + "' width='" + mDrawThickFrame + "' height='" + B + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                $("#" + L).html(Q);
                var L = MicroDraw_GUID();
                var Ar = document.createElementNS(mDrawSvgNS, "g");
                Ar.setAttributeNS(null, "id", L);
                Ar.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                Ar.setAttributeNS(null, "mfill", a);
                Ar.setAttributeNS(null, "mstroke", "#000000");
                Ar.setAttributeNS(null, "mstrokewidth", "1px");
                H.appendChild(Ar);
                var Q = $("#" + L).html();
                Q = Q + "<rect id='" + L + "_r' x='" + (Number(Ab) + Number(T) - Number(mDrawThickFrame)).toString() + "' y='" + D + "' width='" + mDrawThickFrame + "' height='" + B + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                $("#" + L).html(Q);
                var Ap = Ao.getAttribute("mgduptxt");
                var Ak = Ao.getAttribute("mgddowntxt");
                if (isEmptyOrNull(Ap)) {
                    Ap = "室外"
                }
                if (isEmptyOrNull(Ak)) {
                    Ak = "室内"
                }
                var L = MicroDraw_GUID();
                var Ar = document.createElementNS(mDrawSvgNS, "g");
                Ar.setAttributeNS(null, "id", L);
                Ar.setAttributeNS(null, "mtype", mDrawFlag_Custom_text);
                Ar.setAttributeNS(null, "mfontsize", E);
                Ar.setAttributeNS(null, "mtext", Ap);
                Ar.setAttributeNS(null, "mfill", "#000000");
                Ar.setAttributeNS(null, "mdir", "lr");
                Ar.setAttributeNS(null, "mfontweight", "400");
                Ar.setAttributeNS(null, "mgdtxtbelongto", R);
                Ar.setAttributeNS(null, "mgdtxtbelongtoproperty", "mgduptxt");
                H.appendChild(Ar);
                var Q = $("#" + L).html();
                if (I.indexOf("4推") >= 0) {
                    var Ag = (Number(Ab) - 54);
                    var Af = (Number(D) - 50 + (Number(B) + 110) / 2 - 15);
                    Q = Q + "<text id='" + L + "_t' x='" + Ag + "' y='" + Af + "' font-size='" + E + "' text-anchor='end' fill='#000000' writing-mode='lr' font-weight='400'>" + Ap + "</text>"
                } else {
                    var Ag = (Number(Ab) - 54);
                    var Af = (Number(D) - 10 + (Number(B) + 20) / 2 - 15);
                    Q = Q + "<text id='" + L + "_t' x='" + Ag + "' y='" + Af + "' font-size='" + E + "' text-anchor='end' fill='#000000' writing-mode='lr' font-weight='400'>" + Ap + "</text>"
                }
                $("#" + L).html(Q);
                var Ah = $.Micro_SVG.getSVGRect($("#" + L + "_t")).width;
                var L = MicroDraw_GUID();
                var Ar = document.createElementNS(mDrawSvgNS, "g");
                Ar.setAttributeNS(null, "id", L);
                Ar.setAttributeNS(null, "mtype", mDrawFlag_Custom_text);
                Ar.setAttributeNS(null, "mfontsize", E);
                Ar.setAttributeNS(null, "mtext", Ak);
                Ar.setAttributeNS(null, "mfill", "#000000");
                Ar.setAttributeNS(null, "mdir", "lr");
                Ar.setAttributeNS(null, "mfontweight", "400");
                Ar.setAttributeNS(null, "mgdtxtbelongto", R);
                Ar.setAttributeNS(null, "mgdtxtbelongtoproperty", "mgddowntxt");
                H.appendChild(Ar);
                var Q = $("#" + L).html();
                if (I.indexOf("4推") >= 0) {
                    var Aq = (Number(Ab) - 54);
                    var n = (Number(D) + Number(B) + 60 - (Number(B) + 110) / 2 + 15);
                    Q = Q + "<text id='" + L + "_t' x='" + Aq + "' y='" + n + "' font-size='" + E + "' text-anchor='end' fill='#000000' writing-mode='lr' font-weight='400'>" + Ak + "</text>"
                } else {
                    var Aq = (Number(Ab) - 54);
                    var n = (Number(D) + Number(B) + 10 - (Number(B) + 20) / 2 + 15);
                    Q = Q + "<text id='" + L + "_t' x='" + Aq + "' y='" + n + "' font-size='" + E + "' text-anchor='end' fill='#000000' writing-mode='lr' font-weight='400'>" + Ak + "</text>"
                }
                $("#" + L).html(Q);
                var K = $.Micro_SVG.getSVGRect($("#" + L + "_t")).width;
                var L = MicroDraw_GUID();
                var Al = document.createElementNS(mDrawSvgNS, "line");
                var b = (Ag < Aq ? Ag: Aq) + 3;
                var P = Number(b) - Number(Ah > K ? Ah: K) - 9;
                var p = y2 = (Number(Af) + Number(n)) / 2 - 6;
                Al.setAttributeNS(null, "id", L);
                Al.setAttributeNS(null, "x1", b);
                Al.setAttributeNS(null, "x2", P);
                Al.setAttributeNS(null, "y1", p);
                Al.setAttributeNS(null, "y2", y2);
                Al.setAttributeNS(null, "stroke", "#000");
                Al.setAttributeNS(null, "stroke-width", "2");
                Al.setAttributeNS(null, "mgdtxtbelongto", R);
                Al.setAttributeNS(null, "mgdtxtbelongtoproperty", "dividingline");
                H.appendChild(Al);
                $("#" + c + " [mtype='" + mDrawFlag_TingV + "']").each(function(At, As) {
                    var Ay = $("#" + As.id + "_r1")[0].getAttribute("x");
                    var Az = $("#" + As.id + "_r1")[0].getAttribute("y");
                    var Ax = $("#" + As.id + "_r1")[0].getAttribute("width");
                    var o = $("#" + As.id + "_r1")[0].getAttribute("height");
                    var Av = $("#" + As.id)[0].getAttribute("mtotallen");
                    if (Av == "Y") {
                        var Aw = MicroDraw_GUID();
                        var AA = document.createElementNS(mDrawSvgNS, "g");
                        AA.setAttributeNS(null, "id", Aw);
                        AA.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                        AA.setAttributeNS(null, "mfill", mDrawProductColor);
                        AA.setAttributeNS(null, "mstroke", "#000000");
                        AA.setAttributeNS(null, "mstrokewidth", "1px");
                        H.appendChild(AA);
                        var Au = $("#" + Aw).html();
                        Au = Au + "<rect id='" + Aw + "_r' x='" + Number(Ay) + "' y='" + D + "' width='" + mDrawThickTing + "' height='" + B + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                        $("#" + Aw).html(Au)
                    }
                });
                $("#" + c + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(Au, AS) {
                    var AT = $("#" + AS.id + "_bg")[0].getAttribute("x");
                    var AU = $("#" + AS.id + "_bg")[0].getAttribute("y");
                    var AK = $("#" + AS.id + "_bg")[0].getAttribute("width");
                    var AV = $("#" + AS.id + "_bg")[0].getAttribute("height");
                    var o = $("#" + AS.id)[0].getAttribute("mtype");
                    var AO = $("#" + AS.id)[0].getAttribute("mfanlayer");
                    var AR = MicroDraw_getTlcObjType(AS.id);
                    switch (AR) {
                    case "2推":
                        if (AO == "0,1") {
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 8 - 3 * Number(G)) / 2;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G)) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 8 - 3 * Number(G)) / 2;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) - 4 - Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay)
                        } else {
                            if (AO == "1,0") {
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 8 - 3 * Number(G)) / 2;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 8 - 3 * Number(G)) / 2;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + Number(G)) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) - 4 - Number(G)) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay)
                            }
                        }
                        if (r == "Y" && N == 0) {
                            var Az = $("#" + AS.id)[0].getAttribute("mfanls");
                            var Ax = $("#" + AS.id)[0].getAttribute("mfanswflag");
                            var AN = $("#" + AS.id)[0].getAttribute("mfanlsstate");
                            if (isEmptyOrNull(AN)) {
                                AN = "SA"
                            }
                            if (AN == "SA") {
                                var AF = Number(D) - 40;
                                var AA = AF + 25;
                                var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                MicroDraw_impSvgTranslate(Aw, Number(AT) + 5, AF);
                                H.appendChild($("#" + Aw)[0]);
                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                MicroDraw_textMove(Av, Number(AT) + 18, AA, "假扣", "14", "start");
                                H.appendChild($("#" + Av)[0]);
                                var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) - 17, AF);
                                H.appendChild($("#" + Aw)[0]);
                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                MicroDraw_textMove(Av, Number(AT) + Number(AK) - 17, AA, "假扣", "14", "end");
                                H.appendChild($("#" + Av)[0])
                            }
                            if (AN == "SA" || AN == "SD") {
                                if (AO == "0,1") {
                                    var AF = Number(D) + Number(B);
                                    var AA = AF + 25;
                                    var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                    MicroDraw_impSvgTranslate(Aw, Number(AT) + 5, AF);
                                    H.appendChild($("#" + Aw)[0]);
                                    var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                    MicroDraw_textMove(Av, Number(AT) + 18, AA, "扣锁", "14", "start");
                                    H.appendChild($("#" + Av)[0]);
                                    if (Az == "K") {
                                        var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                        MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) - 17, AF);
                                        H.appendChild($("#" + Aw)[0]);
                                        var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                        MicroDraw_textMove(Av, Number(AT) + Number(AK) - 17, AA, "扣锁", "14", "end");
                                        H.appendChild($("#" + Av)[0])
                                    } else {
                                        if (Az == "Z") {
                                            var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_zs);
                                            MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) - 19, AF);
                                            H.appendChild($("#" + Aw)[0]);
                                            var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                            MicroDraw_textMove(Av, Number(AT) + Number(AK) - 19, AA, "执手", "14", "end");
                                            H.appendChild($("#" + Av)[0])
                                        } else {
                                            if (Az == "L") {
                                                var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_dls_l);
                                                MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) - 25, AF);
                                                H.appendChild($("#" + Aw)[0]);
                                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                                MicroDraw_textMove(Av, Number(AT) + Number(AK) - 25, Number(AA) - 8, "大拉手", "14", "end");
                                                H.appendChild($("#" + Av)[0]);
                                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                                MicroDraw_textMove(Av, Number(AT) + Number(AK) - 25, Number(AA) + 12, "+扣锁", "14", "end");
                                                H.appendChild($("#" + Av)[0])
                                            }
                                        }
                                    }
                                } else {
                                    if (AO == "1,0") {
                                        var AF = Number(D) + Number(B);
                                        var AA = AF + 25;
                                        var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                        MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) - 17, AF);
                                        H.appendChild($("#" + Aw)[0]);
                                        var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                        MicroDraw_textMove(Av, Number(AT) + Number(AK) - 17, AA, "扣锁", "14", "end");
                                        H.appendChild($("#" + Av)[0]);
                                        if (Az == "K") {
                                            var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                            MicroDraw_impSvgTranslate(Aw, Number(AT) + 5, AF);
                                            H.appendChild($("#" + Aw)[0]);
                                            var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                            MicroDraw_textMove(Av, Number(AT) + 18, AA, "扣锁", "14", "start");
                                            H.appendChild($("#" + Av)[0])
                                        } else {
                                            if (Az == "Z") {
                                                var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_zs);
                                                MicroDraw_impSvgTranslate(Aw, Number(AT) + 5, AF);
                                                H.appendChild($("#" + Aw)[0]);
                                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                                MicroDraw_textMove(Av, Number(AT) + 22, AA, "执手", "14", "start");
                                                H.appendChild($("#" + Av)[0])
                                            } else {
                                                if (Az == "L") {
                                                    var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_dls_r);
                                                    MicroDraw_impSvgTranslate(Aw, Number(AT) + 5, AF);
                                                    H.appendChild($("#" + Aw)[0]);
                                                    var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                                    MicroDraw_textMove(Av, Number(AT) + 28, Number(AA) - 8, "大拉手", "14", "start");
                                                    H.appendChild($("#" + Av)[0]);
                                                    var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                                    MicroDraw_textMove(Av, Number(AT) + 28, Number(AA) + 12, "+扣锁", "14", "start");
                                                    H.appendChild($("#" + Av)[0])
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case "2推1纱":
                        var Ax = $("#" + AS.id)[0].getAttribute("mfanswflag");
                        if (AO == "0,1" && Ax == "1,0") {
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 8 - 3 * Number(G)) / 2;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G)) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 8 - 3 * Number(G)) / 2;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) - 4 - Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + 12 + 2 * Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_line);
                            AE.setAttributeNS(null, "mstroke", "black");
                            AE.setAttributeNS(null, "mstrokewidth", "2px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<line id='" + AQ + "_l'  stroke='black' stroke-width='2px' x1='" + Number(Number(AT) + 4 + Number(G)) + "' y1='" + Number(Number(D) + 12 + 2 * Number(C) + Number(C) / 2) + "' x2='" + Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + "' y2='" + Number(Number(D) + 12 + 2 * Number(C) + Number(C) / 2) + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + "' y='" + Number(Number(D) + 12 + 2 * Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay)
                        } else {
                            if (AO == "0,1" && Ax == "0,1") {
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 8 - 3 * Number(G)) / 2;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + "' y='" + Number(Number(D) + 12 + 2 * Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 8 - 3 * Number(G)) / 2;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + Number(G)) + "' y='" + Number(Number(D) + 12 + 2 * Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) - 4 - Number(G)) + "' y='" + Number(Number(D) + 12 + 2 * Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_line);
                                AE.setAttributeNS(null, "mstroke", "black");
                                AE.setAttributeNS(null, "mstrokewidth", "2px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<line id='" + AQ + "_l'  stroke='black' stroke-width='2px' x1='" + Number(Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + Number(G)) + "' y1='" + Number(Number(D) + 4 + Number(C) / 2) + "' x2='" + Number(Number(AT) + Number(AK) - 4 - Number(G)) + "' y2='" + Number(Number(D) + 4 + Number(C) / 2) + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) - 4 - Number(G)) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay)
                            } else {
                                if (AO == "1,0" && Ax == "1,0") {
                                    var AQ = MicroDraw_GUID();
                                    var AE = document.createElementNS(mDrawSvgNS, "g");
                                    AE.setAttributeNS(null, "id", AQ);
                                    AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                    AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                    AE.setAttributeNS(null, "mstroke", "#000000");
                                    AE.setAttributeNS(null, "mstrokewidth", "1px");
                                    H.appendChild(AE);
                                    var Ay = $("#" + AQ).html();
                                    Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + 12 + 2 * Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                    $("#" + AQ).html(Ay);
                                    var AQ = MicroDraw_GUID();
                                    var AE = document.createElementNS(mDrawSvgNS, "g");
                                    AE.setAttributeNS(null, "id", AQ);
                                    AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                    AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                    AE.setAttributeNS(null, "mstroke", "#000000");
                                    AE.setAttributeNS(null, "mstrokewidth", "1px");
                                    H.appendChild(AE);
                                    var Ay = $("#" + AQ).html();
                                    var AI = Number(Number(AK) - 8 - 3 * Number(G)) / 2;
                                    var AL = Number(Number(C) - 4);
                                    if (AI < 1) {
                                        AI = 1
                                    }
                                    if (AL < 1) {
                                        AL = 1
                                    }
                                    Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G)) + "' y='" + Number(Number(D) + 12 + 2 * Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                    $("#" + AQ).html(Ay);
                                    var AQ = MicroDraw_GUID();
                                    var AE = document.createElementNS(mDrawSvgNS, "g");
                                    AE.setAttributeNS(null, "id", AQ);
                                    AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                    AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                    AE.setAttributeNS(null, "mstroke", "#000000");
                                    AE.setAttributeNS(null, "mstrokewidth", "1px");
                                    H.appendChild(AE);
                                    var Ay = $("#" + AQ).html();
                                    Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + "' y='" + Number(Number(D) + 12 + 2 * Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                    $("#" + AQ).html(Ay);
                                    var AQ = MicroDraw_GUID();
                                    var AE = document.createElementNS(mDrawSvgNS, "g");
                                    AE.setAttributeNS(null, "id", AQ);
                                    AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                    AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                    AE.setAttributeNS(null, "mstroke", "#000000");
                                    AE.setAttributeNS(null, "mstrokewidth", "1px");
                                    H.appendChild(AE);
                                    var Ay = $("#" + AQ).html();
                                    Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                    $("#" + AQ).html(Ay);
                                    var AQ = MicroDraw_GUID();
                                    var AE = document.createElementNS(mDrawSvgNS, "g");
                                    AE.setAttributeNS(null, "id", AQ);
                                    AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                    AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                    AE.setAttributeNS(null, "mstroke", "#000000");
                                    AE.setAttributeNS(null, "mstrokewidth", "1px");
                                    H.appendChild(AE);
                                    var Ay = $("#" + AQ).html();
                                    var AI = Number(Number(AK) - 8 - 3 * Number(G)) / 2;
                                    var AL = Number(Number(C) - 4);
                                    if (AI < 1) {
                                        AI = 1
                                    }
                                    if (AL < 1) {
                                        AL = 1
                                    }
                                    Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                    $("#" + AQ).html(Ay);
                                    var AQ = MicroDraw_GUID();
                                    var AE = document.createElementNS(mDrawSvgNS, "g");
                                    AE.setAttributeNS(null, "id", AQ);
                                    AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                    AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                    AE.setAttributeNS(null, "mstroke", "#000000");
                                    AE.setAttributeNS(null, "mstrokewidth", "1px");
                                    H.appendChild(AE);
                                    var Ay = $("#" + AQ).html();
                                    Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) - 4 - Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                    $("#" + AQ).html(Ay);
                                    var AQ = MicroDraw_GUID();
                                    var AE = document.createElementNS(mDrawSvgNS, "g");
                                    AE.setAttributeNS(null, "id", AQ);
                                    AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                    AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                    AE.setAttributeNS(null, "mstroke", "#000000");
                                    AE.setAttributeNS(null, "mstrokewidth", "1px");
                                    H.appendChild(AE);
                                    var Ay = $("#" + AQ).html();
                                    Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                    $("#" + AQ).html(Ay);
                                    var AQ = MicroDraw_GUID();
                                    var AE = document.createElementNS(mDrawSvgNS, "g");
                                    AE.setAttributeNS(null, "id", AQ);
                                    AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_line);
                                    AE.setAttributeNS(null, "mstroke", "black");
                                    AE.setAttributeNS(null, "mstrokewidth", "2px");
                                    H.appendChild(AE);
                                    var Ay = $("#" + AQ).html();
                                    Ay = Ay + "<line id='" + AQ + "_l'  stroke='black' stroke-width='2px' x1='" + Number(Number(AT) + 4 + Number(G)) + "' y1='" + Number(Number(D) + 4 + Number(C) / 2) + "' x2='" + Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + "' y2='" + Number(Number(D) + 4 + Number(C) / 2) + "' pointer-events='all'/>";
                                    $("#" + AQ).html(Ay);
                                    var AQ = MicroDraw_GUID();
                                    var AE = document.createElementNS(mDrawSvgNS, "g");
                                    AE.setAttributeNS(null, "id", AQ);
                                    AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                    AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                    AE.setAttributeNS(null, "mstroke", "#000000");
                                    AE.setAttributeNS(null, "mstrokewidth", "1px");
                                    H.appendChild(AE);
                                    var Ay = $("#" + AQ).html();
                                    Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                    $("#" + AQ).html(Ay)
                                } else {
                                    if (AO == "1,0" && Ax == "0,1") {
                                        var AQ = MicroDraw_GUID();
                                        var AE = document.createElementNS(mDrawSvgNS, "g");
                                        AE.setAttributeNS(null, "id", AQ);
                                        AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                        AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                        AE.setAttributeNS(null, "mstroke", "#000000");
                                        AE.setAttributeNS(null, "mstrokewidth", "1px");
                                        H.appendChild(AE);
                                        var Ay = $("#" + AQ).html();
                                        Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                        $("#" + AQ).html(Ay);
                                        var AQ = MicroDraw_GUID();
                                        var AE = document.createElementNS(mDrawSvgNS, "g");
                                        AE.setAttributeNS(null, "id", AQ);
                                        AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                        AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                        AE.setAttributeNS(null, "mstroke", "#000000");
                                        AE.setAttributeNS(null, "mstrokewidth", "1px");
                                        H.appendChild(AE);
                                        var Ay = $("#" + AQ).html();
                                        var AI = Number(Number(AK) - 8 - 3 * Number(G)) / 2;
                                        var AL = Number(Number(C) - 4);
                                        if (AI < 1) {
                                            AI = 1
                                        }
                                        if (AL < 1) {
                                            AL = 1
                                        }
                                        Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                        $("#" + AQ).html(Ay);
                                        var AQ = MicroDraw_GUID();
                                        var AE = document.createElementNS(mDrawSvgNS, "g");
                                        AE.setAttributeNS(null, "id", AQ);
                                        AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                        AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                        AE.setAttributeNS(null, "mstroke", "#000000");
                                        AE.setAttributeNS(null, "mstrokewidth", "1px");
                                        H.appendChild(AE);
                                        var Ay = $("#" + AQ).html();
                                        Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                        $("#" + AQ).html(Ay);
                                        var AQ = MicroDraw_GUID();
                                        var AE = document.createElementNS(mDrawSvgNS, "g");
                                        AE.setAttributeNS(null, "id", AQ);
                                        AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                        AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                        AE.setAttributeNS(null, "mstroke", "#000000");
                                        AE.setAttributeNS(null, "mstrokewidth", "1px");
                                        H.appendChild(AE);
                                        var Ay = $("#" + AQ).html();
                                        Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                        $("#" + AQ).html(Ay);
                                        var AQ = MicroDraw_GUID();
                                        var AE = document.createElementNS(mDrawSvgNS, "g");
                                        AE.setAttributeNS(null, "id", AQ);
                                        AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                        AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                        AE.setAttributeNS(null, "mstroke", "#000000");
                                        AE.setAttributeNS(null, "mstrokewidth", "1px");
                                        H.appendChild(AE);
                                        var Ay = $("#" + AQ).html();
                                        var AI = Number(Number(AK) - 8 - 3 * Number(G)) / 2;
                                        var AL = Number(Number(C) - 4);
                                        if (AI < 1) {
                                            AI = 1
                                        }
                                        if (AL < 1) {
                                            AL = 1
                                        }
                                        Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + Number(G)) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                        $("#" + AQ).html(Ay);
                                        var AQ = MicroDraw_GUID();
                                        var AE = document.createElementNS(mDrawSvgNS, "g");
                                        AE.setAttributeNS(null, "id", AQ);
                                        AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                        AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                        AE.setAttributeNS(null, "mstroke", "#000000");
                                        AE.setAttributeNS(null, "mstrokewidth", "1px");
                                        H.appendChild(AE);
                                        var Ay = $("#" + AQ).html();
                                        Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) - 4 - Number(G)) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                        $("#" + AQ).html(Ay);
                                        var AQ = MicroDraw_GUID();
                                        var AE = document.createElementNS(mDrawSvgNS, "g");
                                        AE.setAttributeNS(null, "id", AQ);
                                        AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                        AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                        AE.setAttributeNS(null, "mstroke", "#000000");
                                        AE.setAttributeNS(null, "mstrokewidth", "1px");
                                        H.appendChild(AE);
                                        var Ay = $("#" + AQ).html();
                                        Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + "' y='" + Number(Number(D) + 12 + 2 * Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                        $("#" + AQ).html(Ay);
                                        var AQ = MicroDraw_GUID();
                                        var AE = document.createElementNS(mDrawSvgNS, "g");
                                        AE.setAttributeNS(null, "id", AQ);
                                        AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_line);
                                        AE.setAttributeNS(null, "mstroke", "black");
                                        AE.setAttributeNS(null, "mstrokewidth", "2px");
                                        H.appendChild(AE);
                                        var Ay = $("#" + AQ).html();
                                        Ay = Ay + "<line id='" + AQ + "_l'  stroke='black' stroke-width='2px' x1='" + Number(Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + Number(G)) + "' y1='" + Number(Number(D) + 12 + 2 * Number(C) + Number(C) / 2) + "' x2='" + Number(Number(AT) + Number(AK) - 4 - Number(G)) + "' y2='" + Number(Number(D) + 12 + 2 * Number(C) + Number(C) / 2) + "' pointer-events='all'/>";
                                        $("#" + AQ).html(Ay);
                                        var AQ = MicroDraw_GUID();
                                        var AE = document.createElementNS(mDrawSvgNS, "g");
                                        AE.setAttributeNS(null, "id", AQ);
                                        AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                        AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                        AE.setAttributeNS(null, "mstroke", "#000000");
                                        AE.setAttributeNS(null, "mstrokewidth", "1px");
                                        H.appendChild(AE);
                                        var Ay = $("#" + AQ).html();
                                        Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) - 4 - Number(G)) + "' y='" + Number(Number(D) + 12 + 2 * Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                        $("#" + AQ).html(Ay)
                                    }
                                }
                            }
                        }
                        if (r == "Y" && N == 0) {
                            var Az = $("#" + AS.id)[0].getAttribute("mfanls");
                            var Ax = $("#" + AS.id)[0].getAttribute("mfanswflag");
                            var AN = $("#" + AS.id)[0].getAttribute("mfanlsstate");
                            if (isEmptyOrNull(AN)) {
                                AN = "SA"
                            }
                            if ((AO == "0,1" && Ax == "1,0") || (AO == "1,0" && Ax == "1,0")) {
                                if (AN == "SA") {
                                    var AF = Number(D) - 40;
                                    var AA = AF + 25;
                                    var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                    MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) - 17, AF);
                                    H.appendChild($("#" + Aw)[0]);
                                    var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                    MicroDraw_textMove(Av, Number(AT) + Number(AK) - 17, AA, "假扣", "14", "end");
                                    H.appendChild($("#" + Av)[0])
                                }
                                if (AN == "SA" || AN == "SD") {
                                    var AF = Number(D) + Number(B);
                                    var AA = AF + 25;
                                    var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                    MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) - 17, AF);
                                    H.appendChild($("#" + Aw)[0]);
                                    var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                    MicroDraw_textMove(Av, Number(AT) + Number(AK) - 17, AA, "扣锁", "14", "end");
                                    H.appendChild($("#" + Av)[0])
                                }
                                if (AN == "SA") {
                                    var As = Number(AT) + 4 + Number(G) / 2;
                                    var At = Number(D) + 4;
                                    var AW = Number(AT) + 4 + Number(G) / 2 + 10;
                                    var AX = Number(D) + 4 - 15;
                                    var AC = Number(AT) + 4 + Number(G) / 2 + 10 + 25;
                                    var AD = Number(D) + 4 - 15;
                                    var AM = MicroDraw_AddCustom(mDrawFlag_Custom_line);
                                    MicroDraw_lineMove(AM, As, At, AW, AX);
                                    H.appendChild($("#" + AM)[0]);
                                    var AM = MicroDraw_AddCustom(mDrawFlag_Custom_line);
                                    MicroDraw_lineMove(AM, AW, AX, AC, AD);
                                    H.appendChild($("#" + AM)[0]);
                                    var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                    MicroDraw_impSvgTranslate(Aw, AW, AX - 45);
                                    H.appendChild($("#" + Aw)[0]);
                                    var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                    MicroDraw_textMove(Av, AW + 12, AX - 45 + 25, "假扣", "14", "start");
                                    H.appendChild($("#" + Av)[0])
                                }
                                if (AN == "SA" || AN == "SD") {
                                    var As = Number(AT) + 4;
                                    var At = Number(D) + 4 + Number(C);
                                    var AW = Number(AT) + 4 - 50;
                                    var AX = Number(D) + 4 + Number(C);
                                    var AM = MicroDraw_AddCustom(mDrawFlag_Custom_line);
                                    MicroDraw_lineMove(AM, As, At, AW, AX);
                                    H.appendChild($("#" + AM)[0]);
                                    var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                    MicroDraw_impSvgTranslate(Aw, As - 25, At - 45);
                                    H.appendChild($("#" + Aw)[0]);
                                    var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                    MicroDraw_textMove(Av, As - 25, At - 45 + 25, "扣锁", "14", "end");
                                    H.appendChild($("#" + Av)[0])
                                }
                                if (AN == "SA") {
                                    var As = Number(AT) + 4;
                                    var At = Number(D) + 12 + 2 * Number(C);
                                    var AW = Number(AT) + 4 - 50;
                                    var AX = Number(D) + 12 + 2 * Number(C);
                                    var AM = MicroDraw_AddCustom(mDrawFlag_Custom_line);
                                    MicroDraw_lineMove(AM, As, At, AW, AX);
                                    H.appendChild($("#" + AM)[0]);
                                    var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                    MicroDraw_impSvgTranslate(Aw, As - 25, At + 5);
                                    H.appendChild($("#" + Aw)[0]);
                                    var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                    MicroDraw_textMove(Av, As - 25, At + 30, "假扣", "14", "end");
                                    H.appendChild($("#" + Av)[0])
                                }
                                if (AN == "SA" || AN == "SD") {
                                    if (Az == "K") {
                                        var As = Number(AT) + 4 + Number(G) / 2;
                                        var At = Number(D) + 12 + 3 * Number(C);
                                        var AW = Number(As) + 10;
                                        var AX = Number(At) + 15;
                                        var AC = Number(AW) + 25;
                                        var AD = Number(AX);
                                        var AM = MicroDraw_AddCustom(mDrawFlag_Custom_line);
                                        MicroDraw_lineMove(AM, As, At, AW, AX);
                                        H.appendChild($("#" + AM)[0]);
                                        var AM = MicroDraw_AddCustom(mDrawFlag_Custom_line);
                                        MicroDraw_lineMove(AM, AW, AX, AC, AD);
                                        H.appendChild($("#" + AM)[0]);
                                        var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                        MicroDraw_impSvgTranslate(Aw, AW, AD + 5);
                                        H.appendChild($("#" + Aw)[0]);
                                        var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                        MicroDraw_textMove(Av, AW + 12, AD + 25, "扣锁", "14", "start");
                                        H.appendChild($("#" + Av)[0])
                                    } else {
                                        if (Az == "Z") {
                                            var As = Number(AT) + 4 + Number(G) / 2;
                                            var At = Number(D) + 12 + 3 * Number(C);
                                            var AW = Number(As) + 10;
                                            var AX = Number(At) + 15;
                                            var AC = Number(AW) + 25;
                                            var AD = Number(AX);
                                            var AM = MicroDraw_AddCustom(mDrawFlag_Custom_line);
                                            MicroDraw_lineMove(AM, As, At, AW, AX);
                                            H.appendChild($("#" + AM)[0]);
                                            var AM = MicroDraw_AddCustom(mDrawFlag_Custom_line);
                                            MicroDraw_lineMove(AM, AW, AX, AC, AD);
                                            H.appendChild($("#" + AM)[0]);
                                            var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_zs);
                                            MicroDraw_impSvgTranslate(Aw, AW, AD + 5);
                                            H.appendChild($("#" + Aw)[0]);
                                            var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                            MicroDraw_textMove(Av, AW + 16, AD + 25, "执手", "14", "start");
                                            H.appendChild($("#" + Av)[0])
                                        } else {
                                            if (Az == "L") {
                                                var As = Number(AT) + 4 + Number(G) / 2;
                                                var At = Number(D) + 12 + 3 * Number(C);
                                                var AW = Number(As) + 10;
                                                var AX = Number(At) + 15;
                                                var AC = Number(AW) + 25;
                                                var AD = Number(AX);
                                                var AM = MicroDraw_AddCustom(mDrawFlag_Custom_line);
                                                MicroDraw_lineMove(AM, As, At, AW, AX);
                                                H.appendChild($("#" + AM)[0]);
                                                var AM = MicroDraw_AddCustom(mDrawFlag_Custom_line);
                                                MicroDraw_lineMove(AM, AW, AX, AC, AD);
                                                H.appendChild($("#" + AM)[0]);
                                                var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_dls_r);
                                                MicroDraw_impSvgTranslate(Aw, AW, AD + 5);
                                                H.appendChild($("#" + Aw)[0]);
                                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                                MicroDraw_textMove(Av, AW + 23, AD + 25, "大拉手", "14", "start");
                                                H.appendChild($("#" + Av)[0]);
                                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                                MicroDraw_textMove(Av, AW + 23, AD + 40, "+扣锁", "14", "start");
                                                H.appendChild($("#" + Av)[0])
                                            }
                                        }
                                    }
                                }
                            } else {
                                if ((AO == "0,1" && Ax == "0,1") || (AO == "1,0" && Ax == "0,1")) {
                                    if (AN == "SA") {
                                        var AF = Number(D) - 40;
                                        var AA = AF + 25;
                                        var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                        MicroDraw_impSvgTranslate(Aw, Number(AT) + 5, AF);
                                        H.appendChild($("#" + Aw)[0]);
                                        var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                        MicroDraw_textMove(Av, Number(AT) + 18, AA, "假扣", "14", "start");
                                        H.appendChild($("#" + Av)[0])
                                    }
                                    if (AN == "SA" || AN == "SD") {
                                        var AF = Number(D) + Number(B);
                                        var AA = AF + 25;
                                        var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                        MicroDraw_impSvgTranslate(Aw, Number(AT) + 5, AF);
                                        H.appendChild($("#" + Aw)[0]);
                                        var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                        MicroDraw_textMove(Av, Number(AT) + 18, AA, "扣锁", "14", "start");
                                        H.appendChild($("#" + Av)[0])
                                    }
                                    if (AN == "SA") {
                                        var As = Number(AT) + Number(AK) - 4 - Number(G) / 2;
                                        var At = Number(D) + 4;
                                        var AW = Number(As) - 10;
                                        var AX = Number(D) + 4 - 15;
                                        var AC = Number(AW) - 25;
                                        var AD = Number(D) + 4 - 15;
                                        var AM = MicroDraw_AddCustom(mDrawFlag_Custom_line);
                                        MicroDraw_lineMove(AM, As, At, AW, AX);
                                        H.appendChild($("#" + AM)[0]);
                                        var AM = MicroDraw_AddCustom(mDrawFlag_Custom_line);
                                        MicroDraw_lineMove(AM, AW, AX, AC, AD);
                                        H.appendChild($("#" + AM)[0]);
                                        var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                        MicroDraw_impSvgTranslate(Aw, AW - 15, AX - 45);
                                        H.appendChild($("#" + Aw)[0]);
                                        var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                        MicroDraw_textMove(Av, AW - 15, AX - 45 + 25, "假扣", "14", "end");
                                        H.appendChild($("#" + Av)[0])
                                    }
                                    if (AN == "SA" || AN == "SD") {
                                        var As = Number(AT) + Number(AK) - 4;
                                        var At = Number(D) + 4 + Number(C);
                                        var AW = Number(As) + 50;
                                        var AX = Number(D) + 4 + Number(C);
                                        var AM = MicroDraw_AddCustom(mDrawFlag_Custom_line);
                                        MicroDraw_lineMove(AM, As, At, AW, AX);
                                        H.appendChild($("#" + AM)[0]);
                                        var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                        MicroDraw_impSvgTranslate(Aw, As + 15, At - 45);
                                        H.appendChild($("#" + Aw)[0]);
                                        var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                        MicroDraw_textMove(Av, As + 28, At - 45 + 25, "扣锁", "14", "start");
                                        H.appendChild($("#" + Av)[0])
                                    }
                                    if (AN == "SA") {
                                        var As = Number(AT) + Number(AK) - 4;
                                        var At = Number(D) + 12 + 2 * Number(C);
                                        var AW = Number(As) + 50;
                                        var AX = Number(D) + 12 + 2 * Number(C);
                                        var AM = MicroDraw_AddCustom(mDrawFlag_Custom_line);
                                        MicroDraw_lineMove(AM, As, At, AW, AX);
                                        H.appendChild($("#" + AM)[0]);
                                        var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                        MicroDraw_impSvgTranslate(Aw, As + 15, At + 5);
                                        H.appendChild($("#" + Aw)[0]);
                                        var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                        MicroDraw_textMove(Av, As + 28, At + 35, "假扣", "14", "start");
                                        H.appendChild($("#" + Av)[0])
                                    }
                                    if (AN == "SA" || AN == "SD") {
                                        if (Az == "K") {
                                            var As = Number(AT) + Number(AK) - 4 - Number(G) / 2;
                                            var At = Number(D) + 12 + 3 * Number(C);
                                            var AW = Number(As) - 10;
                                            var AX = Number(At) + 15;
                                            var AC = Number(AW) - 25;
                                            var AD = Number(AX);
                                            var AM = MicroDraw_AddCustom(mDrawFlag_Custom_line);
                                            MicroDraw_lineMove(AM, As, At, AW, AX);
                                            H.appendChild($("#" + AM)[0]);
                                            var AM = MicroDraw_AddCustom(mDrawFlag_Custom_line);
                                            MicroDraw_lineMove(AM, AW, AX, AC, AD);
                                            H.appendChild($("#" + AM)[0]);
                                            var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                            MicroDraw_impSvgTranslate(Aw, AW - 15, AD + 5);
                                            H.appendChild($("#" + Aw)[0]);
                                            var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                            MicroDraw_textMove(Av, AW - 15, AD + 25, "扣锁", "14", "end");
                                            H.appendChild($("#" + Av)[0])
                                        } else {
                                            if (Az == "Z") {
                                                var As = Number(AT) + Number(AK) - 4 - Number(G) / 2;
                                                var At = Number(D) + 12 + 3 * Number(C);
                                                var AW = Number(As) - 10;
                                                var AX = Number(At) + 15;
                                                var AC = Number(AW) - 25;
                                                var AD = Number(AX);
                                                var AM = MicroDraw_AddCustom(mDrawFlag_Custom_line);
                                                MicroDraw_lineMove(AM, As, At, AW, AX);
                                                H.appendChild($("#" + AM)[0]);
                                                var AM = MicroDraw_AddCustom(mDrawFlag_Custom_line);
                                                MicroDraw_lineMove(AM, AW, AX, AC, AD);
                                                H.appendChild($("#" + AM)[0]);
                                                var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_zs);
                                                MicroDraw_impSvgTranslate(Aw, AW - 15, AD + 5);
                                                H.appendChild($("#" + Aw)[0]);
                                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                                MicroDraw_textMove(Av, AW - 15, AD + 25, "执手", "14", "end");
                                                H.appendChild($("#" + Av)[0])
                                            } else {
                                                if (Az == "L") {
                                                    var As = Number(AT) + Number(AK) - 4 - Number(G) / 2;
                                                    var At = Number(D) + 12 + 3 * Number(C);
                                                    var AW = Number(As) - 10;
                                                    var AX = Number(At) + 15;
                                                    var AC = Number(AW) - 25;
                                                    var AD = Number(AX);
                                                    var AM = MicroDraw_AddCustom(mDrawFlag_Custom_line);
                                                    MicroDraw_lineMove(AM, As, At, AW, AX);
                                                    H.appendChild($("#" + AM)[0]);
                                                    var AM = MicroDraw_AddCustom(mDrawFlag_Custom_line);
                                                    MicroDraw_lineMove(AM, AW, AX, AC, AD);
                                                    H.appendChild($("#" + AM)[0]);
                                                    var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_dls_l);
                                                    MicroDraw_impSvgTranslate(Aw, AW - 20, AD + 5);
                                                    H.appendChild($("#" + Aw)[0]);
                                                    var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                                    MicroDraw_textMove(Av, AW - 20, AD + 25, "大拉手", "14", "end");
                                                    H.appendChild($("#" + Av)[0]);
                                                    var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                                    MicroDraw_textMove(Av, AW - 20, AD + 40, "+扣锁", "14", "end");
                                                    H.appendChild($("#" + Av)[0])
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case "1轨1推":
                        var AB = $("#" + AS.id)[0].getAttribute("mfantype");
                        if (AB == "k,f") {
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + "' y='" + Number(Number(D) + Number(B) / 2 - Number(C) / 2) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 8 - 3 * Number(G)) / 2;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + Number(G)) + "' y='" + Number(Number(D) + Number(B) / 2 - Number(C) / 2 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) - 4 - Number(G)) + "' y='" + Number(Number(D) + Number(B) / 2 - Number(C) / 2) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay)
                        } else {
                            if (AB == "f,k") {
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + Number(B) / 2 - Number(C) / 2) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 8 - 3 * Number(G)) / 2;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G)) + "' y='" + Number(Number(D) + Number(B) / 2 - Number(C) / 2 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + "' y='" + Number(Number(D) + Number(B) / 2 - Number(C) / 2) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay)
                            }
                        }
                        break;
                    case "1推1固":
                        if (AO == "0,1") {
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 8 - 3 * Number(G)) / 2;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G)) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 8 - 3 * Number(G)) / 2;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) - 4 - Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay)
                        } else {
                            if (AO == "1,0") {
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 8 - 3 * Number(G)) / 2;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 8 - 3 * Number(G)) / 2;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + Number(AK) / 2 - Number(G) / 2) + Number(G)) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) - 4 - Number(G)) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay)
                            }
                        }
                        break;
                    case "3推":
                        if (AO == "0,1,0") {
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 8 - 4 * Number(G)) / 3;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G)) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 8 - 4 * Number(G)) / 3) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 8 - 4 * Number(G)) / 3) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 8 - 4 * Number(G)) / 3;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 8 - 4 * Number(G)) / 3 + Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + 2 * Number(Number(AK) - 8 - 4 * Number(G)) / 3) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + 2 * Number(Number(AK) - 8 - 4 * Number(G)) / 3) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 8 - 4 * Number(G)) / 3;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(Number(AT) + 4 + 2 * Number(G)) + 2 * Number(Number(AK) - 8 - 4 * Number(G)) / 3) + Number(G)) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) - 4 - Number(G)) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay)
                        } else {
                            if (AO == "1,0,1") {
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 8 - 4 * Number(G)) / 3;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 8 - 4 * Number(G)) / 3) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 8 - 4 * Number(G)) / 3) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 8 - 4 * Number(G)) / 3;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 8 - 4 * Number(G)) / 3 + Number(G)) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + 2 * Number(Number(AK) - 8 - 4 * Number(G)) / 3) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + 2 * Number(Number(AK) - 8 - 4 * Number(G)) / 3) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(Number(AT) + 4 + 2 * Number(G)) + 2 * Number(Number(AK) - 8 - 4 * Number(G)) / 3) + Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + Number(Number(AK) - 8 - 4 * Number(G)) / 3 + "' height='" + Number(Number(C) - 4) + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) - 4 - Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay)
                            }
                        }
                        break;
                    case "3推带收口":
                        if (AO == "0,1,1") {
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G)) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G) + Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G) + Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + 2 * Number(G) + Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + 2 * Number(G) + 2 * Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + 3 * Number(G) + 2 * Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3 + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + 4 * Number(G) + 2 * Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3 + 4) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) - Number(G) - 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay)
                        } else {
                            if (AO == "1,0,0") {
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G) + Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G) + Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + 2 * Number(G) + Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + 2 * Number(G) + 2 * Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + 3 * Number(G) + 2 * Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3 + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + 4 * Number(G) + 2 * Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3 + 4) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) - Number(G) - 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay)
                            } else {
                                if (AO == "0,0,1") {
                                    var AQ = MicroDraw_GUID();
                                    var AE = document.createElementNS(mDrawSvgNS, "g");
                                    AE.setAttributeNS(null, "id", AQ);
                                    AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                    AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                    AE.setAttributeNS(null, "mstroke", "#000000");
                                    AE.setAttributeNS(null, "mstrokewidth", "1px");
                                    H.appendChild(AE);
                                    var Ay = $("#" + AQ).html();
                                    Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                    $("#" + AQ).html(Ay);
                                    var AQ = MicroDraw_GUID();
                                    var AE = document.createElementNS(mDrawSvgNS, "g");
                                    AE.setAttributeNS(null, "id", AQ);
                                    AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                    AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                    AE.setAttributeNS(null, "mstroke", "#000000");
                                    AE.setAttributeNS(null, "mstrokewidth", "1px");
                                    H.appendChild(AE);
                                    var Ay = $("#" + AQ).html();
                                    var AI = Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3;
                                    var AL = Number(Number(C) - 4);
                                    if (AI < 1) {
                                        AI = 1
                                    }
                                    if (AL < 1) {
                                        AL = 1
                                    }
                                    Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G)) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                    $("#" + AQ).html(Ay);
                                    var AQ = MicroDraw_GUID();
                                    var AE = document.createElementNS(mDrawSvgNS, "g");
                                    AE.setAttributeNS(null, "id", AQ);
                                    AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                    AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                    AE.setAttributeNS(null, "mstroke", "#000000");
                                    AE.setAttributeNS(null, "mstrokewidth", "1px");
                                    H.appendChild(AE);
                                    var Ay = $("#" + AQ).html();
                                    Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G) + Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                    $("#" + AQ).html(Ay);
                                    var AQ = MicroDraw_GUID();
                                    var AE = document.createElementNS(mDrawSvgNS, "g");
                                    AE.setAttributeNS(null, "id", AQ);
                                    AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                    AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                    AE.setAttributeNS(null, "mstroke", "#000000");
                                    AE.setAttributeNS(null, "mstrokewidth", "1px");
                                    H.appendChild(AE);
                                    var Ay = $("#" + AQ).html();
                                    Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + 2 * Number(G) + Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3 + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                    $("#" + AQ).html(Ay);
                                    var AQ = MicroDraw_GUID();
                                    var AE = document.createElementNS(mDrawSvgNS, "g");
                                    AE.setAttributeNS(null, "id", AQ);
                                    AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                    AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                    AE.setAttributeNS(null, "mstroke", "#000000");
                                    AE.setAttributeNS(null, "mstrokewidth", "1px");
                                    H.appendChild(AE);
                                    var Ay = $("#" + AQ).html();
                                    var AI = Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3;
                                    var AL = Number(Number(C) - 4);
                                    if (AI < 1) {
                                        AI = 1
                                    }
                                    if (AL < 1) {
                                        AL = 1
                                    }
                                    Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + 3 * Number(G) + Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3 + 4) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                    $("#" + AQ).html(Ay);
                                    var AQ = MicroDraw_GUID();
                                    var AE = document.createElementNS(mDrawSvgNS, "g");
                                    AE.setAttributeNS(null, "id", AQ);
                                    AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                    AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                    AE.setAttributeNS(null, "mstroke", "#000000");
                                    AE.setAttributeNS(null, "mstrokewidth", "1px");
                                    H.appendChild(AE);
                                    var Ay = $("#" + AQ).html();
                                    Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + 3 * Number(G) + 2 * Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3 + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                    $("#" + AQ).html(Ay);
                                    var AQ = MicroDraw_GUID();
                                    var AE = document.createElementNS(mDrawSvgNS, "g");
                                    AE.setAttributeNS(null, "id", AQ);
                                    AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                    AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                    AE.setAttributeNS(null, "mstroke", "#000000");
                                    AE.setAttributeNS(null, "mstrokewidth", "1px");
                                    H.appendChild(AE);
                                    var Ay = $("#" + AQ).html();
                                    Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + 3 * Number(G) + 2 * Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3 + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                    $("#" + AQ).html(Ay);
                                    var AQ = MicroDraw_GUID();
                                    var AE = document.createElementNS(mDrawSvgNS, "g");
                                    AE.setAttributeNS(null, "id", AQ);
                                    AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                    AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                    AE.setAttributeNS(null, "mstroke", "#000000");
                                    AE.setAttributeNS(null, "mstrokewidth", "1px");
                                    H.appendChild(AE);
                                    var Ay = $("#" + AQ).html();
                                    var AI = Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3;
                                    var AL = Number(Number(C) - 4);
                                    if (AI < 1) {
                                        AI = 1
                                    }
                                    if (AL < 1) {
                                        AL = 1
                                    }
                                    Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + 4 * Number(G) + 2 * Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3 + 4) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                    $("#" + AQ).html(Ay);
                                    var AQ = MicroDraw_GUID();
                                    var AE = document.createElementNS(mDrawSvgNS, "g");
                                    AE.setAttributeNS(null, "id", AQ);
                                    AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                    AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                    AE.setAttributeNS(null, "mstroke", "#000000");
                                    AE.setAttributeNS(null, "mstrokewidth", "1px");
                                    H.appendChild(AE);
                                    var Ay = $("#" + AQ).html();
                                    Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) - Number(G) - 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                    $("#" + AQ).html(Ay)
                                } else {
                                    if (AO == "1,1,0") {
                                        var AQ = MicroDraw_GUID();
                                        var AE = document.createElementNS(mDrawSvgNS, "g");
                                        AE.setAttributeNS(null, "id", AQ);
                                        AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                        AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                        AE.setAttributeNS(null, "mstroke", "#000000");
                                        AE.setAttributeNS(null, "mstrokewidth", "1px");
                                        H.appendChild(AE);
                                        var Ay = $("#" + AQ).html();
                                        Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                        $("#" + AQ).html(Ay);
                                        var AQ = MicroDraw_GUID();
                                        var AE = document.createElementNS(mDrawSvgNS, "g");
                                        AE.setAttributeNS(null, "id", AQ);
                                        AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                        AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                        AE.setAttributeNS(null, "mstroke", "#000000");
                                        AE.setAttributeNS(null, "mstrokewidth", "1px");
                                        H.appendChild(AE);
                                        var Ay = $("#" + AQ).html();
                                        var AI = Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3;
                                        var AL = Number(Number(C) - 4);
                                        if (AI < 1) {
                                            AI = 1
                                        }
                                        if (AL < 1) {
                                            AL = 1
                                        }
                                        Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                        $("#" + AQ).html(Ay);
                                        var AQ = MicroDraw_GUID();
                                        var AE = document.createElementNS(mDrawSvgNS, "g");
                                        AE.setAttributeNS(null, "id", AQ);
                                        AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                        AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                        AE.setAttributeNS(null, "mstroke", "#000000");
                                        AE.setAttributeNS(null, "mstrokewidth", "1px");
                                        H.appendChild(AE);
                                        var Ay = $("#" + AQ).html();
                                        Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G) + Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                        $("#" + AQ).html(Ay);
                                        var AQ = MicroDraw_GUID();
                                        var AE = document.createElementNS(mDrawSvgNS, "g");
                                        AE.setAttributeNS(null, "id", AQ);
                                        AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                        AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                        AE.setAttributeNS(null, "mstroke", "#000000");
                                        AE.setAttributeNS(null, "mstrokewidth", "1px");
                                        H.appendChild(AE);
                                        var Ay = $("#" + AQ).html();
                                        Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + 2 * Number(G) + Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3 + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                        $("#" + AQ).html(Ay);
                                        var AQ = MicroDraw_GUID();
                                        var AE = document.createElementNS(mDrawSvgNS, "g");
                                        AE.setAttributeNS(null, "id", AQ);
                                        AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                        AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                        AE.setAttributeNS(null, "mstroke", "#000000");
                                        AE.setAttributeNS(null, "mstrokewidth", "1px");
                                        H.appendChild(AE);
                                        var Ay = $("#" + AQ).html();
                                        var AI = Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3;
                                        var AL = Number(Number(C) - 4);
                                        if (AI < 1) {
                                            AI = 1
                                        }
                                        if (AL < 1) {
                                            AL = 1
                                        }
                                        Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + 3 * Number(G) + Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3 + 4) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                        $("#" + AQ).html(Ay);
                                        var AQ = MicroDraw_GUID();
                                        var AE = document.createElementNS(mDrawSvgNS, "g");
                                        AE.setAttributeNS(null, "id", AQ);
                                        AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                        AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                        AE.setAttributeNS(null, "mstroke", "#000000");
                                        AE.setAttributeNS(null, "mstrokewidth", "1px");
                                        H.appendChild(AE);
                                        var Ay = $("#" + AQ).html();
                                        Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + 3 * Number(G) + 2 * Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3 + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                        $("#" + AQ).html(Ay);
                                        var AQ = MicroDraw_GUID();
                                        var AE = document.createElementNS(mDrawSvgNS, "g");
                                        AE.setAttributeNS(null, "id", AQ);
                                        AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                        AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                        AE.setAttributeNS(null, "mstroke", "#000000");
                                        AE.setAttributeNS(null, "mstrokewidth", "1px");
                                        H.appendChild(AE);
                                        var Ay = $("#" + AQ).html();
                                        Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + 3 * Number(G) + 2 * Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3 + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                        $("#" + AQ).html(Ay);
                                        var AQ = MicroDraw_GUID();
                                        var AE = document.createElementNS(mDrawSvgNS, "g");
                                        AE.setAttributeNS(null, "id", AQ);
                                        AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                        AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                        AE.setAttributeNS(null, "mstroke", "#000000");
                                        AE.setAttributeNS(null, "mstrokewidth", "1px");
                                        H.appendChild(AE);
                                        var Ay = $("#" + AQ).html();
                                        var AI = Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3;
                                        var AL = Number(Number(C) - 4);
                                        if (AI < 1) {
                                            AI = 1
                                        }
                                        if (AL < 1) {
                                            AL = 1
                                        }
                                        Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + 4 * Number(G) + 2 * Number(Number(AK) - 8 - 5 * Number(G) - 4) / 3 + 4) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                        $("#" + AQ).html(Ay);
                                        var AQ = MicroDraw_GUID();
                                        var AE = document.createElementNS(mDrawSvgNS, "g");
                                        AE.setAttributeNS(null, "id", AQ);
                                        AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                        AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                        AE.setAttributeNS(null, "mstroke", "#000000");
                                        AE.setAttributeNS(null, "mstrokewidth", "1px");
                                        H.appendChild(AE);
                                        var Ay = $("#" + AQ).html();
                                        Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) - Number(G) - 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                        $("#" + AQ).html(Ay)
                                    }
                                }
                            }
                        }
                        break;
                    case "3推带收口1纱":
                        function AJ(A1) {
                            var AZ = MicroDraw_GUID();
                            var AY = document.createElementNS(mDrawSvgNS, "g");
                            AY.setAttributeNS(null, "id", AZ);
                            AY.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AY.setAttributeNS(null, "mfill", A1.color);
                            AY.setAttributeNS(null, "mstroke", "#000000");
                            AY.setAttributeNS(null, "mstrokewidth", "1px");
                            A1.g.appendChild(AY);
                            var A0 = $("#" + AZ).html();
                            A0 = A0 + "<rect id='" + AZ + "_r' x='" + A1.x + "' y='" + A1.y + "' width='" + A1.width + "' height='" + A1.height + "' stroke='#000000' stroke-width='1px' fill='" + A1.color + "' pointer-events='all'/>";
                            $("#" + AZ).html(A0)
                        }
                        function AG(A1) {
                            var AZ = MicroDraw_GUID();
                            var AY = document.createElementNS(mDrawSvgNS, "g");
                            AY.setAttributeNS(null, "id", AZ);
                            AY.setAttributeNS(null, "mtype", mDrawFlag_Custom_line);
                            AY.setAttributeNS(null, "mstroke", "black");
                            AY.setAttributeNS(null, "mstrokewidth", "2px");
                            A1.g.appendChild(AY);
                            var A0 = $("#" + AZ).html();
                            A0 = A0 + "<line id='" + AZ + "_l'  stroke='black' stroke-width='2px' x1='" + A1.x + "' y1='" + (A1.y + C / 2 - 2) + "' x2='" + (A1.x + A1.width) + "' y2='" + (A1.y + C / 2 - 2) + "' pointer-events='all'/>";
                            $("#" + AZ).html(A0)
                        }
                        function AH(g) {
                            AJ({
                                g: g.g,
                                x: g.x,
                                y: g.y,
                                width: Number(G),
                                height: C,
                                color: mDrawProductColor
                            });
                            if (g.type == "S") {
                                AG({
                                    g: g.g,
                                    x: g.x + Number(G),
                                    y: g.y + 2,
                                    width: g.width - Number(G) * 2
                                })
                            } else {
                                AJ({
                                    g: g.g,
                                    x: g.x + Number(G),
                                    y: g.y + 2,
                                    width: g.width - Number(G) * 2,
                                    height: Number(C) - 4,
                                    color: mDrawGlassColor
                                })
                            }
                            AJ({
                                g: g.g,
                                x: g.x + g.width - G,
                                y: g.y,
                                width: Number(G),
                                height: C,
                                color: mDrawProductColor
                            })
                        }
                        var AP = Number(Number(AK) + Number(G) - 12) / 3;
                        if (AO == "0,1,1") {
                            AH({
                                g: H,
                                x: Number(AT) + 4,
                                y: Number(D) + 4,
                                width: AP,
                                type: "F"
                            });
                            AH({
                                g: H,
                                x: Number(AT) + 4 + AP - G,
                                y: Number(D) + 4 + C + 4,
                                width: AP,
                                type: "F"
                            });
                            AH({
                                g: H,
                                x: Number(AT) + 4 + AP - G + AP + 4,
                                y: Number(D) + 4 + C + 4,
                                width: AP,
                                type: "F"
                            });
                            AH({
                                g: H,
                                x: Number(AT) + 4,
                                y: Number(D) + 4 + (C + 4) * 2,
                                width: AP,
                                type: "S"
                            })
                        } else {
                            if (AO == "1,0,0") {
                                AH({
                                    g: H,
                                    x: Number(AT) + 4,
                                    y: Number(D) + 4 + (C + 4) * 2,
                                    width: AP,
                                    type: "F"
                                });
                                AH({
                                    g: H,
                                    x: Number(AT) + 4 + AP - G,
                                    y: Number(D) + 4 + C + 4,
                                    width: AP,
                                    type: "F"
                                });
                                AH({
                                    g: H,
                                    x: Number(AT) + 4 + AP - G + AP + 4,
                                    y: Number(D) + 4 + C + 4,
                                    width: AP,
                                    type: "F"
                                });
                                AH({
                                    g: H,
                                    x: Number(AT) + 4,
                                    y: Number(D) + 4,
                                    width: AP,
                                    type: "S"
                                })
                            } else {
                                if (AO == "0,0,1") {
                                    AH({
                                        g: H,
                                        x: Number(AT) + 4,
                                        y: Number(D) + 4 + C + 4,
                                        width: AP,
                                        type: "F"
                                    });
                                    AH({
                                        g: H,
                                        x: Number(AT) + 4 + AP + 4,
                                        y: Number(D) + 4 + C + 4,
                                        width: AP,
                                        type: "F"
                                    });
                                    AH({
                                        g: H,
                                        x: Number(AT) + 4 + AP + 4 + AP - G + 4,
                                        y: Number(D) + 4 + (C + 4) * 2,
                                        width: AP,
                                        type: "F"
                                    });
                                    AH({
                                        g: H,
                                        x: Number(AT) + 4 + AP + 4 + AP - G + 4,
                                        y: Number(D) + 4,
                                        width: AP,
                                        type: "S"
                                    })
                                } else {
                                    if (AO == "1,1,0") {
                                        AH({
                                            g: H,
                                            x: Number(AT) + 4,
                                            y: Number(D) + 4 + C + 4,
                                            width: AP,
                                            type: "F"
                                        });
                                        AH({
                                            g: H,
                                            x: Number(AT) + 4 + AP + 4,
                                            y: Number(D) + 4 + C + 4,
                                            width: AP,
                                            type: "F"
                                        });
                                        AH({
                                            g: H,
                                            x: Number(AT) + 4 + AP + 4 + AP - G + 4,
                                            y: Number(D) + 4,
                                            width: AP,
                                            type: "F"
                                        });
                                        AH({
                                            g: H,
                                            x: Number(AT) + 4 + AP + 4 + AP - G + 4,
                                            y: Number(D) + 4 + (C + 4) * 2,
                                            width: AP,
                                            type: "S"
                                        })
                                    }
                                }
                            }
                        }
                        break;
                    case "3轨3推":
                        if (AO == "0,1,2") {
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 8 - 4 * Number(G)) / 3;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G)) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 8 - 4 * Number(G)) / 3) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 8 - 4 * Number(G)) / 3) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 8 - 4 * Number(G)) / 3;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 8 - 4 * Number(G)) / 3 + Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + 2 * Number(Number(AK) - 8 - 4 * Number(G)) / 3) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + 2 * Number(Number(AK) - 8 - 4 * Number(G)) / 3) + "' y='" + Number(Number(D) + 12 + 2 * Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 8 - 4 * Number(G)) / 3;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(Number(AT) + 4 + 2 * Number(G)) + 2 * Number(Number(AK) - 8 - 4 * Number(G)) / 3) + Number(G)) + "' y='" + Number(Number(D) + 12 + 2 * Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) - 4 - Number(G)) + "' y='" + Number(Number(D) + 12 + 2 * Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay)
                        } else {
                            if (AO == "2,1,0") {
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + 12 + 2 * Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 8 - 4 * Number(G)) / 3;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G)) + "' y='" + Number(Number(D) + 12 + 2 * Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 8 - 4 * Number(G)) / 3) + "' y='" + Number(Number(D) + 12 + 2 * Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 8 - 4 * Number(G)) / 3) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 8 - 4 * Number(G)) / 3;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 8 - 4 * Number(G)) / 3 + Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + 2 * Number(Number(AK) - 8 - 4 * Number(G)) / 3) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + 2 * Number(Number(AK) - 8 - 4 * Number(G)) / 3) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 8 - 4 * Number(G)) / 3;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(Number(AT) + 4 + 2 * Number(G)) + 2 * Number(Number(AK) - 8 - 4 * Number(G)) / 3) + Number(G)) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) - 4 - Number(G)) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay)
                            }
                        }
                        if (r == "Y" && N == 0) {
                            var Az = $("#" + AS.id)[0].getAttribute("mfanls");
                            var Ax = $("#" + AS.id)[0].getAttribute("mfanswflag");
                            var AN = $("#" + AS.id)[0].getAttribute("mfanlsstate");
                            if (isEmptyOrNull(AN)) {
                                AN = "SA"
                            }
                            if (AN == "SA") {
                                var AF = Number(D) - 40;
                                var AA = AF + 25;
                                var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                MicroDraw_impSvgTranslate(Aw, Number(AT) + 5, AF);
                                H.appendChild($("#" + Aw)[0]);
                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                MicroDraw_textMove(Av, Number(AT) + 18, AA, "假扣", "14", "start");
                                H.appendChild($("#" + Av)[0]);
                                var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) - 17, AF);
                                H.appendChild($("#" + Aw)[0]);
                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                MicroDraw_textMove(Av, Number(AT) + Number(AK) - 17, AA, "假扣", "14", "end");
                                H.appendChild($("#" + Av)[0])
                            }
                            if (AN == "SA" || AN == "SD") {
                                if (AO == "0,1,2") {
                                    var AF = Number(D) + Number(B);
                                    var AA = AF + 25;
                                    var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                    MicroDraw_impSvgTranslate(Aw, Number(AT) + 5, AF);
                                    H.appendChild($("#" + Aw)[0]);
                                    var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                    MicroDraw_textMove(Av, Number(AT) + 18, AA, "扣锁", "14", "start");
                                    H.appendChild($("#" + Av)[0]);
                                    if (Az == "K") {
                                        var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                        MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) - 17, AF);
                                        H.appendChild($("#" + Aw)[0]);
                                        var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                        MicroDraw_textMove(Av, Number(AT) + Number(AK) - 17, AA, "扣锁", "14", "end");
                                        H.appendChild($("#" + Av)[0])
                                    } else {
                                        if (Az == "Z") {
                                            var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_zs);
                                            MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) - 19, AF);
                                            H.appendChild($("#" + Aw)[0]);
                                            var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                            MicroDraw_textMove(Av, Number(AT) + Number(AK) - 19, AA, "执手", "14", "end");
                                            H.appendChild($("#" + Av)[0])
                                        } else {
                                            if (Az == "L") {
                                                var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_dls_l);
                                                MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) - 25, AF);
                                                H.appendChild($("#" + Aw)[0]);
                                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                                MicroDraw_textMove(Av, Number(AT) + Number(AK) - 25, Number(AA) - 8, "大拉手", "14", "end");
                                                H.appendChild($("#" + Av)[0]);
                                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                                MicroDraw_textMove(Av, Number(AT) + Number(AK) - 25, Number(AA) + 12, "+扣锁", "14", "end");
                                                H.appendChild($("#" + Av)[0])
                                            }
                                        }
                                    }
                                } else {
                                    if (AO == "2,1,0") {
                                        var AF = Number(D) + Number(B);
                                        var AA = AF + 25;
                                        var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                        MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) - 17, AF);
                                        H.appendChild($("#" + Aw)[0]);
                                        var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                        MicroDraw_textMove(Av, Number(AT) + Number(AK) - 17, AA, "扣锁", "14", "end");
                                        H.appendChild($("#" + Av)[0]);
                                        if (Az == "K") {
                                            var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                            MicroDraw_impSvgTranslate(Aw, Number(AT) + 5, AF);
                                            H.appendChild($("#" + Aw)[0]);
                                            var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                            MicroDraw_textMove(Av, Number(AT) + 18, AA, "扣锁", "14", "start");
                                            H.appendChild($("#" + Av)[0])
                                        } else {
                                            if (Az == "Z") {
                                                var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_zs);
                                                MicroDraw_impSvgTranslate(Aw, Number(AT) + 5, AF);
                                                H.appendChild($("#" + Aw)[0]);
                                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                                MicroDraw_textMove(Av, Number(AT) + 20, AA, "执手", "14", "start");
                                                H.appendChild($("#" + Av)[0])
                                            } else {
                                                if (Az == "L") {
                                                    var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_dls_r);
                                                    MicroDraw_impSvgTranslate(Aw, Number(AT) + 5, AF);
                                                    H.appendChild($("#" + Aw)[0]);
                                                    var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                                    MicroDraw_textMove(Av, Number(AT) + 28, Number(AA) - 8, "大拉手", "14", "start");
                                                    H.appendChild($("#" + Av)[0]);
                                                    var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                                    MicroDraw_textMove(Av, Number(AT) + 28, Number(AA) + 12, "+扣锁", "14", "start");
                                                    H.appendChild($("#" + Av)[0])
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case "2推1固":
                        if (AO == "0,1,0") {
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 8 - 4 * Number(G)) / 3;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G)) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 8 - 4 * Number(G)) / 3) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 8 - 4 * Number(G)) / 3) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 8 - 4 * Number(G)) / 3;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 8 - 4 * Number(G)) / 3 + Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + 2 * Number(Number(AK) - 8 - 4 * Number(G)) / 3) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + 2 * Number(Number(AK) - 8 - 4 * Number(G)) / 3) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 8 - 4 * Number(G)) / 3;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(Number(AT) + 4 + 2 * Number(G)) + 2 * Number(Number(AK) - 8 - 4 * Number(G)) / 3) + Number(G)) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) - 4 - Number(G)) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay)
                        } else {
                            if (AO == "1,0,1") {
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 8 - 4 * Number(G)) / 3;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 8 - 4 * Number(G)) / 3) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 8 - 4 * Number(G)) / 3) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 8 - 4 * Number(G)) / 3;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 8 - 4 * Number(G)) / 3 + Number(G)) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + 2 * Number(Number(AK) - 8 - 4 * Number(G)) / 3) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + 2 * Number(Number(AK) - 8 - 4 * Number(G)) / 3) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 8 - 4 * Number(G)) / 3;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(Number(AT) + 4 + 2 * Number(G)) + 2 * Number(Number(AK) - 8 - 4 * Number(G)) / 3) + Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) - 4 - Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay)
                            }
                        }
                        break;
                    case "4推":
                        if (AO == "0,1,1,0") {
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 12 - 6 * Number(G)) / 4;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G)) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 12 - 6 * Number(G)) / 4;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + Number(Number(C) - 4) + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + 2 * Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 3 * Number(G)) + 2 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 12 - 6 * Number(G)) / 4;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 4 * Number(G)) + 2 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 4 * Number(G)) + 3 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 4 * Number(G)) + 3 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 12 - 6 * Number(G)) / 4;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 5 * Number(G)) + 3 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 5 * Number(G)) + 4 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay)
                        } else {
                            if (AO == "1,0,0,1") {
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 12 - 6 * Number(G)) / 4;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 12 - 6 * Number(G)) / 4;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + 2 * Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 3 * Number(G)) + 2 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 12 - 6 * Number(G)) / 4;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 4 * Number(G)) + 2 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 4 * Number(G)) + 3 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 4 * Number(G)) + 3 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 12 - 6 * Number(G)) / 4;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 5 * Number(G)) + 3 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 5 * Number(G)) + 4 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay)
                            }
                        }
                        if (r == "Y" && N == 0) {
                            var Az = $("#" + AS.id)[0].getAttribute("mfanls");
                            var Ax = $("#" + AS.id)[0].getAttribute("mfanswflag");
                            var AN = $("#" + AS.id)[0].getAttribute("mfanlsstate");
                            if (isEmptyOrNull(AN)) {
                                AN = "SA"
                            }
                            if (AN == "SA") {
                                var AF = Number(D) - 40;
                                var AA = AF + 25;
                                var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                MicroDraw_impSvgTranslate(Aw, Number(AT) + 5, AF);
                                H.appendChild($("#" + Aw)[0]);
                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                MicroDraw_textMove(Av, Number(AT) + 18, AA, "假扣", "14", "start");
                                H.appendChild($("#" + Av)[0]);
                                var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) - 17, AF);
                                H.appendChild($("#" + Aw)[0]);
                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                MicroDraw_textMove(Av, Number(AT) + Number(AK) - 17, AA, "假扣", "14", "end");
                                H.appendChild($("#" + Av)[0]);
                                var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) / 2 - 15, AF);
                                H.appendChild($("#" + Aw)[0]);
                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                MicroDraw_textMove(Av, Number(AT) + Number(AK) / 2 - 15, AA, "假扣", "14", "end");
                                H.appendChild($("#" + Av)[0]);
                                var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) / 2 + 3, AF);
                                H.appendChild($("#" + Aw)[0]);
                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                MicroDraw_textMove(Av, Number(AT) + Number(AK) / 2 + 15, AA, "假扣", "14", "start");
                                H.appendChild($("#" + Av)[0])
                            }
                            if (AN == "SA" || AN == "SD") {
                                if (AO == "0,1,1,0") {
                                    var AF = Number(D) + Number(B) - 10;
                                    var AA = AF + 25;
                                    var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                    MicroDraw_impSvgTranslate(Aw, Number(AT) + 5, AF);
                                    H.appendChild($("#" + Aw)[0]);
                                    var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                    MicroDraw_textMove(Av, Number(AT) + 18, AA, "扣锁", "14", "start");
                                    H.appendChild($("#" + Av)[0]);
                                    var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                    MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) - 17, AF);
                                    H.appendChild($("#" + Aw)[0]);
                                    var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                    MicroDraw_textMove(Av, Number(AT) + Number(AK) - 17, AA, "扣锁", "14", "end");
                                    H.appendChild($("#" + Av)[0]);
                                    if (Az == "K") {
                                        var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                        MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) / 2 - 15, AF);
                                        H.appendChild($("#" + Aw)[0]);
                                        var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                        MicroDraw_textMove(Av, Number(AT) + Number(AK) / 2 - 15, AA, "假扣", "14", "end");
                                        H.appendChild($("#" + Av)[0]);
                                        var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                        MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) / 2 + 3, AF);
                                        H.appendChild($("#" + Aw)[0]);
                                        var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                        MicroDraw_textMove(Av, Number(AT) + Number(AK) / 2 + 15, AA, "扣锁", "14", "start");
                                        H.appendChild($("#" + Av)[0])
                                    } else {
                                        if (Az == "Z") {
                                            var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_zs);
                                            MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) / 2 - 16, AF);
                                            H.appendChild($("#" + Aw)[0]);
                                            var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                            MicroDraw_textMove(Av, Number(AT) + Number(AK) / 2 - 16, AA, "假执手", "14", "end");
                                            H.appendChild($("#" + Av)[0]);
                                            var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_zs);
                                            MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) / 2 + 2, AF);
                                            H.appendChild($("#" + Aw)[0]);
                                            var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                            MicroDraw_textMove(Av, Number(AT) + Number(AK) / 2 + 17, AA, "执手", "14", "start");
                                            H.appendChild($("#" + Av)[0])
                                        } else {
                                            if (Az == "L") {
                                                var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_dls_l);
                                                MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) / 2 - 22, AF);
                                                H.appendChild($("#" + Aw)[0]);
                                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                                MicroDraw_textMove(Av, Number(AT) + Number(AK) / 2 - 22, Number(AA) - 10, "大拉手", "14", "end");
                                                H.appendChild($("#" + Av)[0]);
                                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                                MicroDraw_textMove(Av, Number(AT) + Number(AK) / 2 - 22, Number(AA) + 10, "+假扣", "14", "end");
                                                H.appendChild($("#" + Av)[0]);
                                                var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_dls_r);
                                                MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) / 2 + 2, AF);
                                                H.appendChild($("#" + Aw)[0]);
                                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                                MicroDraw_textMove(Av, Number(AT) + Number(AK) / 2 + 26, Number(AA) - 10, "大拉手", "14", "start");
                                                H.appendChild($("#" + Av)[0]);
                                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                                MicroDraw_textMove(Av, Number(AT) + Number(AK) / 2 + 26, Number(AA) + 10, "+扣锁", "14", "start");
                                                H.appendChild($("#" + Av)[0])
                                            }
                                        }
                                    }
                                } else {
                                    if (AO == "1,0,0,1") {
                                        var AF = Number(D) + Number(B) - 10;
                                        var AA = AF + 25;
                                        var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                        MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) / 2 - 15, AF);
                                        H.appendChild($("#" + Aw)[0]);
                                        var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                        MicroDraw_textMove(Av, Number(AT) + Number(AK) / 2 - 15, AA, "假扣", "14", "end");
                                        H.appendChild($("#" + Av)[0]);
                                        var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                        MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) / 2 + 3, AF);
                                        H.appendChild($("#" + Aw)[0]);
                                        var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                        MicroDraw_textMove(Av, Number(AT) + Number(AK) / 2 + 15, AA, "扣锁", "14", "start");
                                        H.appendChild($("#" + Av)[0]);
                                        if (Az == "K") {
                                            var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                            MicroDraw_impSvgTranslate(Aw, Number(AT) + 5, AF);
                                            H.appendChild($("#" + Aw)[0]);
                                            var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                            MicroDraw_textMove(Av, Number(AT) + 18, AA, "扣锁", "14", "start");
                                            H.appendChild($("#" + Av)[0]);
                                            var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                            MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) - 17, AF);
                                            H.appendChild($("#" + Aw)[0]);
                                            var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                            MicroDraw_textMove(Av, Number(AT) + Number(AK) - 17, AA, "扣锁", "14", "end");
                                            H.appendChild($("#" + Av)[0])
                                        } else {
                                            if (Az == "Z") {
                                                var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_zs);
                                                MicroDraw_impSvgTranslate(Aw, Number(AT) + 5, AF);
                                                H.appendChild($("#" + Aw)[0]);
                                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                                MicroDraw_textMove(Av, Number(AT) + 20, AA, "执手", "14", "start");
                                                H.appendChild($("#" + Av)[0]);
                                                var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_zs);
                                                MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) - 17, AF);
                                                H.appendChild($("#" + Aw)[0]);
                                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                                MicroDraw_textMove(Av, Number(AT) + Number(AK) - 17, AA, "执手", "14", "end");
                                                H.appendChild($("#" + Av)[0])
                                            } else {
                                                if (Az == "L") {
                                                    var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_dls_r);
                                                    MicroDraw_impSvgTranslate(Aw, Number(AT) + 5, AF);
                                                    H.appendChild($("#" + Aw)[0]);
                                                    var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                                    MicroDraw_textMove(Av, Number(AT) + 28, Number(AA) - 10, "大拉手", "14", "start");
                                                    H.appendChild($("#" + Av)[0]);
                                                    var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                                    MicroDraw_textMove(Av, Number(AT) + 28, Number(AA) + 10, "+扣锁", "14", "start");
                                                    H.appendChild($("#" + Av)[0]);
                                                    var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_dls_l);
                                                    MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) - 24, AF);
                                                    H.appendChild($("#" + Aw)[0]);
                                                    var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                                    MicroDraw_textMove(Av, Number(AT) + Number(AK) - 24, Number(AA) - 10, "大拉手", "14", "end");
                                                    H.appendChild($("#" + Av)[0]);
                                                    var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                                    MicroDraw_textMove(Av, Number(AT) + Number(AK) - 24, Number(AA) + 10, "+扣锁", "14", "end");
                                                    H.appendChild($("#" + Av)[0])
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case "4推2纱":
                        if (AO == "0,1,1,0") {
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 12 - 6 * Number(G)) / 4;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y='" + Number(Number(D) + 12 + 2 * Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y='" + Number(Number(D) + 12 + 2 * Number(C) + 2) + "' width='" + Number(Number(AK) - 12 - 6 * Number(G)) / 4 + "' height='" + Number(Number(C) - 4) + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + 2 * Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y='" + Number(Number(D) + 12 + 2 * Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 3 * Number(G)) + 2 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 12 + 2 * Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 12 - 6 * Number(G)) / 4;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 4 * Number(G)) + 2 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 12 + 2 * Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 4 * Number(G)) + 3 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 12 + 2 * Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 4 * Number(G)) + 3 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 12 - 6 * Number(G)) / 4;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 5 * Number(G)) + 3 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 5 * Number(G)) + 4 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_line);
                            AE.setAttributeNS(null, "mstroke", "black");
                            AE.setAttributeNS(null, "mstrokewidth", "2px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<line id='" + AQ + "_l'  stroke='black' stroke-width='2px' x1='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y1='" + Number(Number(D) + 4 + Number(C) / 2) + "' x2='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + 2 * Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y2='" + Number(Number(D) + 4 + Number(C) / 2) + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + 2 * Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 3 * Number(G)) + 2 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_line);
                            AE.setAttributeNS(null, "mstroke", "black");
                            AE.setAttributeNS(null, "mstrokewidth", "2px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<line id='" + AQ + "_l'  stroke='black' stroke-width='2px' x1='" + Number(Number(Number(AT) + 4 + 4 * Number(G)) + 2 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y1='" + Number(Number(D) + 4 + Number(C) / 2) + "' x2='" + Number(Number(Number(AT) + 4 + 4 * Number(G)) + 3 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y2='" + Number(Number(D) + 4 + Number(C) / 2) + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 4 * Number(G)) + 3 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay)
                        } else {
                            if (AO == "1,0,0,1") {
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 12 - 6 * Number(G)) / 4;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 12 - 6 * Number(G)) / 4;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + 2 * Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 3 * Number(G)) + 2 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 12 - 6 * Number(G)) / 4;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 4 * Number(G)) + 2 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 4 * Number(G)) + 3 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 4 * Number(G)) + 3 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 12 - 6 * Number(G)) / 4;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 5 * Number(G)) + 3 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 5 * Number(G)) + 4 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y='" + Number(Number(D) + 12 + 2 * Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_line);
                                AE.setAttributeNS(null, "mstroke", "black");
                                AE.setAttributeNS(null, "mstrokewidth", "2px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<line id='" + AQ + "_l'  stroke='black' stroke-width='2px' x1='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y1='" + Number(Number(D) + 12 + 2 * Number(C) + Number(C) / 2) + "' x2='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + 2 * Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y2='" + Number(Number(D) + 12 + 2 * Number(C) + Number(C) / 2) + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + 2 * Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y='" + Number(Number(D) + 12 + 2 * Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 3 * Number(G)) + 2 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 12 + 2 * Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_line);
                                AE.setAttributeNS(null, "mstroke", "black");
                                AE.setAttributeNS(null, "mstrokewidth", "2px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<line id='" + AQ + "_l'  stroke='black' stroke-width='2px' x1='" + Number(Number(Number(AT) + 4 + 4 * Number(G)) + 2 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y1='" + Number(Number(D) + 12 + 2 * Number(C) + Number(C) / 2) + "' x2='" + Number(Number(Number(AT) + 4 + 4 * Number(G)) + 3 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y2='" + Number(Number(D) + 12 + 2 * Number(C) + Number(C) / 2) + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 4 * Number(G)) + 3 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 12 + 2 * Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay)
                            }
                        }
                        if (r == "Y" && N == 0) {
                            var Az = $("#" + AS.id)[0].getAttribute("mfanls");
                            var Ax = $("#" + AS.id)[0].getAttribute("mfanswflag");
                            var AN = $("#" + AS.id)[0].getAttribute("mfanlsstate");
                            if (isEmptyOrNull(AN)) {
                                AN = "SA"
                            }
                            var AF = Number(D) - 40;
                            var AA = AF + 25;
                            if (AN == "SA") {
                                var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                MicroDraw_impSvgTranslate(Aw, Number(AT) + 5, AF);
                                H.appendChild($("#" + Aw)[0]);
                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                MicroDraw_textMove(Av, Number(AT) + 18, AA, "假扣", "14", "start");
                                H.appendChild($("#" + Av)[0]);
                                var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) - 17, AF);
                                H.appendChild($("#" + Aw)[0]);
                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                MicroDraw_textMove(Av, Number(AT) + Number(AK) - 17, AA, "假扣", "14", "end");
                                H.appendChild($("#" + Av)[0])
                            }
                            if (AN == "SA") {
                                var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) / 2 - 35, Number(AF) - 10);
                                H.appendChild($("#" + Aw)[0]);
                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                MicroDraw_textMove(Av, Number(AT) + Number(AK) / 2 - 35, Number(AA) - 20, "假扣", "14", "end");
                                H.appendChild($("#" + Av)[0]);
                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                MicroDraw_textMove(Av, Number(AT) + Number(AK) / 2 - 35, Number(AA) - 0, "5只", "14", "end");
                                H.appendChild($("#" + Av)[0])
                            } else {
                                var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) / 2 - 35, Number(AF) - 10);
                                H.appendChild($("#" + Aw)[0]);
                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                MicroDraw_textMove(Av, Number(AT) + Number(AK) / 2 - 35, Number(AA) - 20, "假扣", "14", "end");
                                H.appendChild($("#" + Av)[0]);
                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                MicroDraw_textMove(Av, Number(AT) + Number(AK) / 2 - 35, Number(AA) - 0, "1只", "14", "end");
                                H.appendChild($("#" + Av)[0])
                            }
                            if (AN == "SA" || AN == "SD") {
                                var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) / 2 + 19, Number(AF) - 10);
                                H.appendChild($("#" + Aw)[0]);
                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                MicroDraw_textMove(Av, Number(AT) + Number(AK) / 2 + 31, Number(AA) - 10, "扣锁", "14", "start");
                                H.appendChild($("#" + Av)[0])
                            }
                            var As = Number(AT) + Number(AK) / 2 + 26;
                            var At = Number(D) - 12;
                            var AW = Number(As) - 18;
                            var AX = Number(D) + 4 + Number(C);
                            if (AN == "SA" || AN == "SD") {
                                var AM = MicroDraw_AddCustom(mDrawFlag_Custom_line);
                                MicroDraw_lineMove(AM, As, At, AW, AX);
                                H.appendChild($("#" + AM)[0])
                            }
                            var As = Number(AT) + Number(AK) / 2 - 28;
                            var At = Number(D) - 12;
                            var AW = Number(AT) + Number(AK) / 2 + 26 - 18;
                            var AX = Number(At);
                            if (AN == "SA") {
                                var AM = MicroDraw_AddCustom(mDrawFlag_Custom_line);
                                MicroDraw_lineMove(AM, As, At, AW, AX);
                                H.appendChild($("#" + AM)[0]);
                                var AM = MicroDraw_AddCustom(mDrawFlag_Custom_line);
                                MicroDraw_lineMove(AM, AW, AX, AW, Number(D) + 4);
                                H.appendChild($("#" + AM)[0]);
                                var AM = MicroDraw_AddCustom(mDrawFlag_Custom_line);
                                MicroDraw_lineMove(AM, Number(AT) + Number(AK) / 2 - 8, AX, Number(AT) + Number(AK) / 2 - 8, Number(D) + 4);
                                H.appendChild($("#" + AM)[0])
                            }
                            if (AN == "SA" || AN == "SD") {
                                var AM = MicroDraw_AddCustom(mDrawFlag_Custom_line);
                                MicroDraw_lineMove(AM, As, At, Number(AT) + Number(AK) / 2 - 8, Number(D) + 4 + Number(C));
                                H.appendChild($("#" + AM)[0])
                            }
                            if (AN == "SA") {
                                var AM = MicroDraw_AddCustom(mDrawFlag_Custom_line);
                                MicroDraw_lineMove(AM, As, At, Number(AT) + Number(AK) / 2 - 8, Number(D) + 12 + 2 * Number(C));
                                H.appendChild($("#" + AM)[0]);
                                var AM = MicroDraw_AddCustom(mDrawFlag_Custom_line);
                                MicroDraw_lineMove(AM, Number(AT) + Number(AK) / 2 - 12, Number(D) + 12 + 2 * Number(C) - 10, AW, Number(D) + 12 + 2 * Number(C));
                                H.appendChild($("#" + AM)[0])
                            }
                            var AF = Number(D) + Number(B) - 4;
                            var AA = AF + 25;
                            if (AN == "SA" || AN == "SD") {
                                var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                MicroDraw_impSvgTranslate(Aw, Number(AT) + 5, AF);
                                H.appendChild($("#" + Aw)[0]);
                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                MicroDraw_textMove(Av, Number(AT) + 18, AA, "扣锁", "14", "start");
                                H.appendChild($("#" + Av)[0]);
                                var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) - 17, AF);
                                H.appendChild($("#" + Aw)[0]);
                                var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                MicroDraw_textMove(Av, Number(AT) + Number(AK) - 17, AA, "扣锁", "14", "end");
                                H.appendChild($("#" + Av)[0]);
                                if (Az == "K") {
                                    var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                    MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) / 2 - 15, AF);
                                    H.appendChild($("#" + Aw)[0]);
                                    var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                    MicroDraw_textMove(Av, Number(AT) + Number(AK) / 2 - 15, AA, "假扣", "14", "end");
                                    H.appendChild($("#" + Av)[0]);
                                    var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_ks);
                                    MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) / 2 + 3, AF);
                                    H.appendChild($("#" + Aw)[0]);
                                    var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                    MicroDraw_textMove(Av, Number(AT) + Number(AK) / 2 + 15, AA, "扣锁", "14", "start");
                                    H.appendChild($("#" + Av)[0])
                                } else {
                                    if (Az == "Z") {
                                        var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_zs);
                                        MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) / 2 - 16, AF);
                                        H.appendChild($("#" + Aw)[0]);
                                        var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                        MicroDraw_textMove(Av, Number(AT) + Number(AK) / 2 - 16, AA, "假执手", "14", "end");
                                        H.appendChild($("#" + Av)[0]);
                                        var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_zs);
                                        MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) / 2 + 2, AF);
                                        H.appendChild($("#" + Aw)[0]);
                                        var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                        MicroDraw_textMove(Av, Number(AT) + Number(AK) / 2 + 17, AA, "执手", "14", "start");
                                        H.appendChild($("#" + Av)[0])
                                    } else {
                                        if (Az == "L") {
                                            var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_dls_l);
                                            MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) / 2 - 22, AF);
                                            H.appendChild($("#" + Aw)[0]);
                                            var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                            MicroDraw_textMove(Av, Number(AT) + Number(AK) / 2 - 22, Number(AA) - 10, "大拉手", "14", "end");
                                            H.appendChild($("#" + Av)[0]);
                                            var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                            MicroDraw_textMove(Av, Number(AT) + Number(AK) / 2 - 22, Number(AA) + 10, "+假扣", "14", "end");
                                            H.appendChild($("#" + Av)[0]);
                                            var Aw = MicroDraw_AddCustom_impSvgHtml(mPublicGdHandle_dls_r);
                                            MicroDraw_impSvgTranslate(Aw, Number(AT) + Number(AK) / 2 + 2, AF);
                                            H.appendChild($("#" + Aw)[0]);
                                            var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                            MicroDraw_textMove(Av, Number(AT) + Number(AK) / 2 + 26, Number(AA) - 10, "大拉手", "14", "start");
                                            H.appendChild($("#" + Av)[0]);
                                            var Av = MicroDraw_AddCustom(mDrawFlag_Custom_text);
                                            MicroDraw_textMove(Av, Number(AT) + Number(AK) / 2 + 26, Number(AA) + 10, "+扣锁", "14", "start");
                                            H.appendChild($("#" + Av)[0])
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    case "1轨2推":
                        if (AO == "0,1,1,0") {
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + Number(AK) / 2 - 2 - Number(G)) - Number(Number(Number(AK) - 20) / 4 - 2 * Number(G)) - Number(G)) + "' y='" + Number(Number(D) + Number(B) / 2 - Number(C) / 2) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(Number(AK) - 20) / 4 - 2 * Number(G));
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + Number(AK) / 2 - 2 - Number(G)) - Number(Number(Number(AK) - 20) / 4 - 2 * Number(G))) + "' y='" + Number(Number(D) + Number(B) / 2 - Number(C) / 2 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 - 2 - Number(G)) + "' y='" + Number(Number(D) + Number(B) / 2 - Number(C) / 2) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 + 2) + "' y='" + Number(Number(D) + Number(B) / 2 - Number(C) / 2) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(Number(AK) - 20) / 4 - 2 * Number(G));
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 + 2 + Number(G)) + "' y='" + Number(Number(D) + Number(B) / 2 - Number(C) / 2 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 + 2 + Number(G) + Number(Number(Number(AK) - 20) / 4 - 2 * Number(G))) + "' y='" + Number(Number(D) + Number(B) / 2 - Number(C) / 2) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay)
                        } else {
                            if (AO == "1,1,0,0") {
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + Number(B) / 2 - Number(C) / 2) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(Number(AK) - 20) / 4 - 2 * Number(G));
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G)) + "' y='" + Number(Number(D) + Number(B) / 2 - Number(C) / 2 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G) + Number(Number(Number(AK) - 20) / 4 - 2 * Number(G))) + "' y='" + Number(Number(D) + Number(B) / 2 - Number(C) / 2) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + Number(AK) / 2 - 2 - Number(G)) - Number(Number(Number(AK) - 20) / 4 - 2 * Number(G)) - Number(G)) + "' y='" + Number(Number(D) + Number(B) / 2 - Number(C) / 2) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(Number(AK) - 20) / 4 - 2 * Number(G));
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + Number(AK) / 2 - 2 - Number(G)) - Number(Number(Number(AK) - 20) / 4 - 2 * Number(G))) + "' y='" + Number(Number(D) + Number(B) / 2 - Number(C) / 2 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 - 2 - Number(G)) + "' y='" + Number(Number(D) + Number(B) / 2 - Number(C) / 2) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay)
                            } else {
                                if (AO == "0,0,1,1") {
                                    var AQ = MicroDraw_GUID();
                                    var AE = document.createElementNS(mDrawSvgNS, "g");
                                    AE.setAttributeNS(null, "id", AQ);
                                    AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                    AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                    AE.setAttributeNS(null, "mstroke", "#000000");
                                    AE.setAttributeNS(null, "mstrokewidth", "1px");
                                    H.appendChild(AE);
                                    var Ay = $("#" + AQ).html();
                                    Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 + 2) + "' y='" + Number(Number(D) + Number(B) / 2 - Number(C) / 2) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                    $("#" + AQ).html(Ay);
                                    var AQ = MicroDraw_GUID();
                                    var AE = document.createElementNS(mDrawSvgNS, "g");
                                    AE.setAttributeNS(null, "id", AQ);
                                    AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                    AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                    AE.setAttributeNS(null, "mstroke", "#000000");
                                    AE.setAttributeNS(null, "mstrokewidth", "1px");
                                    H.appendChild(AE);
                                    var Ay = $("#" + AQ).html();
                                    var AI = Number(Number(Number(AK) - 20) / 4 - 2 * Number(G));
                                    var AL = Number(Number(C) - 4);
                                    if (AI < 1) {
                                        AI = 1
                                    }
                                    if (AL < 1) {
                                        AL = 1
                                    }
                                    Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 + 2 + Number(G)) + "' y='" + Number(Number(D) + Number(B) / 2 - Number(C) / 2 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                    $("#" + AQ).html(Ay);
                                    var AQ = MicroDraw_GUID();
                                    var AE = document.createElementNS(mDrawSvgNS, "g");
                                    AE.setAttributeNS(null, "id", AQ);
                                    AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                    AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                    AE.setAttributeNS(null, "mstroke", "#000000");
                                    AE.setAttributeNS(null, "mstrokewidth", "1px");
                                    H.appendChild(AE);
                                    var Ay = $("#" + AQ).html();
                                    Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) / 2 + 2 + Number(G) + Number(Number(Number(AK) - 20) / 4 - 2 * Number(G))) + "' y='" + Number(Number(D) + Number(B) / 2 - Number(C) / 2) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                    $("#" + AQ).html(Ay);
                                    var AQ = MicroDraw_GUID();
                                    var AE = document.createElementNS(mDrawSvgNS, "g");
                                    AE.setAttributeNS(null, "id", AQ);
                                    AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                    AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                    AE.setAttributeNS(null, "mstroke", "#000000");
                                    AE.setAttributeNS(null, "mstrokewidth", "1px");
                                    H.appendChild(AE);
                                    var Ay = $("#" + AQ).html();
                                    Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + Number(AK) - 4 - Number(G)) - Number(Number(Number(AK) - 20) / 4 - 2 * Number(G)) - Number(G)) + "' y='" + Number(Number(D) + Number(B) / 2 - Number(C) / 2) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                    $("#" + AQ).html(Ay);
                                    var AQ = MicroDraw_GUID();
                                    var AE = document.createElementNS(mDrawSvgNS, "g");
                                    AE.setAttributeNS(null, "id", AQ);
                                    AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                    AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                    AE.setAttributeNS(null, "mstroke", "#000000");
                                    AE.setAttributeNS(null, "mstrokewidth", "1px");
                                    H.appendChild(AE);
                                    var Ay = $("#" + AQ).html();
                                    var AI = Number(Number(Number(AK) - 20) / 4 - 2 * Number(G));
                                    var AL = Number(Number(C) - 4);
                                    if (AI < 1) {
                                        AI = 1
                                    }
                                    if (AL < 1) {
                                        AL = 1
                                    }
                                    Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + Number(AK) - 4 - Number(G)) - Number(Number(Number(AK) - 20) / 4 - 2 * Number(G))) + "' y='" + Number(Number(D) + Number(B) / 2 - Number(C) / 2 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                    $("#" + AQ).html(Ay);
                                    var AQ = MicroDraw_GUID();
                                    var AE = document.createElementNS(mDrawSvgNS, "g");
                                    AE.setAttributeNS(null, "id", AQ);
                                    AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                    AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                    AE.setAttributeNS(null, "mstroke", "#000000");
                                    AE.setAttributeNS(null, "mstrokewidth", "1px");
                                    H.appendChild(AE);
                                    var Ay = $("#" + AQ).html();
                                    Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + Number(AK) - 4 - Number(G)) + "' y='" + Number(Number(D) + Number(B) / 2 - Number(C) / 2) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                    $("#" + AQ).html(Ay)
                                }
                            }
                        }
                        break;
                    case "2推2固":
                        if (AO == "0,1,1,0") {
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 12 - 6 * Number(G)) / 4;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G)) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 12 - 6 * Number(G)) / 4;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + 2 * Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 3 * Number(G)) + 2 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 12 - 6 * Number(G)) / 4;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 4 * Number(G)) + 2 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 4 * Number(G)) + 3 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 4 * Number(G)) + 3 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 12 - 6 * Number(G)) / 4;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 5 * Number(G)) + 3 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 5 * Number(G)) + 4 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay)
                        } else {
                            if (AO == "1,0,0,1") {
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 12 - 6 * Number(G)) / 4;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 12 - 6 * Number(G)) / 4;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 2 * Number(G)) + 2 * Number(Number(AK) - 12 - 6 * Number(G)) / 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 3 * Number(G)) + 2 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 12 - 6 * Number(G)) / 4;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 4 * Number(G)) + 2 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 4 * Number(G)) + 3 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 4 * Number(G)) + 3 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 12 - 6 * Number(G)) / 4;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 5 * Number(G)) + 3 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + 5 * Number(G)) + 4 * Number(Number(AK) - 12 - 6 * Number(G)) / 4 + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay)
                            }
                        }
                        break;
                    case "上下推":
                        break;
                    case "上固下推":
                        break;
                    case "上推下固":
                        break;
                    case "6推":
                        if (AO == "0,1,2,2,1,0") {
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 12 - 8 * Number(G)) / 6;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G)) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 12 - 8 * Number(G)) / 6) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 12 - 8 * Number(G)) / 6) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 12 - 8 * Number(G)) / 6;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 12 - 8 * Number(G)) / 6 + Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + 2 * Number(Number(AK) - 12 - 8 * Number(G)) / 6 + Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + 2 * Number(Number(AK) - 12 - 8 * Number(G)) / 6 + Number(G)) + "' y='" + Number(Number(D) + 12 + 2 * Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 12 - 8 * Number(G)) / 6;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + 2 * Number(Number(AK) - 12 - 8 * Number(G)) / 6 + 2 * Number(G)) + "' y='" + Number(Number(D) + 12 + 2 * Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + 3 * Number(Number(AK) - 12 - 8 * Number(G)) / 6 + 2 * Number(G)) + "' y='" + Number(Number(D) + 12 + 2 * Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + 3 * Number(Number(AK) - 12 - 8 * Number(G)) / 6 + 3 * Number(G) + 4) + "' y='" + Number(Number(D) + 12 + 2 * Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 12 - 8 * Number(G)) / 6;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + 3 * Number(Number(AK) - 12 - 8 * Number(G)) / 6 + 4 * Number(G) + 4) + "' y='" + Number(Number(D) + 12 + 2 * Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + 4 * Number(Number(AK) - 12 - 8 * Number(G)) / 6 + 4 * Number(G) + 4) + "' y='" + Number(Number(D) + 12 + 2 * Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + 4 * Number(Number(AK) - 12 - 8 * Number(G)) / 6 + 4 * Number(G) + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 12 - 8 * Number(G)) / 6;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + 4 * Number(Number(AK) - 12 - 8 * Number(G)) / 6 + 5 * Number(G) + 4) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + 5 * Number(Number(AK) - 12 - 8 * Number(G)) / 6 + 5 * Number(G) + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + 5 * Number(Number(AK) - 12 - 8 * Number(G)) / 6 + 5 * Number(G) + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            var AI = Number(Number(AK) - 12 - 8 * Number(G)) / 6;
                            var AL = Number(Number(C) - 4);
                            if (AI < 1) {
                                AI = 1
                            }
                            if (AL < 1) {
                                AL = 1
                            }
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + 5 * Number(Number(AK) - 12 - 8 * Number(G)) / 6 + 6 * Number(G) + 4) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay);
                            var AQ = MicroDraw_GUID();
                            var AE = document.createElementNS(mDrawSvgNS, "g");
                            AE.setAttributeNS(null, "id", AQ);
                            AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                            AE.setAttributeNS(null, "mfill", mDrawProductColor);
                            AE.setAttributeNS(null, "mstroke", "#000000");
                            AE.setAttributeNS(null, "mstrokewidth", "1px");
                            H.appendChild(AE);
                            var Ay = $("#" + AQ).html();
                            Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + 6 * Number(Number(AK) - 12 - 8 * Number(G)) / 6 + 6 * Number(G) + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                            $("#" + AQ).html(Ay)
                        } else {
                            if (AO == "2,1,0,0,1,2") {
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4) + "' y='" + Number(Number(D) + 12 + 2 * Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 12 - 8 * Number(G)) / 6;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(AT) + 4 + Number(G)) + "' y='" + Number(Number(D) + 12 + 2 * Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 12 - 8 * Number(G)) / 6) + "' y='" + Number(Number(D) + 12 + 2 * Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 12 - 8 * Number(G)) / 6) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 12 - 8 * Number(G)) / 6;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + Number(Number(AK) - 12 - 8 * Number(G)) / 6 + Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + 2 * Number(Number(AK) - 12 - 8 * Number(G)) / 6 + Number(G)) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + 2 * Number(Number(AK) - 12 - 8 * Number(G)) / 6 + Number(G)) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 12 - 8 * Number(G)) / 6;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + 2 * Number(Number(AK) - 12 - 8 * Number(G)) / 6 + 2 * Number(G)) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + 3 * Number(Number(AK) - 12 - 8 * Number(G)) / 6 + 2 * Number(G)) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + 3 * Number(Number(AK) - 12 - 8 * Number(G)) / 6 + 3 * Number(G) + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 12 - 8 * Number(G)) / 6;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + 3 * Number(Number(AK) - 12 - 8 * Number(G)) / 6 + 4 * Number(G) + 4) + "' y='" + Number(Number(D) + 4 + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + 4 * Number(Number(AK) - 12 - 8 * Number(G)) / 6 + 4 * Number(G) + 4) + "' y='" + Number(Number(D) + 4) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + 4 * Number(Number(AK) - 12 - 8 * Number(G)) / 6 + 4 * Number(G) + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 12 - 8 * Number(G)) / 6;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + 4 * Number(Number(AK) - 12 - 8 * Number(G)) / 6 + 5 * Number(G) + 4) + "' y='" + Number(Number(D) + 8 + Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + 5 * Number(Number(AK) - 12 - 8 * Number(G)) / 6 + 5 * Number(G) + 4) + "' y='" + Number(Number(D) + 8 + Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + 5 * Number(Number(AK) - 12 - 8 * Number(G)) / 6 + 5 * Number(G) + 4) + "' y='" + Number(Number(D) + 12 + 2 * Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawGlassColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                var AI = Number(Number(AK) - 12 - 8 * Number(G)) / 6;
                                var AL = Number(Number(C) - 4);
                                if (AI < 1) {
                                    AI = 1
                                }
                                if (AL < 1) {
                                    AL = 1
                                }
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + 5 * Number(Number(AK) - 12 - 8 * Number(G)) / 6 + 6 * Number(G) + 4) + "' y='" + Number(Number(D) + 12 + 2 * Number(C) + 2) + "' width='" + AI + "' height='" + AL + "' stroke='#000000' stroke-width='1px' fill='" + mDrawGlassColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay);
                                var AQ = MicroDraw_GUID();
                                var AE = document.createElementNS(mDrawSvgNS, "g");
                                AE.setAttributeNS(null, "id", AQ);
                                AE.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                                AE.setAttributeNS(null, "mfill", mDrawProductColor);
                                AE.setAttributeNS(null, "mstroke", "#000000");
                                AE.setAttributeNS(null, "mstrokewidth", "1px");
                                H.appendChild(AE);
                                var Ay = $("#" + AQ).html();
                                Ay = Ay + "<rect id='" + AQ + "_r' x='" + Number(Number(Number(AT) + 4 + Number(G)) + 6 * Number(Number(AK) - 12 - 8 * Number(G)) / 6 + 6 * Number(G) + 4) + "' y='" + Number(Number(D) + 12 + 2 * Number(C)) + "' width='" + Number(G) + "' height='" + C + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                                $("#" + AQ).html(Ay)
                            }
                        }
                        break
                    }
                })
            } else {
                if ($("#" + c + " [mtype*='" + mDrawFlag_Zdm + "']").length > 0) {
                    var Aj = 30;
                    B = 60;
                    var L = MicroDraw_GUID();
                    var Ar = document.createElementNS(mDrawSvgNS, "g");
                    Ar.setAttributeNS(null, "id", L);
                    Ar.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                    Ar.setAttributeNS(null, "mfill", a);
                    Ar.setAttributeNS(null, "mstroke", "#000000");
                    Ar.setAttributeNS(null, "mstrokewidth", "1px");
                    H.appendChild(Ar);
                    var Q = $("#" + L).html();
                    Q = Q + "<rect id='" + L + "_r' x='" + Ab + "' y='" + D + "' width='" + mDrawThickFrame + "' height='" + B + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                    $("#" + L).html(Q);
                    var L = MicroDraw_GUID();
                    var Ar = document.createElementNS(mDrawSvgNS, "g");
                    Ar.setAttributeNS(null, "id", L);
                    Ar.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                    Ar.setAttributeNS(null, "mfill", a);
                    Ar.setAttributeNS(null, "mstroke", "#000000");
                    Ar.setAttributeNS(null, "mstrokewidth", "1px");
                    H.appendChild(Ar);
                    var Q = $("#" + L).html();
                    Q = Q + "<rect id='" + L + "_r' x='" + (Number(Ab) + Number(T) - Number(mDrawThickFrame)).toString() + "' y='" + D + "' width='" + mDrawThickFrame + "' height='" + B + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                    $("#" + L).html(Q);
                    var L = MicroDraw_GUID();
                    var Ar = document.createElementNS(mDrawSvgNS, "g");
                    Ar.setAttributeNS(null, "id", L);
                    Ar.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                    Ar.setAttributeNS(null, "mfill", a);
                    Ar.setAttributeNS(null, "mstroke", "#000000");
                    Ar.setAttributeNS(null, "mstrokewidth", "1px");
                    H.appendChild(Ar);
                    var Q = $("#" + L).html();
                    var Ai = (Number(T) - 2 * Number(mDrawThickFrame));
                    if (Ai < 1) {
                        Ai = 1
                    }
                    Q = Q + "<rect id='" + L + "_r' x='" + (Number(Ab) + Number(mDrawThickFrame)).toString() + "' y='" + (Number(D) + Number(B) / 2 - Number(A) / 2).toString() + "' width='" + Ai.toString() + "' height='" + A + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                    $("#" + L).html(Q);
                    var Ap = Ao.getAttribute("mgduptxt");
                    var Ak = Ao.getAttribute("mgddowntxt");
                    if (isEmptyOrNull(Ap)) {
                        Ap = "室外"
                    }
                    if (isEmptyOrNull(Ak)) {
                        Ak = "室内"
                    }
                    var L = MicroDraw_GUID();
                    var Ar = document.createElementNS(mDrawSvgNS, "g");
                    Ar.setAttributeNS(null, "id", L);
                    Ar.setAttributeNS(null, "mtype", mDrawFlag_Custom_text);
                    Ar.setAttributeNS(null, "mfontsize", E);
                    Ar.setAttributeNS(null, "mtext", Ap);
                    Ar.setAttributeNS(null, "mfill", "#000000");
                    Ar.setAttributeNS(null, "mdir", "lr");
                    Ar.setAttributeNS(null, "mfontweight", "400");
                    Ar.setAttributeNS(null, "mgdtxtbelongto", R);
                    Ar.setAttributeNS(null, "mgdtxtbelongtoproperty", "mgduptxt");
                    H.appendChild(Ar);
                    var Q = $("#" + L).html();
                    var Ag = (Number(Ab) - 54);
                    var Af = (Number(D) - 40 + (Number(B) + 90) / 2 - 15);
                    Q = Q + "<text id='" + L + "_t' x='" + Ag + "' y='" + Af + "' font-size='" + E + "' text-anchor='end' fill='#000000' writing-mode='lr' font-weight='400'>" + Ap + "</text>";
                    $("#" + L).html(Q);
                    var Ah = $.Micro_SVG.getSVGRect($("#" + L + "_t")).width;
                    var L = MicroDraw_GUID();
                    var Ar = document.createElementNS(mDrawSvgNS, "g");
                    Ar.setAttributeNS(null, "id", L);
                    Ar.setAttributeNS(null, "mtype", mDrawFlag_Custom_text);
                    Ar.setAttributeNS(null, "mfontsize", E);
                    Ar.setAttributeNS(null, "mtext", Ak);
                    Ar.setAttributeNS(null, "mfill", "#000000");
                    Ar.setAttributeNS(null, "mdir", "lr");
                    Ar.setAttributeNS(null, "mfontweight", "400");
                    Ar.setAttributeNS(null, "mgdtxtbelongto", R);
                    Ar.setAttributeNS(null, "mgdtxtbelongtoproperty", "mgddowntxt");
                    H.appendChild(Ar);
                    var Q = $("#" + L).html();
                    var Aq = (Number(Ab) - 54);
                    var n = (Number(D) + Number(B) + 50 - (Number(B) + 90) / 2 + 15);
                    Q = Q + "<text id='" + L + "_t' x='" + Aq + "' y='" + n + "' font-size='" + E + "' text-anchor='end' fill='#000000' writing-mode='lr' font-weight='400'>" + Ak + "</text>";
                    $("#" + L).html(Q);
                    var K = $.Micro_SVG.getSVGRect($("#" + L + "_t")).width;
                    var L = MicroDraw_GUID();
                    var Al = document.createElementNS(mDrawSvgNS, "line");
                    var b = (Ag < Aq ? Ag: Aq) + 3;
                    var P = Number(b) - Number(Ah > K ? Ah: K) - 9;
                    var p = y2 = (Number(Af) + Number(n)) / 2 - 6;
                    Al.setAttributeNS(null, "id", L);
                    Al.setAttributeNS(null, "x1", b);
                    Al.setAttributeNS(null, "x2", P);
                    Al.setAttributeNS(null, "y1", p);
                    Al.setAttributeNS(null, "y2", y2);
                    Al.setAttributeNS(null, "stroke", "#000");
                    Al.setAttributeNS(null, "stroke-width", "2");
                    Al.setAttributeNS(null, "mgdtxtbelongto", R);
                    Al.setAttributeNS(null, "mgdtxtbelongtoproperty", "dividingline");
                    H.appendChild(Al);
                    $("#" + c + " [mtype='" + mDrawFlag_TingV + "']").each(function(At, As) {
                        var Ax = $("#" + As.id + "_r1")[0].getAttribute("x");
                        var Ay = $("#" + As.id + "_r1")[0].getAttribute("y");
                        var Aw = $("#" + As.id + "_r1")[0].getAttribute("width");
                        var o = $("#" + As.id + "_r1")[0].getAttribute("height");
                        var Av = MicroDraw_GUID();
                        var Az = document.createElementNS(mDrawSvgNS, "g");
                        Az.setAttributeNS(null, "id", Av);
                        Az.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                        Az.setAttributeNS(null, "mfill", a);
                        Az.setAttributeNS(null, "mstroke", "#000000");
                        Az.setAttributeNS(null, "mstrokewidth", "1px");
                        H.appendChild(Az);
                        var Au = $("#" + Av).html();
                        Au = Au + "<rect id='" + Av + "_r' x='" + Number(Ax) + "' y='" + D + "' width='" + mDrawThickTing + "' height='" + B + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                        $("#" + Av).html(Au)
                    });
                    $("#" + c + " [mtype*='" + mDrawFlag_Zdm + "']").each(function(Av, Aw) {
                        var AH = $("#" + Aw.id + "_bg")[0].getAttribute("x");
                        var AI = $("#" + Aw.id + "_bg")[0].getAttribute("y");
                        var AD = $("#" + Aw.id + "_bg")[0].getAttribute("width");
                        var AJ = $("#" + Aw.id + "_bg")[0].getAttribute("height");
                        var Az = Number($("#" + Aw.id)[0].getAttribute("mlscnt"));
                        var AF = Number($("#" + Aw.id)[0].getAttribute("mrscnt"));
                        var AB = $("#" + Aw.id)[0].getAttribute("mgdopendir");
                        var Ax = $("#" + Aw.id)[0].getAttribute("mgdglasstxt");
                        if (isEmptyOrNull(AB)) {
                            AB = "上"
                        }
                        if (AB == "上") {
                            var AE = MicroDraw_GUID();
                            var AA = document.createElementNS(mDrawSvgNS, "g");
                            AA.setAttributeNS(null, "id", AE);
                            AA.setAttributeNS(null, "mtype", mDrawFlag_Custom_line);
                            AA.setAttributeNS(null, "mstroke", "black");
                            AA.setAttributeNS(null, "mstrokewidth", "2px");
                            H.appendChild(AA);
                            var Ay = $("#" + AE).html();
                            var AC = Az + AF;
                            if (AC > 0) {
                                var At = ((AD - Aj) / AC).toFixed(4);
                                var o = Number(AH);
                                for (var AG = 1; AG <= Az; AG++) {
                                    var Au = 0,
                                    As = 0;
                                    if (AG % 2 == 0) {
                                        Au = (Number(D) - Number(20)).toString();
                                        As = (Number(D) + Number(B) / 2 - Number(A) / 2).toString()
                                    } else {
                                        Au = (Number(D) + Number(B) / 2 - Number(A) / 2).toString();
                                        As = (Number(D) - Number(20)).toString()
                                    }
                                    if (AG != 1) {
                                        o += At
                                    }
                                    Ay = Ay + "<line id='" + AE + "_l_" + AG + "' stroke='black' stroke-width='2px' x1='" + o + "' y1='" + Au + "' x2='" + (o + At) + "' y2='" + As + "' pointer-events='all'/>"
                                }
                                if (Az == 0) {
                                    o = Number(AH) + Aj
                                } else {
                                    o += At + Aj
                                }
                                for (var AG = 1; AG <= AF; AG++) {
                                    var Au = 0,
                                    As = 0;
                                    if (AF % 2 == 0) {
                                        if (AG % 2 == 0) {
                                            Au = (Number(D) - Number(20)).toString();
                                            As = (Number(D) + Number(B) / 2 - Number(A) / 2).toString()
                                        } else {
                                            Au = (Number(D) + Number(B) / 2 - Number(A) / 2).toString();
                                            As = (Number(D) - Number(20)).toString()
                                        }
                                    } else {
                                        if (AG % 2 == 0) {
                                            Au = (Number(D) + Number(B) / 2 - Number(A) / 2).toString();
                                            As = (Number(D) - Number(20)).toString()
                                        } else {
                                            Au = (Number(D) - Number(20)).toString();
                                            As = (Number(D) + Number(B) / 2 - Number(A) / 2).toString()
                                        }
                                    }
                                    if (AG != 1) {
                                        o += At
                                    }
                                    Ay = Ay + "<line id='" + AE + "_l_" + (Az + AG) + "' stroke='black' stroke-width='2px' x1='" + o + "' y1='" + Au + "' x2='" + (o + At) + "' y2='" + As + "' pointer-events='all'/>"
                                }
                            }
                            $("#" + AE).html(Ay)
                        } else {
                            if (AB == "下") {
                                var AE = MicroDraw_GUID();
                                var AA = document.createElementNS(mDrawSvgNS, "g");
                                AA.setAttributeNS(null, "id", AE);
                                AA.setAttributeNS(null, "mtype", mDrawFlag_Custom_line);
                                AA.setAttributeNS(null, "mstroke", "black");
                                AA.setAttributeNS(null, "mstrokewidth", "2px");
                                H.appendChild(AA);
                                var Ay = $("#" + AE).html();
                                var AC = Az + AF;
                                if (AC > 0) {
                                    var At = ((AD - Aj) / AC).toFixed(4);
                                    var o = Number(AH);
                                    for (var AG = 1; AG <= Az; AG++) {
                                        var Au = 0,
                                        As = 0;
                                        if (AG % 2 == 0) {
                                            Au = (Number(D) + Number(B) + Number(20)).toString();
                                            As = (Number(D) + Number(B) / 2 + Number(A) / 2).toString()
                                        } else {
                                            Au = (Number(D) + Number(B) / 2 + Number(A) / 2).toString();
                                            As = (Number(D) + Number(B) + Number(20)).toString()
                                        }
                                        if (AG != 1) {
                                            o += At
                                        }
                                        Ay = Ay + "<line id='" + AE + "_l_" + AG + "' stroke='black' stroke-width='2px' x1='" + o + "' y1='" + Au + "' x2='" + (o + At) + "' y2='" + As + "' pointer-events='all'/>"
                                    }
                                    if (Az == 0) {
                                        o += Aj
                                    } else {
                                        o += At + Aj
                                    }
                                    for (var AG = 1; AG <= AF; AG++) {
                                        var Au = 0,
                                        As = 0;
                                        if (AF % 2 == 0) {
                                            if (AG % 2 == 0) {
                                                Au = (Number(D) + Number(B) + Number(20)).toString();
                                                As = (Number(D) + Number(B) / 2 + Number(A) / 2).toString()
                                            } else {
                                                Au = (Number(D) + Number(B) / 2 + Number(A) / 2).toString();
                                                As = (Number(D) + Number(B) + Number(20)).toString()
                                            }
                                        } else {
                                            if (AG % 2 == 0) {
                                                Au = (Number(D) + Number(B) / 2 + Number(A) / 2).toString();
                                                As = (Number(D) + Number(B) + Number(20)).toString()
                                            } else {
                                                Au = (Number(D) + Number(B) + Number(20)).toString();
                                                As = (Number(D) + Number(B) / 2 + Number(A) / 2).toString()
                                            }
                                        }
                                        if (AG != 1) {
                                            o += At
                                        }
                                        Ay = Ay + "<line id='" + AE + "_l_" + (Az + AG) + "' stroke='black' stroke-width='2px' x1='" + o + "' y1='" + Au + "' x2='" + (o + At) + "' y2='" + As + "' pointer-events='all'/>"
                                    }
                                }
                                $("#" + AE).html(Ay)
                            }
                        }
                    })
                } else {
                    var L = MicroDraw_GUID();
                    var Ar = document.createElementNS(mDrawSvgNS, "g");
                    Ar.setAttributeNS(null, "id", L);
                    Ar.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                    Ar.setAttributeNS(null, "mfill", a);
                    Ar.setAttributeNS(null, "mstroke", "#000000");
                    Ar.setAttributeNS(null, "mstrokewidth", "1px");
                    H.appendChild(Ar);
                    var Q = $("#" + L).html();
                    Q = Q + "<rect id='" + L + "_r' x='" + Ab + "' y='" + D + "' width='" + mDrawThickFrame + "' height='" + B + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                    $("#" + L).html(Q);
                    var L = MicroDraw_GUID();
                    var Ar = document.createElementNS(mDrawSvgNS, "g");
                    Ar.setAttributeNS(null, "id", L);
                    Ar.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                    Ar.setAttributeNS(null, "mfill", a);
                    Ar.setAttributeNS(null, "mstroke", "#000000");
                    Ar.setAttributeNS(null, "mstrokewidth", "1px");
                    H.appendChild(Ar);
                    var Q = $("#" + L).html();
                    Q = Q + "<rect id='" + L + "_r' x='" + (Number(Ab) + Number(T) - Number(mDrawThickFrame)).toString() + "' y='" + D + "' width='" + mDrawThickFrame + "' height='" + B + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                    $("#" + L).html(Q);
                    var L = MicroDraw_GUID();
                    var Ar = document.createElementNS(mDrawSvgNS, "g");
                    Ar.setAttributeNS(null, "id", L);
                    Ar.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                    Ar.setAttributeNS(null, "mfill", a);
                    Ar.setAttributeNS(null, "mstroke", "#000000");
                    Ar.setAttributeNS(null, "mstrokewidth", "1px");
                    H.appendChild(Ar);
                    var Q = $("#" + L).html();
                    var Ai = (Number(T) - 2 * Number(mDrawThickFrame));
                    if (Ai < 1) {
                        Ai = 1
                    }
                    Q = Q + "<rect id='" + L + "_r' x='" + (Number(Ab) + Number(mDrawThickFrame)).toString() + "' y='" + (Number(D) + Number(B) / 2 - Number(A) / 2).toString() + "' width='" + Ai.toString() + "' height='" + A + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                    $("#" + L).html(Q);
                    var Ap = Ao.getAttribute("mgduptxt");
                    var Ak = Ao.getAttribute("mgddowntxt");
                    if (isEmptyOrNull(Ap)) {
                        Ap = "室外"
                    }
                    if (isEmptyOrNull(Ak)) {
                        Ak = "室内"
                    }
                    var L = MicroDraw_GUID();
                    var Ar = document.createElementNS(mDrawSvgNS, "g");
                    Ar.setAttributeNS(null, "id", L);
                    Ar.setAttributeNS(null, "mtype", mDrawFlag_Custom_text);
                    Ar.setAttributeNS(null, "mfontsize", E);
                    Ar.setAttributeNS(null, "mtext", Ap);
                    Ar.setAttributeNS(null, "mfill", "#000000");
                    Ar.setAttributeNS(null, "mdir", "lr");
                    Ar.setAttributeNS(null, "mfontweight", "400");
                    Ar.setAttributeNS(null, "mgdtxtbelongto", R);
                    Ar.setAttributeNS(null, "mgdtxtbelongtoproperty", "mgduptxt");
                    H.appendChild(Ar);
                    var Q = $("#" + L).html();
                    var Ag = (Number(Ab) - 54);
                    var Af = (Number(D) - 40 + (Number(B) + 90) / 2 - 15);
                    Q = Q + "<text id='" + L + "_t' x='" + Ag + "' y='" + Af + "' font-size='" + E + "' text-anchor='end' fill='#000000' writing-mode='lr' font-weight='400'>" + Ap + "</text>";
                    $("#" + L).html(Q);
                    var Ah = $.Micro_SVG.getSVGRect($("#" + L + "_t")).width;
                    var L = MicroDraw_GUID();
                    var Ar = document.createElementNS(mDrawSvgNS, "g");
                    Ar.setAttributeNS(null, "id", L);
                    Ar.setAttributeNS(null, "mtype", mDrawFlag_Custom_text);
                    Ar.setAttributeNS(null, "mfontsize", E);
                    Ar.setAttributeNS(null, "mtext", Ak);
                    Ar.setAttributeNS(null, "mfill", "#000000");
                    Ar.setAttributeNS(null, "mdir", "lr");
                    Ar.setAttributeNS(null, "mfontweight", "400");
                    Ar.setAttributeNS(null, "mgdtxtbelongto", R);
                    Ar.setAttributeNS(null, "mgdtxtbelongtoproperty", "mgddowntxt");
                    H.appendChild(Ar);
                    var Q = $("#" + L).html();
                    var Aq = (Number(Ab) - 54);
                    var n = (Number(D) + Number(B) + 50 - (Number(B) + 90) / 2 + 15);
                    Q = Q + "<text id='" + L + "_t' x='" + Aq + "' y='" + n + "' font-size='" + E + "' text-anchor='end' fill='#000000' writing-mode='lr' font-weight='400'>" + Ak + "</text>";
                    $("#" + L).html(Q);
                    var K = $.Micro_SVG.getSVGRect($("#" + L + "_t")).width;
                    var L = MicroDraw_GUID();
                    var Al = document.createElementNS(mDrawSvgNS, "line");
                    var b = (Ag < Aq ? Ag: Aq) + 3;
                    var P = Number(b) - Number(Ah > K ? Ah: K) - 9;
                    var p = y2 = (Number(Af) + Number(n)) / 2 - 6;
                    Al.setAttributeNS(null, "id", L);
                    Al.setAttributeNS(null, "x1", b);
                    Al.setAttributeNS(null, "x2", P);
                    Al.setAttributeNS(null, "y1", p);
                    Al.setAttributeNS(null, "y2", y2);
                    Al.setAttributeNS(null, "stroke", "#000");
                    Al.setAttributeNS(null, "stroke-width", "2");
                    Al.setAttributeNS(null, "mgdtxtbelongto", R);
                    Al.setAttributeNS(null, "mgdtxtbelongtoproperty", "dividingline");
                    H.appendChild(Al);
                    $("#" + c + " [mtype='" + mDrawFlag_TingV + "']").each(function(At, As) {
                        var Ax = $("#" + As.id + "_r1")[0].getAttribute("x");
                        var Ay = $("#" + As.id + "_r1")[0].getAttribute("y");
                        var Aw = $("#" + As.id + "_r1")[0].getAttribute("width");
                        var o = $("#" + As.id + "_r1")[0].getAttribute("height");
                        var Av = MicroDraw_GUID();
                        var Az = document.createElementNS(mDrawSvgNS, "g");
                        Az.setAttributeNS(null, "id", Av);
                        Az.setAttributeNS(null, "mtype", mDrawFlag_Custom_rect);
                        Az.setAttributeNS(null, "mfill", a);
                        Az.setAttributeNS(null, "mstroke", "#000000");
                        Az.setAttributeNS(null, "mstrokewidth", "1px");
                        H.appendChild(Az);
                        var Au = $("#" + Av).html();
                        Au = Au + "<rect id='" + Av + "_r' x='" + Number(Ax) + "' y='" + D + "' width='" + mDrawThickTing + "' height='" + B + "' stroke='#000000' stroke-width='1px' fill='" + mDrawProductColor + "' pointer-events='all'/>";
                        $("#" + Av).html(Au)
                    });
                    $("#" + c + " [mtype='" + mDrawFlag_Pkc + "']").each(function(As, At) {
                        var AF = $("#" + At.id + "_r1")[0].getAttribute("x");
                        var AG = $("#" + At.id + "_r1")[0].getAttribute("y");
                        var AA = $("#" + At.id + "_r1")[0].getAttribute("width");
                        var AH = $("#" + At.id + "_r1")[0].getAttribute("height");
                        var AD = $("#" + At.id)[0].getAttribute("mopendir");
                        var AC = $("#" + At.id)[0].getAttribute("mswopendir");
                        if ($.Micro.IsEmpty(AC)) {
                            AC = AD
                        }
                        AC = $.Micro.isInArray(AC, ["L", "R"]) ? AC: "L";
                        var Av = $("#" + At.id)[0].getAttribute("msw");
                        var Ay = $("#" + At.id)[0].getAttribute("mgdopendir");
                        var Au = $("#" + At.id)[0].getAttribute("mgdglasstxt");
                        var Az = $("#" + At.id)[0].getAttribute("mgdswtxt");
                        if (isEmptyOrNull(Ay)) {
                            Ay = "上"
                        }
                        if (isEmptyOrNull(Au)) {
                            Au = "玻扇"
                        }
                        if (isEmptyOrNull(Az)) {
                            Az = "纱扇"
                        }
                        var o = $("#" + At.id)[0].getAttribute("mswgdopendir");
                        if (isEmptyOrNull(o)) {
                            o = "系统默认"
                        }
                        if (o == "系统默认") {
                            if (Ay == "上") {
                                o = "下"
                            } else {
                                o = "上"
                            }
                        }
                        if (Ay == "上") {
                            var AE = MicroDraw_GUID();
                            var Ax = document.createElementNS(mDrawSvgNS, "g");
                            Ax.setAttributeNS(null, "id", AE);
                            Ax.setAttributeNS(null, "mtype", mDrawFlag_Custom_line);
                            Ax.setAttributeNS(null, "mstroke", "black");
                            Ax.setAttributeNS(null, "mstrokewidth", "2px");
                            H.appendChild(Ax);
                            var Aw = $("#" + AE).html();
                            if (AD == "L" || AD == "LT" || AD == "LB") {
                                Aw = Aw + "<line id='" + AE + "_l' stroke='black' stroke-width='2px' x1='" + Number(AF) + "' y1='" + (Number(D) + Number(B) / 2 - Number(A) / 2).toString() + "' x2='" + (Number(AF) + Number(AA) - Number(10)).toString() + "' y2='" + (Number(D) - Number(20)).toString() + "' pointer-events='all'/>"
                            } else {
                                if (AD == "R" || AD == "RT" || AD == "RB") {
                                    Aw = Aw + "<line id='" + AE + "_l' stroke='black' stroke-width='2px' x1='" + (Number(AF) + Number(AA)).toString() + "' y1='" + (Number(D) + Number(B) / 2 - Number(A) / 2).toString() + "' x2='" + (Number(AF) + Number(10)).toString() + "' y2='" + (Number(D) - Number(20)).toString() + "' pointer-events='all'/>"
                                } else {
                                    if (AD == "PT") {
                                        Aw = Aw + "<line id='" + AE + "_l' stroke='black' stroke-width='2px' x1='" + Number(AF) + "' y1='" + (Number(D) - Number(20)).toString() + "' x2='" + (Number(AF) + Number(AA) - Number(10)).toString() + "' y2='" + (Number(D) - Number(20)).toString() + "' pointer-events='all'/>";
                                        Aw = Aw + "<line id='" + AE + "_l' stroke='black' stroke-width='1px' stroke-dasharray='3 3' x1='" + Number(AF) + "' y1='" + (Number(D) + Number(B) / 2 - Number(A) / 2).toString() + "' x2='" + (Number(AF) + Number(AA) - Number(10)).toString() + "' y2='" + (Number(D) - Number(20)).toString() + "' pointer-events='all'/>";
                                        Aw = Aw + "<line id='" + AE + "_l' stroke='black' stroke-width='1px' stroke-dasharray='3 3' x1='" + Number(AF) + "' y1='" + (Number(D) - Number(20)).toString() + "' x2='" + (Number(AF) + Number(AA) - Number(10)).toString() + "' y2='" + (Number(D) + Number(B) / 2 - Number(A) / 2).toString() + "' pointer-events='all'/>"
                                    }
                                }
                            }
                            $("#" + AE).html(Aw);
                            var AE = MicroDraw_GUID();
                            var Ax = document.createElementNS(mDrawSvgNS, "g");
                            Ax.setAttributeNS(null, "id", AE);
                            Ax.setAttributeNS(null, "mtype", mDrawFlag_Custom_text);
                            Ax.setAttributeNS(null, "mfontsize", E);
                            Ax.setAttributeNS(null, "mtext", Au);
                            Ax.setAttributeNS(null, "mfill", "#000000");
                            Ax.setAttributeNS(null, "mdir", "lr");
                            Ax.setAttributeNS(null, "mfontweight", "400");
                            Ax.setAttributeNS(null, "mgdtxtbelongto", At.id);
                            Ax.setAttributeNS(null, "mgdtxtbelongtoproperty", "mgdglasstxt");
                            H.appendChild(Ax);
                            var Aw = $("#" + AE).html();
                            if (AD == "PT") {
                                Aw = Aw + "<text id='" + AE + "_t' x='" + (Number(AF) + Number(AA) / 2 + 20).toString() + "' y='" + (Number(D) - 25).toString() + "' font-size='" + E + "' text-anchor='end' fill='#000000' writing-mode='lr' font-weight='400'>" + Au + "</text>"
                            } else {
                                Aw = Aw + "<text id='" + AE + "_t' x='" + (Number(AF) + Number(AA) / 2 + 20).toString() + "' y='" + (Number(D) - 20).toString() + "' font-size='" + E + "' text-anchor='end' fill='#000000' writing-mode='lr' font-weight='400'>" + Au + "</text>"
                            }
                            $("#" + AE).html(Aw);
                            var AB = AE + "_t";
                            if (Av == "Y") {
                                var AE = MicroDraw_GUID();
                                var Ax = document.createElementNS(mDrawSvgNS, "g");
                                Ax.setAttributeNS(null, "id", AE);
                                Ax.setAttributeNS(null, "mtype", mDrawFlag_Custom_line);
                                Ax.setAttributeNS(null, "mstroke", "black");
                                Ax.setAttributeNS(null, "mstrokewidth", "2px");
                                H.appendChild(Ax);
                                var Aw = $("#" + AE).html();
                                var AI = MicroDraw_getSwgdCoordinate(AC, o, AD, Ay, AF, AA, D, B, A);
                                Aw = Aw + "<line id='" + AE + "_l' stroke-dasharray='1 3' stroke='black' stroke-width='2px' x1='" + AI.X1 + "' y1='" + AI.Y1 + "' x2='" + AI.X2 + "' y2='" + AI.Y2 + "' pointer-events='all'/>";
                                $("#" + AE).html(Aw);
                                var AE = MicroDraw_GUID();
                                var Ax = document.createElementNS(mDrawSvgNS, "g");
                                Ax.setAttributeNS(null, "id", AE);
                                Ax.setAttributeNS(null, "mtype", mDrawFlag_Custom_text);
                                Ax.setAttributeNS(null, "mfontsize", E);
                                Ax.setAttributeNS(null, "mtext", Az);
                                Ax.setAttributeNS(null, "mfill", "#000000");
                                Ax.setAttributeNS(null, "mdir", "lr");
                                Ax.setAttributeNS(null, "mfontweight", "400");
                                Ax.setAttributeNS(null, "mgdtxtbelongto", At.id);
                                Ax.setAttributeNS(null, "mgdtxtbelongtoproperty", "mgdswtxt");
                                H.appendChild(Ax);
                                var Aw = $("#" + AE).html();
                                if (!isEmptyOrNull(AI.txtText)) {
                                    $("#" + AB).html(AI.txtText);
                                    $("#" + AB).attr("x", AI.txtX)
                                } else {
                                    Aw = Aw + "<text id='" + AE + "_t' x='" + AI.txtX + "' y='" + AI.txtY + "' font-size='" + E + "' text-anchor='end' fill='#000000' writing-mode='lr' font-weight='400'>" + Az + "</text>"
                                }
                                $("#" + AE).html(Aw)
                            }
                        } else {
                            if (Ay == "下") {
                                var AE = MicroDraw_GUID();
                                var Ax = document.createElementNS(mDrawSvgNS, "g");
                                Ax.setAttributeNS(null, "id", AE);
                                Ax.setAttributeNS(null, "mtype", mDrawFlag_Custom_line);
                                Ax.setAttributeNS(null, "mstroke", "black");
                                Ax.setAttributeNS(null, "mstrokewidth", "2px");
                                H.appendChild(Ax);
                                var Aw = $("#" + AE).html();
                                if (AD == "L" || AD == "LT" || AD == "LB") {
                                    Aw = Aw + "<line id='" + AE + "_l' stroke='black' stroke-width='2px' x1='" + Number(AF) + "' y1='" + (Number(D) + Number(B) / 2 + Number(A) / 2).toString() + "' x2='" + (Number(AF) + Number(AA) - Number(10)).toString() + "' y2='" + (Number(D) + Number(B) + Number(20)).toString() + "' pointer-events='all'/>"
                                } else {
                                    if (AD == "R" || AD == "RT" || AD == "RB") {
                                        Aw = Aw + "<line id='" + AE + "_l' stroke='black' stroke-width='2px' x1='" + (Number(AF) + Number(AA)).toString() + "' y1='" + (Number(D) + Number(B) / 2 + Number(A) / 2).toString() + "' x2='" + (Number(AF) + Number(10)).toString() + "' y2='" + (Number(D) + Number(B) + Number(20)).toString() + "' pointer-events='all'/>"
                                    } else {
                                        if (AD == "PT") {
                                            Aw = Aw + "<line id='" + AE + "_l' stroke='black' stroke-width='2px' x1='" + Number(AF) + "' y1='" + (Number(D) + Number(B) + Number(20)).toString() + "' x2='" + (Number(AF) + Number(AA) - Number(10)).toString() + "' y2='" + (Number(D) + Number(B) + Number(20)).toString() + "' pointer-events='all'/>";
                                            Aw = Aw + "<line id='" + AE + "_l' stroke='black' stroke-width='1px' stroke-dasharray='3 3' x1='" + Number(AF) + "' y1='" + (Number(D) + Number(B) / 2 + Number(A) / 2).toString() + "' x2='" + (Number(AF) + Number(AA) - Number(10)).toString() + "' y2='" + (Number(D) + Number(B) + Number(20)).toString() + "' pointer-events='all'/>";
                                            Aw = Aw + "<line id='" + AE + "_l' stroke='black' stroke-width='1px' stroke-dasharray='3 3' x1='" + Number(AF) + "' y1='" + (Number(D) + Number(B) + Number(20)).toString() + "' x2='" + (Number(AF) + Number(AA) - Number(10)).toString() + "' y2='" + (Number(D) + Number(B) / 2 + Number(A) / 2).toString() + "' pointer-events='all'/>"
                                        }
                                    }
                                }
                                $("#" + AE).html(Aw);
                                var AE = MicroDraw_GUID();
                                var Ax = document.createElementNS(mDrawSvgNS, "g");
                                Ax.setAttributeNS(null, "id", AE);
                                Ax.setAttributeNS(null, "mtype", mDrawFlag_Custom_text);
                                Ax.setAttributeNS(null, "mfontsize", E);
                                Ax.setAttributeNS(null, "mtext", Au);
                                Ax.setAttributeNS(null, "mfill", "#000000");
                                Ax.setAttributeNS(null, "mdir", "lr");
                                Ax.setAttributeNS(null, "mfontweight", "400");
                                Ax.setAttributeNS(null, "mgdtxtbelongto", At.id);
                                Ax.setAttributeNS(null, "mgdtxtbelongtoproperty", "mgdglasstxt");
                                H.appendChild(Ax);
                                var Aw = $("#" + AE).html();
                                if (AD == "PT") {
                                    Aw = Aw + "<text id='" + AE + "_t' x='" + (Number(AF) + Number(AA) / 2 + 20).toString() + "' y='" + (Number(D) + Number(B) + 35).toString() + "' font-size='" + E + "' text-anchor='end' fill='#000000' writing-mode='lr' font-weight='400'>" + Au + "</text>"
                                } else {
                                    Aw = Aw + "<text id='" + AE + "_t' x='" + (Number(AF) + Number(AA) / 2 + 20).toString() + "' y='" + (Number(D) + Number(B) + 25).toString() + "' font-size='" + E + "' text-anchor='end' fill='#000000' writing-mode='lr' font-weight='400'>" + Au + "</text>"
                                }
                                $("#" + AE).html(Aw);
                                var AB = AE + "_t";
                                if (Av == "Y") {
                                    var AE = MicroDraw_GUID();
                                    var Ax = document.createElementNS(mDrawSvgNS, "g");
                                    Ax.setAttributeNS(null, "id", AE);
                                    Ax.setAttributeNS(null, "mtype", mDrawFlag_Custom_line);
                                    Ax.setAttributeNS(null, "mstroke", "black");
                                    Ax.setAttributeNS(null, "mstrokewidth", "2px");
                                    H.appendChild(Ax);
                                    var Aw = $("#" + AE).html();
                                    var AI = MicroDraw_getSwgdCoordinate(AC, o, AD, Ay, AF, AA, D, B, A);
                                    Aw = Aw + "<line id='" + AE + "_l' stroke-dasharray='1 3' stroke='black' stroke-width='2px' x1='" + AI.X1 + "' y1='" + AI.Y1 + "' x2='" + AI.X2 + "' y2='" + AI.Y2 + "' pointer-events='all'/>";
                                    $("#" + AE).html(Aw);
                                    var AE = MicroDraw_GUID();
                                    var Ax = document.createElementNS(mDrawSvgNS, "g");
                                    Ax.setAttributeNS(null, "id", AE);
                                    Ax.setAttributeNS(null, "mtype", mDrawFlag_Custom_text);
                                    Ax.setAttributeNS(null, "mfontsize", E);
                                    Ax.setAttributeNS(null, "mtext", Az);
                                    Ax.setAttributeNS(null, "mfill", "#000000");
                                    Ax.setAttributeNS(null, "mdir", "lr");
                                    Ax.setAttributeNS(null, "mfontweight", "400");
                                    Ax.setAttributeNS(null, "mgdtxtbelongto", At.id);
                                    Ax.setAttributeNS(null, "mgdtxtbelongtoproperty", "mgdswtxt");
                                    H.appendChild(Ax);
                                    var Aw = $("#" + AE).html();
                                    if (!isEmptyOrNull(AI.txtText)) {
                                        $("#" + AB).html(AI.txtText);
                                        $("#" + AB).attr("x", AI.txtX)
                                    } else {
                                        Aw = Aw + "<text id='" + AE + "_t' x='" + AI.txtX + "' y='" + AI.txtY + "' font-size='" + E + "' text-anchor='end' fill='#000000' writing-mode='lr' font-weight='400'>" + Az + "</text>"
                                    }
                                    $("#" + AE).html(Aw)
                                }
                            }
                        }
                    });
                    $("#" + c + " [mtype='" + mDrawFlag_Dkc + "']").each(function(Au, AB) {
                        var Az = $("#" + AB.id + "_bg")[0].getAttribute("x");
                        var AA = $("#" + AB.id + "_bg")[0].getAttribute("y");
                        var Ay = $("#" + AB.id + "_bg")[0].getAttribute("width");
                        var o = $("#" + AB.id + "_bg")[0].getAttribute("height");
                        var As = $("#" + AB.id)[0].getAttribute("mfanswflag");
                        var AD = $("#" + AB.id)[0].getAttribute("mgdopendir");
                        var Aw = $("#" + AB.id)[0].getAttribute("mgdglasstxt");
                        var At = $("#" + AB.id)[0].getAttribute("mgdswtxt");
                        if (isEmptyOrNull(AD)) {
                            AD = "上"
                        }
                        if (isEmptyOrNull(Aw)) {
                            Aw = "玻扇"
                        }
                        if (isEmptyOrNull(At)) {
                            At = "纱扇"
                        }
                        if (AD == "上") {
                            var Ax = MicroDraw_GUID();
                            var AC = document.createElementNS(mDrawSvgNS, "g");
                            AC.setAttributeNS(null, "id", Ax);
                            AC.setAttributeNS(null, "mtype", mDrawFlag_Custom_line);
                            AC.setAttributeNS(null, "mstroke", "black");
                            AC.setAttributeNS(null, "mstrokewidth", "2px");
                            H.appendChild(AC);
                            var Av = $("#" + Ax).html();
                            Av = Av + "<line id='" + Ax + "_l' stroke='black' stroke-width='2px' x1='" + Number(Az) + "' y1='" + (Number(D) + Number(B) / 2 - Number(A) / 2).toString() + "' x2='" + (Number(Az) + Number(Ay) / 2 - Number(10)).toString() + "' y2='" + (Number(D) - Number(20)).toString() + "' pointer-events='all'/>";
                            Av = Av + "<line id='" + Ax + "_r' stroke='black' stroke-width='2px' x1='" + (Number(Az) + Number(Ay)).toString() + "' y1='" + (Number(D) + Number(B) / 2 - Number(A) / 2).toString() + "' x2='" + (Number(Az) + Number(Ay) / 2 + Number(10)).toString() + "' y2='" + (Number(D) - Number(20)).toString() + "' pointer-events='all'/>";
                            $("#" + Ax).html(Av);
                            var Ax = MicroDraw_GUID();
                            var AC = document.createElementNS(mDrawSvgNS, "g");
                            AC.setAttributeNS(null, "id", Ax);
                            AC.setAttributeNS(null, "mtype", mDrawFlag_Custom_text);
                            AC.setAttributeNS(null, "mfontsize", E);
                            AC.setAttributeNS(null, "mtext", Aw);
                            AC.setAttributeNS(null, "mfill", "#000000");
                            AC.setAttributeNS(null, "mdir", "lr");
                            AC.setAttributeNS(null, "mfontweight", "400");
                            AC.setAttributeNS(null, "mgdtxtbelongto", AB.id);
                            AC.setAttributeNS(null, "mgdtxtbelongtoproperty", "mgdglasstxt");
                            H.appendChild(AC);
                            var Av = $("#" + Ax).html();
                            Av = Av + "<text id='" + Ax + "_t' x='" + (Number(Az) + Number(Ay) / 2 + 15).toString() + "' y='" + (Number(D) - 25).toString() + "' font-size='" + E + "' text-anchor='end' fill='#000000' writing-mode='lr' font-weight='400'>" + Aw + "</text>";
                            $("#" + Ax).html(Av);
                            if (As == "1,1") {
                                var Ax = MicroDraw_GUID();
                                var AC = document.createElementNS(mDrawSvgNS, "g");
                                AC.setAttributeNS(null, "id", Ax);
                                AC.setAttributeNS(null, "mtype", mDrawFlag_Custom_line);
                                AC.setAttributeNS(null, "mstroke", "black");
                                AC.setAttributeNS(null, "mstrokewidth", "2px");
                                H.appendChild(AC);
                                var Av = $("#" + Ax).html();
                                Av = Av + "<line id='" + Ax + "_l' stroke-dasharray='1 3' stroke='black' stroke-width='2px' x1='" + Number(Az) + "' y1='" + (Number(D) + Number(B) / 2 + Number(A) / 2).toString() + "' x2='" + (Number(Az) + Number(Ay) / 2 - Number(10)).toString() + "' y2='" + (Number(D) + Number(B) + Number(20)).toString() + "' pointer-events='all'/>";
                                Av = Av + "<line id='" + Ax + "_r' stroke-dasharray='1 3' stroke='black' stroke-width='2px' x1='" + (Number(Az) + Number(Ay)).toString() + "' y1='" + (Number(D) + Number(B) / 2 + Number(A) / 2).toString() + "' x2='" + (Number(Az) + Number(Ay) / 2 + Number(10)).toString() + "' y2='" + (Number(D) + Number(B) + Number(20)).toString() + "' pointer-events='all'/>";
                                $("#" + Ax).html(Av);
                                var Ax = MicroDraw_GUID();
                                var AC = document.createElementNS(mDrawSvgNS, "g");
                                AC.setAttributeNS(null, "id", Ax);
                                AC.setAttributeNS(null, "mtype", mDrawFlag_Custom_text);
                                AC.setAttributeNS(null, "mfontsize", E);
                                AC.setAttributeNS(null, "mtext", At);
                                AC.setAttributeNS(null, "mfill", "#000000");
                                AC.setAttributeNS(null, "mdir", "lr");
                                AC.setAttributeNS(null, "mfontweight", "400");
                                AC.setAttributeNS(null, "mgdtxtbelongto", AB.id);
                                AC.setAttributeNS(null, "mgdtxtbelongtoproperty", "mgdswtxt");
                                H.appendChild(AC);
                                var Av = $("#" + Ax).html();
                                Av = Av + "<text id='" + Ax + "_t' x='" + (Number(Az) + Number(Ay) / 2 + 15).toString() + "' y='" + (Number(D) + Number(B) + 35).toString() + "' font-size='" + E + "' text-anchor='end' fill='#000000' writing-mode='lr' font-weight='400'>" + At + "</text>";
                                $("#" + Ax).html(Av)
                            }
                        } else {
                            if (AD == "下") {
                                var Ax = MicroDraw_GUID();
                                var AC = document.createElementNS(mDrawSvgNS, "g");
                                AC.setAttributeNS(null, "id", Ax);
                                AC.setAttributeNS(null, "mtype", mDrawFlag_Custom_line);
                                AC.setAttributeNS(null, "mstroke", "black");
                                AC.setAttributeNS(null, "mstrokewidth", "2px");
                                H.appendChild(AC);
                                var Av = $("#" + Ax).html();
                                Av = Av + "<line id='" + Ax + "_l' stroke='black' stroke-width='2px' x1='" + Number(Az) + "' y1='" + (Number(D) + Number(B) / 2 + Number(A) / 2).toString() + "' x2='" + (Number(Az) + Number(Ay) / 2 - Number(10)).toString() + "' y2='" + (Number(D) + Number(B) + Number(20)).toString() + "' pointer-events='all'/>";
                                Av = Av + "<line id='" + Ax + "_r' stroke='black' stroke-width='2px' x1='" + (Number(Az) + Number(Ay)).toString() + "' y1='" + (Number(D) + Number(B) / 2 + Number(A) / 2).toString() + "' x2='" + (Number(Az) + Number(Ay) / 2 + Number(10)).toString() + "' y2='" + (Number(D) + Number(B) + Number(20)).toString() + "' pointer-events='all'/>";
                                $("#" + Ax).html(Av);
                                var Ax = MicroDraw_GUID();
                                var AC = document.createElementNS(mDrawSvgNS, "g");
                                AC.setAttributeNS(null, "id", Ax);
                                AC.setAttributeNS(null, "mtype", mDrawFlag_Custom_text);
                                AC.setAttributeNS(null, "mfontsize", E);
                                AC.setAttributeNS(null, "mtext", Aw);
                                AC.setAttributeNS(null, "mfill", "#000000");
                                AC.setAttributeNS(null, "mdir", "lr");
                                AC.setAttributeNS(null, "mfontweight", "400");
                                AC.setAttributeNS(null, "mgdtxtbelongto", AB.id);
                                AC.setAttributeNS(null, "mgdtxtbelongtoproperty", "mgdglasstxt");
                                H.appendChild(AC);
                                var Av = $("#" + Ax).html();
                                Av = Av + "<text id='" + Ax + "_t' x='" + (Number(Az) + Number(Ay) / 2 + 15).toString() + "' y='" + (Number(D) + Number(B) + 35).toString() + "' font-size='" + E + "' text-anchor='end' fill='#000000' writing-mode='lr' font-weight='400'>" + Aw + "</text>";
                                $("#" + Ax).html(Av);
                                if (As == "1,1") {
                                    var Ax = MicroDraw_GUID();
                                    var AC = document.createElementNS(mDrawSvgNS, "g");
                                    AC.setAttributeNS(null, "id", Ax);
                                    AC.setAttributeNS(null, "mtype", mDrawFlag_Custom_line);
                                    AC.setAttributeNS(null, "mstroke", "black");
                                    AC.setAttributeNS(null, "mstrokewidth", "2px");
                                    H.appendChild(AC);
                                    var Av = $("#" + Ax).html();
                                    Av = Av + "<line id='" + Ax + "_l' stroke-dasharray='1 3' stroke='black' stroke-width='2px' x1='" + Number(Az) + "' y1='" + (Number(D) + Number(B) / 2 - Number(A) / 2).toString() + "' x2='" + (Number(Az) + Number(Ay) / 2 - Number(10)).toString() + "' y2='" + (Number(D) - Number(20)).toString() + "' pointer-events='all'/>";
                                    Av = Av + "<line id='" + Ax + "_r' stroke-dasharray='1 3' stroke='black' stroke-width='2px' x1='" + (Number(Az) + Number(Ay)).toString() + "' y1='" + (Number(D) + Number(B) / 2 - Number(A) / 2).toString() + "' x2='" + (Number(Az) + Number(Ay) / 2 + Number(10)).toString() + "' y2='" + (Number(D) - Number(20)).toString() + "' pointer-events='all'/>";
                                    $("#" + Ax).html(Av);
                                    var Ax = MicroDraw_GUID();
                                    var AC = document.createElementNS(mDrawSvgNS, "g");
                                    AC.setAttributeNS(null, "id", Ax);
                                    AC.setAttributeNS(null, "mtype", mDrawFlag_Custom_text);
                                    AC.setAttributeNS(null, "mfontsize", E);
                                    AC.setAttributeNS(null, "mtext", At);
                                    AC.setAttributeNS(null, "mfill", "#000000");
                                    AC.setAttributeNS(null, "mdir", "lr");
                                    AC.setAttributeNS(null, "mfontweight", "400");
                                    AC.setAttributeNS(null, "mgdtxtbelongto", AB.id);
                                    AC.setAttributeNS(null, "mgdtxtbelongtoproperty", "mgdswtxt");
                                    H.appendChild(AC);
                                    var Av = $("#" + Ax).html();
                                    Av = Av + "<text id='" + Ax + "_t' x='" + (Number(Az) + Number(Ay) / 2 + 15).toString() + "' y='" + (Number(D) - 25).toString() + "' font-size='" + E + "' text-anchor='end' fill='#000000' writing-mode='lr' font-weight='400'>" + At + "</text>";
                                    $("#" + Ax).html(Av)
                                }
                            }
                        }
                    })
                }
            }
            return true;
            var Ae = $(Ao).attr("mgdpiccoor") || "N";
            if (Ae == "Y") {
                Ab = Number(Ab);
                T = Number(T);
                B = Number(B);
                var An = $(Ao).attr("mwidth");
                var V = 15;
                var M;
                var Z, f, t;
                M = {
                    "mgdcoorbelongto": R
                };
                Z = $($.MicroSVG.makeSVG("g", M));
                $("#" + mDrawFlag_SvgId + " #" + v).append(Z);
                M = {
                    "pos": "in"
                };
                f = $($.MicroSVG.makeSVG("g", M));
                Z.append(f);
                M = {
                    "x1": Ab,
                    "y1": D + B + V,
                    "x2": Ab,
                    "y2": D + B + V + 10,
                    "stroke-dasharray": "none",
                    "stroke": "#000",
                    "stroke-width": "1",
                    "pos": "l"
                };
                t = $($.MicroSVG.makeSVG("line", M));
                f.append(t);
                M = {
                    "x1": Ab + T,
                    "y1": D + B + V,
                    "x2": Ab + T,
                    "y2": D + B + V + 10,
                    "stroke-dasharray": "none",
                    "stroke": "#000",
                    "stroke-width": "1",
                    "pos": "r"
                };
                t = $($.MicroSVG.makeSVG("line", M));
                f.append(t);
                M = {
                    "x1": Ab,
                    "y1": D + B + V + 5,
                    "x2": Ab + T,
                    "y2": D + B + V + 5,
                    "stroke-dasharray": "none",
                    "stroke": "#000",
                    "stroke-width": "1",
                    "pos": "m"
                };
                t = $($.MicroSVG.makeSVG("line", M));
                f.append(t);
                var s = Number(Ab + T / 2);
                M = {
                    "x": s,
                    "y": D + B + V,
                    "font-size": "16px"
                };
                t = $($.MicroSVG.makeSVG("text", M));
                t.get(0).textContent = An;
                f.append(t);
                var S = $.MicroSVG.getSVGRect(t).width;
                t.attr("x", s - S / 2);
                var e = f.clone(true);
                e.attr("pos", "out");
                Z.append(e);
                MicroDraw_MoveFrameWinPostion([{
                    win: e,
                    x_dev: 0,
                    y_dev: 0 - (B + V + V)
                }])
            }
        }
    });
    $.each($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_WinArcs + "']"),
    function() {
        MicroDraw_WinArcsGdPic($(this))
    });
    $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_controlPoint + "']").each(function(H, I) {
        var J = I.parentNode;
        J.removeChild(I)
    });
    MicroDraw_definedgdShow();
    MicroDraw_OverLookSetting();
    MicroDraw_ShowCornergdpic()
}
function MicroDraw_optChangeEvent() {
    var C = false;
    var B = false;
    var A = false;
    var D = function(J) {
        C = false;
        var G = $("#" + J.id)[0];
        if (G == undefined) {
            return true
        }
        var K = G.attributes;
        for (var H = 0; H < K.length; H++) {
            if (K[H].name.indexOf("_exp") >= 0) {
                C = true;
                B = true;
                if (K[H].name.indexOf("mjsldheight") >= 0) {
                    A = true;
                    var I = $("#" + getDrawOptPropertyName()).datagrid("getRows");
                    $.each(I,
                    function(M, N) {
                        if (N.optId == "CTH") {
                            MicroDraw_reflashOptShowList(M)
                        }
                    })
                }
                var E = MicroDraw_genData_calcExp(0, K[H].value, "", "");
                var F = replaceAll(K[H].name, "_exp", "");
                $("#" + J.id)[0].setAttribute(F, E)
            }
        }
        if (J.id != mDrawFlag_SvgId) {
            if (C) {
                MicroDraw_Redraw(J.id)
            }
        }
        var L = $("#" + mDrawFlag_SvgId + " [mrulermaster='" + J.id + "']").length;
        if (isEmptyOrNull(L)) {
            L = 0
        }
        if (C && Number(L) > 0) {
            MicroDraw_AutoRuler(J.id)
        }
    };
    $("#" + mDrawFlag_SvgId + " [mtype]").each(function(F, E) {
        D(E)
    });
    D($("#" + mDrawFlag_SvgId).get(0));
    if (B) {
        MicroDraw_autoGdPic()
    }
    if (A) {
        MicroDraw_reflashHandleCoorY()
    }
}
function MicroDraw_getPropertyExp(A) {
    var C = $("#" + A)[0];
    if (C == undefined) {
        return true
    }
    var D = C.attributes;
    var E = "";
    for (var B = 0; B < D.length; B++) {
        if (D[B].name.indexOf("_exp") >= 0) {
            E = E + "$" + D[B].name + "#" + D[B].value
        }
    }
    E = E.substring(1);
    return E
}
function MicroDraw_setPropertyExp(H, C) {
    var D = $("#" + H)[0];
    if (D == undefined) {
        return true
    }
    if (C.length > 0) {
        var F = C.split("$");
        for (var E = 0; E < F.length; E++) {
            var B = F[E].split("#");
            var A = B[0];
            var G = B[1];
            D.setAttribute(A, G)
        }
    }
}
function MicroDraw_drawArcMidProduct(H, Y, Z, e, l, O, G, f, T) {
    var U = $("#" + H)[0];
    var W = $("#" + H + "_ting")[0];
    if (!isEmptyOrNull(W)) {
        $("#" + H)[0].removeChild(W)
    }
    var S = U.getAttribute("maddthickwidth");
    if (S == "Y") {
        e = e + ((2 * mDrawThickFrame / mDrawPixelPerM) * 1000)
    }
    var C = $("#" + H).html();
    var M = U.getAttribute("mtingcnt");
    switch (M) {
    case "0根":
        break;
    case "1根":
        C = C + "<g id='" + H + "_ting'>";
        var B, b, A, a;
        B = Y + (e / 1000) * mDrawPixelPerM / 2 - Number(mDrawThickFrame) / 2;
        b = T - Math.sqrt(G * G - (B - f) * (B - f));
        A = B;
        a = Z;
        var N, Q, c, P;
        N = Y + (e / 1000) * mDrawPixelPerM / 2 + Number(mDrawThickFrame) / 2;
        Q = b;
        c = N;
        P = Z;
        var g = B + "," + b + " " + A + "," + a + " " + c + "," + P + " " + N + "," + Q;
        C = C + "<polygon id='" + H + "_pmid' points='" + g + "' fill='" + mDrawProductColor + "' stroke='#000000' stroke-width='1' pointer-events='none' />";
        C = C + "</g>";
        $("#" + H).html(C);
        break;
    case "2根":
        C = C + "<g id='" + H + "_ting'>";
        var B, b, A, a;
        B = Y + (e / 1000) * mDrawPixelPerM / 2 - Number(mDrawThickFrame) / 2;
        b = Z - ((l / 1000) * mDrawPixelPerM - mDrawThickFrame + 1);
        A = Y + (e / 1000) * mDrawPixelPerM / 2;
        a = Z;
        var N, Q, c, P;
        N = Y + (e / 1000) * mDrawPixelPerM / 2 + Number(mDrawThickFrame) / 2;
        Q = Z - ((l / 1000) * mDrawPixelPerM - mDrawThickFrame + 1);
        c = Y + (e / 1000) * mDrawPixelPerM / 2;
        P = Z;
        var I, J;
        var X, L, V, K;
        var n = e - ((2 * mDrawThickFrame / mDrawPixelPerM) * 1000);
        var m = l - ((1 * mDrawThickFrame / mDrawPixelPerM) * 1000);
        var F = ((n / 2) * (n / 2) + Number(m * m)) / (2 * m);
        var E, D;
        D = (m / 4);
        E = Math.sqrt(4 * (F * (D * 2) - D * D));
        I = Y + Number(mDrawThickFrame);
        J = Z;
        X = I + (n / 1000) * mDrawPixelPerM / 2 - ((E / 2) / 1000) * mDrawPixelPerM;
        L = J - ((m - D) / 1000) * mDrawPixelPerM;
        V = A;
        K = a;
        var n = e - ((2 * mDrawThickFrame / mDrawPixelPerM) * 1000);
        var m = l - ((1 * mDrawThickFrame / mDrawPixelPerM) * 1000);
        var F = ((n / 2) * (n / 2) + Number(m * m)) / (2 * m);
        var E, D;
        D = (m / 4) - (4 / mDrawPixelPerM) * 1000;
        E = Math.sqrt(4 * (F * (D * 2) - D * D));
        I = Y + Number(mDrawThickFrame);
        J = Z;
        x41 = I + (n / 1000) * mDrawPixelPerM / 2 - ((E / 2) / 1000) * mDrawPixelPerM;
        y41 = Z - ((m - D) / 1000) * mDrawPixelPerM;
        x42 = A;
        y42 = a - Number(mDrawThickFrame);
        var g = X + "," + L + " " + V + "," + K + " " + x42 + "," + y42 + " " + x41 + "," + y41;
        C = C + "<polygon id='" + H + "_pl' points='" + g + "' fill='" + mDrawProductColor + "' stroke='#000000' stroke-width='1' pointer-events='none' />";
        var I, J;
        var X, L, V, K;
        var n = e - ((2 * mDrawThickFrame / mDrawPixelPerM) * 1000);
        var m = l - ((1 * mDrawThickFrame / mDrawPixelPerM) * 1000);
        var F = ((n / 2) * (n / 2) + Number(m * m)) / (2 * m);
        var E, D;
        D = (m / 4) - (4 / mDrawPixelPerM) * 1000;
        E = Math.sqrt(4 * (F * (D * 2) - D * D));
        I = Y + Number(mDrawThickFrame);
        J = Z;
        x51 = I + (n / 1000) * mDrawPixelPerM / 2 + ((E / 2) / 1000) * mDrawPixelPerM;
        y51 = J - ((m - D) / 1000) * mDrawPixelPerM;
        x52 = c;
        y52 = P - Number(mDrawThickFrame);
        var n = e - ((2 * mDrawThickFrame / mDrawPixelPerM) * 1000);
        var m = l - ((1 * mDrawThickFrame / mDrawPixelPerM) * 1000);
        var F = ((n / 2) * (n / 2) + Number(m * m)) / (2 * m);
        var E, D;
        D = (m / 4);
        E = Math.sqrt(4 * (F * (D * 2) - D * D));
        I = Y + Number(mDrawThickFrame);
        J = Z;
        x61 = I + (n / 1000) * mDrawPixelPerM / 2 + ((E / 2) / 1000) * mDrawPixelPerM;
        y61 = Z - ((m - D) / 1000) * mDrawPixelPerM;
        x62 = c;
        y62 = P;
        var g = x51 + "," + y51 + " " + x52 + "," + y52 + " " + x62 + "," + y62 + " " + x61 + "," + y61;
        C = C + "<polygon id='" + H + "_pr' points='" + g + "' fill='" + mDrawProductColor + "' stroke='#000000' stroke-width='1' pointer-events='none' />";
        C = C + "</g>";
        $("#" + H).html(C);
        break;
    case "3根":
        C = C + "<g id='" + H + "_ting'>";
        var B, b, A, a;
        B = Y + (e / 1000) * mDrawPixelPerM / 2 - Number(mDrawThickFrame) / 2;
        b = T - Math.sqrt(G * G - (B - f) * (B - f));
        A = B;
        a = Z;
        var N, Q, c, P;
        N = Y + (e / 1000) * mDrawPixelPerM / 2 + Number(mDrawThickFrame) / 2;
        Q = b;
        c = N;
        P = Z;
        var g = B + "," + b + " " + A + "," + a + " " + c + "," + P + " " + N + "," + Q;
        C = C + "<polygon id='" + H + "_pmid' points='" + g + "' fill='" + mDrawProductColor + "' stroke='#000000' stroke-width='1' pointer-events='none' />";
        var I, J;
        var X, L, V, K;
        var n = e - ((2 * mDrawThickFrame / mDrawPixelPerM) * 1000);
        var m = l - ((1 * mDrawThickFrame / mDrawPixelPerM) * 1000);
        var F = ((n / 2) * (n / 2) + Number(m * m)) / (2 * m);
        var E, D;
        D = (m / 3);
        E = Math.sqrt(4 * (F * (D * 2) - D * D));
        I = Y + Number(mDrawThickFrame);
        J = Z;
        X = I + (n / 1000) * mDrawPixelPerM / 2 - ((E / 2) / 1000) * mDrawPixelPerM;
        L = J - ((m - D) / 1000) * mDrawPixelPerM;
        V = A;
        K = a;
        var n = e - ((2 * mDrawThickFrame / mDrawPixelPerM) * 1000);
        var m = l - ((1 * mDrawThickFrame / mDrawPixelPerM) * 1000);
        var F = ((n / 2) * (n / 2) + Number(m * m)) / (2 * m);
        var E, D;
        D = (m / 3) - (4 / mDrawPixelPerM) * 1000;
        E = Math.sqrt(4 * (F * (D * 2) - D * D));
        I = Y + Number(mDrawThickFrame);
        J = Z;
        x41 = I + (n / 1000) * mDrawPixelPerM / 2 - ((E / 2) / 1000) * mDrawPixelPerM;
        y41 = Z - ((m - D) / 1000) * mDrawPixelPerM;
        x42 = A;
        y42 = a - Number(mDrawThickFrame);
        var g = X + "," + L + " " + V + "," + K + " " + x42 + "," + y42 + " " + x41 + "," + y41;
        C = C + "<polygon id='" + H + "_pl' points='" + g + "' fill='" + mDrawProductColor + "' stroke='#000000' stroke-width='1' pointer-events='none' />";
        var I, J;
        var X, L, V, K;
        var n = e - ((2 * mDrawThickFrame / mDrawPixelPerM) * 1000);
        var m = l - ((1 * mDrawThickFrame / mDrawPixelPerM) * 1000);
        var F = ((n / 2) * (n / 2) + Number(m * m)) / (2 * m);
        var E, D;
        D = (m / 3) - (4 / mDrawPixelPerM) * 1000;
        E = Math.sqrt(4 * (F * (D * 2) - D * D));
        I = Y + Number(mDrawThickFrame);
        J = Z;
        x51 = I + (n / 1000) * mDrawPixelPerM / 2 + ((E / 2) / 1000) * mDrawPixelPerM;
        y51 = J - ((m - D) / 1000) * mDrawPixelPerM;
        x52 = c;
        y52 = P - Number(mDrawThickFrame);
        var n = e - ((2 * mDrawThickFrame / mDrawPixelPerM) * 1000);
        var m = l - ((1 * mDrawThickFrame / mDrawPixelPerM) * 1000);
        var F = ((n / 2) * (n / 2) + Number(m * m)) / (2 * m);
        var E, D;
        D = (m / 3);
        E = Math.sqrt(4 * (F * (D * 2) - D * D));
        I = Y + Number(mDrawThickFrame);
        J = Z;
        x61 = I + (n / 1000) * mDrawPixelPerM / 2 + ((E / 2) / 1000) * mDrawPixelPerM;
        y61 = Z - ((m - D) / 1000) * mDrawPixelPerM;
        x62 = c;
        y62 = P;
        var g = x51 + "," + y51 + " " + x52 + "," + y52 + " " + x62 + "," + y62 + " " + x61 + "," + y61;
        C = C + "<polygon id='" + H + "_pr' points='" + g + "' fill='" + mDrawProductColor + "' stroke='#000000' stroke-width='1' pointer-events='none' />";
        C = C + "</g>";
        $("#" + H).html(C);
        break
    }
}
function MicroDraw_reflashOptShowList(rowIdx) {
    var rows = $("#" + getDrawOptPropertyName()).datagrid("getRows");
    rows = MicroDraw_convertOptValue(rows);
    var basicRows = $.extend(true, [], rows);
    var Obj = $("#" + mDrawFlag_SvgId + " [mtype][mxcxlid]:first");
    if (Obj.length == 0) {
        return
    }
    var xcxlId = Obj.attr("mxcxlid");
    var ObjId = Obj.attr("id");
    if (isEmptyOrNull(xcxlId)) {
        return
    }
    mcflId = MicroDraw_genData_getMcflIdByXcxlid(xcxlId);
    xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(xcxlId);
    xcxljgJson = eval("(" + xcxljgStr + ")");
    var useIndex = [];
    useIndex.push(rowIdx);
    MicroDraw_reflashOptShowList_recursive(rows, rowIdx, 1, xcxlId, mcflId, ObjId, xcxljgJson, useIndex)
}
function MicroDraw_reflashOptShowList_recursive(rows, rowIdx, level, xcxlId, mcflId, ObjId, xcxljgJson, useIndex) {
    if (level > 5) {
        return
    }
    var optId = rows[rowIdx].optId;
    var i = 0;
    $.each(rows,
    function(i, row) {
        if ($.inArray(i, useIndex) < 0) {
            if (isEmptyOrNull(rows[i])) {
                return
            }
            var optListExp = rows[i].optListExp;
            if (!isEmptyOrNull(optListExp) && optListExp.indexOf(optId) >= 0) {
                MicroDraw_showOptValList(i);
                useIndex.push(i);
                MicroDraw_reflashOptShowList_recursive(rows, i, level + 1, xcxlId, mcflId, ObjId, xcxljgJson, useIndex);
                return true
            }
            var optValExp = rows[i].optValExp;
            if (!isEmptyOrNull(optValExp) && (optValExp.indexOf(optId) >= 0 || (optId == "CTH" && optValExp.indexOf("getLDGD") >= 0))) {
                var optVal;
                if (isEmptyOrNull(xcxlId)) {
                    $.each(rows,
                    function(j, rs) {
                        optValExp = replaceAll(optValExp, rs.optId, rs.optVal)
                    });
                    optVal = eval(optValExp)
                } else {
                    optVal = MicroDraw_genData_calcExp(mcflId, optValExp, ObjId, xcxljgJson)
                }
                $("#" + getDrawOptPropertyName()).datagrid("updateRow", {
                    index: i,
                    row: {
                        optVal: optVal
                    }
                });
                if (!rows[i].bxdOpt) {
                    $("#" + getDrawOptPropertyName()).datagrid("hideRow", i)
                }
                useIndex.push(i);
                MicroDraw_reflashOptShowList_recursive(rows, i, level + 1, xcxlId, mcflId, ObjId, xcxljgJson, useIndex)
            }
        }
    })
}
function MicroDraw_convertOptValue(A) {
    if (isEmptyOrNull(A)) {
        return A
    }
    if (A.length < 1) {
        return A
    }
    var B = $.extend(true, [], A);
    if (B.length < 1) {
        return A
    }
    $.each(B,
    function(C, D) {
        var E = D.optVal;
        if (isEmptyOrNull(E)) {
            D.optVal = '""';
            return true
        }
        if (isNaN(E)) {
            if (E.substr(0, 1) == '"') {
                return true
            } else {
                D.optVal = '"' + E + '"'
            }
        } else {
            D.optVal = parseFloat(E)
        }
    });
    return B
}
function MicroDraw_setCombWinSize(Q, F) {
    var A = mDrawFlag_combsortwin;
    var N = $("#" + mDrawFlag_SvgId + ' [mtype = "' + A + '"]').attr(A);
    var P = MicroDraw_getCombWinIDs();
    var D = P.length;
    var F = Number(F);
    var B = 0,
    M = 0;
    var G = 0,
    C = 0;
    var J;
    var K = 0;
    var O = Q == "x" ? "mwidth": "mheight";
    for (var H = 0; H < D; H++) {
        var E = $("#" + mDrawFlag_SvgId + " #" + P[H]).find("[mtype=" + mDrawFlag_FrameRect + "]");
        if (E.length == 0) {
            E = $("#" + mDrawFlag_SvgId + " #" + P[H])
        }
        J = Number(E.attr(O));
        if (G == 0) {
            G = Number(J);
            B++;
            continue
        }
        if (J != G) {
            if (C == 0) {
                C = Number(J);
                M++;
                continue
            } else {
                if (J == C) {
                    M++
                } else {
                    if (J != C) {
                        return true
                    }
                }
            }
        } else {
            B++
        }
    }
    var I;
    if (B == D) {
        K = 1
    } else {
        if (((G == F) && ((D - B) * C == F)) || ((C == F) && ((D - M) * G == F))) {
            K = 1
        } else {
            return true
        }
    }
    if (K == 1) {
        var R = function() {
            $.each($("#" + mDrawFlag_SvgId).find("[mtype=" + mDrawFlag_Custom_CornerMaterial + "],[mtype=" + mDrawFlag_Custom_CornerMaterial_h + "]"),
            function() {
                MicroDraw_Redraw($(this).attr("id"))
            })
        };
        var L = $.messager.defaults;
        $.messager.defaults = {
            ok: "确定",
            cancel: "退出",
            width: 200
        };
        $.messager.prompt("尺寸录入：", "请输入尺寸：",
        function(S) {
            if (!isNaN(S) && Number(S) > 0) {
                var Z = false;
                if (B == D) {
                    var Y = F / G;
                    if (G != F) {
                        I = S / Y
                    } else {
                        I = S
                    }
                    for (var X = 0; X < D; X++) {
                        var a = $("#" + mDrawFlag_SvgId + " #" + P[X]).find("[mtype=" + mDrawFlag_FrameRect + "]");
                        if (a.length == 0) {
                            a = $("#" + mDrawFlag_SvgId + " #" + P[X])
                        }
                        var U = a.get(0).getAttribute(O);
                        a.attr(O, I);
                        MicroDraw_RedrawAll(mDrawFlag_SvgId);
                        var T = Number(I) - Number(U);
                        if (Number(T) != 0) {
                            Z = true
                        }
                        var W = $("#" + mDrawFlag_SvgId + " #" + P[X])[0];
                        var V = (O == "mwidth") ? "g[mrid='']": "g[mbid='']";
                        $("#" + mDrawFlag_SvgId + " #" + P[X]).find(V).each(function(b, c) {
                            if (c.getAttribute("mtype").indexOf("frame") != 0) {
                                c.setAttribute(O, Number(c.getAttribute(O)) + Number(T));
                                MicroDraw_Redraw(c.id)
                            }
                        });
                        MicroDraw_ChangeAllTingsPos($("#" + mDrawFlag_SvgId + " #" + P[X]))
                    }
                    R()
                } else {
                    if (((G == F) && ((D - B) * C == F)) || ((C == F) && ((D - M) * G == F))) {
                        var Y = (G == F) ? (D - B) : (D - M);
                        for (var X = 0; X < D; X++) {
                            var a = $("#" + mDrawFlag_SvgId + " #" + P[X]).find("[mtype=" + mDrawFlag_FrameRect + "]");
                            if (a.length == 0) {
                                a = $("#" + mDrawFlag_SvgId + " #" + P[X])
                            }
                            if (Number(a.attr(O)) == F) {
                                I = S
                            } else {
                                I = S / Y
                            }
                            var U = a.get(0).getAttribute(O);
                            a.attr(O, I);
                            MicroDraw_RedrawAll(mDrawFlag_SvgId);
                            var T = Number(I) - Number(U);
                            if (Number(T) != 0) {
                                Z = true
                            }
                            var W = $("#" + mDrawFlag_SvgId + " #" + P[X])[0];
                            var V = (O == "mwidth") ? "g[mrid='']": "g[mbid='']";
                            $("#" + mDrawFlag_SvgId + " #" + P[X]).find(V).each(function(b, c) {
                                if (c.getAttribute("mtype").indexOf("frame") != 0) {
                                    c.setAttribute(O, Number(c.getAttribute(O)) + Number(T));
                                    MicroDraw_Redraw(c.id)
                                }
                            });
                            MicroDraw_ChangeAllTingsPos($("#" + mDrawFlag_SvgId + " #" + P[X]))
                        }
                        R()
                    } else {
                        MicroDraw_RedrawAll(mDrawFlag_SvgId)
                    }
                }
                setTimeout(function() {
                    MicroDraw_ShowSizeProperty();
                    MicroDraw_ShowCoordinate();
                    if (Z) {
                        MicroDraw_autoGdPic();
                        MicroDraw_reflashHandleCoorY()
                    }
                },
                50)
            } else {}
        });
        if (!isPcUserAgent()) {
            Micro_ioskeyboard($(".messager-window .messager-input"), 1)
        }
        $.messager.defaults = L
    }
}
function MicroDraw_DelCombRuler(B) {
    var A = B == "x" ? mDrawFlag_combCoorX: mDrawFlag_combCoorY;
    $("[mtype=" + A + "]").remove()
}
function MicroDraw_getCombWinIDs(getType) {
    var mcombsortwin = mDrawFlag_combsortwin;
    var Wins = [];
    var CMs = [];
    var Combs = [];
    var CMVs = [];
    var CMHs = [];
    var _mcombsortwin = $("#" + mDrawFlag_SvgId + ' [mtype = "' + mcombsortwin + '"]').attr(mcombsortwin);
    if ($.Micro.IsEmpty(_mcombsortwin)) {
        if ($.Micro.IsEmpty(getType)) {
            return Combs
        } else {
            if (getType == "all") {
                return {
                    Combs: Combs,
                    Wins: Wins,
                    CMs: CMs,
                    CMVs: CMVs,
                    CMHs: CMHs
                }
            }
        }
    }
    var _mcombsortwins = _mcombsortwin.split(";");
    for (var i = 0; i < _mcombsortwins.length; i++) {
        eval("var wininfor = " + _mcombsortwins[i]);
        if (!$.Micro.isInArray(wininfor.id1, Combs)) {
            Combs.push(wininfor.id1);
            var obj1 = $("#" + mDrawFlag_SvgId + " #" + wininfor.id1);
            switch (obj1.attr("mtype")) {
            case mDrawFlag_Win:
                Wins.push(wininfor.id1);
                break;
            case mDrawFlag_Custom_CornerMaterial:
                CMs.push(wininfor.id1);
                CMVs.push(wininfor.id1);
                break;
            case mDrawFlag_Custom_CornerMaterial_h:
                CMs.push(wininfor.id1);
                CMHs.push(wininfor.id1);
                break
            }
        }
        if (!$.Micro.isInArray(wininfor.id2, Combs)) {
            Combs.push(wininfor.id2);
            var obj1 = $("#" + mDrawFlag_SvgId + " #" + wininfor.id2);
            switch (obj1.attr("mtype")) {
            case mDrawFlag_Win:
                Wins.push(wininfor.id2);
                break;
            case mDrawFlag_Custom_CornerMaterial:
                CMs.push(wininfor.id2);
                CMVs.push(wininfor.id2);
                break;
            case mDrawFlag_Custom_CornerMaterial_h:
                CMs.push(wininfor.id2);
                CMHs.push(wininfor.id2);
                break
            }
        }
    }
    if ($.Micro.IsEmpty(getType)) {
        return Combs
    } else {
        if (getType == "all") {
            return {
                Combs: Combs,
                Wins: Wins,
                CMs: CMs,
                CMVs: CMVs,
                CMHs: CMHs
            }
        }
    }
}
function MicroDraw_CombWinSetPos(style) {
    var show3D = true; (function() {
        if (style) {
            show3D = style.show3D
        }
        var firstWinId = "";
        if ($(mDrawDropDragTarget).length > 0) {
            var firstWin = $(mDrawDropDragTarget).parents("[mwin]");
            if (firstWin.length == 0) {
                return
            }
            firstWin = MicroDraw_GetmoveCombWin(firstWin);
            firstWinId = firstWin.attr("id")
        }
        MicroDraw_RemoveCombs3DShow(firstWinId)
    })();
    var ScaleG_scale = 1;
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
        ScaleG_scale = Number(mDrawSvgViewBox) / Number(MobileFrame_getCurrMobileViewScale(mDrawFlag_SvgId))
    }
    var mcombsortwin = mDrawFlag_combsortwin;
    var DelCombRuler = function(pos) {
        MicroDraw_DelCombRuler(pos)
    };
    if ($("#" + mDrawFlag_SvgId + ' [mtype = "' + mcombsortwin + '"]').length == 0) {
        DelCombRuler("x");
        DelCombRuler("y");
        return true
    }
    var _mcombsortwin = $("#" + mDrawFlag_SvgId + ' [mtype = "' + mcombsortwin + '"]').attr(mcombsortwin);
    if ($.Micro.IsEmpty(_mcombsortwin)) {
        DelCombRuler("x");
        DelCombRuler("y");
        $("#" + mDrawFlag_SvgId + ' [mtype = "' + mcombsortwin + '"]').removeAttr("combw").removeAttr("combh");
        return true
    }
    var mcombsortWins = eval("[" + replaceAll(_mcombsortwin, ";", ",") + "]");
    var combwin = function(id1, id2, dir1, dir2, align) {
        if ($.Micro.IsEmpty(align)) {
            switch (dir1) {
            case "l":
            case "r":
                align = "t";
                break;
            default:
                align = "l";
                break
            }
        }
        return '{id1:"' + id1 + '",id2:"' + id2 + '",dir1:"' + dir1 + '",dir2:"' + dir2 + '",align:"' + align + '"}'
    };
    var mdirs = [{
        text: "在上",
        tag: "t",
        ico: "↑"
    },
    {
        text: "在下",
        tag: "b",
        ico: "↓"
    },
    {
        text: "在左",
        tag: "l",
        ico: "←"
    },
    {
        text: "在右",
        tag: "r",
        ico: "→"
    }];
    var CheckmcombWins = function() {
        var mcombsortWins = eval("[" + replaceAll(_mcombsortwin, ";", ",") + "]");
        var mcombwins = [];
        for (var i = 0; i < mcombsortWins.length; i++) {
            var wid1 = mcombsortWins[i].id1;
            var wid2 = mcombsortWins[i].id2;
            var dir1 = mcombsortWins[i].dir1;
            var dir2 = mcombsortWins[i].dir2;
            var align = mcombsortWins[i].align;
            var win1 = $("#" + mDrawFlag_SvgId + " #" + wid1);
            var win2 = $("#" + mDrawFlag_SvgId + " #" + wid2);
            if (win1.length == 0 || win2.length == 0) {
                continue
            }
            mcombwins.push(combwin(wid1, wid2, dir1, dir2, align))
        }
        _mcombsortwin = mcombwins.join(";");
        $("#" + mDrawFlag_SvgId + ' [mtype = "' + mcombsortwin + '"]').attr(mcombsortwin, _mcombsortwin)
    };
    CheckmcombWins();
    var winShapes = ["rect", "line", "text"];
    var mcomb_screenWidth = 0,
    mcomb_screenHeight = 0;
    var mcomb_realWidth = 0,
    mcomb_realHeight = 0;
    var mcomb_tempWidth = 0,
    mcomb_tempHeight = 0;
    var mcomb_screenX, mcomb_screenY;
    var mcomb_screenX1, mcomb_screenY1, mcomb_screenX2, mcomb_screenY2;
    var minXWin = null;
    var maxXWin = null;
    var minYWin = null;
    var maxYWin = null;
    var getTotalSize = function(align) {
        var coorXs = [];
        var coorYs = [];
        var winCoors = [];
        var winIDs = MicroDraw_getCombWinIDs();
        var realWidth = 0,
        realHeight = 0;
        for (var i = 0; i < winIDs.length; i++) {
            var tobj;
            var mtype;
            tobj = $("#" + mDrawFlag_SvgId + " #" + winIDs[i]).find("[mtype=" + mDrawFlag_FrameRect + "]");
            var r_w, r_h;
            if (tobj.length > 0) {
                mtype = mDrawFlag_FrameRect
            } else {
                tobj = $("#" + mDrawFlag_SvgId + " #" + winIDs[i] + "[mtype=" + mDrawFlag_Custom_CornerMaterial + "]");
                if (tobj.length > 0) {
                    mtype = mDrawFlag_Custom_CornerMaterial
                } else {
                    tobj = $("#" + mDrawFlag_SvgId + " #" + winIDs[i] + "[mtype=" + mDrawFlag_Custom_CornerMaterial_h + "]");
                    mtype = mDrawFlag_Custom_CornerMaterial_h
                }
            }
            var _size = $.Micro_SVG.getSVGRect(tobj);
            var _canxy = $.Micro_SVG.ToCanvasPoint($("#" + mDrawFlag_SvgId), _size.x, _size.y);
            var _x, _y;
            if (align == "tl") {
                _x = parseInt(_canxy.x * ScaleG_scale);
                _y = parseInt(_canxy.y * ScaleG_scale)
            } else {
                _x = parseInt(_canxy.x * ScaleG_scale + _size.width);
                _y = parseInt(_canxy.y * ScaleG_scale + _size.height)
            }
            winCoors.push({
                id: winIDs[i],
                tobj: tobj,
                mtype: mtype,
                x: _x,
                y: _y
            });
            if ($.inArray(_x, coorXs) == -1) {
                coorXs.push(_x)
            }
            if ($.inArray(_y, coorYs) == -1) {
                coorYs.push(_y)
            }
        }
        var coorX_H = new Array(coorXs.length).fill(0);
        var coorY_W = new Array(coorYs.length).fill(0);
        for (var i = 0; i < winIDs.length; i++) {
            var x = winCoors[i].x;
            var y = winCoors[i].y;
            var tobj = winCoors[i].tobj;
            var mtype = winCoors[i].mtype;
            var x_index = $.inArray(x, coorXs);
            var y_index = $.inArray(y, coorYs);
            switch (mtype) {
            case mDrawFlag_FrameRect:
                coorX_H[x_index] += Number(tobj.attr("mheight"));
                coorY_W[y_index] += Number(tobj.attr("mwidth"));
                break;
            case mDrawFlag_Custom_CornerMaterial:
                var mcnt = Number(tobj.attr("mcnt") || 1);
                var cnt = MicroBudget_getPropertyValue(mBudgetWinProperty, "cnt");
                var pcnt = mcnt / cnt;
                coorY_W[y_index] += Number(tobj.attr("mwidth")) * pcnt;
                break;
            case mDrawFlag_Custom_CornerMaterial_h:
                var mcnt = Number(tobj.attr("mcnt") || 1);
                var cnt = MicroBudget_getPropertyValue(mBudgetWinProperty, "cnt");
                var pcnt = mcnt / cnt;
                coorX_H[x_index] += Number(tobj.attr("mheight")) * pcnt;
                break
            }
        }
        for (var i = 0; i < coorX_H.length; i++) {
            if (realHeight < coorX_H[i]) {
                realHeight = coorX_H[i]
            }
        }
        for (var i = 0; i < coorY_W.length; i++) {
            if (realWidth < coorY_W[i]) {
                realWidth = coorY_W[i]
            }
        }
        return {
            width: realWidth,
            height: realHeight
        }
    };
    var ShowCombRuler = function(pos, x, y, w, h, text) {
        DelCombRuler(pos);
        if ($("#" + mDrawFlag_SvgId + ' [mtype = "' + mcombsortwin + '"]').length == 0) {
            return true
        }
        var _mcombsortwin = $("#" + mDrawFlag_SvgId + ' [mtype = "' + mcombsortwin + '"]').attr(mcombsortwin);
        if ($.Micro.IsEmpty(_mcombsortwin)) {
            return true
        }
        var combCoorX = $("#" + mDrawFlag_SvgId + ' [mtype = "' + mcombsortwin + '"]').attr(mDrawFlag_combCoorX);
        var combCoorY = $("#" + mDrawFlag_SvgId + ' [mtype = "' + mcombsortwin + '"]').attr(mDrawFlag_combCoorY);
        if ($.Micro.IsEmpty(combCoorX) || $.Micro.IsEmpty(combCoorY)) {
            return true
        }
        eval("var _combCoorX = " + combCoorX);
        eval("var _combCoorY = " + combCoorY);
        var Xvisile = Number(_combCoorX.visile);
        var Xdir = _combCoorX.dir;
        var Xoffset = Number(_combCoorX.offset);
        var Yvisile = Number(_combCoorY.visile);
        var Ydir = _combCoorY.dir;
        var Yoffset = Number(_combCoorY.offset);
        if ((Xvisile == 0 && pos == "x") || (Yvisile == 0 && pos == "y")) {
            return true
        }
        var rulerOffset = 60;
        var rulerTextOffset = 20;
        var rulersideLen = 20;
        var pos = pos;
        var x = Number(x);
        var y = Number(y);
        var w = Number(w);
        var h = Number(h);
        var text = text;
        var x1, y1, x2, y2;
        var x1_1, y1_1, x1_2, y1_2, x2_1, y2_1, x2_2, y2_2;
        var t_x, t_y;
        if (pos == "x") {
            x1 = x;
            if (Xdir == "b") {
                y1 = y + h + Xoffset
            } else {
                y1 = y - Xoffset
            }
            x2 = x1 + w;
            y2 = y1;
            x1_1 = x1;
            y1_1 = y1 - rulersideLen / 2;
            x1_2 = x1;
            y1_2 = y1 + rulersideLen / 2;
            x2_1 = x2;
            y2_1 = y1_1;
            x2_2 = x2;
            y2_2 = y1_2
        } else {
            if (Ydir == "r") {
                x1 = x + w + Yoffset
            } else {
                x1 = x - Yoffset
            }
            y1 = y;
            x2 = x1;
            y2 = y1 + h;
            x1_1 = x1 - rulersideLen / 2;
            y1_1 = y1;
            x1_2 = x1 + rulersideLen / 2;
            y1_2 = y1;
            x2_1 = x1_1;
            y2_1 = y2;
            x2_2 = x1_2;
            y2_2 = y2
        }
        var _attr;
        var coorObj, newObj;
        var mtype = pos == "x" ? mDrawFlag_combCoorX: mDrawFlag_combCoorY;
        _attr = {
            "mtype": mtype,
            "transform": "scale(" + 1 / ScaleG_scale + ")"
        };
        var coorObj = document.createElementNS(mDrawSvgNS, "g");
        for (var k in _attr) {
            coorObj.setAttributeNS(null, k, _attr[k])
        }
        $("#" + mDrawFlag_SvgId).append(coorObj);
        _attr = {
            "x1": x1,
            "y1": y1,
            "x2": x2,
            "y2": y2,
            "stroke-dasharray": "none",
            "stroke": "#000",
            "stroke-width": "3"
        };
        var newObj = document.createElementNS(mDrawSvgNS, "line");
        for (var k in _attr) {
            newObj.setAttributeNS(null, k, _attr[k])
        }
        $(coorObj).append(newObj);
        _attr = {
            "x1": x1_1,
            "y1": y1_1,
            "x2": x1_2,
            "y2": y1_2,
            "stroke-dasharray": "none",
            "stroke": "#000",
            "stroke-width": "3"
        };
        var newObj = document.createElementNS(mDrawSvgNS, "line");
        for (var k in _attr) {
            newObj.setAttributeNS(null, k, _attr[k])
        }
        $(coorObj).append(newObj);
        _attr = {
            "x1": x2_1,
            "y1": y2_1,
            "x2": x2_2,
            "y2": y2_2,
            "stroke-dasharray": "none",
            "stroke": "#000",
            "stroke-width": "3"
        };
        var newObj = document.createElementNS(mDrawSvgNS, "line");
        for (var k in _attr) {
            newObj.setAttributeNS(null, k, _attr[k])
        }
        $(coorObj).append(newObj);
        _attr = {
            "font-size": "16",
            "stroke-width": "1",
            "ondblclick": 'MicroDraw_setCombWinSize("' + pos + '","' + text + '")'
        };
        if (!isPcUserAgent()) {
            _attr = {
                "font-size": "16",
                "stroke-width": "1",
                "onclick": 'MicroDraw_setCombWinSize("' + pos + '","' + text + '")'
            }
        }
        var textObj = document.createElementNS(mDrawSvgNS, "text");
        for (var k in _attr) {
            textObj.setAttributeNS(null, k, _attr[k])
        }
        $(textObj).html(text);
        $(coorObj).append(textObj);
        var text_size = $.Micro_SVG.getSVGRect($(textObj));
        var text_w = text_size.width;
        var text_h = text_size.height;
        if (pos == "x") {
            t_x = x1 + (w - text_w) / 2;
            if (Xdir == "b") {
                t_y = y1 + rulerTextOffset
            } else {
                t_y = y1 - rulersideLen * 3 / 2 + rulerTextOffset
            }
        } else {
            if (Ydir == "r") {
                t_x = x2 + rulerTextOffset
            } else {
                t_x = x2 - rulersideLen * 3 / 2 + rulerTextOffset
            }
            t_y = y1 + (h / 2 + text_h);
            $(textObj).attr("transform", "rotate(-90 " + t_x + " " + t_y + ")")
        }
        $(textObj).attr("x", t_x);
        $(textObj).attr("y", t_y)
    };
    for (var i = 0; i < mcombsortWins.length; i++) {
        var wid1 = mcombsortWins[i].id1;
        var wid2 = mcombsortWins[i].id2;
        var dir1 = mcombsortWins[i].dir1;
        var dir2 = mcombsortWins[i].dir2;
        var win1 = $("#" + mDrawFlag_SvgId + " #" + wid1);
        var win2 = $("#" + mDrawFlag_SvgId + " #" + wid2);
        var align = mcombsortWins[i].align;
        if ($.Micro.IsEmpty(align)) {
            switch (dir1) {
            case "l":
            case "r":
                align = "t";
                break;
            default:
                align = "l";
                break
            }
        }
        if (!minXWin) {
            minXWin = win1
        }
        if (!maxXWin) {
            maxXWin = win1
        }
        if (!minYWin) {
            minYWin = win1
        }
        if (!maxYWin) {
            maxYWin = win1
        }
        var frame1, frame2;
        if (win1.attr("mtype") == mDrawFlag_Win) {
            frame1 = win1.find("[mtype=" + mDrawFlag_FrameRect + "]")
        } else {
            if (win1.attr("mtype") == mDrawFlag_Custom_CornerMaterial) {
                frame1 = win1
            } else {
                if (win1.attr("mtype") == mDrawFlag_Custom_CornerMaterial_h) {
                    frame1 = win1
                }
            }
        }
        if (win2.attr("mtype") == mDrawFlag_Win) {
            frame2 = win2.find("[mtype=" + mDrawFlag_FrameRect + "]")
        } else {
            if (win2.attr("mtype") == mDrawFlag_Custom_CornerMaterial) {
                frame2 = win2
            } else {
                if (win2.attr("mtype") == mDrawFlag_Custom_CornerMaterial_h) {
                    frame2 = win2
                }
            }
        }
        if (win1.length == 0 || win2.length == 0) {
            return true
        }
        var r_width = 0;
        var r_height = 0;
        var win1_size = $.Micro_SVG.getSVGRect(frame1);
        var win1_x = win1_size.x;
        var win1_y = win1_size.y;
        var win1_width = win1_size.width;
        var win1_height = win1_size.height;
        var win1canXY = $.Micro_SVG.ToCanvasPoint($("#" + mDrawFlag_SvgId), win1_x, win1_y);
        var win1canX = win1canXY.x * ScaleG_scale;
        var win1canY = win1canXY.y * ScaleG_scale;
        if (win1.attr("mtype") == mDrawFlag_Win) {
            with(win1.find("[mtype=" + mDrawFlag_FrameRect + "]")) {
                r_width = Number(attr("mwidth"));
                r_height = Number(attr("mheight"))
            }
        } else {
            if (win1.attr("mtype") == mDrawFlag_Custom_CornerMaterial) {
                r_width = Number(win1.attr("mwidth"));
                r_height = Number(win1.attr("mheight"))
            } else {
                if (win1.attr("mtype") == mDrawFlag_Custom_CornerMaterial_h) {
                    r_width = Number(win1.attr("mwidth"));
                    r_height = Number(win1.attr("mheight"))
                }
            }
        }
        if (mcomb_screenWidth == 0) {
            mcomb_screenWidth = win1_width
        }
        if (mcomb_screenHeight == 0) {
            mcomb_screenHeight = win1_height
        }
        if (mcomb_realWidth == 0) {
            mcomb_realWidth = r_width
        }
        if (mcomb_realHeight == 0) {
            mcomb_realHeight = r_height
        }
        if ($.Micro.IsEmpty(mcomb_screenX1) && $.Micro.IsEmpty(mcomb_screenX2)) {
            mcomb_screenX1 = win1canX;
            mcomb_screenX2 = win1canX + win1_width * ScaleG_scale
        }
        if ($.Micro.IsEmpty(mcomb_screenY1) && $.Micro.IsEmpty(mcomb_screenY2)) {
            mcomb_screenY1 = win1canY;
            mcomb_screenY2 = win1canY + win1_height * ScaleG_scale
        }
        var win2_size = $.Micro_SVG.getSVGRect(frame2);
        var win2_x = win2_size.x;
        var win2_y = win2_size.y;
        var win2_width = win2_size.width;
        var win2_height = win2_size.height;
        var win2canXY = $.Micro_SVG.ToCanvasPoint($("#" + mDrawFlag_SvgId), win2_x, win2_y);
        var win2canX = win2canXY.x * ScaleG_scale;
        var win2canY = win2canXY.y * ScaleG_scale;
        if (win2.attr("mtype") == mDrawFlag_Win) {
            with(win2.find("[mtype=" + mDrawFlag_FrameRect + "]")) {
                r_width = Number(attr("mwidth"));
                r_height = Number(attr("mheight"))
            }
        } else {
            if (win2.attr("mtype") == mDrawFlag_Custom_CornerMaterial) {
                r_width = Number(win2.attr("mwidth"));
                r_height = Number(win2.attr("mheight"))
            } else {
                if (win2.attr("mtype") == mDrawFlag_Custom_CornerMaterial_h) {
                    r_width = Number(win2.attr("mwidth"));
                    r_height = Number(win2.attr("mheight"))
                }
            }
        }
        var offsetX = 0,
        offsetY = 0;
        switch (dir2) {
        case "t":
            if (align == "l") {
                offsetX = win1canX - win2canX
            } else {
                offsetX = (win1canX + win1_width) - (win2canX + win2_width)
            }
            offsetY = win1canY - (win2canY + win2_height * ScaleG_scale);
            break;
        case "b":
            if (align == "l") {
                offsetX = win1canX - win2canX
            } else {
                offsetX = (win1canX + win1_width) - (win2canX + win2_width)
            }
            offsetY = win1canY + win1_height * ScaleG_scale - win2canY;
            break;
        case "l":
            offsetX = win1canX - (win2canX + win2_width * ScaleG_scale);
            offsetY = win1canY - win2canY;
            if (align == "t") {
                offsetY = win1canY - win2canY
            } else {
                offsetY = (win1canY + win1_height) - (win2canY + win2_height)
            }
            break;
        case "r":
            offsetX = win1canX + win1_width * ScaleG_scale - win2canX;
            if (align == "t") {
                offsetY = win1canY - win2canY
            } else {
                offsetY = (win1canY + win1_height) - (win2canY + win2_height)
            }
            break
        }
        for (var j = 0; j < winShapes.length; j++) {
            $.each(win2.find(winShapes[j]),
            function() {
                with($(this)) {
                    if (winShapes[j] == "line") {
                        attr("x1", Number(attr("x1")) + offsetX);
                        attr("y1", Number(attr("y1")) + offsetY);
                        attr("x2", Number(attr("x2")) + offsetX);
                        attr("y2", Number(attr("y2")) + offsetY)
                    } else {
                        attr("x", Number(attr("x")) + offsetX);
                        attr("y", Number(attr("y")) + offsetY)
                    }
                }
            })
        }
        var win1_size = $.Micro_SVG.getSVGRect(frame1);
        var win1_x = win1_size.x;
        var win1_y = win1_size.y;
        var win1canXY = $.Micro_SVG.ToCanvasPoint($("#" + mDrawFlag_SvgId), win1_x, win1_y);
        var win1canX = win1canXY.x * ScaleG_scale;
        var win1canY = win1canXY.y * ScaleG_scale;
        var win2_size = $.Micro_SVG.getSVGRect(frame2);
        var win2_x = win2_size.x;
        var win2_y = win2_size.y;
        var win2canXY = $.Micro_SVG.ToCanvasPoint($("#" + mDrawFlag_SvgId), win2_x, win2_y);
        var win2canX = win2canXY.x * ScaleG_scale;
        var win2canY = win2canXY.y * ScaleG_scale;
        if (win2canX < mcomb_screenX1 && (win2.attr("mtype") == mDrawFlag_Win)) {
            mcomb_screenX1 = win2canX;
            minXWin = win2
        }
        if (win2canX + win2_width * ScaleG_scale > mcomb_screenX2 && (win2.attr("mtype") == mDrawFlag_Win)) {
            mcomb_screenX2 = win2canX + win2_width * ScaleG_scale;
            maxXWin = win2
        }
        if (win2canY < mcomb_screenY1 && (win2.attr("mtype") == mDrawFlag_Win)) {
            mcomb_screenY1 = win2canY;
            minYWin = win2
        }
        if (win2canY + win2_height * ScaleG_scale > mcomb_screenY2 && (win2.attr("mtype") == mDrawFlag_Win)) {
            mcomb_screenY2 = win2canY + win2_height * ScaleG_scale;
            maxYWin = win2
        }
    }
    mcomb_screenWidth = mcomb_screenX2 - mcomb_screenX1;
    mcomb_screenHeight = mcomb_screenY2 - mcomb_screenY1;
    var getTSize1 = getTotalSize("tl");
    var getTSize2 = getTotalSize("br");
    var _getRealSize = {
        width: (getTSize1.width > getTSize2.width ? getTSize1.width: getTSize2.width),
        height: (getTSize1.height > getTSize2.height ? getTSize1.height: getTSize2.height),
    };
    mcomb_realWidth = _getRealSize.width || $("#" + mDrawFlag_SvgId + ' [mtype = "' + mDrawFlag_combsortwin + '"]').attr("combw");
    mcomb_realHeight = _getRealSize.height || $("#" + mDrawFlag_SvgId + ' [mtype = "' + mDrawFlag_combsortwin + '"]').attr("combh");
    $("#" + mDrawFlag_SvgId + ' [mtype = "' + mDrawFlag_combsortwin + '"]').attr("combw", mcomb_realWidth);
    $("#" + mDrawFlag_SvgId + ' [mtype = "' + mDrawFlag_combsortwin + '"]').attr("combh", mcomb_realHeight);
    var combsize = "{";
    combsize += "combsw:" + mcomb_screenWidth;
    combsize += ",combsh:" + mcomb_screenHeight;
    combsize += ",combx:" + mcomb_screenX1;
    combsize += ",comby:" + mcomb_screenY1;
    combsize += "}";
    $("#" + mDrawFlag_SvgId + ' [mtype = "' + mDrawFlag_combsortwin + '"]').attr("combsize", combsize);
    ShowCombRuler("x", mcomb_screenX1, mcomb_screenY1, mcomb_screenWidth, mcomb_screenHeight, mcomb_realWidth);
    ShowCombRuler("y", mcomb_screenX1, mcomb_screenY1, mcomb_screenWidth, mcomb_screenHeight, mcomb_realHeight);
    mDrawCombWin_minXwin = minXWin;
    mDrawCombWin_maxXwin = maxXWin;
    mDrawCombWin_minYwin = minYWin;
    mDrawCombWin_maxYwin = maxYWin;
    MicroDraw_3DShowcombwins(show3D);
    var Result = {
        minXWin: minXWin,
        maxXWin: maxXWin,
        minYWin: minYWin,
        maxYWin: maxYWin,
        mcomb_screenX1: mcomb_screenX1,
        mcomb_screenY1: mcomb_screenY1,
        mcomb_screenWidth: mcomb_screenWidth,
        mcomb_screenHeight: mcomb_screenHeight,
        mcomb_realWidth: mcomb_realWidth,
        mcomb_realHeight: mcomb_realHeight
    };
    return Result
}
function MicroDraw_OverLookSetting() {
    var E = MicroDraw_getCombWinIDs();
    if (E.length == 0) {
        return true
    }
    var G = [];
    var I;
    var D;
    for (var F = 0; F < E.length; F++) {
        var B = $("#" + mDrawFlag_SvgId + " #" + E[F]);
        var H = B.find(" [mtype=" + mDrawFlag_FrameRect + "]").attr("id");
        if ($("#" + mDrawFlag_SvgId + " [mgdtxtbelongto=" + H + "]").length > 0) {
            G.push(H);
            var A = $.Micro_SVG.getSVGRect(B);
            var C = A.x;
            if ($.Micro.IsEmpty(I)) {
                I = C
            }
            if (I >= C) {
                I = C;
                D = H
            }
        }
    }
    if (!$.Micro.IsEmpty(D) && G.length > 1) {
        for (var F = 0; F < E.length; F++) {
            var B = $("#" + mDrawFlag_SvgId + " #" + E[F]);
            var H = B.find(" [mtype=" + mDrawFlag_FrameRect + "]").attr("id");
            if (H == D) {
                continue
            }
            $("#" + mDrawFlag_SvgId).find('[mgdtxtbelongto="' + H + '"]').remove()
        }
    }
}
function MicroDraw_GetmoveCombWin(C) {
    if (C.length == 0) {
        return null
    }
    var D;
    var B = MicroDraw_getCombWinIDs();
    for (var A = 0; A < B.length; A++) {
        if (C.attr("id") == B[A]) {
            D = $("#" + mDrawFlag_SvgId + " #" + B[0]);
            return D
        }
    }
    return C
}
function MicroDraw_ShowCornergdpic() {
    $("#" + mDrawFlag_SvgId + ' [mtype = "' + mDrawFlag_Cornergdpic + '"]').remove();
    var getCombWinIDs = MicroDraw_getCombWinIDs("all");
    var Combs = getCombWinIDs.Combs;
    var Wins = getCombWinIDs.Wins;
    var CMs = getCombWinIDs.CMs;
    var CMVs = getCombWinIDs.CMVs;
    var CMHs = getCombWinIDs.CMHs;
    var Align_gdpic = function() {
        var MaxgdpicY = 0;
        for (var i = 0; i < Wins.length; i++) {
            var frameid = $("#" + mDrawFlag_SvgId + " #" + Wins[i] + " [mtype=" + mDrawFlag_FrameRect + "]").attr("id");
            var gdobjrect = $("#" + mDrawFlag_SvgId + " [mgdbelongto=" + frameid + "]").find("[mtype=" + mDrawFlag_Custom_rect + "]");
            if (gdobjrect.length > 0) {
                var size = $.Micro_SVG.getSVGRect(gdobjrect.eq(0));
                var cpXY = $.MicroSVG.ToCanvasPoint($("#" + mDrawFlag_SvgId), size.x, size.y);
                var y = Number(cpXY.y);
                if (y > MaxgdpicY) {
                    MaxgdpicY = y
                }
            }
        }
        for (var i = 0; i < Wins.length; i++) {
            var frameid = $("#" + mDrawFlag_SvgId + " #" + Wins[i] + " [mtype=" + mDrawFlag_FrameRect + "]").attr("id");
            var gdobj = $("#" + mDrawFlag_SvgId + " [mgdbelongto=" + frameid + "]");
            var gdobjrect = gdobj.find("[mtype=" + mDrawFlag_Custom_rect + "]");
            if (gdobjrect.length > 0) {
                var size = $.Micro_SVG.getSVGRect(gdobjrect);
                var cpXY = $.MicroSVG.ToCanvasPoint($("#" + mDrawFlag_SvgId), size.x, size.y);
                var y = Number(cpXY.y);
                var offsetY = MaxgdpicY - y;
                if (offsetY != 0) {
                    gdobj.attr("transform", "matrix(1,0,0,1,0," + offsetY + ")")
                }
            }
        }
    };
    Align_gdpic();
    if ($("#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_Custom_CornerMaterial + "]").length == 0) {
        MicroDraw_gdPicAutoSettingPos();
        return true
    }
    var mcombsortwin = mDrawFlag_combsortwin;
    var _mcombsortwin = $("#" + mDrawFlag_SvgId + ' [mtype = "' + mcombsortwin + '"]').attr(mcombsortwin);
    var overMax = (Wins.length > 3) || (CMs.length > 2) || (CMVs.length > 0 && CMHs.length > 0);
    if (mDrawCombWin_minXwin && mDrawCombWin_maxXwin) {
        overMax = overMax || (Wins.length == 3 && (Wins[0] == mDrawCombWin_minXwin.attr("id") || Wins[0] == mDrawCombWin_maxXwin.attr("id")))
    } else {
        overMax = true
    }
    if (!$.Micro.IsEmpty(_mcombsortwin)) {
        var _mcombsortwins = _mcombsortwin.split(";");
        var mglonglo = $("#" + mDrawFlag_SvgId).find("[mgdbelongto]");
        var gdtext = $.Micro.MergeObjs([mglonglo.find("[mgdtxtbelongto][mgdtxtbelongtoproperty=mgduptxt]"), mglonglo.find("[mgdtxtbelongto][mgdtxtbelongtoproperty=mgddowntxt]"), mglonglo.find("[mgdtxtbelongto][mgdtxtbelongtoproperty=dividingline]")]);
        $.each(gdtext,
        function() {
            var gdobj = $(this).parents("[mgdbelongto]");
            var gd_transform = $.MicroSVG.getMatrix(gdobj.attr("transform")).matrixStr;
            var gdtext_transform = $.MicroSVG.getMatrix($(this).attr("transform")).matrixStr;
            $(this).attr("transform", [gd_transform, gdtext_transform].join(" ")).insertBefore(gdobj)
        });
        for (var i = 0; i < _mcombsortwins.length; i += 2) {
            var TObjID1, TObjID2;
            var TObj1, TObj2;
            var winid1, winid2, cmid, frameid1, frameid2;
            var dir;
            var angle, adir;
            var winobj, cmobj;
            var gdobj, ref_gdobj;
            var transform, ref_transform, new_transform;
            var o_transform = "matrix(1,0,0,1,0,0)";
            var rotateX, rotateY;
            var rotate_angle;
            eval("var wininfor1 = " + _mcombsortwins[i]);
            eval("var wininfor2 = " + _mcombsortwins[i + 1]);
            winid1 = wininfor1.id1;
            winid2 = wininfor2.id2;
            cmid = wininfor1.id2;
            winobj1 = $("#" + mDrawFlag_SvgId + " #" + winid1);
            winobj2 = $("#" + mDrawFlag_SvgId + " #" + winid2);
            frameid1 = winobj1.find("[mtype=" + mDrawFlag_FrameRect + "]").attr("id");
            frameid2 = winobj2.find("[mtype=" + mDrawFlag_FrameRect + "]").attr("id");
            gdobj = $("#" + mDrawFlag_SvgId + " [mgdbelongto=" + frameid2 + "]");
            if (gdobj.length == 0) {
                continue
            }
            cmobj = $("#" + mDrawFlag_SvgId + " #" + cmid);
            dir = wininfor1.dir2;
            angle = cmobj.attr("mangle");
            adir = cmobj.attr("madir");
            if ($.Micro.IsEmpty(angle)) {
                angle = 0
            }
            if ($.Micro.IsEmpty(adir)) {
                adir = "b"
            }
            angle = Number(angle);
            angle = angle % 180 == 0 ? 0 : angle;
            ref_gdobj = $("#" + mDrawFlag_SvgId + " [mgdbelongto=" + frameid1 + "]");
            ref_transform = $.MicroSVG.getMatrix(ref_gdobj.attr("transform")).matrixStr;
            transform = $.MicroSVG.getMatrix(gdobj.attr("transform")).matrixStr;
            if (overMax) {
                angle = 0;
                adir = "r";
                var gdobj_r;
                var X_move = 0;
                var w = 0;
                if (dir == "r") {
                    gdobj_r = gdobj.find("[mtype=" + mDrawFlag_Custom_rect + "]").eq(0).find("rect");
                    X_move = -8
                } else {
                    gdobj_r = gdobj.find("[mtype=" + mDrawFlag_Custom_rect + "]").eq(1).find("rect");
                    X_move = 8;
                    w = 8
                }
                var gdobj_r_size = $.MicroSVG.getSVGRect(gdobj_r);
                var gdobj_r_cpXY = $.MicroSVG.ToCanvasPoint($("#" + mDrawFlag_SvgId), gdobj_r_size.x, gdobj_r_size.y);
                var pathPoints = ["M", [gdobj_r_cpXY.x + w, gdobj_r_cpXY.y].join(" "), "L", [gdobj_r_cpXY.x + w, gdobj_r_cpXY.y + 30].join(" "), "L", [gdobj_r_cpXY.x + w + X_move, gdobj_r_cpXY.y + 30].join(" "), "L", [gdobj_r_cpXY.x + w + X_move, gdobj_r_cpXY.y].join(" "), "Z"].join("");
                var _attr = {
                    "mtype": mDrawFlag_Cornergdpic
                };
                var Cornergdpic = $($.MicroSVG.makeSVG("g", _attr));
                Cornergdpic.insertAfter(gdobj);
                _attr = {
                    "d": pathPoints,
                    "fill": mDrawProductColor,
                    "fill-opacity": "1",
                    "stroke": "#000"
                };
                var Cgdpic_child = $($.MicroSVG.makeSVG("path", _attr));
                Cornergdpic.append(Cgdpic_child);
                continue
            }
            if (dir == "l") {
                var gdobj_r = gdobj.find("[mtype=" + mDrawFlag_Custom_rect + "]").eq(1).find("rect");
                var gdobj_r_X = Number(gdobj_r.attr("x"));
                var gdobj_r_Y = Number(gdobj_r.attr("y"));
                var gdobj_r_W = Number(gdobj_r.attr("width"));
                var gdobj_r_H = Number(gdobj_r.attr("height"));
                var gdobj_r_lu_XY = $.MicroSVG.Matrix_Transform(transform, [gdobj_r_X, gdobj_r_Y]);
                var gdobj_r_lu_X = gdobj_r_lu_XY[0];
                var gdobj_r_lu_Y = gdobj_r_lu_XY[1];
                var gdobj_r_ru_XY = $.MicroSVG.Matrix_Transform(transform, [gdobj_r_X + gdobj_r_W, gdobj_r_Y]);
                var gdobj_r_ru_X = gdobj_r_ru_XY[0];
                var gdobj_r_ru_Y = gdobj_r_ru_XY[1];
                var gdobj_r_ld_XY = $.MicroSVG.Matrix_Transform(transform, [gdobj_r_X, gdobj_r_Y + gdobj_r_H]);
                var gdobj_r_ld_X = gdobj_r_ld_XY[0];
                var gdobj_r_ld_Y = gdobj_r_ld_XY[1];
                var gdobj_r_rd_XY = $.MicroSVG.Matrix_Transform(transform, [gdobj_r_X + gdobj_r_W, gdobj_r_Y + gdobj_r_H]);
                var gdobj_r_rd_X = gdobj_r_rd_XY[0];
                var gdobj_r_rd_Y = gdobj_r_rd_XY[1];
                var ref_gdobj_l = ref_gdobj.find("[mtype=" + mDrawFlag_Custom_rect + "]").eq(0).find("rect");
                var ref_gdobj_l_X = Number(ref_gdobj_l.attr("x"));
                var ref_gdobj_l_Y = Number(ref_gdobj_l.attr("y"));
                var ref_gdobj_l_W = Number(ref_gdobj_l.attr("width"));
                var ref_gdobj_l_H = Number(ref_gdobj_l.attr("height"));
                var ref_gdobj_lu_XY = $.MicroSVG.Matrix_Transform(ref_transform, [ref_gdobj_l_X, ref_gdobj_l_Y]);
                var ref_gdobj_lu_X = ref_gdobj_lu_XY[0];
                var ref_gdobj_lu_Y = ref_gdobj_lu_XY[1];
                var ref_gdobj_ru_XY = $.MicroSVG.Matrix_Transform(ref_transform, [ref_gdobj_l_X + ref_gdobj_l_W, ref_gdobj_l_Y]);
                var ref_gdobj_ru_X = ref_gdobj_ru_XY[0];
                var ref_gdobj_ru_Y = ref_gdobj_ru_XY[1];
                var ref_gdobj_ld_XY = $.MicroSVG.Matrix_Transform(ref_transform, [ref_gdobj_l_X, ref_gdobj_l_Y + ref_gdobj_l_H]);
                var ref_gdobj_ld_X = ref_gdobj_ld_XY[0];
                var ref_gdobj_ld_Y = ref_gdobj_ld_XY[1];
                var ref_gdobj_rd_XY = $.MicroSVG.Matrix_Transform(ref_transform, [ref_gdobj_l_X + ref_gdobj_l_W, ref_gdobj_l_Y + ref_gdobj_l_H]);
                var ref_gdobj_rd_X = ref_gdobj_rd_XY[0];
                var ref_gdobj_rd_Y = ref_gdobj_rd_XY[1];
                switch (adir) {
                case "b":
                    rotateX = ref_gdobj_ld_X;
                    rotateY = ref_gdobj_ld_Y;
                    rotate_angle = angle - 180;
                    new_transform = "rotate(" + rotate_angle + " " + rotateX + " " + rotateY + ") matrix(1 0 0 1 " + mDrawThickFrame + " 0)";
                    new_transform = $.MicroSVG.TransTagsToMatrix(new_transform);
                    var C_gdobj_r_lu_XY = $.MicroSVG.Matrix_Transform(new_transform, [gdobj_r_lu_X, gdobj_r_lu_Y]);
                    var C_gdobj_r_ru_XY = $.MicroSVG.Matrix_Transform(new_transform, [gdobj_r_ru_X, gdobj_r_ru_Y]);
                    var C_ref_gdobj_lu_XY = $.MicroSVG.Matrix_Transform(o_transform, [ref_gdobj_lu_X, ref_gdobj_lu_Y]);
                    var C_ref_gdobj_ru_XY = $.MicroSVG.Matrix_Transform(o_transform, [ref_gdobj_ru_X, ref_gdobj_ru_Y]);
                    var LineInterPoint = $.MicroSVG.LineInterPoint([C_gdobj_r_lu_XY, C_gdobj_r_ru_XY, C_ref_gdobj_lu_XY, C_ref_gdobj_ru_XY]);
                    var interX, interY;
                    var pathPoints;
                    if (LineInterPoint) {
                        interX = LineInterPoint.x;
                        interY = LineInterPoint.y;
                        pathPoints = ["M", [rotateX, rotateY].join(" "), "L", C_gdobj_r_ru_XY.join(" "), "L", [interX, interY].join(" "), "L", C_ref_gdobj_lu_XY.join(" "), "Z"].join("");
                        var _attr = {
                            "mtype": mDrawFlag_Cornergdpic
                        };
                        var Cornergdpic = $($.MicroSVG.makeSVG("g", _attr));
                        Cornergdpic.insertAfter(gdobj);
                        _attr = {
                            "d": pathPoints,
                            "fill": mDrawProductColor,
                            "fill-opacity": "1",
                            "stroke": "#000"
                        };
                        var Cgdpic_child = $($.MicroSVG.makeSVG("path", _attr));
                        Cornergdpic.append(Cgdpic_child)
                    }
                    break;
                case "t":
                    rotateX = ref_gdobj_lu_X;
                    rotateY = ref_gdobj_lu_Y;
                    rotate_angle = 180 - angle;
                    new_transform = "rotate(" + rotate_angle + " " + rotateX + " " + rotateY + ") matrix(1 0 0 1 " + mDrawThickFrame + " 0)";
                    new_transform = $.MicroSVG.TransTagsToMatrix(new_transform);
                    var C_gdobj_r_ld_XY = $.MicroSVG.Matrix_Transform(new_transform, [gdobj_r_ld_X, gdobj_r_ld_Y]);
                    var C_gdobj_r_rd_XY = $.MicroSVG.Matrix_Transform(new_transform, [gdobj_r_rd_X, gdobj_r_rd_Y]);
                    var C_ref_gdobj_ld_XY = $.MicroSVG.Matrix_Transform(o_transform, [ref_gdobj_ld_X, ref_gdobj_ld_Y]);
                    var C_ref_gdobj_rd_XY = $.MicroSVG.Matrix_Transform(o_transform, [ref_gdobj_rd_X, ref_gdobj_rd_Y]);
                    var LineInterPoint = $.MicroSVG.LineInterPoint([C_gdobj_r_ld_XY, C_gdobj_r_rd_XY, C_ref_gdobj_ld_XY, C_ref_gdobj_rd_XY]);
                    var interX, interY;
                    var pathPoints;
                    if (LineInterPoint) {
                        interX = LineInterPoint.x;
                        interY = LineInterPoint.y;
                        pathPoints = ["M", [rotateX, rotateY].join(" "), "L", C_gdobj_r_rd_XY.join(" "), "L", [interX, interY].join(" "), "L", C_ref_gdobj_ld_XY.join(" "), "Z"].join("");
                        var _attr = {
                            "d": pathPoints,
                            "fill": mDrawProductColor,
                            "fill-opacity": "1",
                            "stroke": "#000",
                            "mtype": mDrawFlag_Cornergdpic
                        };
                        var Cornergdpic = $($.MicroSVG.makeSVG("path", _attr));
                        Cornergdpic.insertAfter(gdobj)
                    }
                    break;
                case "l":
                case "r":
                    rotate_angle = 0;
                    new_transform = "";
                    var C_ref_gdobj_lu_XY = $.MicroSVG.Matrix_Transform(o_transform, [ref_gdobj_lu_X, ref_gdobj_lu_Y]);
                    pathPoints = ["M", [ref_gdobj_ld_X, ref_gdobj_ld_Y].join(" "), "L", [gdobj_r_rd_X, gdobj_r_rd_Y].join(" "), "L", [gdobj_r_ru_X, gdobj_r_ru_Y].join(" "), "L", C_ref_gdobj_lu_XY.join(" "), "Z"].join("");
                    var _attr = {
                        "d": pathPoints,
                        "fill": mDrawProductColor,
                        "fill-opacity": "1",
                        "stroke": "#000",
                        "mtype": mDrawFlag_Cornergdpic
                    };
                    var Cornergdpic = $($.MicroSVG.makeSVG("path", _attr));
                    Cornergdpic.insertAfter(gdobj);
                    break
                }
            } else {
                var gdobj_l = gdobj.find("[mtype=" + mDrawFlag_Custom_rect + "]").eq(0).find("rect");
                var gdobj_l_X = Number(gdobj_l.attr("x"));
                var gdobj_l_Y = Number(gdobj_l.attr("y"));
                var gdobj_l_W = Number(gdobj_l.attr("width"));
                var gdobj_l_H = Number(gdobj_l.attr("height"));
                var gdobj_l_lu_XY = $.MicroSVG.Matrix_Transform(transform, [gdobj_l_X, gdobj_l_Y]);
                var gdobj_l_lu_X = gdobj_l_lu_XY[0];
                var gdobj_l_lu_Y = gdobj_l_lu_XY[1];
                var gdobj_l_ru_XY = $.MicroSVG.Matrix_Transform(transform, [gdobj_l_X + gdobj_l_W, gdobj_l_Y]);
                var gdobj_l_ru_X = gdobj_l_ru_XY[0];
                var gdobj_l_ru_Y = gdobj_l_ru_XY[1];
                var gdobj_l_ld_XY = $.MicroSVG.Matrix_Transform(transform, [gdobj_l_X, gdobj_l_Y + gdobj_l_H]);
                var gdobj_l_ld_X = gdobj_l_ld_XY[0];
                var gdobj_l_ld_Y = gdobj_l_ld_XY[1];
                var gdobj_l_rd_XY = $.MicroSVG.Matrix_Transform(transform, [gdobj_l_X + gdobj_l_W, gdobj_l_Y + gdobj_l_H]);
                var gdobj_l_rd_X = gdobj_l_rd_XY[0];
                var gdobj_l_rd_Y = gdobj_l_rd_XY[1];
                var ref_gdobj_r = ref_gdobj.find("[mtype=" + mDrawFlag_Custom_rect + "]").eq(1).find("rect");
                var ref_gdobj_r_X = Number(ref_gdobj_r.attr("x"));
                var ref_gdobj_r_Y = Number(ref_gdobj_r.attr("y"));
                var ref_gdobj_r_W = Number(ref_gdobj_r.attr("width"));
                var ref_gdobj_r_H = Number(ref_gdobj_r.attr("height"));
                var ref_gdobj_lu_XY = $.MicroSVG.Matrix_Transform(ref_transform, [ref_gdobj_r_X, ref_gdobj_r_Y]);
                var ref_gdobj_lu_X = ref_gdobj_lu_XY[0];
                var ref_gdobj_lu_Y = ref_gdobj_lu_XY[1];
                var ref_gdobj_ru_XY = $.MicroSVG.Matrix_Transform(ref_transform, [ref_gdobj_r_X + ref_gdobj_r_W, ref_gdobj_r_Y]);
                var ref_gdobj_ru_X = ref_gdobj_ru_XY[0];
                var ref_gdobj_ru_Y = ref_gdobj_ru_XY[1];
                var ref_gdobj_ld_XY = $.MicroSVG.Matrix_Transform(ref_transform, [ref_gdobj_r_X, ref_gdobj_r_Y + ref_gdobj_r_H]);
                var ref_gdobj_ld_X = ref_gdobj_ld_XY[0];
                var ref_gdobj_ld_Y = ref_gdobj_ld_XY[1];
                var ref_gdobj_rd_XY = $.MicroSVG.Matrix_Transform(ref_transform, [ref_gdobj_r_X + ref_gdobj_r_W, ref_gdobj_r_Y + ref_gdobj_r_H]);
                var ref_gdobj_rd_X = ref_gdobj_rd_XY[0];
                var ref_gdobj_rd_Y = ref_gdobj_rd_XY[1];
                switch (adir) {
                case "b":
                    rotateX = ref_gdobj_rd_X;
                    rotateY = ref_gdobj_rd_Y;
                    rotate_angle = 180 - angle;
                    new_transform = "rotate(" + rotate_angle + " " + rotateX + " " + rotateY + ") matrix(1 0 0 1 -" + mDrawThickFrame + " 0)";
                    new_transform = $.MicroSVG.TransTagsToMatrix(new_transform);
                    var C_gdobj_l_lu_XY = $.MicroSVG.Matrix_Transform(new_transform, [gdobj_l_lu_X, gdobj_l_lu_Y]);
                    var C_gdobj_l_ru_XY = $.MicroSVG.Matrix_Transform(new_transform, [gdobj_l_ru_X, gdobj_l_ru_Y]);
                    var C_ref_gdobj_lu_XY = $.MicroSVG.Matrix_Transform(o_transform, [ref_gdobj_lu_X, ref_gdobj_lu_Y]);
                    var C_ref_gdobj_ru_XY = $.MicroSVG.Matrix_Transform(o_transform, [ref_gdobj_ru_X, ref_gdobj_ru_Y]);
                    var LineInterPoint = $.MicroSVG.LineInterPoint([C_gdobj_l_lu_XY, C_gdobj_l_ru_XY, C_ref_gdobj_lu_XY, C_ref_gdobj_ru_XY]);
                    var interX, interY;
                    var pathPoints;
                    if (LineInterPoint) {
                        interX = LineInterPoint.x;
                        interY = LineInterPoint.y;
                        pathPoints = ["M", [rotateX, rotateY].join(" "), "L", C_gdobj_l_lu_XY.join(" "), "L", [interX, interY].join(" "), "L", C_ref_gdobj_ru_XY.join(" "), "Z"].join("");
                        var _attr = {
                            "mtype": mDrawFlag_Cornergdpic
                        };
                        var Cornergdpic = $($.MicroSVG.makeSVG("g", _attr));
                        Cornergdpic.insertAfter(gdobj);
                        _attr = {
                            "d": pathPoints,
                            "fill": mDrawProductColor,
                            "fill-opacity": "1",
                            "stroke": "#000"
                        };
                        var Cgdpic_child = $($.MicroSVG.makeSVG("path", _attr));
                        Cornergdpic.append(Cgdpic_child)
                    }
                    break;
                case "t":
                    rotateX = ref_gdobj_ru_X;
                    rotateY = ref_gdobj_ru_Y;
                    rotate_angle = angle - 180;
                    new_transform = "rotate(" + rotate_angle + " " + rotateX + " " + rotateY + ") matrix(1 0 0 1 -" + mDrawThickFrame + " 0)";
                    new_transform = $.MicroSVG.TransTagsToMatrix(new_transform);
                    var C_gdobj_l_ld_XY = $.MicroSVG.Matrix_Transform(new_transform, [gdobj_l_ld_X, gdobj_l_ld_Y]);
                    var C_gdobj_l_rd_XY = $.MicroSVG.Matrix_Transform(new_transform, [gdobj_l_rd_X, gdobj_l_rd_Y]);
                    var C_ref_gdobj_ld_XY = $.MicroSVG.Matrix_Transform(o_transform, [ref_gdobj_ld_X, ref_gdobj_ld_Y]);
                    var C_ref_gdobj_rd_XY = $.MicroSVG.Matrix_Transform(o_transform, [ref_gdobj_rd_X, ref_gdobj_rd_Y]);
                    var LineInterPoint = $.MicroSVG.LineInterPoint([C_gdobj_l_ld_XY, C_gdobj_l_rd_XY, C_ref_gdobj_ld_XY, C_ref_gdobj_rd_XY]);
                    var interX, interY;
                    var pathPoints;
                    if (LineInterPoint) {
                        interX = LineInterPoint.x;
                        interY = LineInterPoint.y;
                        pathPoints = ["M", [rotateX, rotateY].join(" "), "L", C_gdobj_l_ld_XY.join(" "), "L", [interX, interY].join(" "), "L", C_ref_gdobj_rd_XY.join(" "), "Z"].join("");
                        var _attr = {
                            "d": pathPoints,
                            "fill": mDrawProductColor,
                            "fill-opacity": "1",
                            "stroke": "#000",
                            "mtype": mDrawFlag_Cornergdpic
                        };
                        var Cornergdpic = $($.MicroSVG.makeSVG("path", _attr));
                        Cornergdpic.insertAfter(gdobj)
                    }
                    break;
                case "l":
                case "r":
                    new_transform = "";
                    rotate_angle = 0;
                    var C_ref_gdobj_rd_XY = $.MicroSVG.Matrix_Transform(o_transform, [ref_gdobj_rd_X, ref_gdobj_rd_Y]);
                    var C_ref_gdobj_ru_XY = $.MicroSVG.Matrix_Transform(o_transform, [ref_gdobj_ru_X, ref_gdobj_ru_Y]);
                    pathPoints = ["M", [gdobj_l_ld_X, gdobj_l_ld_Y].join(" "), "L", [gdobj_l_lu_X, gdobj_l_lu_Y].join(" "), "L", C_ref_gdobj_ru_XY.join(" "), "L", C_ref_gdobj_rd_XY.join(" "), "Z"].join("");
                    var _attr = {
                        "d": pathPoints,
                        "fill": mDrawProductColor,
                        "fill-opacity": "1",
                        "stroke": "#000",
                        "mtype": mDrawFlag_Cornergdpic
                    };
                    var Cornergdpic = $($.MicroSVG.makeSVG("path", _attr));
                    Cornergdpic.insertAfter(gdobj);
                    break
                }
            }
            new_transform = [new_transform, transform].join(" ");
            gdobj.attr("transform", new_transform)
        }
        MicroDraw_gdPicAutoSettingPos()
    } else {
        return true
    }
}
function MicroDraw_gdPicAutoSettingPos() {
    var K = MicroDraw_getCombWinIDs("all");
    var L = K.Combs;
    var H = K.Wins;
    var C = K.CMs;
    if (L.length == 0) {
        return true
    }
    var J = 1;
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
        J = Number(mDrawSvgViewBox) / Number(MobileFrame_getCurrMobileViewScale(mDrawFlag_SvgId))
    }
    var A = $.Micro.MergeObjs([$("#" + mDrawFlag_SvgId + " [mgdbelongto]"), $("#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_Cornergdpic + "]"), $("#" + mDrawFlag_SvgId + " [mgdtxtbelongtoproperty=mgduptxt]"), $("#" + mDrawFlag_SvgId + " [mgdtxtbelongtoproperty=mgddowntxt]"), $("#" + mDrawFlag_SvgId + " [mgdtxtbelongtoproperty=dividingline]")]);
    var O = "";
    $.each(A,
    function() {
        var P = $.MicroSVG.getSVGRect($(this));
        if (O != "") {
            O += ","
        }
        O += [P.x1, P.y1, P.x2, P.y2].join(",")
    });
    if (O != "") {
        var D = O.split(",");
        var E = $.MicroSVG.getSVGRectCoor(D);
        var G = $("#" + mDrawFlag_SvgId + " #" + H[0]);
        var F = MicroDraw_getGdpicSettingPos(G);
        var M = 10;
        var B = F.MaxBottom;
        var N = Number(E.y1) * J;
        var I = B - N + M;
        $.each(A,
        function() {
            if ($(this).parents("[mgdbelongto]").length > 0) {
                return true
            }
            var P = $.MicroSVG.getMatrix($(this).attr("transform")).matrixStr;
            P = "matrix(1,0,0,1,0," + I + ") " + P;
            $(this).attr("transform", P)
        })
    }
}
function MicroDraw_ChangeSVGAreaSize(svgArea, svgW, svgH) {
    if (svgArea.length == 0) {
        return true
    }
    if ($.Micro.IsEmpty(svgW)) {
        svgW = 240
    }
    if ($.Micro.IsEmpty(svgH)) {
        svgH = 240
    }
    var tSVGarea = svgArea.find("svg").parents('[id*="_MicroDraw_fromWin_svg"],[id*="_MicroDraw_winStore_svg"]');
    $.each(tSVGarea,
    function() {
        with($(this)) {
            $.each(find("div[setW='1'],div[setH='1']"),
            function() {
                var _this = $(this);
                with($(this)) {
                    if (attr("setW") == "1") {
                        css("width", svgW + "px")
                    }
                    if (attr("setH") == "1") {
                        css("height", svgH + "px")
                    }
                }
            })
        }
    })
}
function MicroDraw_Ruler_doubleClickText(A) {
    var C = $(A)[0].parentNode;
    var E = C.getAttribute("moptid");
    var G = C.getAttribute("moptvalexp");
    var B = C.getAttribute("moptidbelongtoobj");
    var D = "";
    if (isEmptyOrNull(E)) {
        E = ""
    }
    if (isEmptyOrNull(B)) {
        B = ""
    }
    if (E.length > 0) {
        var F = $.messager.defaults;
        $.messager.defaults = {
            ok: "确定",
            cancel: "退出",
            width: 200
        };
        $.messager.prompt("尺寸录入：", "请输入尺寸：",
        function(I) {
            if (I) {
                var H = I;
                G = replaceAll(G, "VAL", H);
                D = MicroDraw_genData_calcExp(0, G, "", "");
                if (isEmptyOrNull(B)) {
                    var K = $("#" + getDrawOptPropertyName()).datagrid("getRows");
                    $.each(K,
                    function(L, M) {
                        if (M.optId == E) {
                            $("#" + getDrawOptPropertyName()).datagrid("updateRow", {
                                index: L,
                                row: {
                                    optVal: D
                                }
                            });
                            MicroDraw_optChangeEvent()
                        }
                    })
                } else {
                    var J = $("#" + B)[0];
                    J.setAttribute(E, D);
                    MicroDraw_Redraw(B);
                    MicroDraw_AddCustomControlPoint(mDrawCustomObjList);
                    MicroDraw_AutoRuler(B);
                    MicroDraw_ExpChangeCustom("size");
                    MicroDraw_ExpChangeCustom("pos")
                }
            }
        });
        $.messager.defaults = F
    }
}
function MicroDraw_getDifficulty(B) {
    var A = 0;
    para = {};
    para.action = "getDifficulty";
    para.svgId = B;
    $.ajax({
        url: "../MicroBudget/MicroDraw.ashx",
        data: para,
        type: "POST",
        dataType: "text",
        async: false,
        success: function(C) {
            if (C.substr(0, 2) == "ok") {
                A = C.substr(3)
            } else {
                jQuery.messager.alert("提示:", "获取失败!" + C, "error")
            }
        }
    });
    return A
}
function MicroDraw_moveQjToWinLastPostion() {
    $("#" + mDrawFlag_SvgId + " [mqjbelongtoframeid]").each(function(A, B) {
        $("#" + B.id)[0].parentNode.append(B)
    })
}
function MicroDraw_MoveFrameWinPostion(wins) {
    var winShapes = ["rect", "line", "text", "circle", "polygon", "path"];
    for (var j = 0; j < wins.length; j++) {
        var win = wins[j].win;
        var x_dev = $.Micro.ConvToNum(wins[j].x_dev);
        var y_dev = $.Micro.ConvToNum(wins[j].y_dev);
        for (var i = 0; i < winShapes.length; i++) {
            $.each(win.find(winShapes[i]),
            function() {
                var _this = $(this);
                if (_this.parents("[mtype=" + mDrawFlag_Definedgd + "]").length > 0) {
                    return true
                }
                with(_this) {
                    switch (winShapes[i]) {
                    case "line":
                        attr("x1", Number(attr("x1")) + x_dev);
                        attr("x2", Number(attr("x2")) + x_dev);
                        attr("y1", Number(attr("y1")) + y_dev);
                        attr("y2", Number(attr("y2")) + y_dev);
                        break;
                    case "circle":
                        attr("cx", Number(attr("cx")) + x_dev);
                        attr("cy", Number(attr("cy")) + y_dev);
                        break;
                    case "polygon":
                        var points = $.MicroSVG.UnifiedSVGPolygon(attr("points"));
                        var pointsArr = points.split(" ");
                        var newPoints = "";
                        for (var k = 0; k < pointsArr.length; k++) {
                            var xy = pointsArr[k].split(",");
                            xy[0] = Number(xy[0]) + x_dev;
                            xy[1] = Number(xy[1]) + y_dev;
                            if (newPoints != "") {
                                newPoints += " "
                            }
                            newPoints += xy.join(",")
                        }
                        _this.attr("points", newPoints);
                        break;
                    case "path":
                        var d = $.MicroSVG.UnifiedSVGPath(attr("d"));
                        var dArr = d.split(" ");
                        s_point = ["M" + ($.Micro.ConvToNum(dArr[0]) + x_dev), ($.Micro.ConvToNum(dArr[1]) + y_dev)];
                        var pathKey = $.MicroSVG.getSVGPathKey(d);
                        var d_Arr = [];
                        switch (pathKey) {
                        case "A":
                            var dA_Arr = d.split("A");
                            dA_Arr[0] = s_point.join(" ");
                            for (var k = 1; k < dA_Arr.length; k++) {
                                var ps = $.trim(dA_Arr[k]).split(" ");
                                for (var m = 0; m < ps.length; m++) {
                                    if (!$.Micro.isInArray(m, [0, 1, 2, 3, 4])) {
                                        var s_tag = "";
                                        var e_tag = "";
                                        var n_x = $.trim(ps[m]);
                                        if (isNaN(n_x)) {
                                            s_tag = $.Micro.Left(n_x, 1)
                                        }
                                        ps[m] = s_tag + ($.Micro.ConvToNum(ps[m]) + x_dev);
                                        m += 1;
                                        var n_y = $.trim(ps[m]);
                                        if (isNaN(n_y)) {
                                            e_tag = $.Micro.Right(n_y, 1)
                                        }
                                        ps[m] = ($.Micro.ConvToNum(ps[m]) + y_dev) + e_tag
                                    }
                                }
                                dA_Arr[k] = "A" + ps.join(" ")
                            }
                            d_Arr = dA_Arr;
                            break;
                        case "L":
                            var ps = d.split(" ");
                            for (var m = 0; m < ps.length; m++) {
                                var s_tag = "";
                                var e_tag = "";
                                var n_x = $.trim(ps[m]);
                                if (isNaN(n_x)) {
                                    s_tag = $.Micro.Left(n_x, 1)
                                }
                                ps[m] = s_tag + ($.Micro.ConvToNum(ps[m]) + x_dev);
                                m += 1;
                                var n_y = $.trim(ps[m]);
                                if (isNaN(n_y)) {
                                    e_tag = $.Micro.Right(n_y, 1)
                                }
                                ps[m] = ($.Micro.ConvToNum(ps[m]) + y_dev) + e_tag
                            }
                            d_Arr = ps;
                            break
                        }
                        var new_d = $.MicroSVG.UnifiedSVGPath(d_Arr.join(" "));
                        _this.attr("d", new_d);
                        break;
                    default:
                        attr("x", Number(attr("x")) + x_dev);
                        attr("y", Number(attr("y")) + y_dev)
                    }
                }
            })
        }
    }
}
function MicroDraw_ExpChangeCustom(A, D) {
    var C = [mDrawFlag_CoorX, mDrawFlag_CoorY, mDrawFlag_combCoorX, mDrawFlag_combCoorY];
    for (var B = 0; B < C.length; B++) {
        if (MicroDraw_SysSelectObj.parents("[mtype=" + C[B] + "]").length > 0) {
            return true
        }
    }
    if (!$.Micro.isInArray(A, ["pos", "size"])) {
        return true
    }
    var E;
    if (D && D.length > 0) {
        E = D
    } else {
        E = $("#" + mDrawFlag_SvgId + " [mtype*=custom_],#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_Custom_CornerMaterial + "]")
    }
    $.each(E,
    function() {
        var M = $(this);
        var L = false;
        var G = ["mx_exp", "my_exp", "mcx_exp", "mcy_exp"];
        var N = ["mwidth_exp", "mheight_exp"];
        var H;
        var K = M.get(0).attributes;
        for (var I = 0; I < K.length; I++) {
            var J = "";
            if (!$.Micro.IsEmpty(K[I])) {
                var F = K[I].name;
                if (F.indexOf("_exp") == -1) {
                    continue
                }
                if (A == "pos") {
                    H = G
                } else {
                    if (A == "size") {
                        H = N
                    }
                }
                if ($.Micro.isInArray(F, H)) {
                    J = M.attr(F);
                    if (!$.Micro.IsEmpty(J)) {
                        L = true;
                        M.attr(F.replace("_exp", ""), MicroDraw_genData_calcExp(0, J, "", ""))
                    }
                }
            }
        }
        if (L) {
            MicroDraw_Redraw(M.attr("id"));
            MicroDraw_AutoRuler(M.attr("id"))
        }
    })
}
function MicroDraw_NewUniqueID(G, B) {
    if (!G || G.length == 0) {
        G = $("body")
    }
    if ($.Micro.IsEmpty(B)) {
        B = ""
    }
    var A = function(I) {
        var H = Number(I);
        H = H < 10 ? [0, H].join("") : H;
        return H
    };
    var C = function(J) {
        var N = new Date();
        var P = N.getFullYear().toString().substring(2);
        var I = A(N.getMonth() + 1);
        var S = A(N.getDate());
        var O = A(N.getHours());
        var Q = A(N.getMinutes());
        var M = A(N.getSeconds());
        var H = A(N.getMilliseconds());
        var R = [P, I, S, O, Q, M, H].join("");
        var L = FixedLenRandomNum(6);
        var K = [R, L].join("");
        K = [J, K].join("");
        return K
    };
    var D = C(B);
    var F = 1;
    var E = 20;
    while ((G.find("#" + D).length > 0) && (F < E)) {
        D = C(B);
        F++;
        if (F == E) {
            console.log("自动跳出")
        }
    }
    return D
}
function MicroDraw_AddSVGToCanvas(canvas, svg) {
    if (!canvas || canvas.length == 0) {
        canvas = $("#" + mDrawFlag_SvgId)
    }
    if ($("#" + MicroDraw_SVGTempData).length == 0) {
        $('<div id="' + MicroDraw_SVGTempData + '" style="display:none"></div>').appendTo($("body"))
    }
    var SVGTemper = $("#" + MicroDraw_SVGTempData);
    SVGTemper.html("");
    SVGTemper.append(svg);
    var svgTemper = SVGTemper.find("svg");
    svgTemper.removeAttr("id");
    if (svgTemper.length == 0) {
        return true
    }
    var canvasHTML = canvas.html();
    var TemperHTML = "";
    svgTemper.find("[id=mBackGround]").remove();
    var AllSVGidObjs = svgTemper.find("[id][mtype]");
    var oriIDs = [];
    var newIDs = [];
    $.each(AllSVGidObjs,
    function() {
        with($(this)) {
            var id = attr("id");
            var mtype = attr("mtype")
        }
        if (!$.Micro.IsEmpty(id) && !$.Micro.IsEmpty(mtype)) {
            oriIDs.push(id);
            var newid = MicroDraw_NewUniqueID(canvas, mtype);
            newIDs.push(newid);
            $(this).attr("id", newid)
        }
    });
    TemperHTML = svgTemper.html();
    for (var i = 0; i < oriIDs.length; i++) {
        TemperHTML = replaceAll(TemperHTML, oriIDs[i], newIDs[i])
    }
    svgTemper.html(TemperHTML);
    canvasHTML += svgTemper.html();
    canvas.html(canvasHTML);
    MicroDraw_CombWinSetPos();
    SVGTemper.html("");
    $.each(canvas.find(" [mtype='" + mDrawFlag_Win + "']"),
    function(i) {
        $(this).attr("mwin", [mDrawFlag_Win, (i + 1)].join(""))
    });
    return {
        oriIDs: oriIDs,
        newIDs: newIDs
    }
}
function MicroDraw_ChangeBelongedtoID(E, D, A) {
    if (!E || E.length == 0) {
        return true
    }
    if (D.lenght == 0 || A.lenght == 0) {
        return true
    }
    _MicroDraw_fromWin_changeCombWinIDs(E, D, A);
    var C = ["belongto", "mrulermaster", "mwinid"];
    for (var B = 0; B < C.length; B++) {
        var F = C[B];
        $.each(E.find("[mtype][" + F + "]"),
        function() {
            var I = $(this).attr(F);
            var G = $.Micro.isInArray(I, D, 1, 1);
            var H = A[G];
            $(this).attr(F, H)
        })
    }
    var C = ["mtid", "mbid", "mlid", "mrid"];
    for (var B = 0; B < C.length; B++) {
        var F = C[B];
        $.each(E.find("*[" + F + "]"),
        function() {
            var J = $(this).attr(F);
            if (!$.Micro.IsEmpty(J)) {
                var G = J.split(",");
                var I = "";
                for (var K = 0; K < G.length; K++) {
                    var H = $.Micro.isInArray(G[K], D, 1, 1);
                    if (I != "") {
                        I += ","
                    }
                    I += A[H]
                }
                if (I != "") {
                    $(this).attr(F, I)
                }
            }
        })
    }
}
function MicroDraw_ChangeTingPos(objId, newValue) {
    var tobj = $("#" + mDrawFlag_SvgId + " #" + objId);
    if (tobj.length == 0) {
        return true
    }
    tobj.attr("mexp", newValue);
    if (!$.Micro.IsEmpty(newValue)) {
        var twin = tobj.parents("[mtype=" + mDrawFlag_Win + "]");
        var tframe = twin.find("[mtype=" + mDrawFlag_FrameRect + "]");
        if (tframe.length == 0) {
            return true
        }
        var mxcxlid = tframe.attr("mxcxlid");
        var W = Number(tframe.attr("mwidth"));
        var H = Number(tframe.attr("mheight"));
        var sizeTagsStr = "";
        $.each(twin.find("[mtype*=ting][mflag]"),
        function() {
            var mflag = $(this).attr("mflag");
            if (mflag.indexOf("W") > -1) {
                sizeTagsStr += "var " + mflag + " = Number(" + $(this).attr("mx") + ");"
            } else {
                sizeTagsStr += "var " + mflag + " = Number(" + $(this).attr("my") + ");"
            }
        });
        if (W <= 0 || H <= 0) {
            return true
        }
        try {
            var KW = 0;
            var TW = 0;
            var GW = 0;
            var KWexp, TWexp, GWexp;
            var BFGBW = 0;
            if (mVersion != "DRAW" && mVersion != "DRAW_M" && mVersion != " DRAW_JX") {
                var xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(mxcxlid);
                if ($.Micro.IsEmpty(xcxljgStr)) {
                    return true
                }
                var xcxljgJson = eval("(" + xcxljgStr + ")");
                var mcflId = 0;
                mcflId = MicroDraw_genData_getMcflIdByXcxlid(mxcxlid);
                if (mcflId == 1) {
                    KWexp = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "框宽度", "prid");
                    if (!isNaN(KWexp)) {
                        KW = Number(KWexp)
                    } else {
                        KW = MicroDraw_genData_calcExp(mcflId, KWexp, tframe.attr("id"), xcxljgJson)
                    }
                    TWexp = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid");
                    if (!isNaN(TWexp)) {
                        TW = Number(TWexp)
                    } else {
                        TW = MicroDraw_genData_calcExp(mcflId, KWexp, objId, xcxljgJson)
                    }
                } else {
                    if (mcflId == 2) {
                        KWexp = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封宽度", "prid");
                        if (!isNaN(KWexp)) {
                            KW = Number(KWexp)
                        } else {
                            KW = MicroDraw_genData_calcExp(mcflId, KWexp, tframe.attr("id"), xcxljgJson)
                        }
                        TWexp = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid");
                        if (!isNaN(TWexp)) {
                            TW = Number(TWexp)
                        } else {
                            TW = MicroDraw_genData_calcExp(mcflId, KWexp, objId, xcxljgJson)
                        }
                        GWexp = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "固定框宽度", "prid");
                        if (!isNaN(GWexp)) {
                            GW = Number(GWexp)
                        } else {
                            GW = MicroDraw_genData_calcExp(mcflId, GWexp, objId, xcxljgJson)
                        }
                        BFGBW = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封盖板厚度", "prid"))
                    } else {
                        if (mcflId == 4) {
                            KWexp = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "框宽度", "prid");
                            if (!isNaN(KWexp)) {
                                KW = Number(KWexp)
                            } else {
                                KW = MicroDraw_genData_calcExp(mcflId, KWexp, tframe.attr("id"), xcxljgJson)
                            }
                            TWexp = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "竖挺宽度", "prid");
                            if (!isNaN(TWexp)) {
                                TW = Number(TWexp)
                            } else {
                                TW = MicroDraw_genData_calcExp(mcflId, KWexp, objId, xcxljgJson)
                            }
                            BFGBW = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封盖板厚度", "prid"))
                        }
                    }
                }
            }
            var expStr = "";
            expStr += sizeTagsStr;
            $.each(twin.find("[mtype=" + tobj.attr("mtype") + "]"),
            function(i) {
                var tingtag = $(this).attr("mting").replace("ting", "");
                expStr += "var T" + tingtag + "_TL = TW/2;";
                expStr += "var T" + tingtag + "_TR = TW/2;";
                if (Number($(this).attr("mtl")) > 0) {
                    expStr += "T" + tingtag + "_TL=" + $(this).attr("mtl") + ";"
                }
                if (Number($(this).attr("mtr")) > 0) {
                    expStr += "T" + tingtag + "_TR=" + $(this).attr("mtr") + ";"
                }
            });
            if (expStr != "") {
                expStr += newValue
            }
            var newVal = eval(expStr);
            newVal = newVal.toFixed(2);
            var oriVal;
            switch (tobj.attr("mtype")) {
            case mDrawFlag_TingV:
                var oriVal = tobj.attr("mx");
                var offset = Number(newVal) - Number(oriVal);
                tobj.attr("mx", newVal);
                MicroDraw_Redraw(objId);
                var mlid = tobj.attr("mlid");
                var mrid = tobj.attr("mrid");
                if (!$.Micro.IsEmpty(mlid)) {
                    var mlids = mlid.split(",");
                    for (var i = 0; i < mlids.length; i++) {
                        var mlobj = $("#" + mDrawFlag_SvgId + " #" + mlids[i]);
                        mlobj.attr("mwidth", Number(mlobj.attr("mwidth")) + offset);
                        MicroDraw_Redraw(mlids[i])
                    }
                }
                if (!$.Micro.IsEmpty(mrid)) {
                    var mrids = mrid.split(",");
                    for (var i = 0; i < mrids.length; i++) {
                        var mrobj = $("#" + mDrawFlag_SvgId + " #" + mrids[i]);
                        mrobj.attr("mx", newVal);
                        mrobj.attr("mwidth", Number(mrobj.attr("mwidth")) - offset);
                        MicroDraw_Redraw(mrids[i])
                    }
                }
                break;
            case mDrawFlag_TingH:
                var oriVal = tobj.attr("my");
                var offset = Number(newVal) - Number(oriVal);
                tobj.attr("my", newVal);
                MicroDraw_Redraw(objId);
                var mtid = tobj.attr("mtid");
                var mbid = tobj.attr("mbid");
                if (!$.Micro.IsEmpty(mtid)) {
                    var mtids = mtid.split(",");
                    for (var i = 0; i < mtids.length; i++) {
                        var mtobj = $("#" + mDrawFlag_SvgId + " #" + mtids[i]);
                        mtobj.attr("mheight", Number(mtobj.attr("mheight")) + offset);
                        MicroDraw_Redraw(mtids[i])
                    }
                }
                if (!$.Micro.IsEmpty(mbid)) {
                    var mbids = mbid.split(",");
                    for (var i = 0; i < mbids.length; i++) {
                        var mbobj = $("#" + mDrawFlag_SvgId + " #" + mbids[i]);
                        mbobj.attr("my", newVal);
                        mbobj.attr("mheight", Number(mbobj.attr("mheight")) - offset);
                        MicroDraw_Redraw(mbids[i])
                    }
                }
                break
            }
        } catch(e) {
            $.messager.alert("提示:", e.name + ":" + e.message, "error");
            throw "";
            return
        }
        MicroDraw_optChangeEvent();
        MicroDraw_ShowSizeProperty();
        MicroDraw_ShowCoordinate();
        MicroDraw_autoGdPic()
    }
}
function MicroDraw_ChangeAllTingsPos(A) {
    if (A.length == 0) {
        return true
    }
    $.each(A.find("[mtype*=ting]"),
    function() {
        var C = $(this).attr("id");
        var B = $(this).attr("mexp");
        MicroDraw_ChangeTingPos(C, B)
    })
}
function MicroDraw_getTagMaxVal(F, A, D, B) {
    if (F.length == 0) {
        return 0
    }
    var C = 0;
    var E = F.find("[" + A + "]");
    if (B) {
        E = F
    }
    $.each(E,
    function() {
        var H = $(this).attr(A);
        var G = Number(H.replace(D, ""));
        if (G > C) {
            C = G
        }
    });
    return C
}
function MicroDraw_getCombObjsRelation(objID, dir) {
    var tobjID = objID;
    var dirObjIDs = [];
    if ($.Micro.IsEmpty(tobjID) || $.Micro.IsEmpty(dir)) {
        return dirObjIDs
    }
    var mcombsortwin = $("#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_combsortwin + "]");
    if (mcombsortwin.length == 0) {
        return dirObjIDs
    }
    var mcombsortwinVal = mcombsortwin.attr(mDrawFlag_combsortwin);
    if ($.Micro.IsEmpty(mcombsortwinVal)) {
        return dirObjIDs
    }
    var getCombObjIDs = MicroDraw_getCombWinIDs();
    if (!$.Micro.isInArray(tobjID, getCombObjIDs)) {
        return dirObjIDs
    }
    var mcombsortwinArr = mcombsortwinVal.split(";");
    var dirObjID = null;
    while (!$.Micro.IsEmpty(tobjID)) {
        for (var i = 0; i < mcombsortwinArr.length; i++) {
            var mcombsortwinObjStr = mcombsortwinArr[i];
            if (mcombsortwinObjStr.indexOf(tobjID) > -1 && mcombsortwinObjStr.indexOf(dir) > -1) {
                eval("var mcombsortwinObj = " + mcombsortwinObjStr);
                var id1 = mcombsortwinObj.id1;
                var id2 = mcombsortwinObj.id2;
                var dir1 = mcombsortwinObj.dir1;
                var dir2 = mcombsortwinObj.dir2;
                if (id1 == tobjID && dir2 == dir) {
                    dirObjID = id2
                } else {
                    if (id2 == tobjID && dir1 == dir) {
                        dirObjID = id1
                    }
                }
            }
        }
        if (!$.Micro.IsEmpty(dirObjID)) {
            dirObjIDs.push(dirObjID);
            tobjID = dirObjID
        } else {
            tobjID = null
        }
        dirObjID = null
    }
    return dirObjIDs
}
function MicroDraw_PrBgSysTemDefined() {
    var A = "../MicroThemes/prBg/";
    var C = ["hongsuanzhi", "jinxiangmu", "shuiquliu", "yahei", "huise", "coffee", "xiangbinjin", "xiangyabai", "baomajin", "faguoxiangbin", "yinduhuangtan", "gubashenhui"];
    var E = [{
        w: 100,
        h: 100
    },
    {
        w: 100,
        h: 100
    },
    {
        w: 100,
        h: 100
    },
    {
        w: 20,
        h: 20
    },
    {
        w: 20,
        h: 20
    },
    {
        w: 20,
        h: 20
    },
    {
        w: 200,
        h: 200
    },
    {
        w: 200,
        h: 200
    },
    {
        w: 20,
        h: 20
    },
    {
        w: 200,
        h: 200
    },
    {
        w: 400,
        h: 200
    },
    {
        w: 100,
        h: 100
    }];
    var D = ["hongsuanzhi.jpg", "jinxiangmu.jpg", "shuiquliu.jpg", "yahei.jpg", "huise.jpg", "coffee.jpg", "xiangbinjin.jpg", "xiangyabai.jpg", "baomajin.jpg", "faguoxiangbin.jpg", "yinduhuangtan.jpg", "gubashenhui.jpg"];
    var B = function() {
        var G = '<div style="position:absolute"><svg version="1.1" id="' + mDrawSvgCanvasDefineID + '" width="0" height="0" xmlns="http://www.w3.org/2000/svg">';
        G += "<defs>";
        var I = "";
        for (var H = 0; H < C.length; H++) {
            var J = [mDrawSystemTag, C[H]].join("_");
            I += '<pattern mtag="system" id="' + J + '" patternUnits="userSpaceOnUse" height="' + E[H].h + '" width="' + E[H].w + '">';
            I += '<image x="0" y="0" height="' + E[H].h + '" width="' + E[H].w + '" xlink:href="' + A + D[H] + '"></image>';
            I += "</pattern>"
        }
        I += '<linearGradient id="LouverLinear" x1="0%" y1="0%" x2="0%" y2="100%"><stop offset="0%" style="stop-color:#999999;stop-opacity:1" /><stop offset="100%" style="stop-color:#FFFFFF;stop-opacity:0" /></linearGradient>';
        G += I + "</defs>";
        G += "</svg></div>";
        $("body").append(G)
    };
    var F = function() {
        var O;
        if ($("#" + mDrawSvgCanvasDefineID).length == 0) {
            var J = {
                "version": "1.1",
                "id": mDrawSvgCanvasDefineID,
                "width": "0",
                "height": "0",
                "xmlns": "http://www.w3.org/2000/svg"
            };
            O = $(document.createElementNS("http://www.w3.org/2000/svg", "svg"));
            O.attr(J);
            $("body").prepend(O)
        } else {
            O = $("#" + mDrawSvgCanvasDefineID)
        }
        O.find("defs").remove();
        var N;
        if (O.find("defs").length == 0) {
            N = $($.MicroSVG.makeSVG("defs", ""));
            O.prepend(N)
        } else {
            N = O.find("defs")
        }
        var G = "";
        O.find('pattern[mtag="system"]').remove();
        for (var K = 0; K < C.length; K++) {
            var L = [mDrawSystemTag, C[K]].join("_");
            var H = {
                "mtag": "system",
                "id": L,
                "patternUnits": "userSpaceOnUse",
                "height": E[K].h,
                "width": E[K].w
            };
            var M = $.MicroSVG.makeSVG("pattern", H);
            N.append($(M));
            H = {
                "x": "0",
                "y": "0",
                "height": E[K].h,
                "width": E[K].w
            };
            var I = $.MicroSVG.makeSVG("image", H);
            I.setAttributeNS("http://www.w3.org/2000/xlink", "xlink:href", A + D[K]);
            $(M).append($(I))
        }
        O.html(O.html())
    };
    B()
}
function MicroDraw_getSwgdCoordinate(O, Q, P, K, R, M, L, J, N) {
    var B = 0,
    T = 0,
    D = 0,
    C = 0,
    G = 0,
    H = 0;
    var S = "";
    var F = 20;
    var A = 15;
    var I = 30;
    if (P.indexOf("L") >= 0) {
        P = "L"
    } else {
        if (P.indexOf("R") >= 0) {
            P = "R"
        }
    }
    if (O == "L" && Q == "上") {
        B = Number(R) + Number(10);
        T = Number(R) + Number(M) + Number(10) - Number(F);
        D = Number(L) + Number(J) / 2 - Number(N) / 2;
        C = Number(L) - Number(F);
        G = Number(R) + Number(M) / 2 + F;
        H = C
    } else {
        if (O == "L" && Q == "下") {
            B = Number(R) + Number(10);
            T = Number(R) + Number(M) - Number(10);
            D = Number(L) + Number(J) / 2 + Number(N) / 2;
            C = Number(L) + Number(J) + Number(F);
            G = Number(R) + Number(M) / 2 + F;
            H = Number(L) + Number(J) + 5 + Number(F)
        } else {
            if (O == "R" && Q == "上") {
                B = Number(R) + Number(M) - Number(10);
                T = Number(R) + Number(10);
                D = Number(L) + Number(J) / 2 - Number(N) / 2;
                C = Number(L) - Number(F);
                G = Number(R) + Number(M) / 2 + F;
                H = Number(L) - Number(F)
            } else {
                if (O == "R" && Q == "下") {
                    B = Number(R) + Number(M);
                    T = Number(R) + Number(10);
                    D = Number(L) + Number(J) / 2 + Number(N) / 2;
                    C = Number(L) + Number(J) + Number(F);
                    G = Number(R) + Number(M) / 2 + F;
                    H = Number(L) + Number(J) + 5 + F
                }
            }
        }
    }
    if (O == P && Q == K) {
        if (K == "上") {
            C = C + A
        } else {
            C = C - A
        }
        S = "玻/纱扇";
        if (P == "R") {
            G = G + I
        }
    }
    var E = {};
    E.X1 = B;
    E.Y1 = D;
    E.X2 = T;
    E.Y2 = C;
    E.txtX = G;
    E.txtY = H;
    E.txtText = S;
    return E
}
function getTlcFrameKind(A) {
    var D = "";
    var C = $("#" + A).parents('[mtype="' + mDrawFlag_Win + '"]')[0];
    if (!isEmptyOrNull(C)) {
        var B = C.getAttribute("id");
        D = MicroDraw_getTlcFrameKind(B)
    } else {
        D = ""
    }
    return D
}
function MicroDraw_autoPropertyExp(ObjId) {
    mMcflIdOptStrArray = new Array();
    mXcxljgStrArray = new Array();
    var winId = "";
    var nodeWin = $("#" + ObjId).parents('[mtype="' + mDrawFlag_Win + '"]')[0];
    var frameId = "";
    var xcxlId = 0;
    if (isEmptyOrNull(ObjId)) {
        return
    }
    var node = $("#" + ObjId)[0];
    var mtype = node.getAttribute("mtype");
    if (isEmptyOrNull(mtype)) {
        return
    }
    if (!isEmptyOrNull(nodeWin)) {
        winId = nodeWin.getAttribute("id");
        var nodeFrame = $("#" + winId + ' [mtype="' + mDrawFlag_FrameRect + '"]')[0];
        if (!isEmptyOrNull(nodeFrame)) {
            frameId = nodeFrame.getAttribute("id");
            xcxlId = nodeFrame.getAttribute("mxcxlid")
        }
    }
    if (isEmptyOrNull(frameId) || isEmptyOrNull(xcxlId)) {
        return
    }
    var mcflId = MicroDraw_genData_getMcflIdByXcxlid(xcxlId);
    if (isEmptyOrNull(mcflId)) {
        return
    }
    var xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(xcxlId);
    if (isEmptyOrNull(xcxljgStr)) {
        return
    }
    var xcxljgJson = eval("(" + xcxljgStr + ")");
    switch (mcflId) {
    case "1":
        $.each(xcxljgJson,
        function(k, o) {
            if (o.type == "O" && mtype == mDrawFlag_Glass && o.name == "MGBAZ" && o.bxdOpt == 1) {
                node.setAttribute("mchange_exp", '  MGBAZ == "内装" ? "N" : "Y" ')
            }
            if (o.type == "O" && (mtype == mDrawFlag_Pkc || mtype == mDrawFlag_Dkc) && o.name == "MKQFS" && o.bxdOpt == 1) {
                node.setAttribute("mchange_exp", '  MKQFS == "内开" ? "Y" : "N"  ');
                node.setAttribute("mgdopendir_exp", ' MKQFS == "外开" ? "上" : "下" ')
            }
            if (o.type == "O" && (mtype == mDrawFlag_Pkc || mtype == mDrawFlag_Dkc) && o.name == "MLDH" && o.bxdOpt == 1) {
                node.setAttribute("mjsldheight_exp", " MLDH ")
            }
            if (o.type == "O" && (mtype == mDrawFlag_Pkc || mtype == mDrawFlag_Dkc) && o.name == "MCTH" && o.bxdOpt == 1) {
                node.setAttribute("mjsctheight_exp", " MCTH ")
            }
            if (o.type == "O" && (mtype == mDrawFlag_Pkc || mtype == mDrawFlag_Dkc) && o.name == "MSW" && o.bxdOpt == 1) {
                node.setAttribute("msw_exp", ' MSW == "有" ? "Y" : "N"  ')
            }
            if (o.type == "O" && (mtype == mDrawFlag_Pkc || mtype == mDrawFlag_Dkc) && o.name == "MFDT" && o.bxdOpt == 1) {
                node.setAttribute("mfdt_exp", ' MFDT == "有" ? "Y" : "N"  ')
            }
        });
        break;
    case "2":
        break;
    case "3":
        $.each(xcxljgJson,
        function(k, o) {
            if (o.type == "O" && (mtype == mDrawFlag_Pkc) && o.name == "MZH" && o.bxdOpt == 1) {
                node.setAttribute("mzhtype_exp", " MZH ")
            }
            if (o.type == "O" && (mtype == mDrawFlag_Pkc) && o.name == "MJJ" && o.bxdOpt == 1) {
                node.setAttribute("mzhgap_exp", " MJJ ")
            }
        });
        break;
    case "4":
        break;
    case "5":
        break
    }
}
function MicroDraw_CalcDiviArcLen(ObjId) {
    var MBEND = '"N"';
    var MARCTNUM = 0;
    var MARCBKTC = '"N"';
    var ARCBR = 0;
    var ARCGR = 0;
    var ARCTL = 0;
    var ARCTZL = 0;
    var ARCZTZL = 0;
    var ARCBKL = 0;
    var ARCLTL = 0;
    var ARCRTL = 0;
    var ARCMTL = 0;
    var ARCINYX = 0;
    var ARCGYL = 0;
    var ARCGL1 = 0;
    var ARCGL2 = 0;
    var arcGlassRectSizes = [];
    var ARCAREA = 0;
    var ARCGAREA = 0;
    var ARCCOPSSize_7_8_9 = {
        W: 0,
        H: 0
    };
    var ARCCOPSSize_9_10_11 = {
        W: 0,
        H: 0
    };
    var ARCCOPSSize_10_11_12 = {
        W: 0,
        H: 0
    };
    var ARCCOPSSize_9_13_14 = {
        W: 0,
        H: 0
    };
    var TW = 0;
    var KW = 0;
    var BKW = 0;
    var YL = 0;
    var W1, W2, W3;
    var x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6, x7, y7, x8, y8, x9, y9, x10, y10, x11, y11, x12, y12, x13, y13, x14, y14;
    var Lztw = 0;
    var Zztw = 0;
    var TwopointsLine1, k1, b1;
    var TwopointsLine2, k2, b2;
    var TwopointsLine3, k3, b3;
    var TwopointsLine4, k4, b4;
    var TwopointsLine5, k5, b5;
    var TwopointsLine6, k6, b6;
    var Line_RoundCOP, x4_1, y4_1, x4_2, y4_2;
    var Line_RoundCOP2, x6_1, y6_1, x6_2, y6_2;
    var Line_RoundCOP3, x5_1, y5_1, x5_2, y5_2;
    var Line_RoundCOP4, x7_1, y7_1, x7_2, y7_2;
    var Line_RoundCOP5, x8_1, y8_1, x8_2, y8_2;
    var Line_RoundCOP6, x10_1, y10_1, x10_2, y10_2;
    var Line_RoundCOP7, x12_1, y12_1, x12_2, y12_2;
    var LenP2_P4, LenP1_P2, LenP1_P4;
    var mtingcnt = 0;
    var heta, delta;
    var Alpha, Beta, j_Alpha, j_Beta;
    var Gamma, j_Gamma;
    var Zeta1, Zeta2, j_Zeta1, jZeta2;
    j_Gamma = 90;
    if (!$.Micro.IsEmpty(ObjId)) {
        if ($("#" + mDrawFlag_SvgId + " #" + ObjId).length > 0) {
            if ($("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtype") == mDrawFlag_Custom_arc) {
                MBEND = '"Y"';
                var mtotallen = $("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtotallen");
                var W = Number($("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mwidth"));
                var mH = Number($("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mheight"));
                mtingcnt = $.Micro.ConvToNum($("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtingcnt"));
                MARCTNUM = mtingcnt;
                var mxcxlid = $("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mxcxlid");
                var mbframe = $("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mbframe");
                var mtotallen = $("#" + mDrawFlag_SvgId + " #" + ObjId).attr("mtotallen");
                var marctl = Number($("#" + mDrawFlag_SvgId + " #" + ObjId).attr("marctl") || 0);
                if ($.Micro.IsEmpty(mbframe)) {
                    mbframe = "N"
                }
                if ($.Micro.IsEmpty(mtotallen)) {
                    mtotallen = "N"
                }
                MARCBKTC = mtotallen == "Y" ? '"Y"': '"N"';
                var xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(mxcxlid);
                var xcxljgJson = eval("(" + xcxljgStr + ")");
                var mcflId = MicroDraw_genData_getMcflIdByXcxlid(mxcxlid);
                var arcLSval = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "弧顶拉伸量", "prid"));
                var arcztZLval = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "弧内中挺增量", "prid"));
                var arcGYLval = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "弧内玻璃余量", "prid"));
                var arcGYLexp = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "弧内玻璃余量", "optValExp");
                if (!$.Micro.IsEmpty(arcGYLexp)) {
                    arcGYLexp = replaceAll(arcGYLexp, "MARCTNUM", MARCTNUM);
                    arcGYLval = MicroDraw_genData_calcExp("", arcGYLexp, ObjId, xcxljgJson)
                }
                var bPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "弧下框", "prid");
                if (mcflId == 1) {
                    KW = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "框宽度", "prid"));
                    TW = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid"))
                } else {
                    if (mcflId == 2) {
                        KW = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封宽度", "prid"));
                        TW = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid"))
                    } else {
                        if (mcflId == 4) {
                            KW = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "框宽度", "prid"));
                            TW = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "竖挺宽度", "prid"))
                        } else {
                            if (mcflId == 5) {
                                KW = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "框宽度", "prid"));
                                TW = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "竖挺宽度", "prid"))
                            }
                        }
                    }
                }
                if (!$.Micro.IsEmpty(bPrId)) {
                    BKW = KW
                }
                var H = mH - BKW;
                var R;
                var r;
                var gR;
                var angle;
                var Bangle;
                var arcLS = 0;
                if (!$.Micro.IsEmpty(arcLSval)) {
                    arcLS = Number(arcLSval)
                }
                var arcztZL = 0;
                if (!$.Micro.IsEmpty(arcztZLval)) {
                    arcztZL = Number(arcztZLval)
                }
                var arcGYL = 0;
                if (!$.Micro.IsEmpty(arcGYLval)) {
                    arcGYL = Number(arcGYLval)
                }
                if (!isNaN(arcLS)) {
                    ARCTZL = arcLS
                }
                if (!isNaN(arcztZL)) {
                    ARCZTZL = arcztZL
                }
                if (!isNaN(arcGYL)) {
                    ARCGYL = arcGYL
                }
                YL = ARCGYL;
                if (mtotallen == "Y") {
                    R = (W * W / 4 + H * H) / (2 * H);
                    r = R - KW;
                    gR = Number(r - YL);
                    angle = Math.acos((R - H) / r);
                    Bangle = Math.atan((W / 2) / (R - H))
                } else {
                    R = (W * W / 4 + mH * mH) / (2 * mH);
                    r = R - KW;
                    gR = Number(r - YL);
                    angle = Math.acos((R - mH) / r);
                    Bangle = Math.atan((W / 2) / (R - mH))
                }
                ARCBR = R;
                ARCTL = (2 * Math.PI * R) * 2 * Bangle / (2 * Math.PI);
                k3 = 0;
                b3 = H;
                Line_RoundCOP2 = MicroDraw_Line_RoundCOP(k3, b3, R, R, (R - KW));
                x6_1 = Line_RoundCOP2.x1;
                y6_1 = Line_RoundCOP2.y1;
                x6_2 = Line_RoundCOP2.x2;
                y6_2 = Line_RoundCOP2.y2;
                if (x6_1 < x6_2) {
                    x6 = x6_1;
                    y6 = y6_1
                } else {
                    x6 = x6_2;
                    y6 = y6_2
                }
                k4 = 0;
                b4 = mH;
                Line_RoundCOP3 = MicroDraw_Line_RoundCOP(k4, b4, R, R, (R - KW));
                x5_1 = Line_RoundCOP3.x1;
                y5_1 = Line_RoundCOP3.y1;
                x5_2 = Line_RoundCOP3.x2;
                y5_2 = Line_RoundCOP3.y2;
                if (x5_1 < x5_2) {
                    x5 = x5_1;
                    y5 = y5_1
                } else {
                    x5 = x5_2;
                    y5 = y5_2
                }
                if (mtingcnt == 0) {
                    Lztw = 0;
                    Zztw = 0;
                    k5 = 0;
                    b5 = H - YL;
                    Line_RoundCOP5 = MicroDraw_Line_RoundCOP(k5, b5, R, R, gR);
                    x9_1 = Line_RoundCOP5.x1;
                    y9_1 = Line_RoundCOP5.y1;
                    x9_2 = Line_RoundCOP5.x2;
                    y9_2 = Line_RoundCOP5.y2;
                    x14 = R;
                    y14 = KW + YL;
                    var getSVGRectCoor = $.MicroSVG.getSVGRectCoor([x9_1, y9_1, x14, y14, x9_2, y9_2]);
                    arcGlassRectSizes.push({
                        flag: "F1",
                        W: "(ARCCOPSSize_9_13_14.W).toFixed(0)",
                        H: "(ARCCOPSSize_9_13_14.H).toFixed(0)"
                    });
                    ARCCOPSSize_9_13_14.W = Number(getSVGRectCoor.x2 - getSVGRectCoor.x1);
                    ARCCOPSSize_9_13_14.H = Number(getSVGRectCoor.y2 - getSVGRectCoor.y1)
                } else {
                    if (mtingcnt == 1) {
                        if (mtotallen == "Y") {
                            ARCINYX = Number(R - TW / 2) - Number(x5)
                        } else {
                            ARCINYX = Number(R - TW / 2) - Number(x6)
                        }
                        x10 = Number(R - TW / 2 - YL);
                        y10 = R - Math.sqrt(gR * gR - (x10 - R) * (x10 - R));
                        x11 = Number(R - TW / 2 - YL);
                        y11 = H - YL;
                        k5 = 0;
                        b5 = H - YL;
                        Line_RoundCOP5 = MicroDraw_Line_RoundCOP(k5, b5, R, R, gR);
                        x9_1 = Line_RoundCOP5.x1;
                        y9_1 = Line_RoundCOP5.y1;
                        x9_2 = Line_RoundCOP5.x2;
                        y9_2 = Line_RoundCOP5.y2;
                        if (x9_1 < x9_2) {
                            x9 = x9_1;
                            y9 = y9_1
                        } else {
                            x9 = x9_2;
                            y9 = y9_2
                        }
                        var angle1 = Math.atan((R - x10) / (R - y10));
                        var angle2 = Math.atan((R - x9) / (R - y9));
                        Zeta1 = Math.abs(angle1 - angle2);
                        ARCGL1 = (2 * Math.PI * gR) * Zeta1 / (2 * Math.PI);
                        var getSVGRectCoor = $.MicroSVG.getSVGRectCoor([x9, y9, x10, y10, x11, y11]);
                        arcGlassRectSizes.push({
                            flag: "F1",
                            W: "(ARCCOPSSize_9_10_11.W).toFixed(0)",
                            H: "(ARCCOPSSize_9_10_11.H).toFixed(0)"
                        });
                        arcGlassRectSizes.push({
                            flag: "F2",
                            W: "(ARCCOPSSize_9_10_11.W).toFixed(0)",
                            H: "(ARCCOPSSize_9_10_11.H).toFixed(0)"
                        });
                        ARCCOPSSize_9_10_11.W = Number(getSVGRectCoor.x2 - getSVGRectCoor.x1);
                        ARCCOPSSize_9_10_11.H = Number(getSVGRectCoor.y2 - getSVGRectCoor.y1)
                    } else {
                        if (mtingcnt == 2) {
                            heta = angle / 3;
                            W1 = Number(r * Math.sin(heta));
                            x1 = Number(R - W1);
                            y1 = Number(R - r * Math.cos(heta));
                            x2 = Number(R);
                            y2 = Number(H);
                            TwopointsLine1 = $.MicroSVG.TwopointsLine([[x1, y1], [x2, y2]]);
                            k1 = Number(TwopointsLine1.k);
                            b1 = Number(TwopointsLine1.b);
                            Alpha = Math.atan(k1);
                            j_Alpha = $.Micro.Mradian(Alpha, "h2j");
                            W2 = Number(TW / Math.sin(Alpha));
                            x3 = R - W2;
                            y3 = y2;
                            Line_RoundCOP = MicroDraw_Line_RoundCOP(k1, (k1 * W2 + b1), R, R, r);
                            x4_1 = Line_RoundCOP.x1;
                            y4_1 = Line_RoundCOP.y1;
                            x4_2 = Line_RoundCOP.x2;
                            y4_2 = Line_RoundCOP.y2;
                            if (x4_1 < x4_2) {
                                x4 = x4_1;
                                y4 = y4_1
                            } else {
                                x4 = x4_2;
                                y4 = y4_2
                            }
                            LenP2_P4 = Math.sqrt((x4 - x2) * (x4 - x2) + (y4 - y2) * (y4 - y2));
                            LenP1_P2 = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
                            LenP1_P4 = Math.sqrt((x4 - x1) * (x4 - x1) + (y4 - y1) * (y4 - y1));
                            TwopointsLine2 = $.MicroSVG.TwopointsLine([[x2, y2], [x4, y4]]);
                            k2 = Number(TwopointsLine2.k);
                            delta = Math.atan(k2);
                            Lztw = LenP2_P4 * Math.cos(Alpha - delta);
                            Beta = Math.acos((Lztw - LenP1_P2) / LenP1_P4);
                            j_Beta = $.Micro.Mradian(Beta, "h2j");
                            if (mtotallen == "Y") {
                                ARCINYX = Number(x3) - Number(x5)
                            } else {
                                ARCINYX = Number(x3) - Number(x6)
                            }
                            W3 = Number(YL / Math.sin(Alpha));
                            Line_RoundCOP4 = MicroDraw_Line_RoundCOP(k1, (k1 * W3 + k1 * W2 + b1), R, R, gR);
                            x7_1 = Line_RoundCOP4.x1;
                            y7_1 = Line_RoundCOP4.y1;
                            x7_2 = Line_RoundCOP4.x2;
                            y7_2 = Line_RoundCOP4.y2;
                            if (x7_1 < x7_2) {
                                x7 = x7_1;
                                y7 = y7_1
                            } else {
                                x7 = x7_2;
                                y7 = y7_2
                            }
                            y8 = H - YL;
                            x8 = (y8 - (k1 * W3 + k1 * W2 + b1)) / k1;
                            k5 = 0;
                            b5 = H - YL;
                            Line_RoundCOP5 = MicroDraw_Line_RoundCOP(k5, b5, R, R, gR);
                            x9_1 = Line_RoundCOP5.x1;
                            y9_1 = Line_RoundCOP5.y1;
                            x9_2 = Line_RoundCOP5.x2;
                            y9_2 = Line_RoundCOP5.y2;
                            if (x9_1 < x9_2) {
                                x9 = x9_1;
                                y9 = y9_1
                            } else {
                                x9 = x9_2;
                                y9 = y9_2
                            }
                            var angle1 = Math.atan((R - y7) / (R - x7));
                            var angle2 = Math.atan((R - y9) / (R - x9));
                            Zeta1 = Math.abs(angle1 - angle2);
                            ARCGL1 = (2 * Math.PI * gR) * Zeta1 / (2 * Math.PI);
                            x10 = Number(R - TW / 2 - YL);
                            y10 = R - Math.sqrt(gR * gR - (x10 - R) * (x10 - R));
                            Line_RoundCOP6 = MicroDraw_Line_RoundCOP(k1, (b1 - k1 * W3), R, R, gR);
                            x12_1 = Line_RoundCOP6.x1;
                            y12_1 = Line_RoundCOP6.y1;
                            x12_2 = Line_RoundCOP6.x2;
                            y12_2 = Line_RoundCOP6.y2;
                            if (x12_1 < x12_2) {
                                x12 = x12_1;
                                y12 = y12_1
                            } else {
                                x12 = x12_2;
                                y12 = y12_2
                            }
                            x10 = R + (R - x12);
                            y10 = y12;
                            x11 = Number(R);
                            y11 = k1 * (x11 - W3) + b1;
                            x13 = x2;
                            y13 = KW + YL;
                            var angle3 = Math.atan((R - x12) / (R - y12));
                            Zeta2 = Math.abs(angle3 * 2);
                            ARCGL2 = (2 * Math.PI * gR) * Zeta2 / (2 * Math.PI);
                            var getSVGRectCoor1 = $.MicroSVG.getSVGRectCoor([x7, y7, x8, y8, x9, y9]);
                            var getSVGRectCoor2 = $.MicroSVG.getSVGRectCoor([x10, y10, x11, y11, x12, y12, x13, y13]);
                            arcGlassRectSizes.push({
                                flag: "F1",
                                W: "(ARCCOPSSize_7_8_9.W).toFixed(0)",
                                H: "(ARCCOPSSize_7_8_9.H).toFixed(0)"
                            });
                            arcGlassRectSizes.push({
                                flag: "F2",
                                W: "(ARCCOPSSize_10_11_12.W).toFixed(0)",
                                H: "(ARCCOPSSize_10_11_12.H).toFixed(0)"
                            });
                            arcGlassRectSizes.push({
                                flag: "F3",
                                W: "(ARCCOPSSize_7_8_9.W).toFixed(0)",
                                H: "(ARCCOPSSize_7_8_9.H).toFixed(0)"
                            });
                            ARCCOPSSize_7_8_9.W = Number(getSVGRectCoor1.x2 - getSVGRectCoor1.x1);
                            ARCCOPSSize_7_8_9.H = Number(getSVGRectCoor1.y2 - getSVGRectCoor1.y1);
                            ARCCOPSSize_10_11_12.W = Number(getSVGRectCoor2.x2 - getSVGRectCoor2.x1);
                            ARCCOPSSize_10_11_12.H = Number(getSVGRectCoor2.y2 - getSVGRectCoor2.y1)
                        } else {
                            if (mtingcnt == 3) {
                                heta = angle / 2;
                                W1 = Number(r * Math.sin(heta));
                                x1 = Number(R - W1);
                                y1 = Number(R - r * Math.cos(heta));
                                x2 = Number(R - TW / 2);
                                y2 = Number(H);
                                TwopointsLine1 = $.MicroSVG.TwopointsLine([[x1, y1], [x2, y2]]);
                                k1 = Number(TwopointsLine1.k);
                                b1 = Number(TwopointsLine1.b);
                                Alpha = Math.atan(k1);
                                j_Alpha = $.Micro.Mradian(Alpha, "h2j");
                                W2 = Number(TW / Math.sin(Alpha));
                                x3 = R - TW / 2 - W2;
                                y3 = y2;
                                Line_RoundCOP = MicroDraw_Line_RoundCOP(k1, (k1 * W2 + b1), R, R, r);
                                x4_1 = Line_RoundCOP.x1;
                                y4_1 = Line_RoundCOP.y1;
                                x4_2 = Line_RoundCOP.x2;
                                y4_2 = Line_RoundCOP.y2;
                                if (x4_1 < x4_2) {
                                    x4 = x4_1;
                                    y4 = y4_1
                                } else {
                                    x4 = x4_2;
                                    y4 = y4_2
                                }
                                LenP2_P4 = Math.sqrt((x4 - x2) * (x4 - x2) + (y4 - y2) * (y4 - y2));
                                LenP1_P2 = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
                                LenP1_P4 = Math.sqrt((x4 - x1) * (x4 - x1) + (y4 - y1) * (y4 - y1));
                                TwopointsLine2 = $.MicroSVG.TwopointsLine([[x2, y2], [x4, y4]]);
                                k2 = Number(TwopointsLine2.k);
                                delta = Math.atan(k2);
                                Lztw = LenP2_P4 * Math.cos(Alpha - delta);
                                Beta = Math.acos((Lztw - LenP1_P2) / LenP1_P4);
                                j_Beta = $.Micro.Mradian(Beta, "h2j");
                                if (mtotallen == "Y") {
                                    ARCINYX = Number(x3) - Number(x5)
                                } else {
                                    ARCINYX = Number(x3) - Number(x6)
                                }
                                W3 = Number(YL / Math.sin(Alpha));
                                Line_RoundCOP4 = MicroDraw_Line_RoundCOP(k1, (k1 * W3 + k1 * W2 + b1), R, R, gR);
                                x7_1 = Line_RoundCOP4.x1;
                                y7_1 = Line_RoundCOP4.y1;
                                x7_2 = Line_RoundCOP4.x2;
                                y7_2 = Line_RoundCOP4.y2;
                                if (x7_1 < x7_2) {
                                    x7 = x7_1;
                                    y7 = y7_1
                                } else {
                                    x7 = x7_2;
                                    y7 = y7_2
                                }
                                y8 = H - YL;
                                x8 = (y8 - (k1 * W3 + k1 * W2 + b1)) / k1;
                                k5 = 0;
                                b5 = H - YL;
                                Line_RoundCOP5 = MicroDraw_Line_RoundCOP(k5, b5, R, R, gR);
                                x9_1 = Line_RoundCOP5.x1;
                                y9_1 = Line_RoundCOP5.y1;
                                x9_2 = Line_RoundCOP5.x2;
                                y9_2 = Line_RoundCOP5.y2;
                                if (x9_1 < x9_2) {
                                    x9 = x9_1;
                                    y9 = y9_1
                                } else {
                                    x9 = x9_2;
                                    y9 = y9_2
                                }
                                var angle1 = Math.atan((R - x7) / (R - y7));
                                var angle2 = Math.atan((R - x9) / (R - y9));
                                Zeta1 = Math.abs(angle1 - angle2);
                                ARCGL1 = (2 * Math.PI * gR) * Zeta1 / (2 * Math.PI);
                                x10 = Number(R - TW / 2 - YL);
                                y10 = R - Math.sqrt(gR * gR - (x10 - R) * (x10 - R));
                                Line_RoundCOP6 = MicroDraw_Line_RoundCOP(k1, (b1 - k1 * W3), R, R, gR);
                                x12_1 = Line_RoundCOP6.x1;
                                y12_1 = Line_RoundCOP6.y1;
                                x12_2 = Line_RoundCOP6.x2;
                                y12_2 = Line_RoundCOP6.y2;
                                if (x12_1 < x12_2) {
                                    x12 = x12_1;
                                    y12 = y12_1
                                } else {
                                    x12 = x12_2;
                                    y12 = y12_2
                                }
                                x11 = Number(R - TW / 2 - YL);
                                y11 = k1 * (x11 - W3) + b1;
                                var angle3 = Math.atan((R - x10) / (R - y10));
                                var angle4 = Math.atan((R - x12) / (R - y12));
                                Zeta2 = Math.abs(angle3 - angle4);
                                ARCGL2 = (2 * Math.PI * gR) * Zeta2 / (2 * Math.PI);
                                var getSVGRectCoor1 = $.MicroSVG.getSVGRectCoor([x7, y7, x8, y8, x9, y9]);
                                var getSVGRectCoor2 = $.MicroSVG.getSVGRectCoor([x10, y10, x11, y11, x12, y12]);
                                arcGlassRectSizes.push({
                                    flag: "F1",
                                    W: "(ARCCOPSSize_7_8_9.W).toFixed(0)",
                                    H: "(ARCCOPSSize_7_8_9.H).toFixed(0)"
                                });
                                arcGlassRectSizes.push({
                                    flag: "F2",
                                    W: "(ARCCOPSSize_10_11_12.W).toFixed(0)",
                                    H: "(ARCCOPSSize_10_11_12.H).toFixed(0)"
                                });
                                arcGlassRectSizes.push({
                                    flag: "F3",
                                    W: "(ARCCOPSSize_10_11_12.W).toFixed(0)",
                                    H: "(ARCCOPSSize_10_11_12.H).toFixed(0)"
                                });
                                arcGlassRectSizes.push({
                                    flag: "F4",
                                    W: "(ARCCOPSSize_7_8_9.W).toFixed(0)",
                                    H: "(ARCCOPSSize_7_8_9.H).toFixed(0)"
                                });
                                ARCCOPSSize_7_8_9.W = Number(getSVGRectCoor1.x2 - getSVGRectCoor1.x1);
                                ARCCOPSSize_7_8_9.H = Number(getSVGRectCoor1.y2 - getSVGRectCoor1.y1);
                                ARCCOPSSize_10_11_12.W = Number(getSVGRectCoor2.x2 - getSVGRectCoor2.x1);
                                ARCCOPSSize_10_11_12.H = Number(getSVGRectCoor2.y2 - getSVGRectCoor2.y1)
                            }
                        }
                    }
                    Zztw = H - KW
                }
                ARCLTL = Lztw;
                ARCRTL = Lztw;
                ARCMTL = Zztw;
                if (mtotallen == "Y") {
                    ARCBKL = W
                } else {
                    k3 = 0;
                    b3 = H;
                    Line_RoundCOP2 = MicroDraw_Line_RoundCOP(k3, b3, R, R, r);
                    x6_1 = Line_RoundCOP2.x1;
                    y6_1 = Line_RoundCOP2.y1;
                    x6_2 = Line_RoundCOP2.x2;
                    y6_2 = Line_RoundCOP2.y2;
                    if (x6_1 < x6_2) {
                        x6 = x6_1;
                        y6 = y6_1
                    } else {
                        x6 = x6_2;
                        y6 = y6_2
                    }
                    k4 = 0;
                    b4 = mH;
                    Line_RoundCOP3 = MicroDraw_Line_RoundCOP(k4, b4, R, R, r);
                    x5_1 = Line_RoundCOP3.x1;
                    y5_1 = Line_RoundCOP3.y1;
                    x5_2 = Line_RoundCOP3.x2;
                    y5_2 = Line_RoundCOP3.y2;
                    if (x5_1 < x5_2) {
                        x5 = x5_1;
                        y5 = y5_1
                    } else {
                        x5 = x5_2;
                        y5 = y5_2
                    }
                    ARCBKL = W - (x5 - (R - W / 2)) * 2;
                    Gamma = Math.abs(Math.atan((y6 - y5) / (x6 - x5)));
                    j_Gamma = $.Micro.Mradian(Gamma, "h2j")
                }
                ARCGR = gR;
                ARCAREA = W * mH / 1000000;
                ARCGAREA += ARCCOPSSize_7_8_9.W * ARCCOPSSize_7_8_9.H / 1000000;
                ARCGAREA += ARCCOPSSize_10_11_12.W * ARCCOPSSize_10_11_12.H / 1000000;
                ARCGAREA += ARCCOPSSize_9_10_11.W * ARCCOPSSize_9_10_11.H / 1000000;
                ARCGAREA += ARCCOPSSize_9_13_14.W * ARCCOPSSize_9_13_14.H / 1000000;
                if (Number(marctl).toFixed(2) != Number(ARCTL).toFixed(2)) {
                    $("#" + mDrawFlag_SvgId + " #" + ObjId).attr("marctl", Number(ARCTL).toFixed(2));
                    MicroDraw_DrawArcTL(ObjId)
                }
            }
        }
    }
    var attrs = {
        MBEND: MBEND,
        MARCBKTC: MARCBKTC,
        ARCBR: ARCBR,
        ARCGR: ARCGR,
        ARCTL: ARCTL,
        ARCTZL: ARCTZL,
        ARCZTZL: ARCZTZL,
        ARCBKL: ARCBKL,
        ARCLTL: ARCLTL,
        ARCRTL: ARCRTL,
        ARCMTL: ARCMTL,
        ARCINYX: ARCINYX,
        MARCTNUM: mtingcnt,
        ARCAREA: ARCAREA,
        ARCGAREA: ARCGAREA,
        KW: KW,
        BKW: BKW,
        TW: TW,
        ARCCOPOINTS: {
            x1: x1,
            y1: y1,
            x2: x2,
            y2: y2,
            x3: x3,
            y3: y3,
            x4: x4,
            y4: y4,
            x5: x5,
            y5: y5,
            x6: x6,
            y6: y6,
            x7: x7,
            y7: y7,
            x8: x8,
            y8: y8,
            x9: x9,
            y9: y9,
            x10: x10,
            y10: y10,
            x11: x11,
            y11: y11,
            x12: x12,
            y12: y12,
            x13: x13,
            y13: y13,
            x14: x14,
            y14: y14
        },
        j_Alpha: j_Alpha,
        j_Beta: j_Beta,
        j_Gamma: j_Gamma,
        arcGlassRectSizes: arcGlassRectSizes,
        ARCCOPSSize_7_8_9: ARCCOPSSize_7_8_9,
        ARCCOPSSize_10_11_12: ARCCOPSSize_10_11_12,
        ARCCOPSSize_9_10_11: ARCCOPSSize_9_10_11,
        ARCCOPSSize_9_13_14: ARCCOPSSize_9_13_14
    };
    MicroDraw_SetCustom_arcAttrs($("#" + mDrawFlag_SvgId + " #" + ObjId), attrs);
    return attrs
}
function MicroDraw_Line_RoundCOP(E, F, H, G, A) {
    var D = 0 - (Math.sqrt(E * E * (A * A - H * H) + A * A - F * F + (2 * G - 2 * H * E) * F + 2 * H * G * E - G * G) + (E * F - G * E - H)) / (E * E + 1);
    var I = (E * (H - Math.sqrt(E * E * (A * A - H * H) + A * A - F * F + (2 * G - 2 * H * E) * F + 2 * H * G * E - G * G)) + (F + G * E * E)) / (E * E + 1);
    var B = (0 - ((0 - Math.sqrt(E * E * (A * A - H * H) + A * A - F * F + (2 * G - 2 * H * E) * F + 2 * H * G * E - G * G)) + (E * F - G * E - H))) / (E * E + 1);
    var C = (E * (Math.sqrt(E * E * (A * A - H * H) + A * A - F * F + (2 * G - 2 * H * E) * F + 2 * H * G * E - G * G) + H) + (F + G * E * E)) / (E * E + 1);
    return {
        x1: D,
        y1: I,
        x2: B,
        y2: C
    }
}
function MicroDraw_DrawDiviArcKT(Ac) {
    if ($.Micro.IsEmpty(Ac)) {
        return true
    }
    $("#" + Ac + "_ting").remove();
    $("#" + Ac + " [mtype=" + mDrawFlag_Glass + "]").remove();
    var Aa = 0;
    var Bu = 0;
    var Bp = 0;
    var Bc = 0;
    var I = 0;
    var g = 0;
    var K = 0;
    var v = 0;
    var Be = 0;
    var Ab, t;
    var Bx, Ax, T, G;
    var AT, U;
    U = 90;
    var A6 = 1;
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
        A6 = Number(mDrawSvgViewBox) / Number(MobileFrame_getCurrMobileViewScale(mDrawFlag_SvgId))
    }
    var AO = mDrawThickTing / A6;
    var AR = mDrawThickFrame / A6;
    var Bb = mDrawThickFrame / A6;
    var AH, Ak;
    var a, b;
    var At, Au, AA, AB, A9, Ba, Al, Am, AY, AZ, AU, AV;
    var AS = 0;
    var Ai;
    var w, AD, AI;
    var Ad, AL, Ay;
    var AF, Bj, Bo;
    var q, A7, Bq, Bd, A4;
    var A1, AN, A3, Bk, Bz;
    var By, AW, Bf, Aj, AG;
    var AQ, B, As;
    if ($("#" + mDrawFlag_SvgId + " #" + Ac).length > 0) {
        if ($("#" + mDrawFlag_SvgId + " #" + Ac).attr("mtype") == mDrawFlag_Custom_arc) {
            if ($("#" + mDrawFlag_SvgId + " #" + Ac).parents().is(":hidden")) {
                return true
            }
            var Bi = $("#" + mDrawFlag_SvgId + " #" + Ac + "_g1");
            var Br = $("#" + mDrawFlag_SvgId + " #" + Ac + "_g2");
            var AX = $.MicroSVG.getSVGRect(Bi);
            var O = $.MicroSVG.getSVGRect(Br);
            var f = Bi.find("path:first").attr("d");
            var V = Br.find("path:first").attr("d");
            var Ao = f.split(" ");
            var A = V.split(" ");
            var c = $.MicroSVG.ToCanvasPoint($("#" + mDrawFlag_SvgId), O.x, O.y);
            var Az = AX.width;
            var An = O.height;
            var Q = $.Micro.ConvToNum($("#" + mDrawFlag_SvgId + " #" + Ac).attr("mtingcnt"));
            var o = $("#" + mDrawFlag_SvgId + " #" + Ac).attr("mxcxlid");
            var J = $("#" + mDrawFlag_SvgId + " #" + Ac).attr("mbframe");
            var Bn = $("#" + mDrawFlag_SvgId + " #" + Ac).attr("mtotallen");
            if ($.Micro.IsEmpty(J)) {
                J = "N"
            }
            if ($.Micro.IsEmpty(Bn)) {
                Bn = "N"
            }
            var Bs = $("#" + mDrawFlag_SvgId + " #" + Ac).attr("mfill");
            if (Bn == "N" && J == "Y") {
                AS = Bb
            }
            var AC = An + AR;
            var Av = (Az * Az / 4 + AC * AC) / (2 * AC);
            Aa = Av;
            var Ap = Math.acos((Av - AC) / (Av - AR));
            var Ar = Math.atan((Az / 2) / (Av - AC));
            Bu = (2 * Math.PI * Av) * 2 * Ar / (2 * Math.PI);
            var Bv = $("#" + mDrawPrProperty).datagrid("getRows");
            var Af = false;
            var e = $("#" + mDrawFlag_SvgId + " #" + Ac).attr("marctl");
            $.each(Bv,
            function(R, H) {
                var W = $(H).attr("ObjId");
                if (W == Ac) {
                    Af = true;
                    return false
                }
            });
            if (!Af || (Af && $.Micro.IsEmpty(e))) {
                $("#" + mDrawFlag_SvgId + " #" + Ac).attr("marctl", (Bu * A6 / mDrawPixelPerM * 1000).toFixed(2))
            }
            if (Q == 0) {} else {
                if (Q == 1) {} else {
                    if (Q == 2) {
                        Ab = Ap / 3;
                        AH = Number((Av - AR) * Math.sin(Ab));
                        At = Number(Av - AH) * A6;
                        Au = Number(Av - (Av - AR) * Math.cos(Ab)) * A6;
                        AA = Number(Av) * A6;
                        AB = Number(AC - AS) * A6;
                        w = $.MicroSVG.TwopointsLine([[At, Au], [AA, AB]]);
                        AD = Number(w.k);
                        AI = Number(w.b);
                        Bx = Math.atan(AD);
                        T = $.Micro.Mradian(Bx, "h2j");
                        Ak = Number(AO / Math.sin(Bx));
                        A9 = (Av - Ak) * A6;
                        Ba = Number(AC - AS) * A6;
                        q = MicroDraw_Line_RoundCOP(AD, (AD * Ak * A6 + AI), Av * A6, Av * A6, (Av - AR) * A6);
                        A7 = q.x1;
                        Bq = q.y1;
                        Bd = q.x2;
                        A4 = q.y2;
                        if (A7 < Bd) {
                            Al = A7;
                            Am = Bq
                        } else {
                            Al = Bd;
                            Am = A4
                        }
                        AQ = Math.sqrt((Al - AA) * (Al - AA) + (Am - AB) * (Am - AB));
                        B = Math.sqrt((AA - At) * (AA - At) + (AB - Au) * (AB - Au));
                        As = Math.sqrt((Al - At) * (Al - At) + (Am - Au) * (Am - Au));
                        Ad = $.MicroSVG.TwopointsLine([[AA, AB], [Al, Am]]);
                        AL = Number(Ad.k);
                        t = Math.atan(AL);
                        Ai = AQ * Math.cos(Bx - t);
                        Ax = Math.acos((Ai - B) / As);
                        G = $.Micro.Mradian(Ax, "h2j")
                    } else {
                        if (Q == 3) {
                            Ab = Ap / 2;
                            AH = Number((Av - AR) * Math.sin(Ab));
                            At = Number(Av - AH) * A6;
                            Au = Number(Av - (Av - AR) * Math.cos(Ab)) * A6;
                            AA = Number(Av - AO / 2) * A6;
                            AB = Number(AC - AS) * A6;
                            w = $.MicroSVG.TwopointsLine([[At, Au], [AA, AB]]);
                            AD = Number(w.k);
                            AI = Number(w.b);
                            Bx = Math.atan(AD);
                            T = $.Micro.Mradian(Bx, "h2j");
                            Ak = Number(AO / Math.sin(Bx));
                            A9 = (Av - AO / 2 - Ak) * A6;
                            Ba = Number(AC - AS) * A6;
                            q = MicroDraw_Line_RoundCOP(AD, (AD * Ak * A6 + AI), Av * A6, Av * A6, (Av - AR) * A6);
                            A7 = q.x1;
                            Bq = q.y1;
                            Bd = q.x2;
                            A4 = q.y2;
                            if (A7 < Bd) {
                                Al = A7;
                                Am = Bq
                            } else {
                                Al = Bd;
                                Am = A4
                            }
                            AQ = Math.sqrt((Al - AA) * (Al - AA) + (Am - AB) * (Am - AB));
                            B = Math.sqrt((AA - At) * (AA - At) + (AB - Au) * (AB - Au));
                            As = Math.sqrt((Al - At) * (Al - At) + (Am - Au) * (Am - Au));
                            Ad = $.MicroSVG.TwopointsLine([[AA, AB], [Al, Am]]);
                            AL = Number(Ad.k);
                            t = Math.atan(AL);
                            Ai = AQ * Math.cos(Bx - t);
                            Ax = Math.acos((Ai - B) / As);
                            G = $.Micro.Mradian(Ax, "h2j")
                        }
                    }
                }
            }
            g = Ai;
            K = Ai;
            v = AC - AR - AS;
            a = (Av - Az / 2) * A6;
            b = AC * A6;
            var Bw, A0;
            var r = $.MicroSVG.ToCanvasPoint($("#" + mDrawFlag_SvgId), AX.x, AX.y);
            Bw = $.Micro.ConvToNum(Ao[0]) - a;
            A0 = $.Micro.ConvToNum(Ao[1]) - b;
            var A8;
            var F;
            var AM, Bg, m, Ah;
            var Ag;
            var Bm;
            var Bl;
            if (Q > 0) {
                AM = $($.MicroSVG.makeSVG("g", {
                    "id": Ac + "_ting"
                }));
                $("#" + mDrawFlag_SvgId + " #" + Ac).append(AM);
                if (Q >= 2) {
                    At += Bw;
                    Au += A0;
                    AA += Bw;
                    AB += A0;
                    A9 += Bw;
                    Ba += A0;
                    Al += Bw;
                    Am += A0
                }
            }
            switch (Q) {
            case 0:
                var Aq = $.Micro.ConvToNum(A[0]) + 12;
                var N = $.Micro.ConvToNum(A[1]) - 5;
                if (J == "Y" && Bn == "N") {
                    N -= mDrawThickFrame
                }
                var u = [[Aq, N]];
                for (var l = 0; l < u.length; l++) {
                    var S = MicroDraw_GUID();
                    A8 = {
                        "id": S,
                        "mtype": mDrawFlag_Glass
                    };
                    Ag = $($.MicroSVG.makeSVG("g", A8));
                    $("#" + mDrawFlag_SvgId + " #" + Ac).append(Ag);
                    A8 = {
                        "id": S + "_txtr",
                        "width": mDraw_GlassFlagRectW * 3 / 4,
                        "height": mDraw_GlassFlagRectH - 3,
                        "fill": mDrawGlassColor,
                        "x": u[l][0],
                        "y": u[l][1] - mDraw_GlassFlagRectH + 4,
                    };
                    Bm = $($.MicroSVG.makeSVG("rect", A8));
                    Ag.append(Bm);
                    A8 = {
                        "id": S + "_txt",
                        "x": u[l][0],
                        "y": u[l][1],
                        "fill": "#000000",
                        "font-size": mDraw_GlassFlagFontSize,
                        "font-weight": mDraw_GlassFlagFontWeight
                    };
                    Bl = $($.MicroSVG.makeSVG("text", A8));
                    Bl.get(0).textContent = "F12";
                    Ag.append(Bl)
                }
                MicroDraw_reflashGlassFlag();
                break;
            case 1:
                var Ae, P, AE, AK, A2, AJ, A5, AP;
                var Bt = ($.Micro.ConvToNum(Ao[0]) + Az * A6 / 2);
                var Aw = ($.Micro.ConvToNum(Ao[1]));
                Ae = Bt - AO * A6 / 2;
                P = $.Micro.ConvToNum(Ao[1]) - O.height * A6;
                AE = Ae + AO * A6;
                AK = P;
                A2 = AE;
                AJ = $.Micro.ConvToNum(Ao[1]) - AS;
                A5 = Ae;
                AP = AJ;
                F = [Ae + "," + P, AE + "," + AK, A2 + "," + AJ, A5 + "," + AP].join(" ");
                A8 = {
                    "id": Ac + "_pmid",
                    "fill": Bs,
                    "stroke": "#000000",
                    "stroke-width": "1",
                    "pointer-events": "none",
                    "points": F
                };
                Bg = $($.MicroSVG.makeSVG("polygon", A8));
                AM.append(Bg);
                var Aq = $.Micro.ConvToNum(A[0]) + 12;
                var N = $.Micro.ConvToNum(A[1]) - 5;
                if (J == "Y" && Bn == "N") {
                    N -= mDrawThickFrame
                }
                var p = $.Micro.ConvToNum(A[0]) + O.width * A6 - mDraw_GlassFlagRectW * 3 / 4 - 12;
                var L = N;
                var u = [[Aq, N], [p, L]];
                for (var l = 0; l < u.length; l++) {
                    var S = MicroDraw_GUID();
                    A8 = {
                        "id": S,
                        "mtype": mDrawFlag_Glass
                    };
                    Ag = $($.MicroSVG.makeSVG("g", A8));
                    $("#" + mDrawFlag_SvgId + " #" + Ac).append(Ag);
                    A8 = {
                        "id": S + "_txtr",
                        "width": mDraw_GlassFlagRectW * 3 / 4,
                        "height": mDraw_GlassFlagRectH - 3,
                        "fill": mDrawGlassColor,
                        "x": u[l][0],
                        "y": u[l][1] - mDraw_GlassFlagRectH + 4,
                    };
                    Bm = $($.MicroSVG.makeSVG("rect", A8));
                    Ag.append(Bm);
                    A8 = {
                        "id": S + "_txt",
                        "x": u[l][0],
                        "y": u[l][1],
                        "fill": "#000000",
                        "font-size": mDraw_GlassFlagFontSize,
                        "font-weight": mDraw_GlassFlagFontWeight
                    };
                    Bl = $($.MicroSVG.makeSVG("text", A8));
                    Bl.get(0).textContent = "F12";
                    Ag.append(Bl)
                }
                MicroDraw_reflashGlassFlag();
                break;
            case 2:
                F = [At + "," + Au, AA + "," + AB, A9 + "," + Ba, Al + "," + Am].join(" ");
                A8 = {
                    "id": Ac + "_pl",
                    "fill": Bs,
                    "stroke": "#000000",
                    "stroke-width": "1",
                    "pointer-events": "none",
                    "points": F
                };
                m = $($.MicroSVG.makeSVG("polygon", A8));
                AM.append(m);
                var Y = AA;
                A8.id = Ac + "_pr";
                A8.transform = "matrix(-1 0 0 1 " + Y * 2 + " 0)";
                Ah = $($.MicroSVG.makeSVG("polygon", A8));
                AM.append(Ah);
                var Aq = $.Micro.ConvToNum(A[0]) + 12;
                var N = $.Micro.ConvToNum(A[1]) - 5;
                if (J == "Y" && Bn == "N") {
                    N -= mDrawThickFrame
                }
                var p = AA - 6;
                var L = Au + (AB - Au) / 2;
                var Bh = $.Micro.ConvToNum(A[0]) + O.width * A6 - mDraw_GlassFlagRectW * 3 / 4 - 12;
                var M = N;
                var u = [[Aq, N], [p, L], [Bh, M]];
                for (var l = 0; l < u.length; l++) {
                    var S = MicroDraw_GUID();
                    A8 = {
                        "id": S,
                        "mtype": mDrawFlag_Glass
                    };
                    Ag = $($.MicroSVG.makeSVG("g", A8));
                    $("#" + mDrawFlag_SvgId + " #" + Ac).append(Ag);
                    A8 = {
                        "id": S + "_txtr",
                        "width": mDraw_GlassFlagRectW * 3 / 4,
                        "height": mDraw_GlassFlagRectH - 3,
                        "fill": mDrawGlassColor,
                        "x": u[l][0],
                        "y": u[l][1] - mDraw_GlassFlagRectH + 4,
                    };
                    Bm = $($.MicroSVG.makeSVG("rect", A8));
                    Ag.append(Bm);
                    A8 = {
                        "id": S + "_txt",
                        "x": u[l][0],
                        "y": u[l][1],
                        "fill": "#000000",
                        "font-size": mDraw_GlassFlagFontSize,
                        "font-weight": mDraw_GlassFlagFontWeight
                    };
                    Bl = $($.MicroSVG.makeSVG("text", A8));
                    Bl.get(0).textContent = "F12";
                    Ag.append(Bl)
                }
                MicroDraw_reflashGlassFlag();
                break;
            case 3:
                var Ae, P, AE, AK, A2, AJ, A5, AP;
                var Bt = $.Micro.ConvToNum(Ao[0]) + Az * A6 / 2;
                var Aw = $.Micro.ConvToNum(Ao[1]);
                Ae = Bt - AO * A6 / 2;
                P = $.Micro.ConvToNum(Ao[1]) - O.height * A6;
                AE = Ae + AO * A6;
                AK = P;
                A2 = AE;
                AJ = $.Micro.ConvToNum(Ao[1]) - AS;
                A5 = Ae;
                AP = AJ;
                F = [Ae + "," + P, AE + "," + AK, A2 + "," + AJ, A5 + "," + AP].join(" ");
                A8 = {
                    "id": Ac + "_pmid",
                    "fill": Bs,
                    "stroke": "#000000",
                    "stroke-width": "1",
                    "pointer-events": "none",
                    "points": F
                };
                Bg = $($.MicroSVG.makeSVG("polygon", A8));
                AM.append(Bg);
                F = [At + "," + Au, AA + "," + AB, A9 + "," + Ba, Al + "," + Am].join(" ");
                A8 = {
                    "id": Ac + "_pl",
                    "fill": Bs,
                    "stroke": "#000000",
                    "stroke-width": "1",
                    "pointer-events": "none",
                    "points": F
                };
                m = $($.MicroSVG.makeSVG("polygon", A8));
                AM.append(m);
                var Y = AA + AR * A6 / 2;
                A8.id = Ac + "_pr";
                A8.transform = "matrix(-1 0 0 1 " + Y * 2 + " 0)";
                Ah = $($.MicroSVG.makeSVG("polygon", A8));
                AM.append(Ah);
                var Aq = $.Micro.ConvToNum(A[0]) + 12;
                var N = $.Micro.ConvToNum(A[1]) - 5;
                if (J == "Y" && Bn == "N") {
                    N -= mDrawThickFrame
                }
                var p = AA - 6;
                var L = Au + (AB - Au) / 2;
                var p = A5 - mDraw_GlassFlagRectW * 3 / 4 - 3;
                var L = AP - (AP - P) / 2;
                var Bh = Ae + mDraw_GlassFlagRectW * 3 / 4 - 6;
                var M = AP - (AP - P) / 2;
                var E = $.Micro.ConvToNum(A[0]) + O.width * A6 - mDraw_GlassFlagRectW * 3 / 4 - 12;
                var C = N;
                var u = [[Aq, N], [p, L], [Bh, M], [E, C]];
                for (var l = 0; l < u.length; l++) {
                    var S = MicroDraw_GUID();
                    A8 = {
                        "id": S,
                        "mtype": mDrawFlag_Glass
                    };
                    Ag = $($.MicroSVG.makeSVG("g", A8));
                    $("#" + mDrawFlag_SvgId + " #" + Ac).append(Ag);
                    A8 = {
                        "id": S + "_txtr",
                        "width": mDraw_GlassFlagRectW * 3 / 4,
                        "height": mDraw_GlassFlagRectH - 3,
                        "fill": mDrawGlassColor,
                        "x": u[l][0],
                        "y": u[l][1] - mDraw_GlassFlagRectH + 4,
                    };
                    Bm = $($.MicroSVG.makeSVG("rect", A8));
                    Ag.append(Bm);
                    A8 = {
                        "id": S + "_txt",
                        "x": u[l][0],
                        "y": u[l][1],
                        "fill": "#000000",
                        "font-size": mDraw_GlassFlagFontSize,
                        "font-weight": mDraw_GlassFlagFontWeight
                    };
                    Bl = $($.MicroSVG.makeSVG("text", A8));
                    Bl.get(0).textContent = "F12";
                    Ag.append(Bl)
                }
                MicroDraw_reflashGlassFlag();
                break
            }
            if (Bn == "Y") {
                I = Az
            } else {
                Bj = 0;
                Bo = AC - AS;
                A1 = MicroDraw_Line_RoundCOP(Bj, Bo, Av, Av, (Av - AR));
                AN = A1.x1;
                A3 = A1.y1;
                Bk = A1.x2;
                Bz = A1.y2;
                if (AN < Bk) {
                    AU = AN;
                    AV = A3
                } else {
                    AU = Bk;
                    AV = Bz
                }
                k4 = 0;
                b4 = AC;
                By = MicroDraw_Line_RoundCOP(k4, b4, Av, Av, (Av - AR));
                AW = By.x1;
                Bf = By.y1;
                Aj = By.x2;
                AG = By.y2;
                if (AN < Bk) {
                    AY = AW;
                    AZ = Bf
                } else {
                    AY = Aj;
                    AZ = AG
                }
                I = Az - (AY - (Av - Az / 2)) * 2;
                AT = Math.abs(Math.atan((AV - AZ) / (AU - AY)));
                U = $.Micro.Mradian(AT, "h2j")
            }
            $("#" + mDrawFlag_SvgId + " #" + Ac + " [mtype=" + mDrawFlag_Custom_arc_bf + "]").remove();
            if (J == "Y") {
                var D = $.MicroSVG.getSVGRect($("#" + mDrawFlag_SvgId + " #" + Ac));
                var r = $.MicroSVG.ToCanvasPoint($("#" + mDrawFlag_SvgId), D.x, D.y);
                var S = MicroDraw_GUID();
                var X = S + "_bf";
                var A8 = {
                    "id": S,
                    "mtype": mDrawFlag_Custom_arc_bf
                };
                var Z = $($.MicroSVG.makeSVG("g", A8));
                $("#" + mDrawFlag_SvgId + " #" + Ac).append(Z);
                var At, Au, AA, AB, A9, Ba, Al, Am;
                if (Bn == "Y") {
                    At = r.x * A6;
                    Au = (r.y + D.height) * A6;
                    AA = At + D.width * A6;
                    AB = Au;
                    A9 = AA;
                    Ba = AB + mDrawThickTing;
                    Al = At;
                    Am = Ba
                } else {
                    Bj = 0;
                    Bo = AC - AS;
                    A1 = MicroDraw_Line_RoundCOP(Bj, Bo, Av, Av, (Av - AR));
                    AN = A1.x1;
                    A3 = A1.y1;
                    Bk = A1.x2;
                    Bz = A1.y2;
                    if (AN < Bk) {
                        At = AN + Bw;
                        Au = A3 + A0;
                        AA = Bk + Bw;
                        AB = Bz + A0
                    } else {
                        At = Bk + Bw;
                        Au = Bz + A0;
                        AA = AN + Bw;
                        AB = A3 + A0
                    }
                    k4 = 0;
                    b4 = AC;
                    By = MicroDraw_Line_RoundCOP(k4, b4, Av, Av, (Av - AR));
                    AW = By.x1;
                    Bf = By.y1;
                    Aj = By.x2;
                    AG = By.y2;
                    if (AW < Aj) {
                        A9 = Aj + Bw;
                        Ba = AG + A0;
                        Al = AW + Bw;
                        Am = Bf + A0
                    } else {
                        A9 = AW + Bw;
                        Ba = Bf + A0;
                        Al = Aj + Bw;
                        Am = AG + A0
                    }
                }
                var s = ["M" + At, Au, "L" + AA, AB, "L" + A9, Ba, "L" + Al, Am + "Z"].join(" ");
                A8 = {
                    "id": X,
                    "stroke": "#000",
                    "stroke-width": "1",
                    "fill": Bs,
                    "d": s
                };
                var n = $($.MicroSVG.makeSVG("path", A8));
                Z.append(n)
            }
        }
    }
}
function MicroDraw_DrawArcTL(B) {
    var A = $("#" + B)[0].getAttribute("marctl");
    var J = $("#" + B).attr("showarclen") || "N";
    $("#" + B + "_marctl").remove();
    var L = $("#" + B)[0];
    var Q = $("#" + B + "_p1")[0];
    var P = L.getAttribute("mheight");
    var K = L.getAttribute("mwidth");
    d = Q.getAttribute("d");
    d = replaceAll(d, "M", "");
    d = replaceAll(d, " A ", ",");
    d = replaceAll(d, " ", ",");
    var F, N, E, M, D, G;
    var C = d.split(",");
    F = Number(C[0]);
    N = C[1];
    D = Number(C[7]);
    G = C[8];
    E = Number(F) + (Number(D) - Number(F)) / 2;
    M = Number(N) - (Number(L.getAttribute("mheight")) / 1000) * Number(mDrawPixelPerM);
    if (J == "Y") {
        var O = B + "_marctl";
        var I = document.createElementNS(mDrawSvgNS, "g");
        I.setAttributeNS(null, "id", O);
        I.setAttributeNS(null, "mtype", mDrawFlag_Custom_text);
        I.setAttributeNS(null, "mfontsize", "12");
        I.setAttributeNS(null, "mtext", "弧长:" + A.toString());
        I.setAttributeNS(null, "mfill", "#000000");
        I.setAttributeNS(null, "mdir", "lr");
        I.setAttributeNS(null, "mfontweight", "400");
        L.appendChild(I);
        var H = $("#" + O).html();
        H = H + "<text id='" + O + "_t' x='" + Number(E + 40).toString() + "' y='" + Number(M - 35).toString() + "' font-size='16' text-anchor='end' fill='#000000' writing-mode='lr' font-weight='400'>弧长:" + A + "</text>";
        $("#" + O).html(H)
    }
}
function MicroDraw_getMcflOpt() {
    var mcflOptArr = [];
    var mcflOptObj = {};
    var fcnt = 0,
    gcnt = 0,
    scnt = 0;
    var temp;
    var frames = $.Micro.MergeObjs([$("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_FrameRect + "']"), $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_arc + "']")]);
    $.each(frames,
    function() {
        var ObjId = $(this).attr("id");
        var xcxlId = $("#" + ObjId).attr("mxcxlid");
        if (isEmptyOrNull(xcxlId)) {
            return []
        }
        var mcflId = MicroDraw_genData_getMcflIdByXcxlid(xcxlId);
        if (isEmptyOrNull(mcflId)) {
            return []
        }
        xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(xcxlId);
        xcxljgJson = eval("(" + xcxljgStr + ")");
        temp = MicroDraw_genData_calcExp(mcflId, "FCNT", ObjId, xcxljgJson);
        fcnt += isEmptyOrNull(temp) ? 0 : temp;
        temp = MicroDraw_genData_calcExp(mcflId, "GCNT", ObjId, xcxljgJson);
        gcnt += isEmptyOrNull(temp) ? 0 : temp;
        if (mcflId != 5) {
            temp = MicroDraw_genData_calcExp(mcflId, "SCNT", ObjId, xcxljgJson);
            scnt += isEmptyOrNull(temp) ? 0 : temp
        }
    });
    mcflOptObj = {};
    mcflOptObj.optId = "FCNT";
    mcflOptObj.optName = "扇数量";
    mcflOptObj.optVal = fcnt;
    mcflOptArr[mcflOptArr.length] = mcflOptObj;
    mcflOptObj = {};
    mcflOptObj.optId = "GCNT";
    mcflOptObj.optName = "固玻数量";
    mcflOptObj.optVal = gcnt;
    mcflOptArr[mcflOptArr.length] = mcflOptObj;
    mcflOptObj = {};
    mcflOptObj.optId = "SCNT";
    mcflOptObj.optName = "纱扇数量";
    mcflOptObj.optVal = scnt;
    mcflOptArr[mcflOptArr.length] = mcflOptObj;
    return JSON.stringify(mcflOptArr)
}
function MicroDraw_getWinSize() {
    var A = $("#" + mDrawSizeProperty).propertygrid("getRows");
    return JSON.stringify(A)
}
function MicroDraw_Frame_AddArc(E, L, K, N, U, D) {
    var J = MicroDraw_Frame_ClickAddRect(E, N, U, D);
    var R = $("#" + mDrawFlag_SvgId + " #" + J);
    var B = R.find("[mtype=" + mDrawFlag_FrameRect + "]");
    B.removeAttr("mxcxlid");
    MicroDraw_ShowSizeProperty();
    var P = MicroDraw_GUID();
    var M = {
        "id": P,
        "mtype": mDrawFlag_FrameArc,
        "mfill": mDrawProductColor,
        "mwidth": L,
        "mheight": K,
        "cooryshow": "Y",
        "mtingcnt": "0根",
        "myt": "Y",
        "mdivstyle": "equalDIV",
        "mpjstyle": "",
        "mtingtilt": "",
        "mytpjstyle": "V"
    };
    var O = $($.MicroSVG.makeSVG("g", M));
    R.append(O);
    M = {
        "id": P + "_g1",
    };
    var F = $($.MicroSVG.makeSVG("g", M));
    O.append(F);
    var C = "M0 0";
    M = {
        "id": P + "_p1",
        "d": C,
        "fill": mDrawProductColor,
        "stroke": "#000000",
        "stroke-width": "1",
        "pointer-events": "all"
    };
    var T = $($.MicroSVG.makeSVG("path", M));
    F.append(T);
    M = {
        "id": P + "_g2"
    };
    var S = $($.MicroSVG.makeSVG("g", M));
    O.prepend(S);
    var G = "M0 0";
    M = {
        "id": P + "_p2",
        "d": G,
        "fill": "#ffffff",
        "stroke": "#ffffff",
        "stroke-width": "2",
        "pointer-events": "all"
    };
    var Q = $($.MicroSVG.makeSVG("path", M));
    S.append(Q);
    M = {
        "id": P + "_g3",
    };
    var H = $($.MicroSVG.makeSVG("g", M));
    O.append(H);
    var A = "M0 0";
    M = {
        "id": P + "_p3",
        "d": A,
        "fill": mDrawProductColor,
        "stroke": "#000000",
        "stroke-width": "1",
        "pointer-events": "all"
    };
    var I = $($.MicroSVG.makeSVG("path", M));
    H.append(I);
    MicroDraw_ReDraw_ArcFrame(P);
    R.attr("mcooryoffset", "X").attr("mcooryoffsetval", "-73");
    MicroDraw_ShowCoordinate();
    MicroDraw_autoGdPic();
    return J
}
function MicroDraw_ReDraw_ArcFrame(R) {
    var a = $("#" + mDrawFlag_SvgId + " #" + R);
    if (a.length == 0) {
        return true
    }
    if (a.attr("mtype") != mDrawFlag_FrameArc) {
        return true
    }
    var M = a.parents("[mtype=" + mDrawFlag_Win + "]");
    var u = Number(a.attr("mwidth"));
    var W = Number(a.attr("mheight"));
    var Z = a.parents("[mtype=" + mDrawFlag_Win + "]").find("[mtype=" + mDrawFlag_FrameRect + "]");
    var Af = $("#" + mDrawFlag_SvgId + " #" + Z.attr("id") + "_r1");
    var Aj = Number(Af.attr("x"));
    var C = Number(Af.attr("y"));
    var V = Number(Af.attr("width"));
    var S = Number(Af.attr("height"));
    var E = W / 1000 * mDrawPixelPerM;
    var I = Aj;
    var o = C + E;
    var w = MicroDraw_getArcDataInfo(I, o, u, W, mDrawThickFrame, "N");
    var s = w.arcInX;
    var G = w.arcInY;
    var X = w.ROut;
    var U = w.RIn;
    var N = [w.arcOut_d, w.arcIn_d, w.farcIn_d];
    var c = N[0];
    var Ae = N[0].split("A");
    var Ah = Ae[0].split(" ");
    var e = N[1].split("A");
    var T = e[0].split(" ");
    var b = e[1].split(" ");
    var L = N[2].split("A");
    var P = L[0].split(" ");
    var n = L[1].split(" ");
    var q = [c, "L" + n[5], n[6], "A" + n[0], n[1], 0, 0, 0, $.Micro.ConvToNum(P[0]), P[1] + "Z"].join(" ");
    $("#" + mDrawFlag_SvgId + " #" + R + "_p1").attr("d", q);
    var Ab = $.Micro.ConvToNum(Ah[0]);
    var Aa = Ah[1];
    var r = $.Micro.ConvToNum(P[0]);
    var Ai = P[1];
    var p = $.MicroSVG.TwopointsLine([[Ab, Aa], [r, Ai]]);
    var F = p.k;
    var Y = $.Micro.Mradian(Math.atan(F), "h2j");
    var m = Math.abs(90 - Y);
    a.attr("mpjstyle", $.Micro.MRound(m, 0));
    var t = c.split(" ");
    var Ac = $.Micro.ConvToNum(t[0]);
    var Ad = $.Micro.ConvToNum(t[1]);
    var l = $.Micro.ConvToNum(t[t.length - 2]);
    var D = $.Micro.ConvToNum(t[t.length - 1]);
    var v = [c, "L" + (l), (C), "L" + (Ac), (C) + "Z"].join(" ");
    $("#" + mDrawFlag_SvgId + " #" + R + "_p2").attr("d", v);
    $("#" + mDrawFlag_SvgId + " #" + R + "_p2").attr("stroke-width", "2");
    var f = M.find("[mtype=" + mDrawFlag_Glass + "][mx=0][my=0],[mtype=" + mDrawFlag_Area + "][mx=0][my=0]");
    var O = f.attr("mbid");
    var H;
    var Ag = function(Ar, Av, At, Al, As, Ax) {
        if (Ar == 1) {
            var Aw = MicroDraw_getArcDataInfo(Av, At, Al, As, (mDrawThickFrame + mDrawThickYt), "N");
            var Ao = [Aw.arcOut_d, Aw.arcIn_d, Aw.farcIn_d];
            Ao[0] = $.MicroSVG.UnifiedSVGPath(Ao[0]);
            Ao[2] = $.MicroSVG.UnifiedSVGPath(Ao[2]);
            var Ap = Ao[0];
            var Am = Ao[2].split("A");
            var An = Am[0].split(" ");
            var Aq = Am[1].split(" ");
            var Au = [N[2], "L" + Aq[5], Aq[6], "A" + Aq[0], Aq[1], 0, 0, 0, $.Micro.ConvToNum(An[0]), An[1] + "Z"].join(" ");
            $("#" + mDrawFlag_SvgId + " #" + R + "_p3").attr("d", Au)
        } else {
            if (Ar == 2) {
                var Aw = MicroDraw_getArcDataInfo(Av, At, Al, As, mDrawThickYt, "N", Ax);
                var Ao = [Aw.ArcDataInfo2.arcOut_d, Aw.ArcDataInfo2.arcIn_d, Aw.farcIn_d];
                Ao[0] = $.MicroSVG.UnifiedSVGPath(Ao[0]);
                Ao[1] = $.MicroSVG.UnifiedSVGPath(Ao[1]);
                var Am = Ao[1].split("A");
                var An = Am[0].split(" ");
                var Aq = Am[1].split(" ");
                var Au = [Ao[0], "L" + Aq[5], Aq[6], "A" + Aq[0], Aq[1], 0, 0, 0, $.Micro.ConvToNum(An[0]), An[1] + "Z"].join(" ");
                $("#" + mDrawFlag_SvgId + " #" + R + "_p3").attr("d", Au)
            }
        }
    };
    var Ak = 1;
    var J = I;
    var B = o;
    var g = u;
    var K = W;
    var Q = 0;
    if (!$.Micro.IsEmpty(O)) {
        H = M.find("#" + O);
        var A = Number(H.attr("my"))
    }
    Ag(Ak, J, B, g, K, Q);
    MicroDraw_DrawFrameArcKT(R)
}
function MicroDraw_SetSVGObjToTop(A) {
    if (! (A && A.length > 0)) {
        return true
    }
    $.each(A,
    function() {
        $(this).appendTo($(this).parent())
    })
}
function MicroDraw_ShowFrameArcCoor(C) {
    if ($.Micro.IsEmpty(C)) {
        return true
    }
    var B = $("#" + mDrawFlag_SvgId + " #" + C);
    if (! (B && B.length > 0)) {
        return true
    }
    var A = null;
    if (B.attr("mtype") == mDrawFlag_Win) {
        A = B.find("[mtype=" + mDrawFlag_FrameArc + "]")
    } else {
        if (B.attr("mtype") == mDrawFlag_FrameArc) {
            A = B
        }
    }
    if (!A) {
        return true
    }
    var D = 10;
    $.each(A,
    function(J, L) {
        var S = $(L).attr("coorxshow");
        var P = $(L).attr("cooryshow");
        $("#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_Custom_ruler + "][mrulermaster=" + L.id + "]").remove();
        if (S == "Y") {}
        if (P == "Y") {
            var X = Number($(L).attr("mheight"));
            var T = Number($(L).attr("mwidth"));
            var N = X / 1000 * mDrawPixelPerM;
            var R = T / 1000 * mDrawPixelPerM;
            var a = $("#" + L.id + "_p1");
            var O = $.MicroSVG.UnifiedSVGPath(a.attr("d"));
            var E = O.split(" ");
            var V = $.Micro.ConvToNum(E[0]);
            var W = $.Micro.ConvToNum(E[1]);
            var Y = $.Micro.ConvToNum(E[2]);
            var Z = $.Micro.ConvToNum(E[3]);
            var I = MicroDraw_GUID();
            var U = X;
            var H = {
                "id": I,
                "mtype": mDrawFlag_Custom_ruler,
                "mstroke": "#000000",
                "mstrokewidth": "1px",
                "mtext": U,
                "moptvalexp": "VAL",
                "mrulermaster": L.id,
                "moptid": "mheight",
                "moptidbelongtoobj": L.id
            };
            var G = $($.MicroSVG.makeSVG("g", H));
            $("#" + mDrawFlag_SvgId).append(G);
            if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
                G.appendTo($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]'))
            }
            H = {
                "id": I + "_l1",
                "stroke": "#000000",
                "stroke-width": "1px",
                "pointer-events": "all",
                "x1": V - D * 2 - 3,
                "y1": W - N,
                "x2": V - 3,
                "y2": W - N
            };
            var F = $($.MicroSVG.makeSVG("line", H));
            G.append(F);
            H = {
                "id": I + "_l2",
                "stroke": "#000000",
                "stroke-width": "1px",
                "pointer-events": "all",
                "x1": V - D - 3,
                "y1": W - N,
                "x2": V - D - 3,
                "y2": W
            };
            var M = $($.MicroSVG.makeSVG("line", H));
            G.append(M);
            H = {
                "id": I + "_l3",
                "stroke": "#000000",
                "stroke-width": "1px",
                "pointer-events": "all",
                "x1": V - D * 2 - 3,
                "y1": W,
                "x2": V - 3,
                "y2": W
            };
            var Q = $($.MicroSVG.makeSVG("line", H));
            G.append(Q);
            H = {
                "id": I + "_t",
                "font-size": "16",
                "writing-mode": "lr",
                "font-weight": "400",
                "x": V - D + 3,
                "y": W - N / 2
            };
            var K = $($.MicroSVG.makeSVG("text", H));
            G.append(K);
            K.html(U)
        }
    })
}
function MicroDraw_DrawFrameArcKT(ObjId) {
    if ($(".messager-window").length > 0) {
        return true
    }
    if ($.Micro.IsEmpty(ObjId)) {
        return true
    }
    $("#" + ObjId + "_ting").remove();
    $("#" + ObjId + "_yx").remove();
    $("#" + ObjId + " [mtype=" + mDrawFlag_Glass + "]").remove();
    var ARCBR = 0;
    var ARCTL = 0;
    var ARCTZL = 0;
    var ARCZTZL = 0;
    var ARCBKL = 0;
    var ARCLTL = 0;
    var ARCRTL = 0;
    var ARCMTL = 0;
    var ARCINYX = 0;
    var heta, delta;
    var Alpha, Beta, j_Alpha, j_Beta;
    var Gamma, j_Gamma;
    j_Gamma = 90;
    var ScaleG_scale = 1;
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
        ScaleG_scale = Number(mDrawSvgViewBox) / Number(MobileFrame_getCurrMobileViewScale(mDrawFlag_SvgId))
    }
    var TW = mDrawThickTing;
    var KW = mDrawThickFrame;
    var BKW = mDrawThickFrame;
    var YXW = mDrawThickYt;
    var W1, W2;
    var x0, y0;
    var x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6;
    var yx_x1, yx_y1, yx_x2, yx_y2, yx_x3, yx_y3, yx_x4, yx_y4, yx_lx1, yx_ly1, yx_rx4, yx_ry4;
    var bkw = 0;
    var Lztw;
    var TwopointsLine1, k1, b1;
    var TwopointsLine2, k2, b2;
    var TwopointsLine3, k3, b3;
    var Line_RoundCOP0, x1_1, y1_1, x1_2, y1_2;
    var Line_RoundCOP, x4_1, y4_1, x4_2, y4_2;
    var yx_Line_RoundCOP, yx_x4_1, yx_y4_1, yx_x4_2, yx_y4_2;
    var yx_rLine_RoundCOP, yx_rx4_1, yx_ry4_1, yx_rx4_2, yx_ry4_2;
    var yx2_Line_RoundCOP, yx_x1_1, yx_y1_1, yx_x1_2, yx_y1_2;
    var yx2_lLine_RoundCOP, yx_lx1_1, yx_ly1_1, yx_lx1_2, yx_ly1_2;
    var Line_RoundCOP2, x6_1, y6_1, x6_2, y6_2;
    var Line_RoundCOP3, x5_1, y5_1, x5_2, y5_2;
    var LenP2_P4, LenP1_P2, LenP1_P4;
    var FrameArcObj = $("#" + mDrawFlag_SvgId + " #" + ObjId);
    if (FrameArcObj.length > 0) {
        if (FrameArcObj.attr("mtype") == mDrawFlag_FrameArc) {
            var pWin = FrameArcObj.parents("[mtype=" + mDrawFlag_Win + "]");
            var pWinTarea = pWin.find("[mtype=" + mDrawFlag_Glass + "][mx=0][my=0],[mtype=" + mDrawFlag_Area + "][mx=0][my=0]");
            with(FrameArcObj) {
                var mwidth = attr("mwidth");
                var mheight = attr("mheight");
                var mtingcnt = $.Micro.ConvToNum(attr("mtingcnt"));
                var mxcxlid = attr("mxcxlid");
                var mdivstyle = attr("mdivstyle");
                var mtingtilt = $.Micro.ConvToNum(attr("mtingtilt"));
                if ($.Micro.IsEmpty(mtingtilt) || mtingtilt <= 0 || mtingtilt >= 90) {
                    mtingtilt = 60;
                    attr("mtingtilt", mtingtilt)
                }
                if ($.Micro.IsEmpty(mdivstyle)) {
                    mdivstyle = "equalDIV"
                }
                var mytpjstyle = attr("mytpjstyle");
                if ($.Micro.IsEmpty(mytpjstyle)) {
                    mytpjstyle = "V"
                }
                var myt = attr("myt");
                if ($.Micro.IsEmpty(myt)) {
                    myt = "Y"
                }
                var fillColor = attr("mfill")
            }
            var addArcTag = true;
            var mtid, mlid, mrid, mbid;
            if (mtingcnt > 0) {
                if (pWinTarea.length > 0) {
                    with(pWinTarea) {
                        mtid = attr("mtid");
                        mlid = attr("mlid");
                        mrid = attr("mrid");
                        mbid = attr("mbid");
                        if (!$.Micro.IsEmpty(mtid) || !$.Micro.IsEmpty(mlid) || !$.Micro.IsEmpty(mrid)) {
                            addArcTag = false
                        }
                    }
                } else {
                    addArcTag = false
                }
            }
            if (!addArcTag) {
                $.messager.alert("提示:", "当前区域不支持添加弧内中挺", "info",
                function() {
                    FrameArcObj.attr("mtingcnt", "0根");
                    MicroBudget_setPropertyValue(mDrawObjProperty, "mtingcnt", "0根")
                });
                return
            }
            var pWinTarea_H = Number(pWinTarea.attr("mheight"));
            var fArc_BH = pWinTarea_H - mheight;
            var screen_pWinTarea_H = pWinTarea_H / 1000 * mDrawPixelPerM;
            var screen_fArc_BH = fArc_BH / 1000 * mDrawPixelPerM;
            var outArc = $("#" + mDrawFlag_SvgId + " #" + ObjId + "_g1");
            var inArc = $("#" + mDrawFlag_SvgId + " #" + ObjId + "_g2");
            var outArcSize = $.MicroSVG.getSVGRect(outArc);
            var inArcSize = $.MicroSVG.getSVGRect(inArc);
            var outArc_d = $.MicroSVG.UnifiedSVGPath(outArc.find("path:first").attr("d"));
            var inArc_d = inArc.find("path:first").attr("d");
            var outArc_d_Arr = outArc_d.split(" ");
            outArcSize.width = $.Micro.ConvToNum(outArc_d_Arr[0]);
            var inArc_d_Arr = inArc_d.split(" ");
            var H = mheight / 1000 * mDrawPixelPerM;
            var W = mwidth / 1000 * mDrawPixelPerM;
            var mH = H - KW;
            var boffsetY = $.Micro.IsEmpty(mbid) ? 0 : KW / 2;
            var R = (W * W / 4 + H * H) / (2 * H);
            ARCBR = R;
            var angle = Math.acos((R - H) / (R - KW));
            var Bangle = Math.atan((W / 2) / (R - H));
            ARCTL = (2 * Math.PI * R) * 2 * Bangle / (2 * Math.PI);
            var fArcTing = MicroDraw_getFrameArcBTing(pWin);
            var fArc = fArcTing.fArc;
            var tingType = fArcTing.tingType;
            if (mtingcnt == 0) {} else {
                if (mtingcnt == 1) {
                    x2 = Number(R - TW / 2);
                    y2 = Number(H + screen_fArc_BH - KW + boffsetY)
                } else {
                    if (mtingcnt == 2) {
                        x2 = Number(R);
                        y2 = Number(H + screen_fArc_BH - KW + boffsetY);
                        if (mdivstyle == "equalDIV") {
                            heta = angle / 3;
                            W1 = Number((R - KW) * Math.sin(heta));
                            x1 = Number(R - W1);
                            y1 = Number(R - (R - KW) * Math.cos(heta));
                            TwopointsLine1 = $.MicroSVG.TwopointsLine([[x1, y1], [x2, y2]]);
                            k1 = Number(TwopointsLine1.k);
                            b1 = Number(TwopointsLine1.b);
                            Alpha = Math.atan(k1);
                            j_Alpha = $.Micro.Mradian(Alpha, "h2j")
                        } else {
                            if (mdivstyle == "angleDIV") {
                                j_Alpha = mtingtilt;
                                Alpha = $.Micro.Mradian(j_Alpha, "j2h");
                                k1 = Math.tan(Alpha);
                                b1 = y2 - k1 * x2;
                                Line_RoundCOP0 = MicroDraw_Line_RoundCOP(k1, b1, R, R, (R - KW));
                                x1_1 = Line_RoundCOP0.x1;
                                y1_1 = Line_RoundCOP0.y1;
                                x1_2 = Line_RoundCOP0.x2;
                                y1_2 = Line_RoundCOP0.y2;
                                if (x1_1 < x1_2) {
                                    x1 = x1_1;
                                    y1 = y1_1
                                } else {
                                    x1 = x1_2;
                                    y1 = y1_2
                                }
                            }
                        }
                        W2 = Number(TW / Math.sin(Alpha));
                        x3 = R - W2;
                        y3 = y2;
                        Line_RoundCOP = MicroDraw_Line_RoundCOP(k1, (k1 * W2 + b1), R, R, (R - KW));
                        x4_1 = Line_RoundCOP.x1;
                        y4_1 = Line_RoundCOP.y1;
                        x4_2 = Line_RoundCOP.x2;
                        y4_2 = Line_RoundCOP.y2;
                        if (x4_1 < x4_2) {
                            x4 = x4_1;
                            y4 = y4_1
                        } else {
                            x4 = x4_2;
                            y4 = y4_2
                        }
                        LenP2_P4 = Math.sqrt((x4 - x2) * (x4 - x2) + (y4 - y2) * (y4 - y2));
                        LenP1_P2 = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
                        LenP1_P4 = Math.sqrt((x4 - x1) * (x4 - x1) + (y4 - y1) * (y4 - y1));
                        TwopointsLine2 = $.MicroSVG.TwopointsLine([[x2, y2], [x4, y4]]);
                        k2 = Number(TwopointsLine2.k);
                        delta = Math.atan(k2);
                        Lztw = LenP2_P4 * Math.cos(Alpha - delta);
                        Beta = Math.acos((Lztw - LenP1_P2) / LenP1_P4);
                        j_Beta = $.Micro.Mradian(Beta, "h2j");
                        yx_Line_RoundCOP = MicroDraw_Line_RoundCOP(k1, (k1 * ((YXW + TW) / Math.sin(Alpha)) + b1), R, R, (R - KW));
                        yx_x4_1 = yx_Line_RoundCOP.x1;
                        yx_y4_1 = yx_Line_RoundCOP.y1;
                        yx_x4_2 = yx_Line_RoundCOP.x2;
                        yx_y4_2 = yx_Line_RoundCOP.y2;
                        if (yx_x4_1 < yx_x4_2) {
                            yx_x4 = yx_x4_1;
                            yx_y4 = yx_y4_1
                        } else {
                            yx_x4 = yx_x4_2;
                            yx_y4 = yx_y4_2
                        }
                        yx2_Line_RoundCOP = MicroDraw_Line_RoundCOP(k1, (k1 * ((0 - YXW) / Math.sin(Alpha)) + b1), R, R, (R - KW));
                        yx_x1_1 = yx2_Line_RoundCOP.x1;
                        yx_y1_1 = yx2_Line_RoundCOP.y1;
                        yx_x1_2 = yx2_Line_RoundCOP.x2;
                        yx_y1_2 = yx2_Line_RoundCOP.y2;
                        if (yx_x1_1 < yx_x1_2) {
                            yx_x1 = yx_x1_1;
                            yx_y1 = yx_y1_1
                        } else {
                            yx_x1 = yx_x1_2;
                            yx_y1 = yx_y1_2
                        }
                    } else {
                        if (mtingcnt == 3) {
                            x2 = Number(R - TW / 2);
                            y2 = Number(H + screen_fArc_BH - KW + boffsetY);
                            if (mdivstyle == "equalDIV") {
                                heta = angle / 2;
                                W1 = Number((R - KW) * Math.sin(heta));
                                x1 = Number(R - W1);
                                y1 = Number(R - (R - KW) * Math.cos(heta));
                                TwopointsLine1 = $.MicroSVG.TwopointsLine([[x1, y1], [x2, y2]]);
                                k1 = Number(TwopointsLine1.k);
                                b1 = Number(TwopointsLine1.b);
                                Alpha = Math.atan(k1);
                                j_Alpha = $.Micro.Mradian(Alpha, "h2j")
                            } else {
                                if (mdivstyle == "angleDIV") {
                                    j_Alpha = mtingtilt;
                                    Alpha = $.Micro.Mradian(j_Alpha, "j2h");
                                    k1 = Math.tan(Alpha);
                                    b1 = y2 - k1 * x2;
                                    Line_RoundCOP0 = MicroDraw_Line_RoundCOP(k1, b1, R, R, (R - KW));
                                    x1_1 = Line_RoundCOP0.x1;
                                    y1_1 = Line_RoundCOP0.y1;
                                    x1_2 = Line_RoundCOP0.x2;
                                    y1_2 = Line_RoundCOP0.y2;
                                    if (x1_1 < x1_2) {
                                        x1 = x1_1;
                                        y1 = y1_1
                                    } else {
                                        x1 = x1_2;
                                        y1 = y1_2
                                    }
                                }
                            }
                            W2 = Number(TW / Math.sin(Alpha));
                            x3 = R - TW / 2 - W2;
                            y3 = y2;
                            Line_RoundCOP = MicroDraw_Line_RoundCOP(k1, (k1 * W2 + b1), R, R, (R - KW));
                            x4_1 = Line_RoundCOP.x1;
                            y4_1 = Line_RoundCOP.y1;
                            x4_2 = Line_RoundCOP.x2;
                            y4_2 = Line_RoundCOP.y2;
                            if (x4_1 < x4_2) {
                                x4 = x4_1;
                                y4 = y4_1
                            } else {
                                x4 = x4_2;
                                y4 = y4_2
                            }
                            LenP2_P4 = Math.sqrt((x4 - x2) * (x4 - x2) + (y4 - y2) * (y4 - y2));
                            LenP1_P2 = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
                            LenP1_P4 = Math.sqrt((x4 - x1) * (x4 - x1) + (y4 - y1) * (y4 - y1));
                            TwopointsLine2 = $.MicroSVG.TwopointsLine([[x2, y2], [x4, y4]]);
                            k2 = Number(TwopointsLine2.k);
                            delta = Math.atan(k2);
                            Lztw = LenP2_P4 * Math.cos(Alpha - delta);
                            Beta = Math.acos((Lztw - LenP1_P2) / LenP1_P4);
                            j_Beta = $.Micro.Mradian(Beta, "h2j");
                            switch (mytpjstyle) {
                            case "V":
                                yx_Line_RoundCOP = MicroDraw_Line_RoundCOP(k1, (k1 * ((YXW + TW) / Math.sin(Alpha)) + b1), R, R, (R - KW));
                                break;
                            case "H":
                                yx_Line_RoundCOP = MicroDraw_Line_RoundCOP(k1, (k1 * ((YXW + TW) / Math.sin(Alpha)) + b1), R, R, (R - KW - YXW));
                                yx_rLine_RoundCOP = MicroDraw_Line_RoundCOP(k1, (k1 * ((TW) / Math.sin(Alpha)) + b1), R, R, (R - KW - YXW));
                                yx_rx4_1 = yx_rLine_RoundCOP.x1;
                                yx_ry4_1 = yx_rLine_RoundCOP.y1;
                                yx_rx4_2 = yx_rLine_RoundCOP.x2;
                                yx_ry4_2 = yx_rLine_RoundCOP.y2;
                                if (yx_rx4_1 < yx_rx4_2) {
                                    yx_rx4 = yx_rx4_1;
                                    yx_ry4 = yx_ry4_1
                                } else {
                                    yx_rx4 = yx_rx4_2;
                                    yx_ry4 = yx_ry4_2
                                }
                                break;
                            case "A":
                                yx_Line_RoundCOP = MicroDraw_Line_RoundCOP(k1, (k1 * ((YXW + TW) / Math.sin(Alpha)) + b1), R, R, (R - KW - YXW));
                                break
                            }
                            yx_x4_1 = yx_Line_RoundCOP.x1;
                            yx_y4_1 = yx_Line_RoundCOP.y1;
                            yx_x4_2 = yx_Line_RoundCOP.x2;
                            yx_y4_2 = yx_Line_RoundCOP.y2;
                            if (yx_x4_1 < yx_x4_2) {
                                yx_x4 = yx_x4_1;
                                yx_y4 = yx_y4_1
                            } else {
                                yx_x4 = yx_x4_2;
                                yx_y4 = yx_y4_2
                            }
                            switch (mytpjstyle) {
                            case "V":
                                yx2_Line_RoundCOP = MicroDraw_Line_RoundCOP(k1, (k1 * ((0 - YXW) / Math.sin(Alpha)) + b1), R, R, (R - KW));
                                break;
                            case "H":
                                yx2_Line_RoundCOP = MicroDraw_Line_RoundCOP(k1, (k1 * ((0 - YXW) / Math.sin(Alpha)) + b1), R, R, (R - KW - YXW));
                                yx2_lLine_RoundCOP = MicroDraw_Line_RoundCOP(k1, b1, R, R, (R - KW - YXW));
                                yx_lx1_1 = yx2_lLine_RoundCOP.x1;
                                yx_ly1_1 = yx2_lLine_RoundCOP.y1;
                                yx_lx1_2 = yx2_lLine_RoundCOP.x2;
                                yx_ly1_2 = yx2_lLine_RoundCOP.y2;
                                if (yx_lx1_1 < yx_lx1_2) {
                                    yx_lx1 = yx_lx1_1;
                                    yx_ly1 = yx_ly1_1
                                } else {
                                    yx_lx1 = yx_lx1_2;
                                    yx_ly1 = yx_ly1_2
                                }
                                break;
                            case "A":
                                yx2_Line_RoundCOP = MicroDraw_Line_RoundCOP(k1, (k1 * ((0 - YXW) / Math.sin(Alpha)) + b1), R, R, (R - KW - YXW));
                                break
                            }
                            yx_x1_1 = yx2_Line_RoundCOP.x1;
                            yx_y1_1 = yx2_Line_RoundCOP.y1;
                            yx_x1_2 = yx2_Line_RoundCOP.x2;
                            yx_y1_2 = yx2_Line_RoundCOP.y2;
                            if (yx_x1_1 < yx_x1_2) {
                                yx_x1 = yx_x1_1;
                                yx_y1 = yx_y1_1
                            } else {
                                yx_x1 = yx_x1_2;
                                yx_y1 = yx_y1_2
                            }
                        }
                    }
                }
            }
            ARCLTL = Lztw;
            ARCRTL = Lztw;
            ARCMTL = H - KW - bkw;
            x0 = R - W / 2;
            y0 = H;
            var divX, divY;
            divX = $.Micro.ConvToNum(outArc_d_Arr[0]) - x0;
            divY = $.Micro.ConvToNum(outArc_d_Arr[1]) - y0;
            var attrs;
            var points, OriPoints;
            var gTobj, MTobj, LTobj, RTobj;
            var gYXobj, MYXobj, MYXRobj, LYXobj, RYXobj;
            var gObj;
            var gtxtr;
            var gtxt;
            if (mtingcnt > 0) {
                gTobj = $($.MicroSVG.makeSVG("g", {
                    "id": ObjId + "_ting"
                }));
                $("#" + mDrawFlag_SvgId + " #" + ObjId).append(gTobj);
                gYXobj = $($.MicroSVG.makeSVG("g", {
                    "id": ObjId + "_yx"
                }));
                gYXobj.insertBefore(gTobj);
                if (mtingcnt >= 1) {
                    x1 += divX;
                    y1 += divY;
                    x2 += divX;
                    y2 += divY;
                    x3 += divX;
                    y3 += divY;
                    x4 += divX;
                    y4 += divY;
                    yx_x1 += divX;
                    yx_y1 += divY;
                    yx_lx1 += divX;
                    yx_ly1 += divY;
                    yx_x4 += divX;
                    yx_y4 += divY;
                    yx_rx4 += divX;
                    yx_ry4 += divY
                }
            }
            switch (mtingcnt) {
            case 0:
                if ($.Micro.IsEmpty(mbid)) {
                    break
                }
                var of_x1 = $.Micro.ConvToNum(inArc_d_Arr[0]) + 20;
                var of_y1 = $.Micro.ConvToNum(inArc_d_Arr[1]) - 5;
                if (mbframe == "Y" && mtotallen == "N") {
                    of_y1 -= mDrawThickFrame
                }
                var offsets = [[of_x1, of_y1]];
                for (var i = 0; i < offsets.length; i++) {
                    var guid = MicroDraw_GUID();
                    attrs = {
                        "id": guid,
                        "mtype": mDrawFlag_Glass
                    };
                    gObj = $($.MicroSVG.makeSVG("g", attrs));
                    $("#" + mDrawFlag_SvgId + " #" + ObjId).append(gObj);
                    attrs = {
                        "id": guid + "_txtr",
                        "width": mDraw_GlassFlagRectW * 3 / 4,
                        "height": mDraw_GlassFlagRectH - 3,
                        "fill": mDrawGlassColor,
                        "x": offsets[i][0],
                        "y": offsets[i][1] - mDraw_GlassFlagRectH + 4,
                    };
                    gtxtr = $($.MicroSVG.makeSVG("rect", attrs));
                    gObj.append(gtxtr);
                    attrs = {
                        "id": guid + "_txt",
                        "x": offsets[i][0],
                        "y": offsets[i][1],
                        "fill": "#000000",
                        "font-size": mDraw_GlassFlagFontSize,
                        "font-weight": mDraw_GlassFlagFontWeight
                    };
                    gtxt = $($.MicroSVG.makeSVG("text", attrs));
                    gtxt.get(0).textContent = "F12";
                    gObj.append(gtxt)
                }
                break;
            case 1:
                var x11, y11, x12, y12, x13, y13, x14, y14;
                var dcX = x2 + KW / 2;
                var transform = "matrix(-1 0 0 1 " + dcX * 2 + " 0)";
                var cx = $.Micro.ConvToNum(outArc_d_Arr[0]) + W / 2;
                var cy = $.Micro.ConvToNum(outArc_d_Arr[1]);
                x11 = cx - TW / 2;
                y11 = $.Micro.ConvToNum(outArc_d_Arr[1]) - mH;
                x12 = x11 + TW;
                y12 = y11;
                x13 = x12;
                y13 = y11 + screen_pWinTarea_H - 2 * KW + boffsetY;
                x14 = x11;
                y14 = y13;
                points = [x11 + "," + y11, x12 + "," + y12, x13 + "," + y13, x14 + "," + y14].join(" ");
                attrs = {
                    "id": ObjId + "_pmid",
                    "fill": fillColor,
                    "stroke": "#000000",
                    "stroke-width": "1",
                    "pointer-events": "none",
                    "points": points
                };
                MTobj = $($.MicroSVG.makeSVG("polygon", attrs));
                gTobj.append(MTobj);
                var yx_x11, yx_y11, yx_x12, yx_y12, yx_x13, yx_y13, yx_x14, yx_y14;
                yx_x11 = x11 - mDrawThickYt;
                yx_x12 = x11;
                yx_x13 = x14;
                yx_x14 = yx_x11;
                switch (mytpjstyle) {
                case "V":
                    yx_y11 = y11;
                    yx_y12 = y11;
                    yx_y13 = y13;
                    yx_y14 = y13;
                    break;
                case "H":
                    yx_y11 = y11 + YXW;
                    yx_y12 = y11 + YXW;
                    yx_y13 = y13 - YXW;
                    yx_y14 = y13 - YXW;
                    break;
                case "A":
                    yx_y11 = y11 + YXW;
                    yx_y12 = y11;
                    yx_y13 = y13;
                    yx_y14 = y13 - YXW;
                    break
                }
                points = [yx_x11 + "," + yx_y11, yx_x12 + "," + yx_y12, yx_x13 + "," + yx_y13, yx_x14 + "," + yx_y14].join(" ");
                OriPoints = points;
                attrs = {
                    "id": ObjId + "_pyxmlid",
                    "fill": fillColor,
                    "stroke": "#000000",
                    "stroke-width": "1",
                    "pointer-events": "none",
                    "points": points
                };
                MYXobj = $($.MicroSVG.makeSVG("polygon", attrs));
                gYXobj.append(MYXobj);
                var pointsArr = OriPoints.split(" ");
                var newPoints = "";
                for (var m = 0; m < pointsArr.length; m++) {
                    var xy = pointsArr[m].split(",");
                    xy = $.MicroSVG.Matrix_Transform(transform, xy);
                    if (newPoints != "") {
                        newPoints += " "
                    }
                    newPoints += xy.join(",")
                }
                points = newPoints;
                attrs = {
                    "id": ObjId + "_pyxmrid",
                    "fill": fillColor,
                    "stroke": "#000000",
                    "stroke-width": "1",
                    "pointer-events": "none",
                    "points": points
                };
                MYXobj = $($.MicroSVG.makeSVG("polygon", attrs));
                gYXobj.append(MYXobj);
                var of_x1 = $.Micro.ConvToNum(inArc_d_Arr[0]) + 20;
                var of_y1 = (tingType == "m") ? (fArcTing.Ting_Y - 8) : (fArcTing.Ting_Y - mDrawThickFrame - 8);
                var of_x2 = $.Micro.ConvToNum(inArc_d_Arr[0]) + inArcSize.width * ScaleG_scale - mDraw_GlassFlagRectW * 3 / 4 - 20;
                var of_y2 = of_y1;
                var offsets = [[of_x1, of_y1], [of_x2, of_y2]];
                for (var i = 0; i < offsets.length; i++) {
                    var guid = MicroDraw_GUID();
                    attrs = {
                        "id": guid,
                        "mtype": mDrawFlag_Glass
                    };
                    gObj = $($.MicroSVG.makeSVG("g", attrs));
                    $("#" + mDrawFlag_SvgId + " #" + ObjId).append(gObj);
                    attrs = {
                        "id": guid + "_txtr",
                        "width": mDraw_GlassFlagRectW * 3 / 4,
                        "height": mDraw_GlassFlagRectH - 3,
                        "fill": mDrawGlassColor,
                        "x": offsets[i][0],
                        "y": offsets[i][1] - mDraw_GlassFlagRectH + 4,
                    };
                    gtxtr = $($.MicroSVG.makeSVG("rect", attrs));
                    gObj.append(gtxtr);
                    attrs = {
                        "id": guid + "_txt",
                        "x": offsets[i][0],
                        "y": offsets[i][1],
                        "fill": "#000000",
                        "font-size": mDraw_GlassFlagFontSize,
                        "font-weight": mDraw_GlassFlagFontWeight
                    };
                    gtxt = $($.MicroSVG.makeSVG("text", attrs));
                    gtxt.get(0).textContent = "F12";
                    gObj.append(gtxt)
                }
                break;
            case 2:
                points = [x1 + "," + y1, x2 + "," + y2, x3 + "," + y3, x4 + "," + y4].join(" ");
                attrs = {
                    "id": ObjId + "_pl",
                    "fill": fillColor,
                    "stroke": "#000000",
                    "stroke-width": "1",
                    "pointer-events": "none",
                    "points": points
                };
                LTobj = $($.MicroSVG.makeSVG("polygon", attrs));
                gTobj.append(LTobj);
                var dcX = x2;
                attrs.id = ObjId + "_pr";
                var transform = "matrix(-1 0 0 1 " + dcX * 2 + " 0)";
                var newPoints = "";
                var pointsArr = points.split(" ");
                for (var m = 0; m < pointsArr.length; m++) {
                    var xy = pointsArr[m].split(",");
                    xy = $.MicroSVG.Matrix_Transform(transform, xy);
                    if (newPoints != "") {
                        newPoints += " "
                    }
                    newPoints += xy.join(",")
                }
                attrs.points = newPoints;
                RTobj = $($.MicroSVG.makeSVG("polygon", attrs));
                gTobj.append(RTobj);
                yx_x11 = x4;
                yx_y11 = y4;
                yx_x12 = x3;
                yx_y12 = y3;
                yx_x13 = x3 - W2 / (TW / YXW);
                yx_y13 = y3;
                yx_x14 = yx_x4;
                yx_y14 = yx_y4;
                points = [yx_x11 + "," + yx_y11, yx_x12 + "," + yx_y12, yx_x13 + "," + yx_y13, yx_x14 + "," + yx_y14].join(" ");
                OriPoints = points;
                attrs = {
                    "id": ObjId + "_pyxllid",
                    "fill": fillColor,
                    "stroke": "#000000",
                    "stroke-width": "1",
                    "pointer-events": "none",
                    "points": points
                };
                LYXobj = $($.MicroSVG.makeSVG("polygon", attrs));
                gYXobj.prepend(LYXobj);
                attrs.id = ObjId + "_pyxrrid";
                var newPoints = "";
                var pointsArr = OriPoints.split(" ");
                for (var m = 0; m < pointsArr.length; m++) {
                    var xy = pointsArr[m].split(",");
                    xy = $.MicroSVG.Matrix_Transform(transform, xy);
                    if (newPoints != "") {
                        newPoints += " "
                    }
                    newPoints += xy.join(",")
                }
                attrs.points = newPoints;
                RYXobj = $($.MicroSVG.makeSVG("polygon", attrs));
                gYXobj.append(RYXobj);
                yx_x11 = x1;
                yx_y11 = y1;
                yx_x12 = x2;
                yx_y12 = y2;
                yx_x13 = x2 + W2 / (TW / YXW);
                yx_y13 = y2;
                yx_x14 = yx_x1;
                yx_y14 = yx_y1;
                points = [yx_x11 + "," + yx_y11, yx_x12 + "," + yx_y12, yx_x13 + "," + yx_y13, yx_x14 + "," + yx_y14].join(" ");
                OriPoints = points;
                attrs = {
                    "id": ObjId + "_pyxrlid",
                    "fill": fillColor,
                    "stroke": "#000000",
                    "stroke-width": "1",
                    "pointer-events": "none",
                    "points": points
                };
                LYXobj = $($.MicroSVG.makeSVG("polygon", attrs));
                gYXobj.prepend(LYXobj);
                attrs.id = ObjId + "_pyxlrid";
                var newPoints = "";
                var pointsArr = OriPoints.split(" ");
                for (var m = 0; m < pointsArr.length; m++) {
                    var xy = pointsArr[m].split(",");
                    xy = $.MicroSVG.Matrix_Transform(transform, xy);
                    if (newPoints != "") {
                        newPoints += " "
                    }
                    newPoints += xy.join(",")
                }
                attrs.points = newPoints;
                RYXobj = $($.MicroSVG.makeSVG("polygon", attrs));
                gYXobj.prepend(RYXobj);
                var of_x1 = $.Micro.ConvToNum(inArc_d_Arr[0]) + 20;
                var of_y1 = (tingType == "m") ? (fArcTing.Ting_Y - 8) : (fArcTing.Ting_Y - mDrawThickFrame - 8);
                var of_x2 = x2 - 6;
                var of_y2 = y1 + (y2 - y1) / 2;
                var of_x3 = $.Micro.ConvToNum(inArc_d_Arr[0]) + inArcSize.width * ScaleG_scale - mDraw_GlassFlagRectW * 3 / 4 - 18;
                var of_y3 = of_y1;
                var offsets = [[of_x1, of_y1], [of_x2, of_y2], [of_x3, of_y3]];
                for (var i = 0; i < offsets.length; i++) {
                    var guid = MicroDraw_GUID();
                    attrs = {
                        "id": guid,
                        "mtype": mDrawFlag_Glass
                    };
                    gObj = $($.MicroSVG.makeSVG("g", attrs));
                    $("#" + mDrawFlag_SvgId + " #" + ObjId).append(gObj);
                    attrs = {
                        "id": guid + "_txtr",
                        "width": mDraw_GlassFlagRectW * 3 / 4,
                        "height": mDraw_GlassFlagRectH - 3,
                        "fill": mDrawGlassColor,
                        "x": offsets[i][0],
                        "y": offsets[i][1] - mDraw_GlassFlagRectH + 4,
                    };
                    gtxtr = $($.MicroSVG.makeSVG("rect", attrs));
                    gObj.append(gtxtr);
                    attrs = {
                        "id": guid + "_txt",
                        "x": offsets[i][0],
                        "y": offsets[i][1],
                        "fill": "#000000",
                        "font-size": mDraw_GlassFlagFontSize,
                        "font-weight": mDraw_GlassFlagFontWeight
                    };
                    gtxt = $($.MicroSVG.makeSVG("text", attrs));
                    gtxt.get(0).textContent = "F12";
                    gObj.append(gtxt)
                }
                break;
            case 3:
                var x11, y11, x12, y12, x13, y13, x14, y14;
                var dcX = x2 + KW / 2;
                var transform = "matrix(-1 0 0 1 " + dcX * 2 + " 0)";
                var cx = $.Micro.ConvToNum(outArc_d_Arr[0]) + W / 2;
                var cy = $.Micro.ConvToNum(outArc_d_Arr[1]);
                x11 = cx - TW / 2;
                y11 = $.Micro.ConvToNum(outArc_d_Arr[1]) - mH;
                x12 = x11 + TW;
                y12 = y11;
                x13 = x12;
                y13 = y11 + screen_pWinTarea_H - 2 * KW + boffsetY;
                x14 = x11;
                y14 = y13;
                points = [x11 + "," + y11, x12 + "," + y12, x13 + "," + y13, x14 + "," + y14].join(" ");
                attrs = {
                    "id": ObjId + "_pmid",
                    "fill": fillColor,
                    "stroke": "#000000",
                    "stroke-width": "1",
                    "pointer-events": "none",
                    "points": points
                };
                MTobj = $($.MicroSVG.makeSVG("polygon", attrs));
                gTobj.append(MTobj);
                var yx_x11, yx_y11, yx_x12, yx_y12, yx_x13, yx_y13, yx_x14, yx_y14;
                yx_x11 = x11 - YXW;
                yx_x12 = x11;
                yx_x13 = x14;
                yx_x14 = yx_x11;
                switch (mytpjstyle) {
                case "V":
                    yx_y11 = y11;
                    yx_y12 = y11;
                    yx_y13 = y13;
                    yx_y14 = y13;
                    break;
                case "H":
                    yx_y11 = y11 + YXW;
                    yx_y12 = y11 + YXW;
                    yx_y13 = y13 - YXW;
                    yx_y14 = (k1 * (yx_x14 - divX - YXW / Math.sin(Alpha)) + b1) + divY;
                    break;
                case "A":
                    yx_y11 = y11 + YXW;
                    yx_y12 = y11;
                    yx_y13 = y13;
                    yx_y14 = (k1 * (yx_x14 - divX - YXW / Math.sin(Alpha)) + b1) + divY;
                    break
                }
                points = [yx_x11 + "," + yx_y11, yx_x12 + "," + yx_y12, yx_x13 + "," + yx_y13, yx_x14 + "," + yx_y14].join(" ");
                OriPoints = points;
                attrs = {
                    "id": ObjId + "_pyxmlid",
                    "fill": fillColor,
                    "stroke": "#000000",
                    "stroke-width": "1",
                    "pointer-events": "none",
                    "points": points
                };
                MYXobj = $($.MicroSVG.makeSVG("polygon", attrs));
                gYXobj.append(MYXobj);
                var pointsArr = OriPoints.split(" ");
                var newPoints = "";
                for (var m = 0; m < pointsArr.length; m++) {
                    var xy = pointsArr[m].split(",");
                    xy = $.MicroSVG.Matrix_Transform(transform, xy);
                    if (newPoints != "") {
                        newPoints += " "
                    }
                    newPoints += xy.join(",")
                }
                points = newPoints;
                attrs = {
                    "id": ObjId + "_pyxmrid",
                    "fill": fillColor,
                    "stroke": "#000000",
                    "stroke-width": "1",
                    "pointer-events": "none",
                    "points": points
                };
                MYXobj = $($.MicroSVG.makeSVG("polygon", attrs));
                gYXobj.append(MYXobj);
                points = [x1 + "," + y1, x2 + "," + y2, x3 + "," + y3, x4 + "," + y4].join(" ");
                OriPoints = points;
                attrs = {
                    "id": ObjId + "_pl",
                    "fill": fillColor,
                    "stroke": "#000000",
                    "stroke-width": "1",
                    "pointer-events": "none",
                    "points": points
                };
                LTobj = $($.MicroSVG.makeSVG("polygon", attrs));
                gTobj.append(LTobj);
                attrs.id = ObjId + "_pr";
                var newPoints = "";
                var pointsArr = OriPoints.split(" ");
                for (var m = 0; m < pointsArr.length; m++) {
                    var xy = pointsArr[m].split(",");
                    xy = $.MicroSVG.Matrix_Transform(transform, xy);
                    if (newPoints != "") {
                        newPoints += " "
                    }
                    newPoints += xy.join(",")
                }
                attrs.points = newPoints;
                RTobj = $($.MicroSVG.makeSVG("polygon", attrs));
                gTobj.append(RTobj);
                switch (mytpjstyle) {
                case "V":
                    yx_x11 = x4;
                    yx_y11 = y4;
                    yx_x14 = yx_x4;
                    yx_y14 = yx_y4;
                    yx_x12 = x3;
                    yx_y12 = y3;
                    yx_x13 = x3 - W2 / (TW / YXW);
                    yx_y13 = y3;
                    break;
                case "H":
                    yx_x11 = yx_rx4;
                    yx_y11 = yx_ry4;
                    yx_x14 = yx_x4;
                    yx_y14 = yx_y4;
                    yx_x12 = ((y3 - YXW - divY) - (k1 * ((TW) / Math.sin(Alpha)) + b1)) / k1 + divX;
                    yx_y12 = y3 - YXW;
                    yx_x13 = yx_x12 - W2 / (TW / YXW);
                    yx_y13 = y3 - YXW;
                    break;
                case "A":
                    yx_x11 = yx_x4;
                    yx_y11 = yx_y4;
                    yx_x12 = x4;
                    yx_y12 = y4;
                    yx_x13 = x3;
                    yx_y13 = y3;
                    yx_x14 = ((y3 - YXW - divY) - (k1 * ((YXW + TW) / Math.sin(Alpha)) + b1)) / k1 + divX;
                    yx_y14 = y3 - YXW;
                    break
                }
                points = [yx_x11 + "," + yx_y11, yx_x12 + "," + yx_y12, yx_x13 + "," + yx_y13, yx_x14 + "," + yx_y14].join(" ");
                OriPoints = points;
                attrs = {
                    "id": ObjId + "_pyxllid",
                    "fill": fillColor,
                    "stroke": "#000000",
                    "stroke-width": "1",
                    "pointer-events": "none",
                    "points": points
                };
                LYXobj = $($.MicroSVG.makeSVG("polygon", attrs));
                gYXobj.prepend(LYXobj);
                attrs.id = ObjId + "_pyxrrid";
                var newPoints = "";
                var pointsArr = OriPoints.split(" ");
                for (var m = 0; m < pointsArr.length; m++) {
                    var xy = pointsArr[m].split(",");
                    xy = $.MicroSVG.Matrix_Transform(transform, xy);
                    if (newPoints != "") {
                        newPoints += " "
                    }
                    newPoints += xy.join(",")
                }
                attrs.points = newPoints;
                RYXobj = $($.MicroSVG.makeSVG("polygon", attrs));
                gYXobj.append(RYXobj);
                switch (mytpjstyle) {
                case "V":
                    yx_x11 = x1;
                    yx_y11 = y1;
                    yx_x14 = yx_x1;
                    yx_y14 = yx_y1;
                    yx_x12 = x2;
                    yx_y12 = y2;
                    yx_x13 = x2 + W2 / (TW / YXW);
                    yx_y13 = y2;
                    break;
                case "H":
                    yx_x11 = yx_lx1;
                    yx_y11 = yx_ly1;
                    yx_x14 = yx_x1;
                    yx_y14 = yx_y1;
                    yx_x12 = x2;
                    yx_y12 = y2;
                    yx_x13 = x2;
                    yx_y13 = k1 * (x2 - divX) + (k1 * ((0 - YXW) / Math.sin(Alpha)) + b1) + divY;
                    break;
                case "A":
                    yx_x11 = x1;
                    yx_y11 = y1;
                    yx_x14 = yx_x1;
                    yx_y14 = yx_y1;
                    yx_x12 = x2 - Number(YXW / Math.sin(Alpha));
                    yx_y12 = y2 - YXW;
                    yx_x13 = x2 + W2 / (TW / YXW);
                    yx_y13 = y2;
                    break
                }
                points = [yx_x11 + "," + yx_y11, yx_x12 + "," + yx_y12, yx_x13 + "," + yx_y13, yx_x14 + "," + yx_y14].join(" ");
                OriPoints = points;
                attrs = {
                    "id": ObjId + "_pyxrlid",
                    "fill": fillColor,
                    "stroke": "#000000",
                    "stroke-width": "1",
                    "pointer-events": "none",
                    "points": points
                };
                LYXobj = $($.MicroSVG.makeSVG("polygon", attrs));
                gYXobj.prepend(LYXobj);
                attrs.id = ObjId + "_pyxlrid";
                var newPoints = "";
                var pointsArr = OriPoints.split(" ");
                for (var m = 0; m < pointsArr.length; m++) {
                    var xy = pointsArr[m].split(",");
                    xy = $.MicroSVG.Matrix_Transform(transform, xy);
                    if (newPoints != "") {
                        newPoints += " "
                    }
                    newPoints += xy.join(",")
                }
                attrs.points = newPoints;
                RYXobj = $($.MicroSVG.makeSVG("polygon", attrs));
                gYXobj.prepend(RYXobj);
                var of_x1 = $.Micro.ConvToNum(inArc_d_Arr[0]) + 20;
                var of_y1 = (tingType == "m") ? (fArcTing.Ting_Y - 8) : (fArcTing.Ting_Y - mDrawThickFrame - 8);
                var of_x2 = x14 - mDraw_GlassFlagRectW * 3 / 4 - 12;
                var of_y2 = y14 - (y14 - y11) / 2;
                var of_x3 = x11 + mDraw_GlassFlagRectW * 3 / 4 - 6;
                var of_y3 = y14 - (y14 - y11) / 2;
                var of_x4 = $.Micro.ConvToNum(inArc_d_Arr[0]) + inArcSize.width * ScaleG_scale - mDraw_GlassFlagRectW * 3 / 4 - 18;
                var of_y4 = of_y1;
                var offsets = [[of_x1, of_y1], [of_x2, of_y2], [of_x3, of_y3], [of_x4, of_y4]];
                for (var i = 0; i < offsets.length; i++) {
                    var guid = MicroDraw_GUID();
                    attrs = {
                        "id": guid,
                        "mtype": mDrawFlag_Glass
                    };
                    gObj = $($.MicroSVG.makeSVG("g", attrs));
                    gObj.insertBefore(gYXobj);
                    attrs = {
                        "id": guid + "_txtr",
                        "width": mDraw_GlassFlagRectW * 3 / 4,
                        "height": mDraw_GlassFlagRectH - 3,
                        "fill": mDrawGlassColor,
                        "x": offsets[i][0],
                        "y": offsets[i][1] - mDraw_GlassFlagRectH + 4,
                    };
                    gtxtr = $($.MicroSVG.makeSVG("rect", attrs));
                    gObj.append(gtxtr);
                    attrs = {
                        "id": guid + "_txt",
                        "x": offsets[i][0],
                        "y": offsets[i][1],
                        "fill": "#000000",
                        "font-size": mDraw_GlassFlagFontSize,
                        "font-weight": mDraw_GlassFlagFontWeight
                    };
                    gtxt = $($.MicroSVG.makeSVG("text", attrs));
                    gtxt.get(0).textContent = "F12";
                    gObj.append(gtxt)
                }
                break
            }
            MicroDraw_reflashGlassFlag();
            if ($.Micro.IsEmpty(j_Alpha)) {
                j_Alpha = ""
            } else {
                j_Alpha = $.Micro.MRound(j_Alpha, 1)
            }
            FrameArcObj.attr("mtingtilt", j_Alpha);
            MicroBudget_setPropertyValue(mDrawObjProperty, "mtingtilt", j_Alpha);
            if (myt == "N") {
                $("#" + ObjId + "_yx").hide();
                $("#" + ObjId + "_g3").hide()
            } else {
                $("#" + ObjId + "_yx").show();
                $("#" + ObjId + "_g3").show()
            }
        }
    }
    MicroDraw_ShowGlassFan(ObjId)
}
function MicroDraw_AddObjDelFrameArc(C) {
    var D = Number(C.attr("mx"));
    var E = Number(C.attr("my"));
    if (D == 0 && E == 0) {
        var A = C.parents("[mtype=" + mDrawFlag_Win + "]");
        var B = A.find("[mtype=" + mDrawFlag_FrameArc + "]:first");
        if (B.length > 0) {
            B.attr("mtingcnt", "0根");
            MicroDraw_Redraw(B.attr("id"))
        }
    }
}
function MicroDraw_getFrameArcBTing(I) {
    var A = {};
    var D = I.find("[mtype=" + mDrawFlag_FrameArc + "]:first");
    var C;
    if (D.length == 0) {
        A.fArc = null
    } else {
        A.fArc = D;
        var B = I.find("[mtype=" + mDrawFlag_Glass + "][mx=0][my=0],[mtype=" + mDrawFlag_Area + "][mx=0][my=0]");
        var J = B.attr("mbid");
        var G = null;
        var H, F, E;
        if (!$.Micro.IsEmpty(J)) {
            C = "m";
            G = I.find("#" + J);
            H = I.find("#" + J + "_r1");
            F = Number(H.attr("y"));
            E = F - mDrawThickYt
        } else {
            C = "b";
            G = I.find("[mtype=" + mDrawFlag_FrameRect + "]");
            J = G.attr("id");
            H = I.find("#" + J + "_r1");
            F = Number(H.attr("y"));
            mblidObj_r1_h = Number(H.attr("height"));
            E = F + mblidObj_r1_h
        }
        A.tingType = C;
        A.Ting_Y = E
    }
    return A
}
function MicroDraw_EditAbleEasyUIRow(tableID, tag, value, editable, disabled) {
    if ($("#" + tableID).length == 0) {
        return true
    }
    var rows;
    var tableType;
    if ($("#" + tableID).hasClass("easyui-propertygrid")) {
        rows = $("#" + tableID).propertygrid("getRows");
        tableType = "propertygrid"
    } else {
        if ($("#" + tableID).hasClass("easyui-datagrid")) {
            rows = $("#" + tableID).datagrid("getRows");
            tableType = "datagrid"
        }
    }
    $.each(rows,
    function(i, row) {
        eval("var _editable=row." + tag);
        if (!$.Micro.IsEmpty(_editable) && _editable == value) {
            row.editor.options.editable = editable;
            if (!$.Micro.IsEmpty(disabled)) {
                if (disabled) {
                    row.editor.options.disabled = disabled
                } else {
                    delete row.editor.options.disabled
                }
            }
            return false
        }
    })
}
function MicroDraw_FrameArc_SyncSetting(tObj, pName) {
    if (tObj.length == 0) {
        return true
    }
    var tWin = tObj.parents("[mtype=" + mDrawFlag_Win + "]");
    if (tWin.length == 0) {
        return true
    }
    var tObj2 = null;
    with(tObj) {
        var mtype = attr("mtype");
        var pNameVal = attr(pName)
    }
    if (mtype == mDrawFlag_FrameArc) {
        tObj2 = tWin.find("[mtype=" + mDrawFlag_Glass + "][mx=0][my=0],[mtype=" + mDrawFlag_Area + "][mx=0][my=0]");
        if (pName == "myt") {} else {
            if (pName == "mytpjstyle") {
                pNameVal = (pNameVal == "A") ? "45": pNameVal
            }
        }
    } else {
        if (mtype == mDrawFlag_Glass) {
            var mx = Number(tObj.attr("mx"));
            var my = Number(tObj.attr("my"));
            if (mx != 0 || my != 0) {
                return true
            }
            tObj2 = tWin.find("[mtype=" + mDrawFlag_FrameArc + "]:first");
            if (pName == "myt") {} else {
                if (pName == "mytpjstyle") {
                    pNameVal = pNameVal == "45" ? "A": pNameVal
                }
            }
        }
    }
    if (tObj2 && tObj2.length > 0) {
        tObj2.attr(pName, pNameVal);
        MicroDraw_Redraw(tObj2.attr("id"))
    }
}
function MicroDraw_temp_cal(A, C, B, D, E) {
    var F = "";
    F = MicroDraw_genData_calcExp(A, C, B, D);
    return F
}
function getMatMoney(A) {
    var B = 0;
    var C = MicroBudget_getPropertyValue(mBudgetWinProperty, "Numx");
    if ($.Micro.IsEmpty(mPublicMatMoneyObj)) {
        para = {};
        para.action = "getMatMoney";
        para.Numx = C;
        para.type = A;
        $.ajax({
            url: "../MicroBudget/WEB_BUDGET.ashx",
            data: para,
            type: "POST",
            dataType: "text",
            async: false,
            success: function(D) {
                if (D.substr(0, 2) == "ok") {
                    mPublicMatMoneyObj = $.parseJSON(D.substr(3))
                } else {
                    B = 0
                }
            }
        })
    }
    switch (A) {
    case "PR":
        B = Number(mPublicMatMoneyObj.PR);
        break;
    case "GL":
        B = Number(mPublicMatMoneyObj.GL);
        break;
    case "WJ":
        B = Number(mPublicMatMoneyObj.WJ);
        break;
    default:
        B = Number(mPublicMatMoneyObj.ALL);
        break
    }
    if (isNaN(B)) {
        B = 0
    }
    return B
}
function MicroDraw_hasTlc(B, F, G) {
    var A = $("#" + B + " [mtype='" + mDrawFlag_FrameRect + "']")[0].getAttribute("id");
    if (isEmptyOrNull(A)) {
        return false
    }
    var E = $("#" + A)[0].getAttribute("mwidth");
    var I = $("#" + A)[0].getAttribute("mheight");
    var D = 0;
    if (isEmptyOrNull(F)) {
        D = 0
    } else {
        D = $("#" + F)[0].getAttribute("mx")
    }
    var C = 0;
    if (isEmptyOrNull(G)) {
        C = E
    } else {
        C = $("#" + G)[0].getAttribute("mx")
    }
    var H = false;
    $("#" + B + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(K, L) {
        var J = L.getAttribute("id");
        var N = $("#" + J)[0].getAttribute("mx");
        var M = $("#" + J)[0].getAttribute("mwidth");
        if ((Number(N) >= Number(D) && Number(N) < Number(C)) || (Number(M) >= Number(D) && Number(M) < Number(C))) {
            H = true
        }
    });
    if (H) {
        return true
    } else {
        return false
    }
}
function MobileFrame_getCurrMobileViewScale(C) {
    var B = 1;
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
        var A = $("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').attr("transform");
        B = Number(A.replace("scale(", "").replace(")", ""));
        B = B || 1
    }
    return B
}
function MobileFrame_getMobileViewScale(K) {
    var A = 30;
    var D = 190;
    var J = Number($(document.body).width()) - Number(A);
    var E = Number($(document.body).height()) - Number(D);
    var F = MicroDraw_getSvgEdge(K);
    var G = F.split(",");
    var B = Number(G[2]);
    var C = Number(G[3]);
    var H = Number(J) / Number(B);
    var I = Number(E) / Number(C);
    if (Number(H) <= Number(I)) {
        return H
    } else {
        return I
    }
}
function MobileFrame_addScaleG(svgId, scale) {
    var uiType = getMicroPCMobileUI();
    if (uiType == "PC") {
        return true
    }
    MobileFrame_delScaleG(svgId);
    var svgNode = $("#" + svgId)[0];
    if ($("#" + svgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length == 0) {
        var guid = MicroDraw_GUID();
        var g = document.createElementNS(mDrawSvgNS, "g");
        g.setAttributeNS(null, "id", guid);
        g.setAttributeNS(null, "mtype", mDrawFlag_ScaleG);
        g.setAttributeNS(null, "transform", "scale(" + scale + ")");
        svgNode.appendChild(g);
        $.each($("#" + svgId).children(),
        function(i, c) {
            if (guid != c.id) {
                g.appendChild($(c)[0])
            }
        });
        with($("#" + svgId + ' [mtype="' + mDrawFlag_combCoorX + '"]')) {
            if (length > 0) {
                appendTo($(g))
            }
        }
        with($("#" + svgId + ' [mtype="' + mDrawFlag_combCoorY + '"]')) {
            if (length > 0) {
                appendTo($(g))
            }
        }
        with($("#" + svgId + ' [mtype="' + mDrawFlag_Custom_ruler + '"]')) {
            if (length > 0) {
                appendTo($(g))
            }
        }
        MicroDraw_autoGdPic()
    }
}
function MobileFrame_delScaleG(B) {
    if ($("#" + B + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
        var A = $("#" + B)[0];
        $.each($("#" + B + ' [mtype="' + mDrawFlag_ScaleG + '"]').children(),
        function(C, D) {
            A.appendChild($(D)[0])
        });
        A.removeChild($("#" + B + ' [mtype="' + mDrawFlag_ScaleG + '"]')[0])
    }
}
function MicroDraw_ShowGlassFan(objId) {
    try {
        var tObj = $("#" + mDrawFlag_SvgId + " #" + objId);
        var tWin = tObj.parents("[mtype=" + mDrawFlag_Win + "]");
        var tFrame;
        if (tWin.length > 0) {
            var tmtype = tObj.attr("mtype");
            if (tmtype == mDrawFlag_FrameRect) {
                tFrame = tObj
            } else {
                tFrame = tWin.find("[mtype=" + mDrawFlag_FrameRect + "]:first")
            }
            var mshowglassfan = tFrame.attr("mshowglassfan");
            if ($.Micro.IsEmpty(mshowglassfan)) {
                mshowglassfan = "Y"
            }
            with(tWin.find("rect[id*='_txt'],text[id*='_txt']")) {
                if (length > 0) {
                    if (mshowglassfan == "Y") {
                        show()
                    } else {
                        hide()
                    }
                }
            }
        } else {
            tWin = tObj.parents("[mtype=" + mDrawFlag_WinArcs + "]");
            if (tWin.length == 0) {
                return
            }
            tFrame = tWin.find("[mtype=" + mDrawFlag_FrameArcs + "]:first");
            var mshowglassfan = tFrame.attr("mshowglassfan") || "Y";
            with(tWin.find("[tag=glassfan]")) {
                if (mshowglassfan == "Y") {
                    show()
                } else {
                    hide()
                }
            }
        }
    } catch(e) {
        console.log(e.name + ":" + e.message)
    }
}
function MicroDraw_getTLGlassVTypes(B) {
    if (B.length == 0) {
        return []
    }
    var C = B.find("[mtype=" + mDrawFlag_TingH + "]");
    var A = [];
    if (C.length > 0) {
        $.each(C,
        function(D, E) {
            var G = $(E).attr("id");
            var F = MicroDraw_getTlcTingKind(G).split(",")[0];
            switch (F) {
            case "上滑上固":
                F = "上固";
                break;
            case "下滑下固":
                F = "下固";
                break;
            default:
                F = "无上下固"
            }
            if ($.inArray(F, A) == -1) {
                A.push(F)
            }
        })
    } else {
        A.push("无上下固")
    }
    return A
}
function MicroDraw_inTLGlassVTypes(A, B) {
    if ($.Micro.IsEmpty(A)) {
        return false
    }
    var C = MicroDraw_getTLGlassVTypes(B);
    if ($.inArray(A, C) > -1) {
        return true
    } else {
        return false
    }
}
function MicroDraw_Redraw_FrameWall(D) {
    if ($("#" + mDrawFlag_SvgId + " #" + D).length == 0) {
        return true
    }
    var A = MicroDraw_GetObjProperty(D, "mwall");
    if (A == "Y") {
        var E = $("#" + mDrawFlag_SvgId + ' [mwallbelongto="' + D + '"]')[0];
        var Q = MicroDraw_GUID();
        var N = 0;
        var O = 0;
        var G = mDrawWallColor;
        var C = "#000000";
        var J = "1px";
        var B = mDrawWallWidth;
        var M = mDrawWallHeight;
        var K = mDrawWallRow;
        var I;
        if (!isEmptyOrNull(E)) {
            Q = E.getAttribute("id");
            G = E.getAttribute("mfill");
            C = E.getAttribute("mstroke");
            J = E.getAttribute("mstrokewidth");
            B = E.getAttribute("mwallwidth");
            M = E.getAttribute("mwallheight");
            K = E.getAttribute("mwallrow");
            E.parentNode.removeChild(E)
        }
        N = $("#" + D + "_r1")[0].getAttribute("x");
        O = Number($("#" + D + "_r1")[0].getAttribute("y")) + Number($("#" + D + "_r1")[0].getAttribute("height"));
        I = $("#" + D)[0].getAttribute("mwidth");
        var L = $("#" + D)[0].parentNode.getAttribute("mcoorxoffset");
        if (isEmptyOrNull(L)) {
            L = ""
        }
        if (L.indexOf("H") >= 0 || L == "") {
            if ($.Micro.IsEmpty($("#" + D).parents("[mtype]").attr("mcoorxoffset"))) {
                $("#" + D)[0].parentNode.setAttribute("mcoorxoffset", "Y + H");
                $("#" + D)[0].parentNode.setAttribute("mcoorxoffsetval", "100")
            }
        }
        MicroDraw_AddCustom_Wall(Q, N, O, I, G, B, M, K, D);
        MicroDraw_ShowCoordinate()
    } else {
        var E = $("#" + mDrawFlag_SvgId + ' [mwallbelongto="' + D + '"]')[0];
        var Q = "";
        if (!isEmptyOrNull(E)) {
            E.parentNode.removeChild(E);
            var L = $("#" + D)[0].parentNode.getAttribute("mcoorxoffset");
            if (isEmptyOrNull(L)) {
                L = ""
            }
            if (L.indexOf("H") >= 0 || L == "") {
                var H = $("#" + D)[0].parentNode.getAttribute("id");
                $("#" + H).removeAttr("mcoorxoffset");
                $("#" + H).removeAttr("mcoorxoffsetval");
                var F = $("#" + mDrawFlag_SvgId + ' [mwinid="' + $("#" + D)[0].parentNode.getAttribute("id") + '"]')[0];
                var P = F.getAttribute("id");
                $("#" + P + " text").each(function(R, S) {
                    S.setAttributeNS(null, "y", Number(S.getAttribute("y")) + Number( - 50))
                });
                $("#" + P + " line").each(function(R, S) {
                    S.setAttributeNS(null, "y1", Number(S.getAttribute("y1")) + Number( - 50));
                    S.setAttributeNS(null, "y2", Number(S.getAttribute("y2")) + Number( - 50))
                })
            }
        }
    }
}
function MicroDraw_Cal_JOINAREA(K, E, B, F) {
    var C = MicroDraw_getCombWinIDs("all");
    var J = C.Combs;
    var G = C.Wins;
    var D = C.CMs;
    var I = 0;
    for (var H = 0; H < G.length; H++) {
        twin = $("#" + mDrawFlag_SvgId + " #" + G[H]);
        tframe = twin.find("[mtype=" + mDrawFlag_FrameRect + "]");
        var A = MicroDraw_genData_calcExp(K, E, tframe.attr("id"), B, 0, F);
        if (E.indexOf("JOINAREA") > -1) {
            I = Number(A);
            return I
        } else {
            I += Number(A)
        }
    }
    for (var H = 0; H < D.length; H++) {
        var A = MicroBudget_calcFrameArea(D[H]);
        I += Number(A)
    }
    return I
}
function MicroDraw_ChangeCMAttrToDatas(objId) {
    var rows = $("#" + mDrawPrProperty).datagrid("getRows");
    var tCM = $("#" + mDrawFlag_SvgId + " #" + objId);
    if (tCM.length == 0) {
        return
    }
    var mtype;
    var mprid, mwidth, mheight, mangle, mcnt, mcnt_exp, mheight_exp, mwidth_exp;
    var LenExp, Len;
    with(tCM) {
        mtype = attr("mtype");
        mprid = attr("mprid") || "";
        mwidth = attr("mwidth");
        mheight = attr("mheight");
        mangle = attr("mangle") || 0;
        mcnt_exp = attr("mcnt_exp") || "";
        mheight_exp = attr("mheight_exp") || "";
        mwidth_exp = attr("mwidth_exp") || ""
    }
    $.each(rows,
    function(i, row) {
        if (row.ObjId == objId) {
            var idx = $("#" + mDrawPrProperty).datagrid("getRowIndex", row);
            if (mtype == mDrawFlag_Custom_CornerMaterial) {
                LenExp = mheight_exp;
                Len = mheight
            } else {
                LenExp = mwidth_exp;
                Len = mwidth
            }
            $("#" + mDrawPrProperty).propertygrid("updateRow", {
                index: idx,
                row: {
                    ProductId: mprid,
                    CntExp: mcnt_exp,
                    LenExp: LenExp,
                    Angle: mangle + "-" + mangle
                }
            });
            return true
        }
    })
}
function MicroDraw_getGDFromSVG(D, A) {
    if (D.length == 0) {
        return
    }
    var C = $.Micro.MergeObjs([D.find("[mgdbelongto]"), D.find("[mtype=" + mDrawFlag_Definedgd + "]")]);
    if (A && A.length > 0) {
        for (var B = 0; B < A.length; B++) {
            C = $.Micro.MergeObjs([C, D.find(A[B])])
        }
    }
    if (C.length == 0) {
        return
    }
    var E = D.clone().insertAfter(D);
    E.html("");
    $.each(C,
    function(F, G) {
        E.append($(G))
    });
    D.remove()
}
function MicroDraw_Louver_Add(selNode, nid, objAttr) {
    if (selNode.length == 0) {
        return true
    }
    var selArea = selNode.parent();
    var attr, newG, newPobj, newObj;
    var x, y, _width, _height;
    var x2, y2, _width2, _height2;
    var mx, my, mwidth, mheight, mlid, mrid, mtid, mbid;
    var fanThick = Number(mDrawSvgViewBox * mDrawThickFan);
    var mfanpjstyle;
    if (objAttr) {
        mfanpjstyle = objAttr.mfanpjstyle
    }
    mfanpjstyle = mfanpjstyle || "45";
    with(selNode) {
        x = Number(attr("x"));
        y = Number(attr("y"));
        _width = Number(attr("width"));
        _height = Number(attr("height"))
    }
    with(selArea[0]) {
        mx = getAttribute("mx");
        my = getAttribute("my");
        mwidth = getAttribute("mwidth");
        mheight = getAttribute("mheight");
        mlid = getAttribute("mlid");
        mrid = getAttribute("mrid");
        mtid = getAttribute("mtid");
        mbid = getAttribute("mbid")
    }
    attr = {
        "id": nid,
        "mtype": mDrawFlag_Louver,
        "mx": mx,
        "my": my,
        "mwidth": mwidth,
        "mheight": mheight,
        "mlid": mlid,
        "mrid": mrid,
        "mtid": mtid,
        "mbid": mbid,
        "mfanpjstyle": mfanpjstyle,
        "mcx_exp": "",
        "mcy_exp": "",
        "mcwidth_exp": "",
        "mcheight_exp": ""
    };
    newG = $.MicroSVG.makeSVG("g", attr);
    selArea.parent().append($(newG));
    selArea.remove();
    attr = {
        "id": nid + "_r1",
        "x": x,
        "y": y,
        "width": _width,
        "height": _height,
        "fill": mDrawProductColor,
        "mselect": "1",
        "stroke": "#000",
        "stroke-width": mDrawSvgViewBox + "px"
    };
    newObj = $.MicroSVG.makeSVG("rect", attr);
    $(newG).append($(newObj));
    x2 = x + fanThick;
    y2 = y + fanThick;
    _width2 = _width - 2 * fanThick;
    _height2 = _height - 2 * fanThick;
    attr = {
        "id": nid + "_louverBg",
        "x": x,
        "y": y,
        "width": _width,
        "height": _height,
        "fill": mDrawLouverBgColor,
        "mselect": "1",
        "stroke": "#000",
        "stroke-width": "1px"
    };
    newObj = $.MicroSVG.makeSVG("rect", attr);
    $(newG).append($(newObj));
    attr = {
        "id": nid + "_louver"
    };
    newPobj = $.MicroSVG.makeSVG("g", attr);
    $(newG).append($(newPobj));
    var lineWidth = 1;
    var fromX = x + lineWidth * mDrawSvgViewBox;
    var endX = x + _width - lineWidth * mDrawSvgViewBox;
    var fromY = y;
    var endY = y + _height - fanThick;
    var sY = fromY;
    var idNum = 1;
    while (Number(sY) - Number(mDrawDIVLouver * mDrawSvgViewBox) < Number(endY)) {
        attr = {
            "id": nid + "_louver" + idNum,
            "x": fromX,
            "y": sY,
            "width": endX - fromX,
            "height": mDrawSvgViewBox * mDrawThickLouver,
            "fill": "url(#LouverLinear)",
            "stroke": "none",
            "stroke-width": "0"
        };
        newObj = $.MicroSVG.makeSVG("rect", attr);
        $(newPobj).append($(newObj));
        sY = sY + Number(mDrawDIVLouver * mDrawSvgViewBox) + Number(mDrawThickLouver * mDrawSvgViewBox);
        idNum++
    }
}
function MicroDraw_Louver_ClickAddLouver() {
    if (! (mDrawSelectObjId.length > 0)) {
        jQuery.messager.alert("提示:", "请选择对象后再增加百叶！", "info");
        return
    }
    var S = $("[mselected='1']")[0];
    var Y = S.parentNode;
    var G = Y.parentNode;
    if ($(S).parents("[mtype=" + mDrawFlag_WinArcs + "]").length > 0) {
        jQuery.messager.alert("提示:", "暂不支持外弧窗增加扇功能！", "info");
        return
    }
    if (Y.getAttribute("mtype") == mDrawFlag_FrameRect || Y.getAttribute("mtype") == mDrawFlag_TingV || Y.getAttribute("mtype") == mDrawFlag_TingH) {
        jQuery.messager.alert("提示:", "不能在当前区域增加百叶！", "info");
        return
    }
    MicroDraw_AddObjDelFrameArc($(Y));
    var A;
    var a, P, K, V;
    var D, I, R, W;
    var X, M, Q, Z;
    var O;
    var L, B, F, J;
    A = Y.getAttribute("mtype");
    a = Y.getAttribute("mlid");
    P = Y.getAttribute("mrid");
    K = Y.getAttribute("mtid");
    V = Y.getAttribute("mbid");
    O = Y.getAttribute("id");
    var U = MicroDraw_GUID();
    var C = MicroDraw_getXcxlValueByObjId(G.getAttribute("id"), "O", "扇拼接方式", "prid");
    MicroDraw_Louver_Add($(S), U, {
        mfanpjstyle: C
    });
    var T = MicroDraw_GetObjProperty(K, "mbid");
    T = T.replace(O, U);
    MicroDraw_SetObjProperty(K, "mbid", T);
    var E = MicroDraw_GetObjProperty(V, "mtid");
    E = E.replace(O, U);
    MicroDraw_SetObjProperty(V, "mtid", E);
    var N = MicroDraw_GetObjProperty(a, "mrid");
    N = N.replace(O, U);
    MicroDraw_SetObjProperty(a, "mrid", N);
    var H = MicroDraw_GetObjProperty(P, "mlid");
    H = H.replace(O, U);
    MicroDraw_SetObjProperty(P, "mlid", H);
    MicroDraw_GraphXljgDefault($("#" + U).parents("[mwin]"), $("#" + U));
    MicroDraw_Redraw(U);
    MicroDraw_autoGdPic();
    MicroDraw_StepRecord();
    mDrawSelectObjId = "";
    return U
}
function MicroCalc_GetExpVarStrList(H) {
    if (H.indexOf("search(/") > -1) {
        var I = "";
        var C = 0;
        I = H;
        while (I.indexOf("search(/") > -1) {
            I = I.replace("search(/", "");
            C++
        }
        for (var D = 0; D < C; D++) {
            H = H.substring(0, H.indexOf("(/")) + H.substring(H.indexOf("/)") + 2, H.lenght)
        }
    }
    var F = ["+", "-", "*", "/", "!", "[?]", ":", "<", ">", "=", "(", ")", "|", "&", "%", "[.]"];
    var J = ["toFixed", "Number", "String", "split", "indexOf", "lastIndexOf", "substring", "substr", "toLowerCase", "toUpperCase", "search", "trim", "abs", "ceil", "floor", "round", "Math", "length"];
    var A = ["getWjCnt", "getWjPrice", "getMatMoney", "getLDGD", "getTlcFrameKind", "MicroDraw_getTlcTingKind", "getTingKind", "getTingAttr"];
    for (var D = 0; D < F.length; D++) {
        H = replaceAll(H, F[D], ",")
    }
    var B = H.split(",");
    var E = "";
    for (var D = 0; D < B.length; D++) {
        B[D] = B[D].trim();
        if (B[D].indexOf("@") >= 0 || !isNaN(B[D]) || $.Micro.isInArray(B[D], J) || $.Micro.isInArray(B[D], A) || isEmptyOrNull(B[D]) || B[D].toLowerCase() == "true" || B[D].toLowerCase() == "false") {} else {
            var G = E + ",";
            if (G.indexOf("," + B[D] + ",") == -1) {
                E = E + "," + B[D]
            }
        }
    }
    if (!isEmptyOrNull(E)) {
        E = E.substr(1)
    }
    return E
}
function MicroCalc_GetXcxlidByObjId(E) {
    var A = "";
    var C = $("#" + E).parents('[mtype="' + mDrawFlag_Win + '"]')[0];
    if (!isEmptyOrNull(C)) {
        var B = $("#" + C.getAttribute("id") + ' [mtype="' + mDrawFlag_FrameRect + '"]')[0];
        A = B.getAttribute("mxcxlid")
    } else {
        var D = $("#" + E)[0];
        A = D.getAttribute("mxcxlid")
    }
    return A
}
function MicroCalc_CalcExp(mcflId, exp, ObjId, xcxljgJson, evalFlag, evalSelf, pobj) {
    var MicroTest_SAVEsdate = new Date();
    if ($.Micro.IsEmpty(evalSelf)) {
        evalSelf = 1
    }
    if (evalSelf >= 20) {
        jQuery.messager.alert("提示:", "公式计算错误！<br/>公式：" + exp + " 存在死遁环异常！<br/>", "error");
        return ""
    }
    var log = false;
    var expOrig = exp;
    var expVal;
    if (log) {
        console.log("参数：mcflid- " + mcflId + " , ObjId- " + ObjId + "   ------------------------------");
        console.log("函数开始原公式：" + exp)
    }
    var MicroCalc_evalExp = function() {
        if (evalFlag) {
            return exp
        } else {
            try {
                expVal = eval(exp)
            } catch(exception) {
                jQuery.messager.alert("提示:", "公式计算错误！<br/>原公式：" + expOrig + "  转换后：" + exp + " 存在异常！<br/>" + exception, "error");
                throw "";
                if (WEB_BUDGET_ISSIMPLE) {
                    if (AL_PROJECT_FROMBUDGET_ARGUMENT && AL_PROJECT_FROMBUDGET_ARGUMENT.opr == "copy") {
                        AL_PROJECT_FROMBUDGET_ARGUMENT.isContinue = false
                    }
                }
                return ""
            }
            if (expVal == NaN || expVal == undefined) {
                if (!isEmptyOrNull(expOrig)) {
                    jQuery.messager.alert("提示:", "计算结果错误！<br/>原公式：" + expOrig + "<br/>" + exp + " 公式的计算结果为：" + expVal + " <br/>请纠正！", "error");
                    if (WEB_BUDGET_ISSIMPLE) {
                        if (AL_PROJECT_FROMBUDGET_ARGUMENT && AL_PROJECT_FROMBUDGET_ARGUMENT.opr == "copy") {
                            AL_PROJECT_FROMBUDGET_ARGUMENT.isContinue = false
                        }
                    }
                }
                return ""
            }
            if (log) {
                MicroXCtime(MicroTest_SAVEsdate, " MicroCalc_CalcExp 结束计算： ")
            }
            return expVal
        }
    };
    exp = $.trim(exp);
    if (!isNaN(exp)) {
        if (log) {
            console.log("数值公式提前结束：" + exp)
        }
        return exp
    }
    if (mcflId == 0 && ObjId == "") {
        var firstFrameNode = $("#" + mDrawFlag_SvgId + " [mtype][mxcxlid]:first");
        if (firstFrameNode.length > 0) {
            ObjId = firstFrameNode.attr("id");
            var xcxlId = MicroCalc_GetXcxlidByObjId(ObjId);
            if (!$.Micro.IsEmpty(xcxlId)) {
                mcflId = MicroDraw_genData_getMcflIdByXcxlid(xcxlId);
                var xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(xcxlId);
                xcxljgJson = eval("(" + xcxljgStr + ")")
            }
        }
    }
    var ls_start, ls_cur;
    var li_startIdx = 0,
    li_endIdx = 0;
    var lb_find;
    var list = [];
    var indexArr = [];
    var MicroCalc_replaceStringToSpecStr = function() {
        for (i = 0; i < exp.length; i++) {
            if (exp.substr(i, 1) == "'" || exp.substr(i, 1) == '"') {
                ls_cur = exp.substr(i, 1);
                if (isEmptyOrNull(ls_start)) {
                    ls_start = ls_cur;
                    li_startIdx = i;
                    continue
                } else {
                    if (ls_start == ls_cur) {
                        li_endIdx = i;
                        lb_find = false;
                        for (j = 0; j < list.length; j++) {
                            if (list[j].data == exp.substr(li_startIdx, li_endIdx - li_startIdx + 1)) {
                                lb_find = true
                            }
                        }
                        if (!lb_find) {
                            var _index = MicroDraw_newConstTag(li_startIdx, li_endIdx, indexArr);
                            var obj = {
                                startIdx: li_startIdx,
                                endIdx: li_endIdx,
                                index: _index,
                                data: exp.substr(li_startIdx, li_endIdx - li_startIdx + 1)
                            };
                            list.push(obj)
                        }
                        ls_start = "";
                        ls_cur = "";
                        li_startIdx = 0;
                        li_endIdx = 0
                    }
                }
            }
        }
        if (ls_start && ls_start.length > 0) {
            jQuery.messager.alert("提示:", "选项内容公式包含非法字符串", "info");
            return
        }
        $.each(list,
        function(k, o) {
            exp = replaceAll(exp, o.data, o.index)
        })
    };
    var getAllWinsSize = function() {
        var mcombsortwinObj = $("#" + mDrawFlag_SvgId + ' [mtype = "' + mDrawFlag_combsortwin + '"]');
        if (mcombsortwinObj.length > 0) {
            AllWinsW = Number(mcombsortwinObj.attr("combw") || 0);
            AllWinsH = Number(mcombsortwinObj.attr("combh") || 0)
        }
        var combIDs = MicroDraw_getCombWinIDs();
        $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_FrameRect + "']").each(function() {
            var mwidth = Number($(this).attr("mwidth"));
            var mheight = Number($(this).attr("mheight"));
            var pwin = $(this).parents("[mtype=" + mDrawFlag_Win + "]");
            if ($.inArray(pwin.attr("id"), combIDs) == -1) {
                AllWinsW += mwidth;
                AllWinsH = AllWinsH > mheight ? AllWinsH: mheight
            }
        });
        $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_arc + "']").each(function(oi) {
            JOINMBEND = "Y";
            var mwidth = Number($(this).attr("mwidth"));
            var mheight = Number($(this).attr("mheight"));
            if ($.inArray($(this).attr("id"), combIDs) == -1) {
                AllWinsW = AllWinsW > mwidth ? AllWinsW: mwidth;
                var moutarc = $(this).attr("moutarc");
                if ($.Micro.IsEmpty(moutarc)) {
                    AllWinsH += mheight
                }
            }
        });
        $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_CornerMaterial + "']").each(function() {
            var mwidth = Number($(this).attr("mwidth"));
            var mheight = Number($(this).attr("mheight"));
            if ($.inArray($(this).attr("id"), combIDs) == -1) {
                AllWinsW += mwidth;
                AllWinsH = AllWinsH > mheight ? AllWinsH: mheight
            }
        });
        $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_FrameArcs + "']").each(function() {
            var mwidth = Number($(this).attr("mwidth"));
            var mheight = Number($(this).attr("mheight"));
            var pwin = $(this).parents("[mtype=" + mDrawFlag_WinArcs + "]");
            if ($.inArray(pwin.attr("id"), combIDs) == -1) {
                AllWinsW += mwidth;
                AllWinsH = AllWinsH > mheight ? AllWinsH: mheight
            }
        })
    };
    var countCMcnt = function(CMs) {
        var _cnt = 0;
        $.each(CMs,
        function(i, o) {
            var mcnt = Number($(o).attr("mcnt") || 1);
            var mcnt_exp = $(o).attr("mcnt_exp");
            if (evalSelf != 1) {
                if (!$.Micro.IsEmpty(mcnt_exp)) {
                    mcnt = MicroDraw_genData_calcExp(mcflId, mcnt_exp, ObjId, xcxljgJson, 0, 1)
                }
            }
            _cnt += mcnt
        });
        return _cnt
    };
    var MicroCalc_CalcExp_replaceOptVal = function(exp) {
        var rows = $("#" + mDrawOptProperty).datagrid("getRows");
        rows = MicroDraw_convertOptValue(rows);
        $.each(rows,
        function(i, r) {
            exp = replaceAll(exp, r.optId, r.optVal)
        });
        return exp
    };
    var MicroCalc_CalcExp_replaceOptValExp_keyWord = function(exp, oldStr, newStr) {
        var keyOprArr = ["+", "-", "*", "/", "!", "[?]", ":", "<", ">", "=", "(", ")", "|", "&", "%", "[.]", " "];
        var findIdx = -1;
        var lStr = "";
        var rStr = "";
        var lDo = false;
        var rDo = false;
        findIdx = exp.indexOf(oldStr, 0);
        while (findIdx >= 0) {
            lStr = "";
            rStr = "";
            lDo = false;
            rDo = false;
            if (findIdx > 0) {
                lStr = exp.substr(findIdx - 1, 1)
            }
            if (exp.length > findIdx + oldStr.length) {
                rStr = exp.substr(findIdx + oldStr.length, 1)
            }
            if (lStr == "" || $.Micro.isInArray(lStr, keyOprArr)) {
                lDo = true
            }
            if (rStr == "" || $.Micro.isInArray(rStr, keyOprArr)) {
                rDo = true
            }
            if (lDo && rDo) {
                exp = exp.substr(0, findIdx) + newStr + exp.substr(findIdx + oldStr.length)
            }
            findIdx = exp.indexOf(oldStr, (findIdx + 1))
        }
        return exp
    };
    var MicroCalc_CalcExp_replaceOptValExp = function(exp) {
        var oldExp = exp;
        var newExp = exp;
        var replaceCnt = 0;
        while (true) {
            var rows = $("#" + mDrawOptProperty).datagrid("getRows");
            $.each(rows,
            function(i, r) {
                if (!isEmptyOrNull(r.optValExp)) {
                    newExp = MicroCalc_CalcExp_replaceOptValExp_keyWord(newExp, r.optId, "(" + r.optValExp + ")")
                }
            });
            if (oldExp == newExp) {
                break
            } else {
                oldExp = newExp
            }
            replaceCnt = replaceCnt + 1;
            if (Number(replaceCnt) >= 10) {
                newExp = exp;
                jQuery.messager.alert("提示:", "公式中存在死循环：" + exp, "info");
                break
            }
        }
        exp = newExp;
        return exp
    };
    var getinTLGVTypesExpVal = function(exp, tWin) {
        if (!$.Micro.IsEmpty(exp)) {
            for (var mi = 0; mi < MicroDraw_TLGlassVTypes.length; mi++) {
                var typeVal = MicroDraw_TLGlassVTypes[mi];
                if (exp.indexOf('inTLGVTypes("' + typeVal + '")') > -1) {
                    var inTLGlassVTypes = MicroDraw_inTLGlassVTypes(typeVal, tWin);
                    exp = replaceAll(exp, 'inTLGVTypes("' + typeVal + '")', inTLGlassVTypes)
                }
            }
        } else {
            exp = ""
        }
        return exp
    };
    var getTingKind = function(tid) {
        var tingKind = "";
        if (!$.Micro.IsEmpty(tid)) {
            if (mcflId == "2") {
                tingKind = MicroDraw_getTlcTingKind(tid).split(",")[0]
            } else {
                if (mcflId == "4") {
                    tingKind = MicroDraw_getTlmTingKind(tid).split(",")[0]
                }
            }
        }
        return tingKind
    };
    var MicroCalc_getDeclareOptVarList = function() {
        var varList = "";
        var rows = $("#" + mDrawOptProperty).datagrid("getRows");
        $.each(rows,
        function(i, r) {
            if (r.optId.indexOf("-") == -1) {
                varList = varList + "," + r.optId
            }
        });
        varList = varList.substr(1);
        return varList
    };
    var MicroCalc_getOptVal = function(theVar) {
        var val;
        var rows = $("#" + mDrawOptProperty).datagrid("getRows");
        $.each(rows,
        function(i, r) {
            if (theVar == r.optId) {
                if (isEmptyOrNull(r.optValExp)) {
                    val = r.optVal
                } else {
                    var tempObjId = ObjId;
                    if ($("#" + ObjId).closest("[mtype='" + mDrawFlag_Win + "']").find("[mtype='frameRect']").length > 0) {
                        tempObjId = $("#" + ObjId).closest("[mtype='" + mDrawFlag_Win + "']").find("[mtype='frameRect']").attr("id")
                    } else {
                        if ($("#" + ObjId).closest("[mtype='" + mDrawFlag_Custom_arc + "']").length > 0) {
                            tempObjId = $("#" + ObjId).closest("[mtype='" + mDrawFlag_Custom_arc + "']").attr("id")
                        }
                    }
                    val = MicroCalc_CalcExp(mcflId, r.optValExp, tempObjId, xcxljgJson, 0, evalSelf + 1, pobj);
                    var svgArea = $("#" + mDrawFlag_SvgId).attr("area");
                    if (!$.Micro.IsEmpty(svgArea) && !isNaN(svgArea) && theVar == "MAREA") {
                        val = Number(svgArea)
                    }
                }
                return false
            }
        });
        return val
    };
    var MicroCalc_OptExists = function(exp, optVar) {
        var optcnt = 0;
        var rows = $("#" + mDrawOptProperty).datagrid("getRows");
        $.each(rows,
        function(i, r) {
            if (r.optId == optVar) {
                optcnt = 1
            }
            if (optcnt == 1) {
                return false
            }
        });
        if (optcnt == 0) {
            jQuery.messager.alert("提示:", "公式：" + exp + "中的" + optVar + "参数不存在于下单选项的参数！", "error");
            throw "";
            return 0
        }
    };
    var varList = MicroCalc_getDeclareOptVarList();
    if (!isEmptyOrNull(varList)) {
        try {
            eval("var " + varList + ";")
        } catch(exception) {
            jQuery.messager.alert("提示:", "错误提示：参数编码定义存在异常！<br/>参数编码首位不能为数字，请调整后再生成数据！<br/>" + exception, "error");
            throw "";
            return ""
        }
    }
    var rows = $("#" + mDrawSizeProperty).datagrid("getRows");
    for (var i = rows.length - 1; i >= 0; i--) {
        if (! (rows[i].name == "W" || rows[i].name == "H")) {
            exp = replaceAll(exp, rows[i].win + "." + rows[i].name, rows[i].value)
        }
    }
    var ScaleG_scale = 1;
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
        ScaleG_scale = Number(mDrawSvgViewBox) / Number(MobileFrame_getCurrMobileViewScale(mDrawFlag_SvgId))
    }
    var WinObjs = $("#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_Win + "]");
    $.each(WinObjs,
    function(i) {
        var tframe = $(this).find("[mtype=" + mDrawFlag_FrameRect + "]");
        var _W = tframe.attr("mwidth");
        var _H = tframe.attr("mheight");
        var f_size = $.Micro_SVG.getSVGRect(tframe);
        var toCP = $.Micro_SVG.ToCanvasPoint($("#" + mDrawFlag_SvgId), f_size.x, f_size.y);
        var _X = toCP.x;
        var _Y = toCP.y;
        if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
            _X = Number(_X * ScaleG_scale);
            _Y = Number(_Y * ScaleG_scale)
        }
        _X = ((Number(_X) / mDrawPixelPerM) * 1000).toFixed(2);
        _Y = ((Number(_Y) / mDrawPixelPerM) * 1000).toFixed(2);
        var mwin = $(this).attr("mwin");
        eval("var " + mwin + '={"W":' + _W + ',"H":' + _H + ',"X":' + _X + ',"Y":' + _Y + "};");
        exp = replaceAll(exp, mwin + ".W", eval(mwin + ".W"));
        exp = replaceAll(exp, mwin + ".H", eval(mwin + ".H"));
        exp = replaceAll(exp, mwin + ".X", eval(mwin + ".X"));
        exp = replaceAll(exp, mwin + ".Y", eval(mwin + ".Y"))
    });
    var arcObjs = $("#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_Custom_arc + "]");
    $.each(arcObjs,
    function(i) {
        var marc = $(this).attr("marc");
        var RelativeY = 0;
        if ($(this).attr("mbframe") == "Y") {
            RelativeY = (mDrawThickTing * 1000 / mDrawPixelPerM).toFixed(1)
        }
        eval("var " + marc + '={"RelativeY":' + RelativeY + "};");
        exp = replaceAll(exp, marc + ".RelativeY", eval(marc + ".RelativeY"))
    });
    if (mcflId > 0) {
        var tem;
        var node = $("#" + ObjId)[0];
        if ($(node).length == 0) {
            $.messager.alert("提示:", "门窗结构改变后要重新生成数据，再进行下一步操作！", "error");
            throw ""
        }
        var mtype = node.getAttribute("mtype");
        var nodeW;
        if ($("#" + ObjId).parents("[mtype=" + mDrawFlag_Win + "]").length > 0) {
            nodeW = node.parentNode
        } else {
            if ($("#" + ObjId).attr("mtype") == mDrawFlag_Custom_arc) {
                nodeW = node
            } else {
                if ($("#" + ObjId).attr("mtype") == mDrawFlag_Custom_CornerMaterial) {
                    nodeW = $("#" + mDrawFlag_SvgId + ' [mtype = "' + mDrawFlag_Win + '"]').get(0)
                } else {
                    if ($("#" + ObjId).attr("mtype") == mDrawFlag_Custom_CornerMaterial_h) {
                        nodeW = $("#" + mDrawFlag_SvgId + ' [mtype = "' + mDrawFlag_Win + '"]').get(0)
                    }
                }
            }
        }
        if (mcflId == "2" || mcflId == "4") {
            exp = getinTLGVTypesExpVal(exp, $(nodeW))
        }
        MicroCalc_replaceStringToSpecStr();
        var mCalcArcLen;
        var MARCBKTC;
        var MARCTNUM;
        var ARCBR;
        var ARCTL;
        var ARCTZL;
        var ARCZTZL;
        var ARCBK;
        var ARCLTL;
        var ARCRTL;
        var ARCMTL;
        var ARCINYX;
        var ARCAREA;
        var ARCGAREA;
        var ARCCOPOINTS;
        var ARCCOPSSize_7_8_9;
        var ARCCOPSSize_10_11_12;
        var ARCCOPSSize_9_10_11;
        var ARCCOPSSize_9_13_14;
        if ($("#" + ObjId).attr("mtype") == mDrawFlag_Custom_arc) {
            mCalcArcLen = MicroDraw_CalcDiviArcLen(ObjId);
            var MARCBKTC = mCalcArcLen.MARCBKTC;
            var MARCTNUM = Number(mCalcArcLen.MARCTNUM);
            var ARCBR = mCalcArcLen.ARCBR;
            var ARCTL = mCalcArcLen.ARCTL;
            var ARCTZL = mCalcArcLen.ARCTZL;
            var ARCZTZL = mCalcArcLen.ARCZTZL;
            var ARCBKL = mCalcArcLen.ARCBKL;
            var ARCLTL = mCalcArcLen.ARCLTL;
            var ARCRTL = mCalcArcLen.ARCRTL;
            var ARCMTL = mCalcArcLen.ARCMTL;
            var ARCINYX = mCalcArcLen.ARCINYX;
            var ARCAREA = mCalcArcLen.ARCAREA;
            var ARCGAREA = mCalcArcLen.ARCGAREA;
            var ARCCOPOINTS = mCalcArcLen.ARCCOPOINTS;
            var ARCCOPSSize_7_8_9 = mCalcArcLen.ARCCOPSSize_7_8_9;
            var ARCCOPSSize_10_11_12 = mCalcArcLen.ARCCOPSSize_10_11_12;
            var ARCCOPSSize_9_10_11 = mCalcArcLen.ARCCOPSSize_9_10_11;
            var ARCCOPSSize_9_13_14 = mCalcArcLen.ARCCOPSSize_9_13_14
        }
        var AllWinsW = 0;
        var AllWinsH = 0;
        var JOINMBEND = "N";
        var NKW = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "对象内空宽度", "exp");
        var NKH = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "对象内空高度", "exp");
        exp = replaceAll(exp, "NKW", "(" + NKW + ")");
        exp = replaceAll(exp, "NKH", "(" + NKH + ")");
        var OGG;
        OGG = $(node).attr("mglass");
        if (isEmptyOrNull(OGG)) {
            exp = replaceAll(exp, "OGG", "MGG")
        }
        var OMB;
        OMB = $(node).attr("mmb");
        if (isEmptyOrNull(OMB)) {
            exp = replaceAll(exp, "OMB", "MMB")
        }
        var ODB;
        ODB = $(node).attr("mdb");
        if (isEmptyOrNull(ODB)) {
            exp = replaceAll(exp, "ODB", "MDB")
        }
        var OGY;
        OGY = $(node).attr("mtech");
        if (isEmptyOrNull(OGY)) {
            exp = replaceAll(exp, "OGY", "MGY")
        }
        MicroCalc_replaceStringToSpecStr();
        if (log) {
            console.log("获取变量前：" + exp)
        }
        var notReplaceFlag = "NO-REP";
        var varList = MicroCalc_GetExpVarStrList(exp);
        var varArr = varList.split(",");
        var temArrVal = "";
        for (var i = 0; i < varArr.length; i++) {
            for (var k = i + 1; k < varArr.length; k++) {
                if (varArr[i].length < varArr[k].length) {
                    temArrVal = varArr[i];
                    varArr[i] = varArr[k];
                    varArr[k] = temArrVal
                }
            }
        }
        for (var i = 0; i < varArr.length; i++) {
            if (isEmptyOrNull(varArr[i])) {
                continue
            }
            var findVar = false;
            var curVar = varArr[i];
            if (log) {
                console.log("发现变量：" + curVar)
            }
            switch (mcflId) {
            case "1":
                var val = notReplaceFlag;
                switch (curVar) {
                case "KW":
                    val = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "框宽度", "prid");
                    break;
                case "W":
                    val = node.getAttribute("mwidth");
                    break;
                case "H":
                    val = node.getAttribute("mheight");
                    break;
                case "CNT":
                    val = MicroBudget_getPropertyValue(mBudgetWinProperty, "cnt");
                    break;
                case "FCNT":
                    var FCNT = 0;
                    $("#" + nodeW.getAttribute("id") + " [mtype='" + mDrawFlag_Pkc + "']").each(function(i, o) {
                        FCNT = Number(FCNT) + 1
                    });
                    $("#" + nodeW.getAttribute("id") + " [mtype='" + mDrawFlag_Dkc + "']").each(function(i, o) {
                        FCNT = Number(FCNT) + 2
                    });
                    val = FCNT;
                    break;
                case "OCNT":
                    var OCNT;
                    if (mtype.substr(0, 3) == mDrawFlag_Tlc) {
                        tem = mtype.substr(4);
                        OCNT = Number(tem.substr(0, tem.indexOf("_")))
                    } else {
                        OCNT = 1
                    }
                    val = OCNT;
                    break;
                case "GCNT":
                    var GCNT = 0;
                    $("#" + nodeW.getAttribute("id") + " [mtype='" + mDrawFlag_Glass + "']").each(function(i, o) {
                        GCNT = Number(GCNT) + 1
                    });
                    val = GCNT;
                    break;
                case "SCNT":
                    var SCNT = 0;
                    $("#" + nodeW.getAttribute("id") + " [mtype='" + mDrawFlag_Pkc + "']").each(function(i, o) {
                        var msw = o.getAttribute("msw");
                        if (isEmptyOrNull(msw)) {
                            msw = ""
                        }
                        if (msw == "Y") {
                            SCNT = Number(SCNT) + 1
                        }
                    });
                    $("#" + nodeW.getAttribute("id") + " [mtype='" + mDrawFlag_Dkc + "']").each(function(i, o) {
                        var mfanswflag = o.getAttribute("mfanswflag");
                        if (isEmptyOrNull(mfanswflag)) {
                            mfanswflag = ""
                        }
                        if (mfanswflag == "1,1") {
                            SCNT = Number(SCNT) + 2
                        }
                    });
                    val = SCNT;
                    break;
                case "TID":
                    var TID = node.getAttribute("mtid");
                    TID = isEmptyOrNull(TID) ? "": TID;
                    val = '"' + TID + '"';
                    break;
                case "BID":
                    var BID = node.getAttribute("mbid");
                    BID = isEmptyOrNull(BID) ? "": BID;
                    val = '"' + BID + '"';
                    break;
                case "LID":
                    var LID = node.getAttribute("mlid");
                    LID = isEmptyOrNull(LID) ? "": LID;
                    val = '"' + LID + '"';
                    break;
                case "RID":
                    var RID = node.getAttribute("mrid");
                    RID = isEmptyOrNull(RID) ? "": RID;
                    val = '"' + RID + '"';
                    break;
                case "TT":
                    var TT;
                    if (mtype == mDrawFlag_TingV || mtype == mDrawFlag_TingH) {
                        if (node.getAttribute("mtotallen") == "Y") {
                            TT = "1"
                        } else {
                            TT = "0"
                        }
                    } else {
                        TT = "0"
                    }
                    val = '"' + TT + '"';
                    break;
                case "TK":
                    var TK;
                    if (mtype == mDrawFlag_TingV || mtype == mDrawFlag_TingH) {
                        TK = node.getAttribute("mkind")
                    } else {
                        TK = ""
                    }
                    val = '"' + TK + '"';
                    break;
                case "TL":
                    var TK;
                    var TL;
                    if (mtype == mDrawFlag_TingV || mtype == mDrawFlag_TingH) {
                        TK = node.getAttribute("mkind");
                        if (node.getAttribute("mtl") == "0" && node.getAttribute("mtr") == "0") {
                            switch (TK) {
                            case "N":
                                TL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2;
                                break;
                            case "Y":
                                TL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "加强中挺宽度", "prid")) / 2;
                                break;
                            case "Z":
                                TL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "Z中挺宽度", "prid")) / 2;
                                break;
                            case "L":
                                TL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                break
                            }
                        } else {
                            TL = Number(node.getAttribute("mtl"))
                        }
                    } else {
                        TL = "0"
                    }
                    val = TL;
                    break;
                case "TR":
                    var TK;
                    var TR;
                    if (mtype == mDrawFlag_TingV || mtype == mDrawFlag_TingH) {
                        TK = node.getAttribute("mkind");
                        if (node.getAttribute("mtl") == "0" && node.getAttribute("mtr") == "0") {
                            switch (TK) {
                            case "N":
                                TR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2;
                                break;
                            case "Y":
                                TR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "加强中挺宽度", "prid")) / 2;
                                break;
                            case "Z":
                                TR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "Z中挺宽度", "prid")) / 2;
                                break;
                            case "L":
                                TR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                break
                            }
                        } else {
                            TR = Number(node.getAttribute("mtr"))
                        }
                    } else {
                        TR = "0"
                    }
                    val = TR;
                    break;
                case "CH":
                    var CH;
                    if (mtype == mDrawFlag_Glass || mtype == mDrawFlag_Pkc || mtype == mDrawFlag_Dkc) {
                        if (node.getAttribute("mchange").toString() == "Y") {
                            CH = 1
                        } else {
                            CH = 0
                        }
                    } else {
                        CH = 0
                    }
                    val = '"' + CH + '"';
                    break;
                case "OT":
                    var OT;
                    switch (mtype) {
                    case mDrawFlag_FrameRect:
                        OT = "框";
                        break;
                    case mDrawFlag_Glass:
                        OT = "固玻";
                        break;
                    case mDrawFlag_TingV:
                        OT = "竖挺";
                        break;
                    case mDrawFlag_TingH:
                        OT = "横挺";
                        break;
                    case mDrawFlag_Pkc:
                        if (node.getAttribute("msw") == "Y") {
                            OT = "1扇1纱"
                        } else {
                            OT = "扇"
                        }
                        break;
                    case mDrawFlag_Dkc:
                        if (node.getAttribute("mfanswflag") == "1,1") {
                            OT = "2扇2纱"
                        } else {
                            OT = "2扇"
                        }
                        break;
                    case mDrawFlag_Custom_arc:
                        OT = "弧顶";
                        break;
                    default:
                        OT = "";
                        break
                    }
                    val = '"' + OT + '"';
                    break;
                case "LTL":
                    var LID = node.getAttribute("mlid");
                    LID = isEmptyOrNull(LID) ? "": LID;
                    var nodeL;
                    if (!isEmptyOrNull(LID)) {
                        nodeL = $("#" + LID)[0]
                    }
                    var LTL;
                    if (LID == "") {
                        LTL = "0"
                    } else {
                        var KIND = nodeL.getAttribute("mkind");
                        if (nodeL.getAttribute("mtl") == "0" && nodeL.getAttribute("mtr") == "0") {
                            switch (KIND) {
                            case "N":
                                LTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2;
                                break;
                            case "Y":
                                LTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "加强中挺宽度", "prid")) / 2;
                                break;
                            case "Z":
                                LTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "Z中挺宽度", "prid")) / 2;
                                break;
                            case "L":
                                LTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                break
                            }
                        } else {
                            LTL = Number(nodeL.getAttribute("mtl"))
                        }
                    }
                    val = LTL;
                    break;
                case "LTR":
                    var LID = node.getAttribute("mlid");
                    LID = isEmptyOrNull(LID) ? "": LID;
                    var nodeL;
                    if (!isEmptyOrNull(LID)) {
                        nodeL = $("#" + LID)[0]
                    }
                    var LTR;
                    if (LID == "") {
                        LTR = "0"
                    } else {
                        var KIND = nodeL.getAttribute("mkind");
                        if (nodeL.getAttribute("mtl") == "0" && nodeL.getAttribute("mtr") == "0") {
                            switch (KIND) {
                            case "N":
                                LTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2;
                                break;
                            case "Y":
                                LTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "加强中挺宽度", "prid")) / 2;
                                break;
                            case "Z":
                                LTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "Z中挺宽度", "prid")) / 2;
                                break;
                            case "L":
                                LTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                break
                            }
                        } else {
                            LTR = Number(nodeL.getAttribute("mtr"))
                        }
                    }
                    val = LTR;
                    break;
                case "RTL":
                    var RID = node.getAttribute("mrid");
                    RID = isEmptyOrNull(RID) ? "": RID;
                    var nodeR;
                    if (!isEmptyOrNull(RID)) {
                        nodeR = $("#" + RID)[0]
                    }
                    var RTL;
                    if (RID == "") {
                        RTL = "0"
                    } else {
                        var KIND = nodeR.getAttribute("mkind");
                        if (nodeR.getAttribute("mtl") == "0" && nodeR.getAttribute("mtr") == "0") {
                            switch (KIND) {
                            case "N":
                                RTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2;
                                break;
                            case "Y":
                                RTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "加强中挺宽度", "prid")) / 2;
                                break;
                            case "Z":
                                RTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "Z中挺宽度", "prid")) / 2;
                                break;
                            case "L":
                                RTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                break
                            }
                        } else {
                            RTL = Number(nodeR.getAttribute("mtl"))
                        }
                    }
                    val = RTL;
                    break;
                case "RTR":
                    var RID = node.getAttribute("mrid");
                    RID = isEmptyOrNull(RID) ? "": RID;
                    var nodeR;
                    if (!isEmptyOrNull(RID)) {
                        nodeR = $("#" + RID)[0]
                    }
                    var RTR;
                    if (RID == "") {
                        RTR = "0"
                    } else {
                        var KIND = nodeR.getAttribute("mkind");
                        if (nodeR.getAttribute("mtl") == "0" && nodeR.getAttribute("mtr") == "0") {
                            switch (KIND) {
                            case "N":
                                RTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2;
                                break;
                            case "Y":
                                RTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "加强中挺宽度", "prid")) / 2;
                                break;
                            case "Z":
                                RTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "Z中挺宽度", "prid")) / 2;
                                break;
                            case "L":
                                RTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                break
                            }
                        } else {
                            RTR = Number(nodeR.getAttribute("mtr"))
                        }
                    }
                    val = RTR;
                    break;
                case "TTL":
                    var TID = node.getAttribute("mtid");
                    TID = isEmptyOrNull(TID) ? "": TID;
                    var nodeT;
                    if (!isEmptyOrNull(TID)) {
                        nodeT = $("#" + TID)[0]
                    }
                    var TTL;
                    if (TID == "") {
                        TTL = "0"
                    } else {
                        var KIND = nodeT.getAttribute("mkind");
                        if (nodeT.getAttribute("mtl") == "0" && nodeT.getAttribute("mtr") == "0") {
                            switch (KIND) {
                            case "N":
                                TTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2;
                                break;
                            case "Y":
                                TTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "加强中挺宽度", "prid")) / 2;
                                break;
                            case "Z":
                                TTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "Z中挺宽度", "prid")) / 2;
                                break;
                            case "L":
                                TTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                break
                            }
                        } else {
                            TTL = Number(nodeT.getAttribute("mtl"))
                        }
                    }
                    val = TTL;
                    break;
                case "TTR":
                    var TID = node.getAttribute("mtid");
                    TID = isEmptyOrNull(TID) ? "": TID;
                    var nodeT;
                    if (!isEmptyOrNull(TID)) {
                        nodeT = $("#" + TID)[0]
                    }
                    var TTR;
                    if (TID == "") {
                        TTR = "0"
                    } else {
                        var KIND = nodeT.getAttribute("mkind");
                        if (nodeT.getAttribute("mtl") == "0" && nodeT.getAttribute("mtr") == "0") {
                            switch (KIND) {
                            case "N":
                                TTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2;
                                break;
                            case "Y":
                                TTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "加强中挺宽度", "prid")) / 2;
                                break;
                            case "Z":
                                TTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "Z中挺宽度", "prid")) / 2;
                                break;
                            case "L":
                                TTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                break
                            }
                        } else {
                            TTR = Number(nodeT.getAttribute("mtr"))
                        }
                    }
                    val = TTR;
                    break;
                case "BTL":
                    var BID = node.getAttribute("mbid");
                    BID = isEmptyOrNull(BID) ? "": BID;
                    var nodeB;
                    if (!isEmptyOrNull(BID)) {
                        nodeB = $("#" + BID)[0]
                    }
                    var BTL;
                    if (BID == "") {
                        BTL = "0"
                    } else {
                        var KIND = nodeB.getAttribute("mkind");
                        if (nodeB.getAttribute("mtl") == "0" && nodeB.getAttribute("mtr") == "0") {
                            switch (KIND) {
                            case "N":
                                BTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2;
                                break;
                            case "Y":
                                BTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "加强中挺宽度", "prid")) / 2;
                                break;
                            case "Z":
                                BTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "Z中挺宽度", "prid")) / 2;
                                break;
                            case "L":
                                BTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                break
                            }
                        } else {
                            BTL = Number(nodeB.getAttribute("mtl"))
                        }
                    }
                    val = BTL;
                    break;
                case "BTR":
                    var BID = node.getAttribute("mbid");
                    BID = isEmptyOrNull(BID) ? "": BID;
                    var nodeB;
                    if (!isEmptyOrNull(BID)) {
                        nodeB = $("#" + BID)[0]
                    }
                    var BTR;
                    if (BID == "") {
                        BTR = "0"
                    } else {
                        var KIND = nodeB.getAttribute("mkind");
                        if (nodeB.getAttribute("mtl") == "0" && nodeB.getAttribute("mtr") == "0") {
                            switch (KIND) {
                            case "N":
                                BTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2;
                                break;
                            case "Y":
                                BTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "加强中挺宽度", "prid")) / 2;
                                break;
                            case "Z":
                                BTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "Z中挺宽度", "prid")) / 2;
                                break;
                            case "L":
                                BTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                break
                            }
                        } else {
                            BTR = Number(nodeB.getAttribute("mtr"))
                        }
                    }
                    val = BTR;
                    break;
                case "TAR":
                    var TAR = 0;
                    var mareaTobjsArr = $.Micro.MergeObjs([$("#" + nodeW.getAttribute("id") + " [mtype='" + mDrawFlag_FrameRect + "']"), $("#" + nodeW.getAttribute("id") + "[mtype='" + mDrawFlag_Custom_arc + "']")]);
                    $.each(mareaTobjsArr,
                    function() {
                        var mWidth = Number($(this)[0].getAttribute("mwidth"));
                        var mHeight = Number($(this)[0].getAttribute("mheight"));
                        TAR = (Number(mWidth) * Number(mHeight) / 1000000);
                        var areaExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "MAREA", "optValExp");
                        if (areaExp.length > 0) {
                            if (evalSelf < 2) {
                                if (exp.indexOf("MAREA") >= 0 || exp.indexOf("TAR") >= 0) {
                                    var firstFrameNode = $("#" + mDrawFlag_SvgId + " [mtype][mxcxlid]:first");
                                    if (firstFrameNode.length > 0) {
                                        var AreaObjId = firstFrameNode.attr("id")
                                    }
                                }
                                TAR = MicroCalc_CalcExp(mcflId, areaExp, AreaObjId, xcxljgJson, 0, evalSelf + 1, pobj)
                            }
                        } else {
                            TAR = (Number(mWidth) * Number(mHeight) / 1000000).toFixed(3)
                        }
                    });
                    var svgArea = $("#" + mDrawFlag_SvgId).attr("area");
                    if (!$.Micro.IsEmpty(svgArea) && !isNaN(svgArea)) {
                        TAR = Number(svgArea)
                    }
                    val = TAR;
                    break;
                case "GAR":
                    var GAR = 0;
                    var mCalcArcLen = MicroDraw_CalcDiviArcLen(ObjId);
                    var ARCGAREA = mCalcArcLen.ARCGAREA;
                    $("#" + nodeW.getAttribute("id") + "[mtype='" + mDrawFlag_Win + "'] [mtype='" + mDrawFlag_Glass + "']").each(function(i, o) {
                        var mWidth = $("#" + o.id)[0].getAttribute("mwidth");
                        var mHeight = $("#" + o.id)[0].getAttribute("mheight");
                        GAR = Number(GAR) + (Number(mWidth) * Number(mHeight) / 1000000).toFixed(2)
                    });
                    $("#" + nodeW.getAttribute("id") + "[mtype='" + mDrawFlag_Custom_arc + "'] [mtype='" + mDrawFlag_Glass + "']").each(function(i, o) {
                        GAR = Number(GAR) + ARCGAREA
                    });
                    val = GAR;
                    break;
                case "KAR":
                    var KAR = 0;
                    $("#" + nodeW.getAttribute("id") + " [mtype='" + mDrawFlag_Pkc + "']").each(function(i, o) {
                        var mWidth = $("#" + o.id)[0].getAttribute("mwidth");
                        var mHeight = $("#" + o.id)[0].getAttribute("mheight");
                        KAR = Number(KAR) + (Number(mWidth) * Number(mHeight) / 1000000).toFixed(2)
                    });
                    val = KAR;
                    break;
                case "PRKG":
                    var PRKG = 0;
                    var prrows = $("#" + mDrawPrProperty).datagrid("getRows");
                    if (prrows.length > 0) {
                        for (var m = 0; m < prrows.length; m++) {
                            var Cnt = prrows[m].Cnt;
                            if (Cnt > 0) {
                                if (!$.Micro.IsEmpty(mPublicPrList)) {
                                    for (var j = 0; j < mPublicPrList.length; j++) {
                                        if (prrows[m].ProductId == mPublicPrList[j].productid) {
                                            PRKG += (Cnt * mPublicPrList[j].mmkg * (prrows[m].Len / 1000)).toFixed(2)
                                        }
                                    }
                                }
                            }
                        }
                    }
                    val = PRKG.toFixed(2);
                    break;
                case "FDIR":
                    var FDIR = "";
                    if (mtype == mDrawFlag_Pkc) {
                        FDIR = node.getAttribute("mopendir")
                    }
                    val = '"' + FDIR + '"';
                    break;
                case "KSW":
                    var KSW = 0;
                    if (mtype == mDrawFlag_Pkc || mtype == mDrawFlag_Dkc) {
                        KSW = MicroDraw_getPkcKSW(ObjId)
                    } else {
                        if (mtype == mDrawFlag_FrameRect) {
                            var tempObjId = $("#" + nodeW.getAttribute("id") + " [mtype='" + mDrawFlag_Pkc + "']").eq(0).attr("id");
                            if (isEmptyOrNull(tempObjId)) {
                                tempObjId = $("#" + nodeW.getAttribute("id") + " [mtype='" + mDrawFlag_Dkc + "']").eq(0).attr("id")
                            }
                            KSW = MicroDraw_getPkcKSW(tempObjId)
                        }
                    }
                    val = KSW;
                    break;
                case "OGG":
                    var OGG;
                    OGG = $(node).attr("mglass");
                    if (!isEmptyOrNull(OGG)) {
                        val = '"' + OGG + '"'
                    } else {
                        val = notReplaceFlag
                    }
                    break;
                case "ODB":
                    var ODB;
                    ODB = $(node).attr("mdb");
                    if (!isEmptyOrNull(ODB)) {
                        val = '"' + ODB + '"'
                    } else {
                        val = notReplaceFlag
                    }
                    break;
                case "OMB":
                    var OMB;
                    OMB = $(node).attr("mmb");
                    if (!isEmptyOrNull(OMB)) {
                        val = '"' + OMB + '"'
                    } else {
                        val = notReplaceFlag
                    }
                    break;
                case "OGY":
                    var OGY;
                    OGY = $(node).attr("mtech");
                    if (!isEmptyOrNull(OGY)) {
                        val = '"' + OGY + '"'
                    } else {
                        val = notReplaceFlag
                    }
                    break;
                case "JOINW":
                    if (AllWinsW == 0 && AllWinsH == 0 && JOINMBEND == "N") {
                        getAllWinsSize()
                    }
                    val = AllWinsW;
                    break;
                case "JOINH":
                    if (AllWinsW == 0 && AllWinsH == 0 && JOINMBEND == "N") {
                        getAllWinsSize()
                    }
                    val = AllWinsH;
                    break;
                case "MBEND":
                    if (AllWinsW == 0 && AllWinsH == 0 && JOINMBEND == "N") {
                        getAllWinsSize()
                    }
                    val = '"' + JOINMBEND + '"';
                    break;
                case "LEFTW":
                    var LEFTW = 0;
                    switch (mtype) {
                    case mDrawFlag_Dkc:
                        var mleftwidth = node.getAttribute("mleftwidth");
                        if (Number(mleftwidth) <= 0) {
                            LEFTW = MicroCalc_CalcExp(mcflId, " ((" + NKW + ") / 2)", ObjId, xcxljgJson, 0, evalSelf + 1, pobj)
                        } else {
                            LEFTW = mleftwidth
                        }
                        break
                    }
                    val = LEFTW;
                    break;
                case "GLASSCNT":
                    var GLASSCNT = 0;
                    var GlassCntArr = [];
                    $("#" + nodeW.getAttribute("id") + " [mglass]").each(function(i, o) {
                        var mglass = o.getAttribute("mglass");
                        var mtech = o.getAttribute("mtech");
                        var mdb = o.getAttribute("mdb");
                        var mmb = o.getAttribute("mmb");
                        if (isEmptyOrNull(mglass)) {
                            mglass = ""
                        }
                        if (isEmptyOrNull(mtech)) {
                            mtech = ""
                        }
                        if (isEmptyOrNull(mdb)) {
                            mdb = ""
                        }
                        if (isEmptyOrNull(mmb)) {
                            mmb = ""
                        }
                        var spec = mglass + mtech + mdb + mmb;
                        if ($.inArray(spec, GlassCntArr) == -1) {
                            GlassCntArr[GlassCntArr.length] = spec
                        }
                    });
                    GLASSCNT = GlassCntArr.length;
                    val = GLASSCNT;
                    break;
                case "MARCTNUM":
                    if (isEmptyOrNull(mCalcArcLen)) {
                        mCalcArcLen = MicroDraw_CalcDiviArcLen(ObjId);
                        MARCTNUM = Number(mCalcArcLen.MARCTNUM)
                    }
                    var MARCTNUM = Number(mCalcArcLen.MARCTNUM);
                    val = MARCTNUM;
                    break;
                case "ARCTL":
                    if (isEmptyOrNull(mCalcArcLen)) {
                        mCalcArcLen = MicroDraw_CalcDiviArcLen(ObjId)
                    }
                    var ARCTL = mCalcArcLen.ARCTL;
                    val = ARCTL;
                    break;
                case "ARCBKL":
                    if (isEmptyOrNull(mCalcArcLen)) {
                        mCalcArcLen = MicroDraw_CalcDiviArcLen(ObjId)
                    }
                    var ARCBKL = mCalcArcLen.ARCBKL;
                    val = ARCBKL;
                    break;
                case "ARCINYX":
                    if (isEmptyOrNull(mCalcArcLen)) {
                        mCalcArcLen = MicroDraw_CalcDiviArcLen(ObjId)
                    }
                    var ARCINYX = mCalcArcLen.ARCINYX;
                    val = ARCINYX;
                    break;
                case "ARCBR":
                    if (isEmptyOrNull(mCalcArcLen)) {
                        mCalcArcLen = MicroDraw_CalcDiviArcLen(ObjId)
                    }
                    var ARCBR = mCalcArcLen.ARCBR;
                    val = ARCBR;
                    break;
                case "MARCBKTC":
                    if (isEmptyOrNull(mCalcArcLen)) {
                        mCalcArcLen = MicroDraw_CalcDiviArcLen(ObjId)
                    }
                    var MARCBKTC = mCalcArcLen.MARCBKTC;
                    val = MARCBKTC;
                    break;
                case "JOINAREA":
                    var TAR = 0;
                    var JOINAREA = 0;
                    var combwinObj = $("#" + mDrawFlag_SvgId + ' [mtype = "' + mDrawFlag_combsortwin + '"]');
                    if (combwinObj.length > 0) {
                        if (!$.Micro.IsEmpty(combwinObj.attr(mDrawFlag_combsortwin))) {
                            JOINW = combwinObj.attr("combw");
                            JOINH = combwinObj.attr("combh");
                            if ($.Micro.IsEmpty(JOINW)) {
                                JOINW = 0
                            }
                            if ($.Micro.IsEmpty(JOINH)) {
                                JOINH = 0
                            }
                            JOINW = Number(JOINW);
                            JOINH = Number(JOINH);
                            JOINAREA = JOINW * JOINH / 1000000
                        }
                    }
                    var mareaTobjsArr = $.Micro.MergeObjs([$("#" + nodeW.getAttribute("id") + " [mtype='" + mDrawFlag_FrameRect + "']"), $("#" + nodeW.getAttribute("id") + "[mtype='" + mDrawFlag_Custom_arc + "']")]);
                    $.each(mareaTobjsArr,
                    function() {
                        var mWidth = Number($(this)[0].getAttribute("mwidth"));
                        var mHeight = Number($(this)[0].getAttribute("mheight"));
                        var areaExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "MAREA", "optValExp");
                        if (areaExp.length > 0) {
                            if (evalSelf < 2) {
                                TAR = MicroDraw_genData_calcExp(mcflId, areaExp, ObjId, xcxljgJson, 0, evalSelf + 1);
                                if (combwinObj.length > 0) {
                                    JOINAREA = MicroDraw_Cal_JOINAREA(mcflId, areaExp, xcxljgJson, evalSelf + 1)
                                }
                            }
                        } else {
                            TAR = (Number(mWidth) * Number(mHeight) / 1000000).toFixed(3)
                        }
                    });
                    if (combwinObj.length == 0) {
                        if (AllWinsW == 0 && AllWinsH == 0 && JOINMBEND == "N") {
                            getAllWinsSize()
                        }
                        if (JOINMBEND == "Y") {
                            JOINAREA = AllWinsW * AllWinsH / 1000000
                        } else {
                            JOINAREA = TAR
                        }
                    }
                    var svgArea = $("#" + mDrawFlag_SvgId).attr("area");
                    if (!$.Micro.IsEmpty(svgArea) && !isNaN(svgArea)) {
                        JOINAREA = Number(svgArea)
                    }
                    val = JOINAREA;
                    break;
                case "JOINFCNT":
                    var JOINFCNT = 0;
                    JOINFCNT = JOINFCNT + $("#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_Pkc + "]").length;
                    JOINFCNT = JOINFCNT + $("#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_Dkc + "]").length * 2;
                    val = JOINFCNT;
                    break;
                case "JOINGCNT":
                    var JOINGCNT = 0;
                    JOINGCNT = $("#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_Glass + "]").length;
                    val = JOINGCNT;
                    break;
                case "JOINSCNT":
                    var JOINSCNT = 0;
                    $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Pkc + "']").each(function(i, o) {
                        var msw = o.getAttribute("msw");
                        if (isEmptyOrNull(msw)) {
                            msw = ""
                        }
                        if (msw == "Y") {
                            JOINSCNT = Number(JOINSCNT) + 1
                        }
                    });
                    $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Dkc + "']").each(function(i, o) {
                        var mfanswflag = o.getAttribute("mfanswflag");
                        if (isEmptyOrNull(mfanswflag)) {
                            mfanswflag = ""
                        }
                        if (mfanswflag == "1,1") {
                            JOINSCNT = Number(JOINSCNT) + 2
                        }
                    });
                    val = JOINSCNT;
                    break;
                case "KCNT":
                    var KCNT = 0;
                    KCNT = $("#" + mDrawFlag_SvgId + ' [mtype = "' + mDrawFlag_Win + '"]').length;
                    val = KCNT;
                    break;
                case "ZJLCNT":
                    var ZJLCNT = 0;
                    ZJLCNT += countCMcnt($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_CornerMaterial + "'][mangle!=0]"));
                    val = ZJLCNT;
                    break;
                case "PJLCNT":
                    var PJLCNT = 0;
                    PJLCNT += countCMcnt($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_CornerMaterial + "'][mangle=0]"));
                    val = PJLCNT;
                    break;
                case "HZJLCNT":
                    var HZJLCNT = 0;
                    HZJLCNT += countCMcnt($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_CornerMaterial_h + "'][mangle!=0]"));
                    val = HZJLCNT;
                    break;
                case "HPJLCNT":
                    var HPJLCNT = 0;
                    HPJLCNT += countCMcnt($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_CornerMaterial_h + "'][mangle=0]"));
                    val = HPJLCNT;
                    break;
                case "AllWinsW":
                    if (AllWinsW == 0 && AllWinsH == 0 && JOINMBEND == "N") {
                        getAllWinsSize()
                    }
                    val = AllWinsW;
                    break;
                case "AllWinsH":
                    if (AllWinsW == 0 && AllWinsH == 0 && JOINMBEND == "N") {
                        getAllWinsSize()
                    }
                    val = AllWinsH;
                    break;
                case "GLASSFHLH":
                    var GLASSFHL, GLASSFHLH;
                    GLASSFHL = node.getAttribute("mglassfhl");
                    GLASSFHLH = node.getAttribute("mglassfhlheight");
                    if (GLASSFHL == "Y") {
                        if ($.Micro.IsEmpty(GLASSFHLH)) {
                            GLASSFHLH = 0
                        }
                    } else {
                        GLASSFHLH = 0
                    }
                    val = '"' + GLASSFHLH + '"';
                    break;
                case "PFHL":
                    var PFHL;
                    PFHL = node.getAttribute("mfdt");
                    if ($.Micro.IsEmpty(PFHL)) {
                        PFHL = "N"
                    }
                    val = '"' + PFHL + '"';
                    break;
                case "PRLEN":
                    if (!$.Micro.IsEmpty(pobj)) {
                        if (!$.Micro.IsEmpty(pobj.row)) {
                            if (!$.Micro.IsEmpty(pobj.row.xcxljgid)) {
                                var prlen = 0;
                                var xcxljgid = pobj.row.xcxljgid;
                                var _objid = pobj.row.ObjId;
                                var prrows = $("#" + mDrawPrProperty).datagrid("getRows");
                                $.each(prrows,
                                function(i, prrow) {
                                    if (prrow.ObjId == _objid && prrow.xcxljgid == xcxljgid) {
                                        prlen = prrow.Len;
                                        return false
                                    }
                                });
                                if ($.Micro.IsEmpty(prlen)) {
                                    prlen = 0
                                }
                                val = prlen
                            }
                        }
                    }
                    break;
                case "GFHL":
                    var GFHL;
                    GFHL = node.getAttribute("mfhl");
                    if ($.Micro.IsEmpty(GFHL)) {
                        GFHL = "N"
                    }
                    val = '"' + GFHL + '"';
                    break;
                case "GLTH":
                    var glassSpec = "";
                    var objMtype = $("#" + ObjId).attr("mtype");
                    var glType = "";
                    if (objMtype == mDrawFlag_Glass) {
                        glType = "固玻宽度"
                    } else { (objMtype == mDrawFlag_Pkc || objMtype == mDrawFlag_Dkc)
                    }
                    glType = "扇玻宽度";
                    var glExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", glType, "glassExp");
                    var glExpArr = glExp.split(",");
                    var glassExp = glExpArr[0];
                    glassSpec = MicroCalc_CalcExp(mcflId, glassExp, ObjId, xcxljgJson, 0, evalSelf + 1, pobj);
                    var tuGlass = $(node).attr("mglass");
                    if (!isEmptyOrNull(tuGlass)) {
                        glassSpec = tuGlass
                    }
                    val = '"' + Micro_getGlassThick(glassSpec) + '"';
                    break;
                default:
                    if (evalFlag) {
                        exp = MicroCalc_CalcExp_replaceOptVal(exp);
                        val = notReplaceFlag
                    } else {
                        var optVal;
                        try {
                            optVal = eval(curVar)
                        } catch(exception) {
                            jQuery.messager.alert("提示:", "公式计算错误！<br/>原公式：" + expOrig + "  转换后：" + exp + " 存在异常！<br/>" + exception, "error");
                            throw "";
                            if (WEB_BUDGET_ISSIMPLE) {
                                if (AL_PROJECT_FROMBUDGET_ARGUMENT && AL_PROJECT_FROMBUDGET_ARGUMENT.opr == "copy") {
                                    AL_PROJECT_FROMBUDGET_ARGUMENT.isContinue = false
                                }
                            }
                            return ""
                        }
                        if (isEmptyOrNull(optVal)) {
                            var optVal = MicroCalc_getOptVal(curVar);
                            if (isEmptyOrNull(optVal)) {
                                optVal = '""'
                            } else {
                                if (isNaN(optVal)) {
                                    if (! (optVal.toString().substr(0, 1) == '"' || optVal.toString().substr(0, 1) == "'")) {
                                        optVal = '"' + optVal + '"'
                                    }
                                }
                            }
                            try {
                                eval(curVar.toString() + "=" + optVal.toString())
                            } catch(exception) {
                                jQuery.messager.alert("提示:", "选项参数实例化错误！<br/>：" + curVar.toString() + "=" + optVal.toString() + " 存在异常！<br/>" + exception, "error")
                            }
                        }
                        val = notReplaceFlag
                    }
                }
                if (val != notReplaceFlag) {
                    if (evalFlag) {
                        exp = replaceAll(exp, curVar, val)
                    } else {
                        try {
                            eval(curVar.toString() + "=" + val.toString())
                        } catch(exception) {
                            jQuery.messager.alert("提示:", "微高关键字实例化错误！<br/>：" + curVar.toString() + "=" + val.toString() + " 存在异常！<br/>" + exception, "error")
                        }
                    }
                }
                break;
            case "2":
                var val = notReplaceFlag;
                switch (curVar) {
                case "KW":
                    val = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封宽度", "prid");
                    break;
                case "GW":
                    val = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "固定框宽度", "prid");
                    break;
                case "SH":
                    val = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上滑高度", "prid");
                    break;
                case "XH":
                    val = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "下滑高度", "prid");
                    break;
                case "W":
                    val = node.getAttribute("mwidth");
                    break;
                case "H":
                    val = node.getAttribute("mheight");
                    break;
                case "CNT":
                    val = MicroBudget_getPropertyValue(mBudgetWinProperty, "cnt");
                    break;
                case "FCNT":
                    var FCNT = 0;
                    $("#" + nodeW.getAttribute("id") + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(i, o) {
                        var omtype = o.getAttribute("mtype");
                        var arrOmtype = omtype.split("_");
                        var n = (arrOmtype[2].split("f")).length - 1;
                        FCNT = Number(FCNT) + Number(n)
                    });
                    val = FCNT;
                    break;
                case "OCNT":
                    var OCNT;
                    if (mtype.substr(0, 3) == mDrawFlag_Tlc) {
                        tem = mtype.substr(4);
                        OCNT = Number(tem.substr(0, tem.indexOf("_")))
                    } else {
                        OCNT = 1
                    }
                    val = OCNT;
                    break;
                case "GCNT":
                    var GCNT = 0;
                    $("#" + nodeW.getAttribute("id") + " [mtype='" + mDrawFlag_Glass + "']").each(function(i, o) {
                        GCNT = Number(GCNT) + 1
                    });
                    val = GCNT;
                    break;
                case "SCNT":
                    var SCNT = 0;
                    $("#" + nodeW.getAttribute("id") + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(i, o) {
                        var TLC_OT = MicroDraw_getTlcObjType(o.id);
                        if (isEmptyOrNull(TLC_OT)) {
                            TLC_OT = ""
                        }
                        if (TLC_OT == "2推1纱") {
                            SCNT = Number(SCNT) + 1
                        } else {
                            if (TLC_OT == "4推2纱") {
                                SCNT = Number(SCNT) + 2
                            } else {
                                if (TLC_OT == "1推1固1纱") {
                                    SCNT = Number(SCNT) + 1
                                } else {
                                    if (TLC_OT == "2推2固2纱") {
                                        SCNT = Number(SCNT) + 2
                                    }
                                }
                            }
                        }
                    });
                    val = SCNT;
                    break;
                case "GLASSCNT":
                    var GLASSCNT = 0;
                    var GlassCntArr = [];
                    $("#" + nodeW.getAttribute("id") + " [mglass]").each(function(i, o) {
                        var mglass = o.getAttribute("mglass");
                        var mtech = o.getAttribute("mtech");
                        var mdb = o.getAttribute("mdb");
                        var mmb = o.getAttribute("mmb");
                        if (isEmptyOrNull(mglass)) {
                            mglass = ""
                        }
                        if (isEmptyOrNull(mtech)) {
                            mtech = ""
                        }
                        if (isEmptyOrNull(mdb)) {
                            mdb = ""
                        }
                        if (isEmptyOrNull(mmb)) {
                            mmb = ""
                        }
                        var spec = mglass + mtech + mdb + mmb;
                        if ($.inArray(spec, GlassCntArr) == -1) {
                            GlassCntArr[GlassCntArr.length] = spec
                        }
                    });
                    GLASSCNT = GlassCntArr.length;
                    val = GLASSCNT;
                    break;
                case "TK":
                    var TK;
                    if (mtype == mDrawFlag_TingV) {
                        TK = node.getAttribute("mkind")
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            var tingKind = MicroDraw_getTlcTingKind(ObjId);
                            if (tingKind.length > 0) {
                                var tingArr = tingKind.split(",");
                                if (tingArr[0] == "横挺") {
                                    TK = "N"
                                } else {
                                    if (tingArr[0] == "上滑上固") {
                                        TK = "SG"
                                    } else {
                                        if (tingArr[0] == "下滑下固") {
                                            TK = "XG"
                                        } else {
                                            if (tingArr[0] == "上下滑") {
                                                TK = "SX"
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            TK = ""
                        }
                    }
                    val = '"' + TK + '"';
                    break;
                case "TT":
                    var TT;
                    if (mtype == mDrawFlag_TingV) {
                        if (node.getAttribute("mtotallen") == "Y") {
                            TT = "1"
                        } else {
                            TT = "0"
                        }
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            if (node.getAttribute("mtotallen") == "Y") {
                                TT = "1"
                            } else {
                                TT = "0"
                            }
                        } else {
                            TT = "0"
                        }
                    }
                    val = '"' + TT + '"';
                    break;
                case "TL":
                    var TK;
                    var TL;
                    var BCZDZ = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "标尺中对中", "prid");
                    if (mtype == mDrawFlag_TingV) {
                        TK = node.getAttribute("mkind");
                        if (node.getAttribute("mtl") == "0" && node.getAttribute("mtr") == "0") {
                            switch (TK) {
                            case "N":
                                TL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2;
                                break;
                            case "BB":
                                TL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "双边封宽度", "prid")) / 2;
                                break;
                            case "LB":
                                TL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角双边封宽度", "prid")) / 2;
                                break;
                            case "BG":
                                var tingKind = MicroDraw_getTlcTingKind(ObjId);
                                if (tingKind.length > 0) {
                                    var tingArr = tingKind.split(",");
                                    if (tingArr[1] == "G") {
                                        if (BCZDZ == "Y") {
                                            TL = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid"))) / 2
                                        } else {
                                            TL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")
                                        }
                                    } else {
                                        if (BCZDZ == "Y") {
                                            TL = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid"))) / 2
                                        } else {
                                            TL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid")
                                        }
                                    }
                                } else {
                                    jQuery.messager.alert("提示:", "边封固定不能识别左边是固定还是右边是固定!", "error");
                                    TL = 0
                                }
                                break;
                            case "LG":
                                var tingKind = MicroDraw_getTlcTingKind(ObjId);
                                if (tingKind.length > 0) {
                                    var tingArr = tingKind.split(",");
                                    if (tingArr[1] == "G") {
                                        if (BCZDZ == "Y") {
                                            TL = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid"))) / 2
                                        } else {
                                            TL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")
                                        }
                                    } else {
                                        if (BCZDZ == "Y") {
                                            TL = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid"))) / 2
                                        } else {
                                            TL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid")
                                        }
                                    }
                                } else {
                                    jQuery.messager.alert("提示:", "转角边封固定不能识别左边是固定还是右边是固定!", "error");
                                    TL = 0
                                }
                                break;
                            case "GG":
                                TL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角双固定宽度", "prid")) / 2;
                                break
                            }
                        } else {
                            TL = Number(node.getAttribute("mtl"))
                        }
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            var tingKind = MicroDraw_getTlcTingKind(ObjId);
                            if (tingKind.length > 0) {
                                var tingArr = tingKind.split(",");
                                if (tingArr[0] == "横挺") {
                                    TL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2
                                } else {
                                    if (tingArr[0] == "上滑上固") {
                                        if (BCZDZ == "Y") {
                                            TL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上滑上固高度", "prid") / 2
                                        } else {
                                            TL = 0
                                        }
                                    } else {
                                        if (tingArr[0] == "下滑下固") {
                                            if (BCZDZ == "Y") {
                                                TL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "下滑下固高度", "prid") / 2
                                            } else {
                                                TL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "下滑下固高度", "prid")
                                            }
                                        } else {
                                            if (tingArr[0] == "上下滑") {
                                                TL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上下滑上高度", "prid")
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            TL = 0
                        }
                    }
                    val = TL;
                    break;
                case "TR":
                    var TK;
                    var TR;
                    var BCZDZ = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "标尺中对中", "prid");
                    if (mtype == mDrawFlag_TingV) {
                        TK = node.getAttribute("mkind");
                        if (node.getAttribute("mtl") == "0" && node.getAttribute("mtr") == "0") {
                            switch (TK) {
                            case "N":
                                TR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2;
                                break;
                            case "BB":
                                TR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "双边封宽度", "prid")) / 2;
                                break;
                            case "LB":
                                TR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角双边封宽度", "prid")) / 2;
                                break;
                            case "BG":
                                var tingKind = MicroDraw_getTlcTingKind(ObjId);
                                if (tingKind.length > 0) {
                                    var tingArr = tingKind.split(",");
                                    if (tingArr[1] == "G") {
                                        if (BCZDZ == "Y") {
                                            TR = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid"))) / 2
                                        } else {
                                            TR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid")
                                        }
                                    } else {
                                        if (BCZDZ == "Y") {
                                            TR = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid"))) / 2
                                        } else {
                                            TR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")
                                        }
                                    }
                                } else {
                                    jQuery.messager.alert("提示:", "边封固定不能识别左边是固定还是右边是固定!", "error");
                                    TR = 0
                                }
                                break;
                            case "LG":
                                var tingKind = MicroDraw_getTlcTingKind(ObjId);
                                if (tingKind.length > 0) {
                                    var tingArr = tingKind.split(",");
                                    if (tingArr[1] == "G") {
                                        if (BCZDZ == "Y") {
                                            TR = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid"))) / 2
                                        } else {
                                            TR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid")
                                        }
                                    } else {
                                        if (BCZDZ == "Y") {
                                            TR = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid"))) / 2
                                        } else {
                                            TR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")
                                        }
                                    }
                                } else {
                                    jQuery.messager.alert("提示:", "转角边封固定不能识别左边是固定还是右边是固定!", "error");
                                    TR = 0
                                }
                                break;
                            case "GG":
                                TR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角双固定宽度", "prid")) / 2;
                                break
                            }
                        } else {
                            TR = Number(node.getAttribute("mtr"))
                        }
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            var tingKind = MicroDraw_getTlcTingKind(ObjId);
                            if (tingKind.length > 0) {
                                var tingArr = tingKind.split(",");
                                if (tingArr[0] == "横挺") {
                                    TR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2
                                } else {
                                    if (tingArr[0] == "上滑上固") {
                                        if (BCZDZ == "Y") {
                                            TR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上滑上固高度", "prid") / 2
                                        } else {
                                            TR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上滑上固高度", "prid")
                                        }
                                    } else {
                                        if (tingArr[0] == "下滑下固") {
                                            if (BCZDZ == "Y") {
                                                TR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "下滑下固高度", "prid") / 2
                                            } else {
                                                TR = 0
                                            }
                                        } else {
                                            if (tingArr[0] == "上下滑") {
                                                TR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上下滑下高度", "prid")
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            TR = 0
                        }
                    }
                    val = TR;
                    break;
                case "OT":
                    var OT = MicroDraw_getTlcObjType(ObjId);
                    val = '"' + OT + '"';
                    break;
                case "FOT":
                    var tlObjId = $("#" + mDrawFlag_SvgId + " [mtldir='lr']").attr("id");
                    var FOT = "";
                    if (!isEmptyOrNull(tlObjId)) {
                        FOT = MicroDraw_getTlcObjType(tlObjId)
                    }
                    val = '"' + FOT + '"';
                    break;
                case "TID":
                    var TID = node.getAttribute("mtid");
                    TID = isEmptyOrNull(TID) ? "": TID;
                    val = '"' + TID + '"';
                    break;
                case "BID":
                    var BID = node.getAttribute("mbid");
                    BID = isEmptyOrNull(BID) ? "": BID;
                    val = '"' + BID + '"';
                    break;
                case "LID":
                    var LID = node.getAttribute("mlid");
                    LID = isEmptyOrNull(LID) ? "": LID;
                    val = '"' + LID + '"';
                    break;
                case "RID":
                    var RID = node.getAttribute("mrid");
                    RID = isEmptyOrNull(RID) ? "": RID;
                    val = '"' + RID + '"';
                    break;
                case "LTL":
                    var LID = node.getAttribute("mlid");
                    LID = isEmptyOrNull(LID) ? "": LID;
                    var nodeL;
                    if (!isEmptyOrNull(LID)) {
                        nodeL = $("#" + LID)[0]
                    }
                    var BCZDZ = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "标尺中对中", "prid");
                    var LTL;
                    if (mtype == mDrawFlag_TingV) {
                        LTL = 0
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            if (LID.length > 0) {
                                var tingType = MicroDraw_getTlcTingKind(LID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeL.getAttribute("mtl") == "0" && nodeL.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "竖挺":
                                            LTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2;
                                            break;
                                        case "双边封":
                                            LTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "双边封宽度", "prid")) / 2;
                                            break;
                                        case "转角双边封":
                                            LTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角双边封宽度", "prid")) / 2;
                                            break;
                                        case "边封固定":
                                            if (Arr[1] == "G") {
                                                if (BCZDZ == "Y") {
                                                    LTL = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    LTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")
                                                }
                                            } else {
                                                if (BCZDZ == "Y") {
                                                    LTL = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    LTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid")
                                                }
                                            }
                                            break;
                                        case "转角边封固定":
                                            if (Arr[1] == "G") {
                                                if (BCZDZ == "Y") {
                                                    LTL = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    LTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")
                                                }
                                            } else {
                                                if (BCZDZ == "Y") {
                                                    LTL = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    LTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid")
                                                }
                                            }
                                            break;
                                        case "转角双固定":
                                            LTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角双固定宽度", "prid")) / 2;
                                            break
                                        }
                                    } else {
                                        LTL = Number(nodeL.getAttribute("mtl"))
                                    }
                                } else {
                                    LTL = 0
                                }
                            } else {
                                LTL = 0
                            }
                        } else {
                            if (LID.length > 0) {
                                var tingType = MicroDraw_getTlcTingKind(LID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeL.getAttribute("mtl") == "0" && nodeL.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "竖挺":
                                            LTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2;
                                            break;
                                        case "双边封":
                                            LTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "双边封宽度", "prid")) / 2;
                                            break;
                                        case "转角双边封":
                                            LTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角双边封宽度", "prid")) / 2;
                                            break;
                                        case "边封固定":
                                            if (Arr[1] == "G") {
                                                if (BCZDZ == "Y") {
                                                    LTL = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    LTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")
                                                }
                                            } else {
                                                if (BCZDZ == "Y") {
                                                    LTL = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    LTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid")
                                                }
                                            }
                                            break;
                                        case "转角边封固定":
                                            if (Arr[1] == "G") {
                                                if (BCZDZ == "Y") {
                                                    LTL = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    LTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")
                                                }
                                            } else {
                                                if (BCZDZ == "Y") {
                                                    LTL = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    LTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid")
                                                }
                                            }
                                            break;
                                        case "转角双固定":
                                            LTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角双固定宽度", "prid")) / 2;
                                            break
                                        }
                                    } else {
                                        LTL = Number(nodeL.getAttribute("mtl"))
                                    }
                                } else {
                                    LTL = 0
                                }
                            } else {
                                LTL = 0
                            }
                        }
                    }
                    val = LTL;
                    break;
                case "LTR":
                    var LID = node.getAttribute("mlid");
                    LID = isEmptyOrNull(LID) ? "": LID;
                    var nodeL;
                    if (!isEmptyOrNull(LID)) {
                        nodeL = $("#" + LID)[0]
                    }
                    var BCZDZ = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "标尺中对中", "prid");
                    var LTR;
                    if (mtype == mDrawFlag_TingV) {
                        LTR = 0
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            if (LID.length > 0) {
                                var tingType = MicroDraw_getTlcTingKind(LID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeL.getAttribute("mtl") == "0" && nodeL.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "竖挺":
                                            LTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2;
                                            break;
                                        case "双边封":
                                            LTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "双边封宽度", "prid")) / 2;
                                            break;
                                        case "转角双边封":
                                            LTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角双边封宽度", "prid")) / 2;
                                            break;
                                        case "边封固定":
                                            if (Arr[1] == "G") {
                                                if (BCZDZ == "Y") {
                                                    LTR = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    LTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid")
                                                }
                                            } else {
                                                if (BCZDZ == "Y") {
                                                    LTR = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    LTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")
                                                }
                                            }
                                            break;
                                        case "转角边封固定":
                                            if (Arr[1] == "G") {
                                                if (BCZDZ == "Y") {
                                                    LTR = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    LTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid")
                                                }
                                            } else {
                                                if (BCZDZ == "Y") {
                                                    LTR = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    LTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")
                                                }
                                            }
                                            break;
                                        case "转角双固定":
                                            LTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角双固定宽度", "prid")) / 2;
                                            break
                                        }
                                    } else {
                                        LTR = Number(nodeL.getAttribute("mtr"))
                                    }
                                } else {
                                    LTR = 0
                                }
                            } else {
                                LTR = 0
                            }
                        } else {
                            if (LID.length > 0) {
                                var tingType = MicroDraw_getTlcTingKind(LID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeL.getAttribute("mtl") == "0" && nodeL.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "竖挺":
                                            LTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2;
                                            break;
                                        case "双边封":
                                            LTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "双边封宽度", "prid")) / 2;
                                            break;
                                        case "转角双边封":
                                            LTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角双边封宽度", "prid")) / 2;
                                            break;
                                        case "边封固定":
                                            if (Arr[1] == "G") {
                                                if (BCZDZ == "Y") {
                                                    LTR = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    LTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid")
                                                }
                                            } else {
                                                if (BCZDZ == "Y") {
                                                    LTR = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    LTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")
                                                }
                                            }
                                            break;
                                        case "转角边封固定":
                                            if (Arr[1] == "G") {
                                                if (BCZDZ == "Y") {
                                                    LTR = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    LTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid")
                                                }
                                            } else {
                                                if (BCZDZ == "Y") {
                                                    LTR = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    LTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")
                                                }
                                            }
                                            break;
                                        case "转角双固定":
                                            LTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角双固定宽度", "prid")) / 2;
                                            break
                                        }
                                    } else {
                                        LTR = Number(nodeL.getAttribute("mtr"))
                                    }
                                } else {
                                    LTR = 0
                                }
                            } else {
                                LTR = 0
                            }
                        }
                    }
                    val = LTR;
                    break;
                case "RTL":
                    var RID = node.getAttribute("mrid");
                    RID = isEmptyOrNull(RID) ? "": RID;
                    var nodeR;
                    if (!isEmptyOrNull(RID)) {
                        nodeR = $("#" + RID)[0]
                    }
                    var BCZDZ = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "标尺中对中", "prid");
                    var RTL;
                    if (mtype == mDrawFlag_TingV) {
                        RTL = 0
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            if (RID.length > 0) {
                                var tingType = MicroDraw_getTlcTingKind(RID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeR.getAttribute("mtl") == "0" && nodeR.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "竖挺":
                                            RTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2;
                                            break;
                                        case "双边封":
                                            RTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "双边封宽度", "prid")) / 2;
                                            break;
                                        case "转角双边封":
                                            RTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角双边封宽度", "prid")) / 2;
                                            break;
                                        case "边封固定":
                                            if (Arr[1] == "G") {
                                                if (BCZDZ == "Y") {
                                                    RTL = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    RTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")
                                                }
                                            } else {
                                                if (BCZDZ == "Y") {
                                                    RTL = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    RTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid")
                                                }
                                            }
                                            break;
                                        case "转角边封固定":
                                            if (Arr[1] == "G") {
                                                if (BCZDZ == "Y") {
                                                    RTL = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    RTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")
                                                }
                                            } else {
                                                if (BCZDZ == "Y") {
                                                    RTL = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    RTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid")
                                                }
                                            }
                                            break;
                                        case "转角双固定":
                                            RTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角双固定宽度", "prid")) / 2;
                                            break
                                        }
                                    } else {
                                        RTL = Number(nodeR.getAttribute("mtl"))
                                    }
                                } else {
                                    RTL = 0
                                }
                            } else {
                                RTL = 0
                            }
                        } else {
                            if (RID.length > 0) {
                                var tingType = MicroDraw_getTlcTingKind(RID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeR.getAttribute("mtl") == "0" && nodeR.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "竖挺":
                                            RTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2;
                                            break;
                                        case "双边封":
                                            RTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "双边封宽度", "prid")) / 2;
                                            break;
                                        case "转角双边封":
                                            RTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角双边封宽度", "prid")) / 2;
                                            break;
                                        case "边封固定":
                                            if (Arr[1] == "G") {
                                                if (BCZDZ == "Y") {
                                                    RTL = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    RTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")
                                                }
                                            } else {
                                                if (BCZDZ == "Y") {
                                                    RTL = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    RTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid")
                                                }
                                            }
                                            break;
                                        case "转角边封固定":
                                            if (Arr[1] == "G") {
                                                if (BCZDZ == "Y") {
                                                    RTL = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    RTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")
                                                }
                                            } else {
                                                if (BCZDZ == "Y") {
                                                    RTL = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    RTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid")
                                                }
                                            }
                                            break;
                                        case "转角双固定":
                                            RTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角双固定宽度", "prid")) / 2;
                                            break
                                        }
                                    } else {
                                        RTL = Number(nodeR.getAttribute("mtl"))
                                    }
                                } else {
                                    RTL = 0
                                }
                            } else {
                                RTL = 0
                            }
                        }
                    }
                    val = RTL;
                    break;
                case "RTR":
                    var RID = node.getAttribute("mrid");
                    RID = isEmptyOrNull(RID) ? "": RID;
                    var nodeR;
                    if (!isEmptyOrNull(RID)) {
                        nodeR = $("#" + RID)[0]
                    }
                    var BCZDZ = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "标尺中对中", "prid");
                    var RTR;
                    if (mtype == mDrawFlag_TingV) {
                        RTR = 0
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            if (RID.length > 0) {
                                var tingType = MicroDraw_getTlcTingKind(RID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeR.getAttribute("mtl") == "0" && nodeR.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "竖挺":
                                            RTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2;
                                            break;
                                        case "双边封":
                                            RTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "双边封宽度", "prid")) / 2;
                                            break;
                                        case "转角双边封":
                                            RTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角双边封宽度", "prid")) / 2;
                                            break;
                                        case "边封固定":
                                            if (Arr[1] == "G") {
                                                if (BCZDZ == "Y") {
                                                    RTR = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    RTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid")
                                                }
                                            } else {
                                                if (BCZDZ == "Y") {
                                                    RTR = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    RTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")
                                                }
                                            }
                                            break;
                                        case "转角边封固定":
                                            if (Arr[1] == "G") {
                                                if (BCZDZ == "Y") {
                                                    RTR = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    RTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid")
                                                }
                                            } else {
                                                if (BCZDZ == "Y") {
                                                    RTR = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    RTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")
                                                }
                                            }
                                            break;
                                        case "转角双固定":
                                            RTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角双固定宽度", "prid")) / 2;
                                            break
                                        }
                                    } else {
                                        RTR = Number(nodeR.getAttribute("mtr"))
                                    }
                                } else {
                                    RTR = 0
                                }
                            } else {
                                RTR = 0
                            }
                        } else {
                            if (RID.length > 0) {
                                var tingType = MicroDraw_getTlcTingKind(RID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeR.getAttribute("mtl") == "0" && nodeR.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "竖挺":
                                            RTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2;
                                            break;
                                        case "双边封":
                                            RTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "双边封宽度", "prid")) / 2;
                                            break;
                                        case "转角双边封":
                                            RTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角双边封宽度", "prid")) / 2;
                                            break;
                                        case "边封固定":
                                            if (Arr[1] == "G") {
                                                if (BCZDZ == "Y") {
                                                    RTR = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    RTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid")
                                                }
                                            } else {
                                                if (BCZDZ == "Y") {
                                                    RTR = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    RTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封固定固定宽度", "prid")
                                                }
                                            }
                                            break;
                                        case "转角边封固定":
                                            if (Arr[1] == "G") {
                                                if (BCZDZ == "Y") {
                                                    RTR = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    RTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid")
                                                }
                                            } else {
                                                if (BCZDZ == "Y") {
                                                    RTR = (Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")) + Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定边封宽度", "prid"))) / 2
                                                } else {
                                                    RTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角边封固定固定宽度", "prid")
                                                }
                                            }
                                            break;
                                        case "转角双固定":
                                            RTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角双固定宽度", "prid")) / 2;
                                            break
                                        }
                                    } else {
                                        RTR = Number(nodeR.getAttribute("mtr"))
                                    }
                                } else {
                                    RTR = 0
                                }
                            } else {
                                RTR = 0
                            }
                        }
                    }
                    val = RTR;
                    break;
                case "TTL":
                    var TID = node.getAttribute("mtid");
                    TID = isEmptyOrNull(TID) ? "": TID;
                    var nodeT;
                    if (!isEmptyOrNull(TID)) {
                        nodeT = $("#" + TID)[0]
                    }
                    var BCZDZ = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "标尺中对中", "prid");
                    var TTL;
                    if (mtype == mDrawFlag_TingV) {
                        if (TID.length > 0) {
                            var tingType = MicroDraw_getTlcTingKind(TID);
                            if (tingType.length > 0) {
                                var Arr = tingType.split(",");
                                if (nodeT.getAttribute("mtl") == "0" && nodeT.getAttribute("mtr") == "0") {
                                    switch (Arr[0]) {
                                    case "横挺":
                                        TTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2;
                                        break;
                                    case "上滑上固":
                                        if (BCZDZ == "Y") {
                                            TTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上滑上固高度", "prid") / 2
                                        } else {
                                            TTL = 0
                                        }
                                        break;
                                    case "下滑下固":
                                        if (BCZDZ == "Y") {
                                            TTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "下滑下固高度", "prid") / 2
                                        } else {
                                            TTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "下滑下固高度", "prid")
                                        }
                                        break;
                                    case "上下滑":
                                        TTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上下滑上高度", "prid");
                                        break
                                    }
                                } else {
                                    TTL = Number(nodeT.getAttribute("mtl"))
                                }
                            } else {
                                TTL = 0
                            }
                        } else {
                            TTL = 0
                        }
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            TTL = 0
                        } else {
                            if (TID.length > 0) {
                                var tingType = MicroDraw_getTlcTingKind(TID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeT.getAttribute("mtl") == "0" && nodeT.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "横挺":
                                            TTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2;
                                            break;
                                        case "上滑上固":
                                            if (BCZDZ == "Y") {
                                                TTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上滑上固高度", "prid") / 2
                                            } else {
                                                TTL = 0
                                            }
                                            break;
                                        case "下滑下固":
                                            if (BCZDZ == "Y") {
                                                TTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "下滑下固高度", "prid") / 2
                                            } else {
                                                TTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "下滑下固高度", "prid")
                                            }
                                            break;
                                        case "上下滑":
                                            TTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上下滑上高度", "prid");
                                            break
                                        }
                                    } else {
                                        TTL = Number(nodeT.getAttribute("mtl"))
                                    }
                                } else {
                                    TTL = 0
                                }
                            } else {
                                TTL = 0
                            }
                        }
                    }
                    val = TTL;
                    break;
                case "TTR":
                    var TID = node.getAttribute("mtid");
                    TID = isEmptyOrNull(TID) ? "": TID;
                    var nodeT;
                    if (!isEmptyOrNull(TID)) {
                        nodeT = $("#" + TID)[0]
                    }
                    var BCZDZ = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "标尺中对中", "prid");
                    var TTR;
                    if (mtype == mDrawFlag_TingV) {
                        if (TID.length > 0) {
                            var tingType = MicroDraw_getTlcTingKind(TID);
                            if (tingType.length > 0) {
                                var Arr = tingType.split(",");
                                if (nodeT.getAttribute("mtl") == "0" && nodeT.getAttribute("mtr") == "0") {
                                    switch (Arr[0]) {
                                    case "横挺":
                                        TTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2;
                                        break;
                                    case "上滑上固":
                                        if (BCZDZ == "Y") {
                                            TTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上滑上固高度", "prid") / 2
                                        } else {
                                            TTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上滑上固高度", "prid")
                                        }
                                        break;
                                    case "下滑下固":
                                        if (BCZDZ == "Y") {
                                            TTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "下滑下固高度", "prid") / 2
                                        } else {
                                            TTR = 0
                                        }
                                        break;
                                    case "上下滑":
                                        TTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上下滑下高度", "prid");
                                        break
                                    }
                                } else {
                                    TTR = Number(nodeT.getAttribute("mtr"))
                                }
                            } else {
                                TTR = 0
                            }
                        } else {
                            TTR = 0
                        }
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            TTR = 0
                        } else {
                            if (TID.length > 0) {
                                var tingType = MicroDraw_getTlcTingKind(TID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeT.getAttribute("mtl") == "0" && nodeT.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "横挺":
                                            TTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2;
                                            break;
                                        case "上滑上固":
                                            if (BCZDZ == "Y") {
                                                TTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上滑上固高度", "prid") / 2
                                            } else {
                                                TTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上滑上固高度", "prid")
                                            }
                                            break;
                                        case "下滑下固":
                                            if (BCZDZ == "Y") {
                                                TTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "下滑下固高度", "prid") / 2
                                            } else {
                                                TTR = 0
                                            }
                                            break;
                                        case "上下滑":
                                            TTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上下滑下高度", "prid");
                                            break
                                        }
                                    } else {
                                        TTR = Number(nodeT.getAttribute("mtr"))
                                    }
                                } else {
                                    TTR = 0
                                }
                            } else {
                                TTR = 0
                            }
                        }
                    }
                    val = TTR;
                    break;
                case "BTL":
                    var BID = node.getAttribute("mbid");
                    BID = isEmptyOrNull(BID) ? "": BID;
                    var nodeB;
                    if (!isEmptyOrNull(BID)) {
                        nodeB = $("#" + BID)[0]
                    }
                    var BCZDZ = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "标尺中对中", "prid");
                    var BTL;
                    if (mtype == mDrawFlag_TingV) {
                        if (BID.length > 0) {
                            var tingType = MicroDraw_getTlcTingKind(BID);
                            if (tingType.length > 0) {
                                var Arr = tingType.split(",");
                                if (nodeB.getAttribute("mtl") == "0" && nodeB.getAttribute("mtr") == "0") {
                                    switch (Arr[0]) {
                                    case "横挺":
                                        BTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2;
                                        break;
                                    case "上滑上固":
                                        if (BCZDZ == "Y") {
                                            BTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上滑上固高度", "prid") / 2
                                        } else {
                                            BTL = 0
                                        }
                                        break;
                                    case "下滑下固":
                                        if (BCZDZ == "Y") {
                                            BTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "下滑下固高度", "prid") / 2
                                        } else {
                                            BTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "下滑下固高度", "prid")
                                        }
                                        break;
                                    case "上下滑":
                                        BTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上下滑上高度", "prid");
                                        break
                                    }
                                } else {
                                    BTL = Number(nodeB.getAttribute("mtl"))
                                }
                            } else {
                                BTL = 0
                            }
                        } else {
                            BTL = 0
                        }
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            BTL = 0
                        } else {
                            if (BID.length > 0) {
                                var tingType = MicroDraw_getTlcTingKind(BID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeB.getAttribute("mtl") == "0" && nodeB.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "横挺":
                                            BTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2;
                                            break;
                                        case "上滑上固":
                                            if (BCZDZ == "Y") {
                                                BTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上滑上固高度", "prid") / 2
                                            } else {
                                                BTL = 0
                                            }
                                            break;
                                        case "下滑下固":
                                            if (BCZDZ == "Y") {
                                                BTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "下滑下固高度", "prid") / 2
                                            } else {
                                                BTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "下滑下固高度", "prid")
                                            }
                                            break;
                                        case "上下滑":
                                            BTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上下滑上高度", "prid");
                                            break
                                        }
                                    } else {
                                        BTL = Number(nodeB.getAttribute("mtl"))
                                    }
                                } else {
                                    BTL = 0
                                }
                            } else {
                                BTL = 0
                            }
                        }
                    }
                    val = BTL;
                    break;
                case "BTR":
                    var BID = node.getAttribute("mbid");
                    BID = isEmptyOrNull(BID) ? "": BID;
                    var nodeB;
                    if (!isEmptyOrNull(BID)) {
                        nodeB = $("#" + BID)[0]
                    }
                    var BCZDZ = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "标尺中对中", "prid");
                    var BTR;
                    if (mtype == mDrawFlag_TingV) {
                        if (BID.length > 0) {
                            var tingType = MicroDraw_getTlcTingKind(BID);
                            if (tingType.length > 0) {
                                var Arr = tingType.split(",");
                                if (nodeB.getAttribute("mtl") == "0" && nodeB.getAttribute("mtr") == "0") {
                                    switch (Arr[0]) {
                                    case "横挺":
                                        BTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2;
                                        break;
                                    case "上滑上固":
                                        if (BCZDZ == "Y") {
                                            BTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上滑上固高度", "prid") / 2
                                        } else {
                                            BTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上滑上固高度", "prid")
                                        }
                                        break;
                                    case "下滑下固":
                                        if (BCZDZ == "Y") {
                                            BTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "下滑下固高度", "prid") / 2
                                        } else {
                                            BTR = 0
                                        }
                                        break;
                                    case "上下滑":
                                        BTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上下滑下高度", "prid");
                                        break
                                    }
                                } else {
                                    BTR = Number(nodeB.getAttribute("mtr"))
                                }
                            } else {
                                BTR = 0
                            }
                        } else {
                            BTR = 0
                        }
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            BTR = 0
                        } else {
                            if (BID.length > 0) {
                                var tingType = MicroDraw_getTlcTingKind(BID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeB.getAttribute("mtl") == "0" && nodeB.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "横挺":
                                            BTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid")) / 2;
                                            break;
                                        case "上滑上固":
                                            if (BCZDZ == "Y") {
                                                BTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上滑上固高度", "prid") / 2
                                            } else {
                                                BTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上滑上固高度", "prid")
                                            }
                                            break;
                                        case "下滑下固":
                                            if (BCZDZ == "Y") {
                                                BTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "下滑下固高度", "prid") / 2
                                            } else {
                                                BTR = 0
                                            }
                                            break;
                                        case "上下滑":
                                            BTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上下滑下高度", "prid");
                                            break
                                        }
                                    } else {
                                        BTR = Number(nodeB.getAttribute("mtr"))
                                    }
                                } else {
                                    BTR = 0
                                }
                            } else {
                                BTR = 0
                            }
                        }
                    }
                    val = BTR;
                    break;
                case "TIB":
                    var TIB;
                    var TIB = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "挺伸入边封量", "prid");
                    val = TIB;
                    break;
                case "TIG":
                    var TIG;
                    var TIG = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "挺伸入固定量", "prid");
                    val = TIG;
                    break;
                case "LTI":
                    var TIB, TIG;
                    var TIB = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "挺伸入边封量", "prid");
                    var TIG = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "挺伸入固定量", "prid");
                    var LID = node.getAttribute("mlid");
                    LID = isEmptyOrNull(LID) ? "": LID;
                    var RID = node.getAttribute("mrid");
                    RID = isEmptyOrNull(RID) ? "": RID;
                    var LTI;
                    if (LID.length > 0) {
                        var lType = MicroDraw_getTlcTingKind(LID);
                        var Arr = lType.split(",");
                        if (Arr[0].indexOf("双边封") >= 0) {
                            LTI = TIB
                        } else {
                            if (Arr[2] == "B") {
                                LTI = TIB
                            } else {
                                LTI = TIG
                            }
                        }
                    } else {
                        if (getTlcFrameKind($("#" + nodeW.getAttribute("id") + " [mtype='" + mDrawFlag_FrameRect + "']")[0].getAttribute("id")).substr(0, 1) == "B") {
                            LTI = TIB
                        } else {
                            LTI = TIG
                        }
                    }
                    val = LTI;
                    break;
                case "RTI":
                    var TIB, TIG;
                    var TIB = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "挺伸入边封量", "prid");
                    var TIG = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "挺伸入固定量", "prid");
                    var LID = node.getAttribute("mlid");
                    LID = isEmptyOrNull(LID) ? "": LID;
                    var RID = node.getAttribute("mrid");
                    RID = isEmptyOrNull(RID) ? "": RID;
                    var RTI;
                    if (RID.length > 0) {
                        var rType = MicroDraw_getTlcTingKind(RID);
                        var Arr = rType.split(",");
                        if (Arr[0].indexOf("双边封") >= 0) {
                            RTI = TIB
                        } else {
                            if (Arr[1] == "B") {
                                RTI = TIB
                            } else {
                                RTI = TIG
                            }
                        }
                    } else {
                        if (getTlcFrameKind($("#" + nodeW.getAttribute("id") + " [mtype='" + mDrawFlag_FrameRect + "']")[0].getAttribute("id")).substr(2, 1) == "B") {
                            RTI = TIB
                        } else {
                            RTI = TIG
                        }
                    }
                    val = RTI;
                    break;
                case "TTI":
                    var TIB, TIG;
                    var TIB = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "挺伸入边封量", "prid");
                    var TIG = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "挺伸入固定量", "prid");
                    var LID = node.getAttribute("mlid");
                    LID = isEmptyOrNull(LID) ? "": LID;
                    var RID = node.getAttribute("mrid");
                    RID = isEmptyOrNull(RID) ? "": RID;
                    var TTI;
                    TTI = TIG;
                    val = TTI;
                    break;
                case "BTI":
                    var TIB, TIG;
                    var TIB = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "挺伸入边封量", "prid");
                    var TIG = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "挺伸入固定量", "prid");
                    var LID = node.getAttribute("mlid");
                    LID = isEmptyOrNull(LID) ? "": LID;
                    var RID = node.getAttribute("mrid");
                    RID = isEmptyOrNull(RID) ? "": RID;
                    var BTI;
                    BTI = TIG;
                    val = BTI;
                    break;
                case "TAR":
                    var TAR = 0;
                    var mareaTobjsArr = $.Micro.MergeObjs([$("#" + nodeW.getAttribute("id") + " [mtype='" + mDrawFlag_FrameRect + "']"), $("#" + nodeW.getAttribute("id") + "[mtype='" + mDrawFlag_Custom_arc + "']")]);
                    $.each(mareaTobjsArr,
                    function() {
                        var mWidth = Number($(this)[0].getAttribute("mwidth"));
                        var mHeight = Number($(this)[0].getAttribute("mheight"));
                        TAR = (Number(mWidth) * Number(mHeight) / 1000000);
                        var areaExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "MAREA", "optValExp");
                        if (areaExp.length > 0) {
                            if (evalSelf < 2) {
                                if (exp.indexOf("MAREA") >= 0 || exp.indexOf("TAR") >= 0) {
                                    var firstFrameNode = $("#" + mDrawFlag_SvgId + " [mtype][mxcxlid]:first");
                                    if (firstFrameNode.length > 0) {
                                        var AreaObjId = firstFrameNode.attr("id")
                                    }
                                }
                                TAR = MicroCalc_CalcExp(mcflId, areaExp, AreaObjId, xcxljgJson, 0, evalSelf + 1, pobj)
                            }
                        } else {
                            TAR = (Number(mWidth) * Number(mHeight) / 1000000).toFixed(3)
                        }
                    });
                    var svgArea = $("#" + mDrawFlag_SvgId).attr("area");
                    if (!$.Micro.IsEmpty(svgArea) && !isNaN(svgArea)) {
                        TAR = Number(svgArea)
                    }
                    val = TAR;
                    break;
                case "GAR":
                    var GAR = 0;
                    var mCalcArcLen = MicroDraw_CalcDiviArcLen(ObjId);
                    var ARCGAREA = mCalcArcLen.ARCGAREA;
                    $("#" + nodeW.getAttribute("id") + "[mtype='" + mDrawFlag_Win + "'] [mtype='" + mDrawFlag_Glass + "']").each(function(i, o) {
                        var mWidth = $("#" + o.id)[0].getAttribute("mwidth");
                        var mHeight = $("#" + o.id)[0].getAttribute("mheight");
                        GAR = Number(GAR) + (Number(mWidth) * Number(mHeight) / 1000000).toFixed(2)
                    });
                    $("#" + nodeW.getAttribute("id") + "[mtype='" + mDrawFlag_Custom_arc + "'] [mtype='" + mDrawFlag_Glass + "']").each(function(i, o) {
                        GAR = Number(GAR) + ARCGAREA
                    });
                    val = GAR;
                    break;
                case "KAR":
                    var KAR = 0;
                    $("#" + nodeW.getAttribute("id") + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(i, o) {
                        var mWidth = $("#" + o.id)[0].getAttribute("mwidth");
                        var mHeight = $("#" + o.id)[0].getAttribute("mheight");
                        KAR = Number(KAR) + (Number(mWidth) * Number(mHeight) / 1000000).toFixed(2)
                    });
                    val = KAR;
                    break;
                case "PRKG":
                    var PRKG = 0;
                    var prrows = $("#" + mDrawPrProperty).datagrid("getRows");
                    if (prrows.length > 0) {
                        for (var m = 0; m < prrows.length; m++) {
                            var Cnt = prrows[m].Cnt;
                            if (Cnt > 0) {
                                if (!$.Micro.IsEmpty(mPublicPrList)) {
                                    for (var j = 0; j < mPublicPrList.length; j++) {
                                        if (prrows[m].ProductId == mPublicPrList[j].productid) {
                                            PRKG += (Cnt * mPublicPrList[j].mmkg * (prrows[m].Len / 1000)).toFixed(2)
                                        }
                                    }
                                }
                            }
                        }
                    }
                    val = PRKG.toFixed(2);
                    break;
                case "KSW":
                    var KSW = 0;
                    if (mtype.substr(0, 3) == mDrawFlag_Tlc) {
                        KSW = MicroDraw_getPkcKSW(ObjId)
                    } else {
                        if (mtype == mDrawFlag_FrameRect) {
                            var tempObjId = $("#" + nodeW.getAttribute("id") + " [mtype*='" + mDrawFlag_Tlc + "']").eq(0).attr("id");
                            KSW = MicroDraw_getPkcKSW(tempObjId)
                        }
                    }
                    val = KSW;
                    break;
                case "OGG":
                    var OGG;
                    OGG = $(node).attr("mglass");
                    if (!isEmptyOrNull(OGG)) {
                        val = '"' + OGG + '"'
                    } else {
                        val = notReplaceFlag
                    }
                    break;
                case "ODB":
                    var ODB;
                    ODB = $(node).attr("mdb");
                    if (!isEmptyOrNull(ODB)) {
                        val = '"' + ODB + '"'
                    } else {
                        val = notReplaceFlag
                    }
                    break;
                case "OMB":
                    var OMB;
                    OMB = $(node).attr("mmb");
                    if (!isEmptyOrNull(OMB)) {
                        val = '"' + OMB + '"'
                    } else {
                        val = notReplaceFlag
                    }
                    break;
                case "OGY":
                    var OGY;
                    OGY = $(node).attr("mtech");
                    if (!isEmptyOrNull(OGY)) {
                        val = '"' + OGY + '"'
                    } else {
                        val = notReplaceFlag
                    }
                    break;
                case "JOINW":
                    if (AllWinsW == 0 && AllWinsH == 0 && JOINMBEND == "N") {
                        getAllWinsSize()
                    }
                    val = AllWinsW;
                    break;
                case "JOINH":
                    if (AllWinsW == 0 && AllWinsH == 0 && JOINMBEND == "N") {
                        getAllWinsSize()
                    }
                    val = AllWinsH;
                    break;
                case "MBEND":
                    if (AllWinsW == 0 && AllWinsH == 0 && JOINMBEND == "N") {
                        getAllWinsSize()
                    }
                    val = '"' + JOINMBEND + '"';
                    break;
                case "MARCTNUM":
                    if (isEmptyOrNull(mCalcArcLen)) {
                        mCalcArcLen = MicroDraw_CalcDiviArcLen(ObjId);
                        MARCTNUM = Number(mCalcArcLen.MARCTNUM)
                    }
                    var MARCTNUM = Number(mCalcArcLen.MARCTNUM);
                    val = MARCTNUM;
                    break;
                case "ARCTL":
                    if (isEmptyOrNull(mCalcArcLen)) {
                        mCalcArcLen = MicroDraw_CalcDiviArcLen(ObjId)
                    }
                    var ARCTL = mCalcArcLen.ARCTL;
                    val = ARCTL;
                    break;
                case "ARCBKL":
                    if (isEmptyOrNull(mCalcArcLen)) {
                        mCalcArcLen = MicroDraw_CalcDiviArcLen(ObjId)
                    }
                    var ARCBKL = mCalcArcLen.ARCBKL;
                    val = ARCBKL;
                    break;
                case "ARCINYX":
                    if (isEmptyOrNull(mCalcArcLen)) {
                        mCalcArcLen = MicroDraw_CalcDiviArcLen(ObjId)
                    }
                    var ARCINYX = mCalcArcLen.ARCINYX;
                    val = ARCINYX;
                    break;
                case "ARCBR":
                    if (isEmptyOrNull(mCalcArcLen)) {
                        mCalcArcLen = MicroDraw_CalcDiviArcLen(ObjId)
                    }
                    var ARCBR = mCalcArcLen.ARCBR;
                    val = ARCBR;
                    break;
                case "MARCBKTC":
                    if (isEmptyOrNull(mCalcArcLen)) {
                        mCalcArcLen = MicroDraw_CalcDiviArcLen(ObjId)
                    }
                    var MARCBKTC = mCalcArcLen.MARCBKTC;
                    val = MARCBKTC;
                    break;
                case "JOINAREA":
                    var TAR = 0;
                    var JOINAREA = 0;
                    var combwinObj = $("#" + mDrawFlag_SvgId + ' [mtype = "' + mDrawFlag_combsortwin + '"]');
                    if (combwinObj.length > 0) {
                        if (!$.Micro.IsEmpty(combwinObj.attr(mDrawFlag_combsortwin))) {
                            JOINW = combwinObj.attr("combw");
                            JOINH = combwinObj.attr("combh");
                            if ($.Micro.IsEmpty(JOINW)) {
                                JOINW = 0
                            }
                            if ($.Micro.IsEmpty(JOINH)) {
                                JOINH = 0
                            }
                            JOINW = Number(JOINW);
                            JOINH = Number(JOINH);
                            JOINAREA = JOINW * JOINH / 1000000
                        }
                    }
                    var mareaTobjsArr = $.Micro.MergeObjs([$("#" + nodeW.getAttribute("id") + " [mtype='" + mDrawFlag_FrameRect + "']"), $("#" + nodeW.getAttribute("id") + "[mtype='" + mDrawFlag_Custom_arc + "']")]);
                    $.each(mareaTobjsArr,
                    function() {
                        var mWidth = Number($(this)[0].getAttribute("mwidth"));
                        var mHeight = Number($(this)[0].getAttribute("mheight"));
                        var areaExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "MAREA", "optValExp");
                        if (areaExp.length > 0) {
                            if (evalSelf < 2) {
                                TAR = MicroDraw_genData_calcExp(mcflId, areaExp, ObjId, xcxljgJson, 0, evalSelf + 1);
                                if (combwinObj.length > 0) {
                                    JOINAREA = MicroDraw_Cal_JOINAREA(mcflId, areaExp, xcxljgJson, evalSelf + 1)
                                }
                            }
                        } else {
                            TAR = (Number(mWidth) * Number(mHeight) / 1000000).toFixed(3)
                        }
                    });
                    if (combwinObj.length == 0) {
                        if (AllWinsW == 0 && AllWinsH == 0 && JOINMBEND == "N") {
                            getAllWinsSize()
                        }
                        if (JOINMBEND == "Y") {
                            JOINAREA = AllWinsW * AllWinsH / 1000000
                        } else {
                            JOINAREA = TAR
                        }
                    }
                    var svgArea = $("#" + mDrawFlag_SvgId).attr("area");
                    if (!$.Micro.IsEmpty(svgArea) && !isNaN(svgArea)) {
                        JOINAREA = Number(svgArea)
                    }
                    val = JOINAREA;
                    break;
                case "JOINFCNT":
                    var JOINFCNT = 0;
                    $("#" + mDrawFlag_SvgId + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(i, o) {
                        var omtype = o.getAttribute("mtype");
                        var arrOmtype = omtype.split("_");
                        var n = (arrOmtype[2].split("f")).length - 1;
                        JOINFCNT = Number(JOINFCNT) + Number(n)
                    });
                    val = JOINFCNT;
                    break;
                case "JOINSCNT":
                    var JOINSCNT = 0;
                    $("#" + mDrawFlag_SvgId + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(i, o) {
                        var TLC_OT = MicroDraw_getTlcObjType(o.id);
                        if (isEmptyOrNull(TLC_OT)) {
                            TLC_OT = ""
                        }
                        if (TLC_OT == "2推1纱") {
                            JOINSCNT = Number(JOINSCNT) + 1
                        } else {
                            if (TLC_OT == "4推2纱") {
                                JOINSCNT = Number(JOINSCNT) + 2
                            } else {
                                if (TLC_OT == "1推1固1纱") {
                                    JOINSCNT = Number(JOINSCNT) + 1
                                } else {
                                    if (TLC_OT == "2推2固2纱") {
                                        JOINSCNT = Number(JOINSCNT) + 2
                                    }
                                }
                            }
                        }
                    });
                    val = JOINSCNT;
                    break;
                case "JOINGCNT":
                    var JOINGCNT = 0;
                    JOINGCNT = $("#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_Glass + "]").length;
                    val = JOINGCNT;
                    break;
                case "KCNT":
                    var KCNT = 0;
                    KCNT = $("#" + mDrawFlag_SvgId + ' [mtype = "' + mDrawFlag_Win + '"]').length;
                    val = KCNT;
                    break;
                case "ZJLCNT":
                    var ZJLCNT = 0;
                    ZJLCNT += countCMcnt($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_CornerMaterial + "'][mangle!=0]"));
                    val = ZJLCNT;
                    break;
                case "PJLCNT":
                    var PJLCNT = 0;
                    PJLCNT += countCMcnt($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_CornerMaterial + "'][mangle=0]"));
                    val = PJLCNT;
                    break;
                case "HZJLCNT":
                    var HZJLCNT = 0;
                    HZJLCNT += countCMcnt($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_CornerMaterial_h + "'][mangle!=0]"));
                    val = HZJLCNT;
                    break;
                case "HPJLCNT":
                    var HPJLCNT = 0;
                    HPJLCNT += countCMcnt($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_CornerMaterial_h + "'][mangle=0]"));
                    val = HPJLCNT;
                    break;
                case "GBT":
                    var GBT = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "边封盖板厚度", "prid");
                    val = GBT;
                    break;
                case "AllWinsW":
                    if (AllWinsW == 0 && AllWinsH == 0 && JOINMBEND == "N") {
                        getAllWinsSize()
                    }
                    val = AllWinsW;
                    break;
                case "AllWinsH":
                    if (AllWinsW == 0 && AllWinsH == 0 && JOINMBEND == "N") {
                        getAllWinsSize()
                    }
                    val = AllWinsH;
                    break;
                case "GFHL":
                    var GFHL;
                    GFHL = node.getAttribute("mfhl");
                    if ($.Micro.IsEmpty(GFHL)) {
                        GFHL = "N"
                    }
                    val = '"' + GFHL + '"';
                    break;
                case "TLSWIDTH1":
                    var mfanwidth;
                    mfanwidth = node.getAttribute("mfanwidth");
                    if ($.Micro.IsEmpty(mfanwidth)) {
                        mfanwidth = "0"
                    }
                    var fanWidthArr = mfanwidth.split(",");
                    val = '"' + fanWidthArr[0] + '"';
                    break;
                case "TLSWIDTH2":
                    var mfanwidth;
                    mfanwidth = node.getAttribute("mfanwidth");
                    if ($.Micro.IsEmpty(mfanwidth)) {
                        mfanwidth = "0"
                    }
                    var fanWidthArr = mfanwidth.split(",");
                    if (fanWidthArr.length > 1) {
                        val = '"' + fanWidthArr[1] + '"'
                    } else {
                        val = 0
                    }
                    break;
                case "PRLEN":
                    if (!$.Micro.IsEmpty(pobj)) {
                        if (!$.Micro.IsEmpty(pobj.row)) {
                            if (!$.Micro.IsEmpty(pobj.row.xcxljgid)) {
                                var prlen = 0;
                                var xcxljgid = pobj.row.xcxljgid;
                                var _objid = pobj.row.ObjId;
                                var prrows = $("#" + mDrawPrProperty).datagrid("getRows");
                                $.each(prrows,
                                function(i, prrow) {
                                    if (prrow.ObjId == _objid && prrow.xcxljgid == xcxljgid) {
                                        prlen = prrow.Len;
                                        return false
                                    }
                                });
                                if ($.Micro.IsEmpty(prlen)) {
                                    prlen = 0
                                }
                                val = prlen
                            }
                        }
                    }
                    break;
                case "GLTH":
                    var glassSpec = "";
                    var objMtype = $("#" + ObjId).attr("mtype");
                    var glType = "";
                    if (objMtype == mDrawFlag_Glass) {
                        glType = "固玻宽度"
                    } else { (objMtype.substring(0, 3) == mDrawFlag_Tlc)
                    }
                    glType = "内扇玻宽度";
                    var glExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", glType, "glassExp");
                    var glExpArr = glExp.split(",");
                    var glassExp = glExpArr[0];
                    glassSpec = MicroCalc_CalcExp(mcflId, glassExp, ObjId, xcxljgJson, 0, evalSelf + 1, pobj);
                    var tuGlass = $(node).attr("mglass");
                    if (!isEmptyOrNull(tuGlass)) {
                        glassSpec = tuGlass
                    }
                    val = '"' + Micro_getGlassThick(glassSpec) + '"';
                    break;
                default:
                    if (evalFlag) {
                        exp = MicroCalc_CalcExp_replaceOptVal(exp);
                        val = notReplaceFlag
                    } else {
                        var optVal;
                        try {
                            optVal = eval(curVar)
                        } catch(exception) {
                            jQuery.messager.alert("提示:", "公式计算错误！<br/>原公式：" + expOrig + "  转换后：" + exp + " 存在异常！<br/>" + exception, "error");
                            throw "";
                            if (WEB_BUDGET_ISSIMPLE) {
                                if (AL_PROJECT_FROMBUDGET_ARGUMENT && AL_PROJECT_FROMBUDGET_ARGUMENT.opr == "copy") {
                                    AL_PROJECT_FROMBUDGET_ARGUMENT.isContinue = false
                                }
                            }
                            return ""
                        }
                        if (isEmptyOrNull(optVal)) {
                            var optVal = MicroCalc_getOptVal(curVar);
                            if (isEmptyOrNull(optVal)) {
                                optVal = '""'
                            } else {
                                if (isNaN(optVal)) {
                                    if (! (optVal.toString().substr(0, 1) == '"' || optVal.toString().substr(0, 1) == "'")) {
                                        optVal = '"' + optVal + '"'
                                    }
                                }
                            }
                            try {
                                eval(curVar.toString() + "=" + optVal.toString())
                            } catch(exception) {
                                jQuery.messager.alert("提示:", "选项参数实例化错误！<br/>：" + curVar.toString() + "=" + optVal.toString() + " 存在异常！<br/>" + exception, "error")
                            }
                        }
                        val = notReplaceFlag
                    }
                }
                if (val != notReplaceFlag) {
                    if (evalFlag) {
                        exp = replaceAll(exp, curVar, val)
                    } else {
                        try {
                            eval(curVar.toString() + "=" + val.toString())
                        } catch(exception) {
                            jQuery.messager.alert("提示:", "微高关键字实例化错误！<br/>：" + curVar.toString() + "=" + val.toString() + " 存在异常！<br/>" + exception, "error")
                        }
                    }
                }
                break;
            case "3":
                var val = notReplaceFlag;
                switch (curVar) {
                case "CNT":
                    val = MicroBudget_getPropertyValue(mBudgetWinProperty, "cnt");
                    break;
                case "FCNT":
                    var FCNT = 0;
                    $("#" + nodeW.getAttribute("id") + " [mtype='" + mDrawFlag_Pkc + "']").each(function(i, o) {
                        FCNT = Number(FCNT) + 1
                    });
                    $("#" + nodeW.getAttribute("id") + " [mtype='" + mDrawFlag_Dkc + "']").each(function(i, o) {
                        FCNT = Number(FCNT) + 2
                    });
                    val = FCNT;
                    break;
                case "OT":
                    var OT;
                    switch (mtype) {
                    case mDrawFlag_FrameRect:
                        OT = "框";
                        break;
                    case mDrawFlag_Pkc:
                        OT = "扇";
                        break;
                    case mDrawFlag_Dkc:
                        if (node.getAttribute("mfanswflag") == "1,1") {
                            OT = "2扇2纱"
                        } else {
                            OT = "2扇"
                        }
                        break;
                    case mDrawFlag_Custom_arc:
                        OT = "弧顶";
                        break;
                    default:
                        OT = "";
                        break
                    }
                    val = '"' + OT + '"';
                    break;
                case "FDIR":
                    var FDIR = "";
                    if (mtype == mDrawFlag_Pkc) {
                        FDIR = node.getAttribute("mopendir")
                    } else {
                        var pkcObjId = $("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Pkc + "']").attr("id");
                        if (!isEmptyOrNull(pkcObjId)) {
                            FDIR = $("#" + pkcObjId).attr("mopendir")
                        }
                    }
                    val = '"' + FDIR + '"';
                    break;
                case "W":
                    val = node.getAttribute("mwidth");
                    break;
                case "H":
                    val = node.getAttribute("mheight");
                    break;
                case "TAR":
                    var TAR = 0;
                    var mareaTobjsArr = $.Micro.MergeObjs([$("#" + nodeW.getAttribute("id") + " [mtype='" + mDrawFlag_FrameRect + "']"), $("#" + nodeW.getAttribute("id") + "[mtype='" + mDrawFlag_Custom_arc + "']")]);
                    $.each(mareaTobjsArr,
                    function() {
                        var mWidth = Number($(this)[0].getAttribute("mwidth"));
                        var mHeight = Number($(this)[0].getAttribute("mheight"));
                        TAR = (Number(mWidth) * Number(mHeight) / 1000000);
                        var areaExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "MAREA", "optValExp");
                        if (areaExp.length > 0) {
                            if (evalSelf < 2) {
                                if (exp.indexOf("MAREA") >= 0 || exp.indexOf("TAR") >= 0) {
                                    var firstFrameNode = $("#" + mDrawFlag_SvgId + " [mtype][mxcxlid]:first");
                                    if (firstFrameNode.length > 0) {
                                        var AreaObjId = firstFrameNode.attr("id")
                                    }
                                }
                                TAR = MicroCalc_CalcExp(mcflId, areaExp, AreaObjId, xcxljgJson, 0, evalSelf + 1, pobj)
                            }
                        } else {
                            TAR = (Number(mWidth) * Number(mHeight) / 1000000).toFixed(3)
                        }
                    });
                    var svgArea = $("#" + mDrawFlag_SvgId).attr("area");
                    if (!$.Micro.IsEmpty(svgArea) && !isNaN(svgArea)) {
                        TAR = Number(svgArea)
                    }
                    val = TAR;
                    break;
                case "GAR":
                    var GAR = 0;
                    var mCalcArcLen = MicroDraw_CalcDiviArcLen(ObjId);
                    var ARCGAREA = mCalcArcLen.ARCGAREA;
                    $("#" + nodeW.getAttribute("id") + "[mtype='" + mDrawFlag_Win + "'] [mtype='" + mDrawFlag_Glass + "']").each(function(i, o) {
                        var mWidth = $("#" + o.id)[0].getAttribute("mwidth");
                        var mHeight = $("#" + o.id)[0].getAttribute("mheight");
                        GAR = Number(GAR) + (Number(mWidth) * Number(mHeight) / 1000000).toFixed(2)
                    });
                    $("#" + nodeW.getAttribute("id") + "[mtype='" + mDrawFlag_Custom_arc + "'] [mtype='" + mDrawFlag_Glass + "']").each(function(i, o) {
                        GAR = Number(GAR) + ARCGAREA
                    });
                    val = GAR;
                    break;
                case "KAR":
                    var KAR = 0;
                    $("#" + nodeW.getAttribute("id") + " [mtype='" + mDrawFlag_Pkc + "']").each(function(i, o) {
                        var mWidth = $("#" + o.id)[0].getAttribute("mwidth");
                        var mHeight = $("#" + o.id)[0].getAttribute("mheight");
                        KAR = Number(KAR) + (Number(mWidth) * Number(mHeight) / 1000000).toFixed(2)
                    });
                    val = KAR;
                    break;
                case "PRKG":
                    var PRKG = 0;
                    var prrows = $("#" + mDrawPrProperty).datagrid("getRows");
                    if (prrows.length > 0) {
                        for (var m = 0; m < prrows.length; m++) {
                            var Cnt = prrows[m].Cnt;
                            if (Cnt > 0) {
                                if (!$.Micro.IsEmpty(mPublicPrList)) {
                                    for (var j = 0; j < mPublicPrList.length; j++) {
                                        if (prrows[m].ProductId == mPublicPrList[j].productid) {
                                            PRKG += (Cnt * mPublicPrList[j].mmkg * (prrows[m].Len / 1000)).toFixed(2)
                                        }
                                    }
                                }
                            }
                        }
                    }
                    val = PRKG.toFixed(2);
                    break;
                case "OGG":
                    var OGG;
                    OGG = $(node).attr("mglass");
                    if (!isEmptyOrNull(OGG)) {
                        val = '"' + OGG + '"'
                    } else {
                        val = notReplaceFlag
                    }
                    break;
                case "ODB":
                    var ODB;
                    ODB = $(node).attr("mdb");
                    if (!isEmptyOrNull(ODB)) {
                        val = '"' + ODB + '"'
                    } else {
                        val = notReplaceFlag
                    }
                    break;
                case "OMB":
                    var OMB;
                    OMB = $(node).attr("mmb");
                    if (!isEmptyOrNull(OMB)) {
                        val = '"' + OMB + '"'
                    } else {
                        val = notReplaceFlag
                    }
                    break;
                case "OGY":
                    var OGY;
                    OGY = $(node).attr("mtech");
                    if (!isEmptyOrNull(OGY)) {
                        val = '"' + OGY + '"'
                    } else {
                        val = notReplaceFlag
                    }
                    break;
                case "JOINW":
                    if (AllWinsW == 0 && AllWinsH == 0 && JOINMBEND == "N") {
                        getAllWinsSize()
                    }
                    val = AllWinsW;
                    break;
                case "JOINH":
                    if (AllWinsW == 0 && AllWinsH == 0 && JOINMBEND == "N") {
                        getAllWinsSize()
                    }
                    val = AllWinsH;
                    break;
                case "LEFTW":
                    var LEFTW = 0;
                    switch (mtype) {
                    case mDrawFlag_Dkc:
                        var mleftwidth = node.getAttribute("mleftwidth");
                        if (Number(mleftwidth) <= 0) {
                            LEFTW = MicroCalc_CalcExp(mcflId, " ((" + NKW + ") / 2)", ObjId, xcxljgJson, 0, evalSelf + 1, pobj)
                        } else {
                            LEFTW = mleftwidth
                        }
                        break
                    }
                    val = LEFTW;
                    break;
                case "GLASSCNT":
                    var GLASSCNT = 0;
                    var GlassCntArr = [];
                    $("#" + nodeW.getAttribute("id") + " [mglass]").each(function(i, o) {
                        var mglass = o.getAttribute("mglass");
                        var mtech = o.getAttribute("mtech");
                        var mdb = o.getAttribute("mdb");
                        var mmb = o.getAttribute("mmb");
                        if (isEmptyOrNull(mglass)) {
                            mglass = ""
                        }
                        if (isEmptyOrNull(mtech)) {
                            mtech = ""
                        }
                        if (isEmptyOrNull(mdb)) {
                            mdb = ""
                        }
                        if (isEmptyOrNull(mmb)) {
                            mmb = ""
                        }
                        var spec = mglass + mtech + mdb + mmb;
                        if ($.inArray(spec, GlassCntArr) == -1) {
                            GlassCntArr[GlassCntArr.length] = spec
                        }
                    });
                    GLASSCNT = GlassCntArr.length;
                    val = GLASSCNT;
                    break;
                case "JOINAREA":
                    var TAR = 0;
                    var JOINAREA = 0;
                    var combwinObj = $("#" + mDrawFlag_SvgId + ' [mtype = "' + mDrawFlag_combsortwin + '"]');
                    if (combwinObj.length > 0) {
                        if (!$.Micro.IsEmpty(combwinObj.attr(mDrawFlag_combsortwin))) {
                            JOINW = combwinObj.attr("combw");
                            JOINH = combwinObj.attr("combh");
                            if ($.Micro.IsEmpty(JOINW)) {
                                JOINW = 0
                            }
                            if ($.Micro.IsEmpty(JOINH)) {
                                JOINH = 0
                            }
                            JOINW = Number(JOINW);
                            JOINH = Number(JOINH);
                            JOINAREA = JOINW * JOINH / 1000000
                        }
                    }
                    var mareaTobjsArr = $.Micro.MergeObjs([$("#" + nodeW.getAttribute("id") + " [mtype='" + mDrawFlag_FrameRect + "']"), $("#" + nodeW.getAttribute("id") + "[mtype='" + mDrawFlag_Custom_arc + "']")]);
                    $.each(mareaTobjsArr,
                    function() {
                        var mWidth = Number($(this)[0].getAttribute("mwidth"));
                        var mHeight = Number($(this)[0].getAttribute("mheight"));
                        var areaExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "MAREA", "optValExp");
                        if (areaExp.length > 0) {
                            if (evalSelf < 2) {
                                TAR = MicroDraw_genData_calcExp(mcflId, areaExp, ObjId, xcxljgJson, 0, evalSelf + 1);
                                if (combwinObj.length > 0) {
                                    JOINAREA = MicroDraw_Cal_JOINAREA(mcflId, areaExp, xcxljgJson, evalSelf + 1)
                                }
                            }
                        } else {
                            TAR = (Number(mWidth) * Number(mHeight) / 1000000).toFixed(3)
                        }
                    });
                    if (combwinObj.length == 0) {
                        if (AllWinsW == 0 && AllWinsH == 0 && JOINMBEND == "N") {
                            getAllWinsSize()
                        }
                        if (JOINMBEND == "Y") {
                            JOINAREA = AllWinsW * AllWinsH / 1000000
                        } else {
                            JOINAREA = TAR
                        }
                    }
                    var svgArea = $("#" + mDrawFlag_SvgId).attr("area");
                    if (!$.Micro.IsEmpty(svgArea) && !isNaN(svgArea)) {
                        JOINAREA = Number(svgArea)
                    }
                    val = JOINAREA;
                    break;
                case "JOINFCNT":
                    var JOINFCNT = 0;
                    JOINFCNT = JOINFCNT + $("#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_Pkc + "]").length;
                    JOINFCNT = JOINFCNT + $("#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_Dkc + "]").length * 2;
                    val = JOINFCNT;
                    break;
                case "KCNT":
                    var KCNT = 0;
                    KCNT = $("#" + mDrawFlag_SvgId + ' [mtype = "' + mDrawFlag_Win + '"]').length;
                    val = KCNT;
                    break;
                case "ZJLCNT":
                    var ZJLCNT = 0;
                    ZJLCNT += countCMcnt($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_CornerMaterial + "'][mangle!=0]"));
                    val = ZJLCNT;
                    break;
                case "PJLCNT":
                    var PJLCNT = 0;
                    PJLCNT += countCMcnt($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_CornerMaterial + "'][mangle=0]"));
                    val = PJLCNT;
                    break;
                case "HZJLCNT":
                    var HZJLCNT = 0;
                    HZJLCNT += countCMcnt($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_CornerMaterial_h + "'][mangle!=0]"));
                    val = HZJLCNT;
                    break;
                case "HPJLCNT":
                    var HPJLCNT = 0;
                    HPJLCNT += countCMcnt($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_CornerMaterial_h + "'][mangle=0]"));
                    val = HPJLCNT;
                    break;
                case "SCNT":
                    var SCNT = 0;
                    $("#" + nodeW.getAttribute("id") + " [mtype='" + mDrawFlag_Pkc + "']").each(function(i, o) {
                        var msw = o.getAttribute("msw");
                        if (isEmptyOrNull(msw)) {
                            msw = ""
                        }
                        if (msw == "Y") {
                            SCNT = Number(SCNT) + 1
                        }
                    });
                    val = SCNT;
                    break;
                case "GCNT":
                    var GCNT = 0;
                    $("#" + nodeW.getAttribute("id") + " [mtype='" + mDrawFlag_Glass + "']").each(function(i, o) {
                        GCNT = Number(GCNT) + 1
                    });
                    val = GCNT;
                    break;
                case "AllWinsW":
                    if (AllWinsW == 0 && AllWinsH == 0 && JOINMBEND == "N") {
                        getAllWinsSize()
                    }
                    val = AllWinsW;
                    break;
                case "AllWinsH":
                    if (AllWinsW == 0 && AllWinsH == 0 && JOINMBEND == "N") {
                        getAllWinsSize()
                    }
                    val = AllWinsH;
                    break;
                case "PRLEN":
                    if (!$.Micro.IsEmpty(pobj)) {
                        if (!$.Micro.IsEmpty(pobj.row)) {
                            if (!$.Micro.IsEmpty(pobj.row.xcxljgid)) {
                                var prlen = 0;
                                var xcxljgid = pobj.row.xcxljgid;
                                var _objid = pobj.row.ObjId;
                                var prrows = $("#" + mDrawPrProperty).datagrid("getRows");
                                $.each(prrows,
                                function(i, prrow) {
                                    if (prrow.ObjId == _objid && prrow.xcxljgid == xcxljgid) {
                                        prlen = prrow.Len;
                                        return false
                                    }
                                });
                                if ($.Micro.IsEmpty(prlen)) {
                                    prlen = 0
                                }
                                val = prlen
                            }
                        }
                    }
                    break;
                case "GLTH":
                    var glassSpec = "";
                    var objMtype = $("#" + ObjId).attr("mtype");
                    var glType = "";
                    if (objMtype == mDrawFlag_Pkc || objMtype == mDrawFlag_Dkc) {
                        glType = "扇玻宽度"
                    }
                    var glExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", glType, "glassExp");
                    var glExpArr = glExp.split(",");
                    var glassExp = glExpArr[0];
                    glassSpec = MicroCalc_CalcExp(mcflId, glassExp, ObjId, xcxljgJson, 0, evalSelf + 1, pobj);
                    var tuGlass = $(node).attr("mglass");
                    if (!isEmptyOrNull(tuGlass)) {
                        glassSpec = tuGlass
                    }
                    val = '"' + Micro_getGlassThick(glassSpec) + '"';
                    break;
                default:
                    if (evalFlag) {
                        exp = MicroCalc_CalcExp_replaceOptVal(exp);
                        val = notReplaceFlag
                    } else {
                        var optVal;
                        try {
                            optVal = eval(curVar)
                        } catch(exception) {
                            jQuery.messager.alert("提示:", "公式计算错误！<br/>原公式：" + expOrig + "  转换后：" + exp + " 存在异常！<br/>" + exception, "error");
                            throw "";
                            if (WEB_BUDGET_ISSIMPLE) {
                                if (AL_PROJECT_FROMBUDGET_ARGUMENT && AL_PROJECT_FROMBUDGET_ARGUMENT.opr == "copy") {
                                    AL_PROJECT_FROMBUDGET_ARGUMENT.isContinue = false
                                }
                            }
                            return ""
                        }
                        if (isEmptyOrNull(optVal)) {
                            var optVal = MicroCalc_getOptVal(curVar);
                            if (isEmptyOrNull(optVal)) {
                                optVal = '""'
                            } else {
                                if (isNaN(optVal)) {
                                    if (! (optVal.toString().substr(0, 1) == '"' || optVal.toString().substr(0, 1) == "'")) {
                                        optVal = '"' + optVal + '"'
                                    }
                                }
                            }
                            try {
                                eval(curVar.toString() + "=" + optVal.toString())
                            } catch(exception) {
                                jQuery.messager.alert("提示:", "选项参数实例化错误！<br/>：" + curVar.toString() + "=" + optVal.toString() + " 存在异常！<br/>" + exception, "error")
                            }
                        }
                        val = notReplaceFlag
                    }
                }
                if (val != notReplaceFlag) {
                    if (evalFlag) {
                        exp = replaceAll(exp, curVar, val)
                    } else {
                        try {
                            eval(curVar.toString() + "=" + val.toString())
                        } catch(exception) {
                            jQuery.messager.alert("提示:", "微高关键字实例化错误！<br/>：" + curVar.toString() + "=" + val.toString() + " 存在异常！<br/>" + exception, "error")
                        }
                    }
                }
                break;
            case "4":
                var val = notReplaceFlag;
                var BCZDZ = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "标尺中对中", "prid");
                switch (curVar) {
                case "KW":
                    val = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "框宽度", "prid");
                    break;
                case "SG":
                    var SG;
                    var sgPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上轨", "prid");
                    if (sgPrId.length > 0) {
                        SG = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上轨宽度", "prid")
                    } else {
                        SG = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "框宽度", "prid")
                    }
                    val = SG;
                    break;
                case "GW":
                    val = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "高轨宽度", "prid");
                    break;
                case "DW":
                    val = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "低轨宽度", "prid");
                    break;
                case "CNT":
                    val = MicroBudget_getPropertyValue(mBudgetWinProperty, "cnt");
                    break;
                case "W":
                    val = node.getAttribute("mwidth");
                    break;
                case "H":
                    val = node.getAttribute("mheight");
                    break;
                case "KCNT":
                    var KCNT = 0;
                    KCNT = $("#" + mDrawFlag_SvgId + ' [mtype = "' + mDrawFlag_Win + '"]').length;
                    val = KCNT;
                    break;
                case "FCNT":
                    var FCNT = 0;
                    $("#" + nodeW.getAttribute("id") + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(i, o) {
                        var omtype = o.getAttribute("mtype");
                        var arrOmtype = omtype.split("_");
                        var n = (arrOmtype[2].split("f")).length - 1;
                        FCNT = Number(FCNT) + Number(n)
                    });
                    val = FCNT;
                    break;
                case "OCNT":
                    var OCNT = 0;
                    if (mtype.substr(0, 3) == mDrawFlag_Tlc) {
                        tem = mtype.substr(4);
                        OCNT = OCNT + Number(tem.substr(0, tem.indexOf("_")))
                    } else {
                        OCNT = OCNT + 1
                    }
                    val = OCNT;
                    break;
                case "GCNT":
                    var GCNT = 0;
                    $("#" + nodeW.getAttribute("id") + " [mtype='" + mDrawFlag_Glass + "']").each(function(i, o) {
                        GCNT = Number(GCNT) + 1
                    });
                    val = GCNT;
                    break;
                case "SCNT":
                    var SCNT = 0;
                    $("#" + nodeW.getAttribute("id") + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(i, o) {
                        var TLC_OT = MicroDraw_getTlcObjType(o.id);
                        if (isEmptyOrNull(TLC_OT)) {
                            TLC_OT = ""
                        }
                        if (TLC_OT == "2推1纱") {
                            SCNT = Number(SCNT) + 1
                        } else {
                            if (TLC_OT == "4推2纱") {
                                SCNT = Number(SCNT) + 2
                            } else {
                                if (TLC_OT == "1推1固1纱") {
                                    SCNT = Number(SCNT) + 1
                                } else {
                                    if (TLC_OT == "2推2固2纱") {
                                        SCNT = Number(SCNT) + 2
                                    }
                                }
                            }
                        }
                    });
                    val = SCNT;
                    break;
                case "GLASSCNT":
                    var GLASSCNT = 0;
                    var GlassCntArr = [];
                    $("#" + nodeW.getAttribute("id") + " [mglass]").each(function(i, o) {
                        var mglass = o.getAttribute("mglass");
                        var mtech = o.getAttribute("mtech");
                        var mdb = o.getAttribute("mdb");
                        var mmb = o.getAttribute("mmb");
                        if (isEmptyOrNull(mglass)) {
                            mglass = ""
                        }
                        if (isEmptyOrNull(mtech)) {
                            mtech = ""
                        }
                        if (isEmptyOrNull(mdb)) {
                            mdb = ""
                        }
                        if (isEmptyOrNull(mmb)) {
                            mmb = ""
                        }
                        var spec = mglass + mtech + mdb + mmb;
                        if ($.inArray(spec, GlassCntArr) == -1) {
                            GlassCntArr[GlassCntArr.length] = spec
                        }
                    });
                    GLASSCNT = GlassCntArr.length;
                    val = GLASSCNT;
                    break;
                case "OT":
                    var OT = MicroDraw_getTlcObjType(ObjId);
                    val = '"' + OT + '"';
                    break;
                case "TT":
                    var TT;
                    if (mtype == mDrawFlag_TingV) {
                        if (node.getAttribute("mtotallen") == "Y") {
                            TT = "1"
                        } else {
                            TT = "0"
                        }
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            if (node.getAttribute("mtotallen") == "Y") {
                                TT = "1"
                            } else {
                                TT = "0"
                            }
                        } else {
                            TT = "0"
                        }
                    }
                    val = '"' + TT + '"';
                    break;
                case "TK":
                    var TK;
                    if (mtype == mDrawFlag_TingV) {
                        TK = node.getAttribute("mkind")
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            var tingKind = MicroDraw_getTlmTingKind(ObjId);
                            if (tingKind.length > 0) {
                                var tingArr = tingKind.split(",");
                                if (tingArr[0] == "横挺") {
                                    TK = "N"
                                } else {
                                    if (tingArr[0] == "固上轨") {
                                        TK = "SG"
                                    }
                                }
                            }
                        } else {
                            TK = ""
                        }
                    }
                    val = '"' + TK + '"';
                    break;
                case "FOT":
                    var tlObjId = $("#" + mDrawFlag_SvgId + " [mtldir='lr']").attr("id");
                    var FOT = "";
                    if (!isEmptyOrNull(tlObjId)) {
                        FOT = MicroDraw_getTlcObjType(tlObjId)
                    }
                    val = '"' + FOT + '"';
                    break;
                case "TID":
                    var TID = node.getAttribute("mtid");
                    TID = isEmptyOrNull(TID) ? "": TID;
                    val = '"' + TID + '"';
                    break;
                case "BID":
                    var BID = node.getAttribute("mbid");
                    BID = isEmptyOrNull(BID) ? "": BID;
                    val = '"' + BID + '"';
                    break;
                case "LID":
                    var LID = node.getAttribute("mlid");
                    LID = isEmptyOrNull(LID) ? "": LID;
                    val = '"' + LID + '"';
                    break;
                case "RID":
                    var RID = node.getAttribute("mrid");
                    RID = isEmptyOrNull(RID) ? "": RID;
                    val = '"' + RID + '"';
                    break;
                case "TL":
                    var TK;
                    var TL;
                    var BCZDZ = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "标尺中对中", "prid");
                    if (mtype == mDrawFlag_TingV) {
                        TK = node.getAttribute("mkind");
                        if (node.getAttribute("mtl") == "0" && node.getAttribute("mtr") == "0") {
                            switch (TK) {
                            case "N":
                                TL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "竖挺宽度", "prid")) / 2;
                                break;
                            case "L":
                                TL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                break
                            }
                        } else {
                            TL = Number(node.getAttribute("mtl"))
                        }
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            var tingKind = MicroDraw_getTlmTingKind(ObjId);
                            if (tingKind.length > 0) {
                                var tingArr = tingKind.split(",");
                                if (node.getAttribute("mtl") == "0" && node.getAttribute("mtr") == "0") {
                                    if (tingArr[0] == "横挺") {
                                        TL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "横挺宽度", "prid")) / 2
                                    } else {
                                        if (tingArr[0] == "固上轨") {
                                            if (BCZDZ == "Y") {
                                                TL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上轨宽度", "prid") / 2
                                            } else {
                                                TL = 0
                                            }
                                        }
                                    }
                                } else {
                                    TL = Number(node.getAttribute("mtl"))
                                }
                            }
                        } else {
                            TL = 0
                        }
                    }
                    val = TL;
                    break;
                case "TR":
                    var TK;
                    var TR;
                    var BCZDZ = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "标尺中对中", "prid");
                    if (mtype == mDrawFlag_TingV) {
                        TK = node.getAttribute("mkind");
                        if (node.getAttribute("mtl") == "0" && node.getAttribute("mtr") == "0") {
                            switch (TK) {
                            case "N":
                                TR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "竖挺宽度", "prid")) / 2;
                                break;
                            case "L":
                                TR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                break
                            }
                        } else {
                            TR = Number(node.getAttribute("mtr"))
                        }
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            var tingKind = MicroDraw_getTlmTingKind(ObjId);
                            if (tingKind.length > 0) {
                                var tingArr = tingKind.split(",");
                                if (node.getAttribute("mtl") == "0" && node.getAttribute("mtr") == "0") {
                                    if (tingArr[0] == "横挺") {
                                        TR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "横挺宽度", "prid")) / 2
                                    } else {
                                        if (tingArr[0] == "固上轨") {
                                            if (BCZDZ == "Y") {
                                                TR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上轨宽度", "prid") / 2
                                            } else {
                                                TR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上轨宽度", "prid")
                                            }
                                        }
                                    }
                                } else {
                                    TR = Number(node.getAttribute("mtr"))
                                }
                            }
                        } else {
                            TR = 0
                        }
                    }
                    val = TR;
                    break;
                case "LTL":
                    var LID = node.getAttribute("mlid");
                    LID = isEmptyOrNull(LID) ? "": LID;
                    var nodeL;
                    if (!isEmptyOrNull(LID)) {
                        nodeL = $("#" + LID)[0]
                    }
                    var LTL;
                    if (mtype == mDrawFlag_TingV) {
                        LTL = 0
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            if (LID.length > 0) {
                                var tingType = MicroDraw_getTlmTingKind(LID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeL.getAttribute("mtl") == "0" && nodeL.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "竖挺":
                                            LTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "竖挺宽度", "prid")) / 2;
                                            break;
                                        case "转角":
                                            LTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                            break
                                        }
                                    } else {
                                        LTL = Number(nodeL.getAttribute("mtl"))
                                    }
                                } else {
                                    LTL = 0
                                }
                            } else {
                                LTL = 0
                            }
                        } else {
                            if (LID.length > 0) {
                                var tingType = MicroDraw_getTlmTingKind(LID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeL.getAttribute("mtl") == "0" && nodeL.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "竖挺":
                                            LTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "竖挺宽度", "prid")) / 2;
                                            break;
                                        case "转角":
                                            LTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                            break
                                        }
                                    } else {
                                        LTL = Number(nodeL.getAttribute("mtl"))
                                    }
                                } else {
                                    LTL = 0
                                }
                            } else {
                                LTL = 0
                            }
                        }
                    }
                    val = LTL;
                    break;
                case "LTR":
                    var LID = node.getAttribute("mlid");
                    LID = isEmptyOrNull(LID) ? "": LID;
                    var nodeL;
                    if (!isEmptyOrNull(LID)) {
                        nodeL = $("#" + LID)[0]
                    }
                    var LTR;
                    if (mtype == mDrawFlag_TingV) {
                        LTR = 0
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            if (LID.length > 0) {
                                var tingType = MicroDraw_getTlmTingKind(LID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeL.getAttribute("mtl") == "0" && nodeL.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "竖挺":
                                            LTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "竖挺宽度", "prid")) / 2;
                                            break;
                                        case "转角":
                                            LTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                            break
                                        }
                                    } else {
                                        LTR = Number(nodeL.getAttribute("mtr"))
                                    }
                                } else {
                                    LTR = 0
                                }
                            } else {
                                LTR = 0
                            }
                        } else {
                            if (LID.length > 0) {
                                var tingType = MicroDraw_getTlmTingKind(LID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeL.getAttribute("mtl") == "0" && nodeL.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "竖挺":
                                            LTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "竖挺宽度", "prid")) / 2;
                                            break;
                                        case "转角":
                                            LTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                            break
                                        }
                                    } else {
                                        LTR = Number(nodeL.getAttribute("mtr"))
                                    }
                                } else {
                                    LTR = 0
                                }
                            } else {
                                LTR = 0
                            }
                        }
                    }
                    val = LTR;
                    break;
                case "RTL":
                    var RID = node.getAttribute("mrid");
                    RID = isEmptyOrNull(RID) ? "": RID;
                    var nodeR;
                    if (!isEmptyOrNull(RID)) {
                        nodeR = $("#" + RID)[0]
                    }
                    var RTL;
                    var BCZDZ = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "标尺中对中", "prid");
                    if (mtype == mDrawFlag_TingV) {
                        RTL = 0
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            if (RID.length > 0) {
                                var tingType = MicroDraw_getTlmTingKind(RID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeR.getAttribute("mtl") == "0" && nodeR.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "竖挺":
                                            RTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "竖挺宽度", "prid")) / 2;
                                            break;
                                        case "转角":
                                            RTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                            break
                                        }
                                    } else {
                                        RTL = Number(nodeR.getAttribute("mtl"))
                                    }
                                } else {
                                    RTL = 0
                                }
                            } else {
                                RTL = 0
                            }
                        } else {
                            if (RID.length > 0) {
                                var tingType = MicroDraw_getTlmTingKind(RID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeR.getAttribute("mtl") == "0" && nodeR.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "竖挺":
                                            RTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "竖挺宽度", "prid")) / 2;
                                            break;
                                        case "转角":
                                            RTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                            break
                                        }
                                    } else {
                                        RTL = Number(nodeR.getAttribute("mtl"))
                                    }
                                } else {
                                    RTL = 0
                                }
                            } else {
                                RTL = 0
                            }
                        }
                    }
                    val = RTL;
                    break;
                case "RTR":
                    var RID = node.getAttribute("mrid");
                    RID = isEmptyOrNull(RID) ? "": RID;
                    var nodeR;
                    if (!isEmptyOrNull(RID)) {
                        nodeR = $("#" + RID)[0]
                    }
                    var RTR;
                    var BCZDZ = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "标尺中对中", "prid");
                    if (mtype == mDrawFlag_TingV) {
                        RTR = 0
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            if (RID.length > 0) {
                                var tingType = MicroDraw_getTlmTingKind(RID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeR.getAttribute("mtl") == "0" && nodeR.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "竖挺":
                                            RTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "竖挺宽度", "prid")) / 2;
                                            break;
                                        case "转角":
                                            RTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                            break
                                        }
                                    } else {
                                        RTR = Number(nodeR.getAttribute("mtr"))
                                    }
                                } else {
                                    RTR = 0
                                }
                            } else {
                                RTR = 0
                            }
                        } else {
                            if (RID.length > 0) {
                                var tingType = MicroDraw_getTlmTingKind(RID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeR.getAttribute("mtl") == "0" && nodeR.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "竖挺":
                                            RTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "竖挺宽度", "prid")) / 2;
                                            break;
                                        case "转角":
                                            RTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                            break
                                        }
                                    } else {
                                        RTR = Number(nodeR.getAttribute("mtr"))
                                    }
                                } else {
                                    RTR = 0
                                }
                            } else {
                                RTR = 0
                            }
                        }
                    }
                    val = RTR;
                    break;
                case "TTL":
                    var TID = node.getAttribute("mtid");
                    TID = isEmptyOrNull(TID) ? "": TID;
                    var nodeT;
                    if (!isEmptyOrNull(TID)) {
                        nodeT = $("#" + TID)[0]
                    }
                    var TTL;
                    var BCZDZ = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "标尺中对中", "prid");
                    if (mtype == mDrawFlag_TingV) {
                        if (TID.length > 0) {
                            var tingType = MicroDraw_getTlmTingKind(TID);
                            if (tingType.length > 0) {
                                var Arr = tingType.split(",");
                                if (nodeT.getAttribute("mtl") == "0" && nodeT.getAttribute("mtr") == "0") {
                                    switch (Arr[0]) {
                                    case "横挺":
                                        TTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "横挺宽度", "prid")) / 2;
                                        break;
                                    case "固上轨":
                                        if (BCZDZ == "Y") {
                                            TTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上轨宽度", "prid") / 2
                                        } else {
                                            TTL = 0
                                        }
                                        break
                                    }
                                } else {
                                    TTL = Number(nodeT.getAttribute("mtl"))
                                }
                            } else {
                                TTL = 0
                            }
                        } else {
                            TTL = 0
                        }
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            TTL = 0;
                            TTR = 0
                        } else {
                            if (TID.length > 0) {
                                var tingType = MicroDraw_getTlmTingKind(TID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeT.getAttribute("mtl") == "0" && nodeT.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "横挺":
                                            TTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "横挺宽度", "prid")) / 2;
                                            break;
                                        case "固上轨":
                                            if (BCZDZ == "Y") {
                                                TTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上轨宽度", "prid") / 2
                                            } else {
                                                TTL = 0
                                            }
                                            break
                                        }
                                    } else {
                                        TTL = Number(nodeT.getAttribute("mtl"))
                                    }
                                } else {
                                    TTL = 0
                                }
                            } else {
                                TTL = 0
                            }
                        }
                    }
                    val = TTL;
                    break;
                case "TTR":
                    var TID = node.getAttribute("mtid");
                    TID = isEmptyOrNull(TID) ? "": TID;
                    var nodeT;
                    if (!isEmptyOrNull(TID)) {
                        nodeT = $("#" + TID)[0]
                    }
                    var TTR;
                    var BCZDZ = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "标尺中对中", "prid");
                    if (mtype == mDrawFlag_TingV) {
                        if (TID.length > 0) {
                            var tingType = MicroDraw_getTlmTingKind(TID);
                            if (tingType.length > 0) {
                                var Arr = tingType.split(",");
                                if (nodeT.getAttribute("mtl") == "0" && nodeT.getAttribute("mtr") == "0") {
                                    switch (Arr[0]) {
                                    case "横挺":
                                        TTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "横挺宽度", "prid")) / 2;
                                        break;
                                    case "固上轨":
                                        if (BCZDZ == "Y") {
                                            TTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上轨宽度", "prid") / 2
                                        } else {
                                            TTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上轨宽度", "prid")
                                        }
                                        break
                                    }
                                } else {
                                    TTR = Number(nodeT.getAttribute("mtr"))
                                }
                            } else {
                                TTR = 0
                            }
                        } else {
                            TTR = 0
                        }
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            TTR = 0
                        } else {
                            if (TID.length > 0) {
                                var tingType = MicroDraw_getTlmTingKind(TID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeT.getAttribute("mtl") == "0" && nodeT.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "横挺":
                                            TTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "横挺宽度", "prid")) / 2;
                                            break;
                                        case "固上轨":
                                            if (BCZDZ == "Y") {
                                                TTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上轨宽度", "prid") / 2
                                            } else {
                                                TTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上轨宽度", "prid")
                                            }
                                            break
                                        }
                                    } else {
                                        TTR = Number(nodeT.getAttribute("mtr"))
                                    }
                                } else {
                                    TTR = 0
                                }
                            } else {
                                TTR = 0
                            }
                        }
                    }
                    val = TTR;
                    break;
                case "BTL":
                    var BID = node.getAttribute("mbid");
                    BID = isEmptyOrNull(BID) ? "": BID;
                    var nodeB;
                    if (!isEmptyOrNull(BID)) {
                        nodeB = $("#" + BID)[0]
                    }
                    var BTL;
                    var BCZDZ = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "标尺中对中", "prid");
                    if (mtype == mDrawFlag_TingV) {
                        if (BID.length > 0) {
                            var tingType = MicroDraw_getTlmTingKind(BID);
                            if (tingType.length > 0) {
                                var Arr = tingType.split(",");
                                if (nodeB.getAttribute("mtl") == "0" && nodeB.getAttribute("mtr") == "0") {
                                    switch (Arr[0]) {
                                    case "横挺":
                                        BTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "横挺宽度", "prid")) / 2;
                                        break;
                                    case "固上轨":
                                        if (BCZDZ == "Y") {
                                            BTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上轨宽度", "prid") / 2
                                        } else {
                                            BTL = 0
                                        }
                                        break
                                    }
                                } else {
                                    BTL = Number(nodeB.getAttribute("mtl"))
                                }
                            } else {
                                BTL = 0
                            }
                        } else {
                            BTL = 0
                        }
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            BTL = 0
                        } else {
                            if (BID.length > 0) {
                                var tingType = MicroDraw_getTlmTingKind(BID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeB.getAttribute("mtl") == "0" && nodeB.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "横挺":
                                            BTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "横挺宽度", "prid")) / 2;
                                            break;
                                        case "固上轨":
                                            if (BCZDZ == "Y") {
                                                BTL = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上轨宽度", "prid") / 2
                                            } else {
                                                BTL = 0
                                            }
                                            break
                                        }
                                    } else {
                                        BTL = Number(nodeB.getAttribute("mtl"))
                                    }
                                } else {
                                    BTL = 0
                                }
                            } else {
                                BTL = 0
                            }
                        }
                    }
                    val = BTL;
                    break;
                case "BTR":
                    var BID = node.getAttribute("mbid");
                    BID = isEmptyOrNull(BID) ? "": BID;
                    var nodeB;
                    if (!isEmptyOrNull(BID)) {
                        nodeB = $("#" + BID)[0]
                    }
                    var BTR;
                    var BCZDZ = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "标尺中对中", "prid");
                    if (mtype == mDrawFlag_TingV) {
                        if (BID.length > 0) {
                            var tingType = MicroDraw_getTlmTingKind(BID);
                            if (tingType.length > 0) {
                                var Arr = tingType.split(",");
                                if (nodeB.getAttribute("mtl") == "0" && nodeB.getAttribute("mtr") == "0") {
                                    switch (Arr[0]) {
                                    case "横挺":
                                        BTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "横挺宽度", "prid")) / 2;
                                        break;
                                    case "固上轨":
                                        if (BCZDZ == "Y") {
                                            BTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上轨宽度", "prid") / 2
                                        } else {
                                            BTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上轨宽度", "prid")
                                        }
                                        break
                                    }
                                } else {
                                    BTR = Number(nodeB.getAttribute("mtr"))
                                }
                            } else {
                                BTR = 0
                            }
                        } else {
                            BTR = 0
                        }
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            BTR = 0
                        } else {
                            if (BID.length > 0) {
                                var tingType = MicroDraw_getTlmTingKind(BID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeB.getAttribute("mtl") == "0" && nodeB.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "横挺":
                                            BTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "横挺宽度", "prid")) / 2;
                                            break;
                                        case "固上轨":
                                            if (BCZDZ == "Y") {
                                                BTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上轨宽度", "prid") / 2
                                            } else {
                                                BTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上轨宽度", "prid")
                                            }
                                            break
                                        }
                                    } else {
                                        BTR = Number(nodeB.getAttribute("mtr"))
                                    }
                                } else {
                                    BTR = 0
                                }
                            } else {
                                BTR = 0
                            }
                        }
                    }
                    val = BTR;
                    break;
                case "TAR":
                    var TAR = 0;
                    var mareaTobjsArr = $.Micro.MergeObjs([$("#" + nodeW.getAttribute("id") + " [mtype='" + mDrawFlag_FrameRect + "']"), $("#" + nodeW.getAttribute("id") + "[mtype='" + mDrawFlag_Custom_arc + "']")]);
                    $.each(mareaTobjsArr,
                    function() {
                        var mWidth = Number($(this)[0].getAttribute("mwidth"));
                        var mHeight = Number($(this)[0].getAttribute("mheight"));
                        TAR = (Number(mWidth) * Number(mHeight) / 1000000);
                        var areaExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "MAREA", "optValExp");
                        if (areaExp.length > 0) {
                            if (evalSelf < 2) {
                                if (exp.indexOf("MAREA") >= 0 || exp.indexOf("TAR") >= 0) {
                                    var firstFrameNode = $("#" + mDrawFlag_SvgId + " [mtype][mxcxlid]:first");
                                    if (firstFrameNode.length > 0) {
                                        var AreaObjId = firstFrameNode.attr("id")
                                    }
                                }
                                TAR = MicroCalc_CalcExp(mcflId, areaExp, AreaObjId, xcxljgJson, 0, evalSelf + 1, pobj)
                            }
                        } else {
                            TAR = (Number(mWidth) * Number(mHeight) / 1000000).toFixed(3)
                        }
                    });
                    var svgArea = $("#" + mDrawFlag_SvgId).attr("area");
                    if (!$.Micro.IsEmpty(svgArea) && !isNaN(svgArea)) {
                        TAR = Number(svgArea)
                    }
                    val = TAR;
                    break;
                case "GAR":
                    var GAR = 0;
                    var mCalcArcLen = MicroDraw_CalcDiviArcLen(ObjId);
                    var ARCGAREA = mCalcArcLen.ARCGAREA;
                    $("#" + nodeW.getAttribute("id") + "[mtype='" + mDrawFlag_Win + "'] [mtype='" + mDrawFlag_Glass + "']").each(function(i, o) {
                        var mWidth = $("#" + o.id)[0].getAttribute("mwidth");
                        var mHeight = $("#" + o.id)[0].getAttribute("mheight");
                        GAR = Number(GAR) + (Number(mWidth) * Number(mHeight) / 1000000).toFixed(2)
                    });
                    $("#" + nodeW.getAttribute("id") + "[mtype='" + mDrawFlag_Custom_arc + "'] [mtype='" + mDrawFlag_Glass + "']").each(function(i, o) {
                        GAR = Number(GAR) + ARCGAREA
                    });
                    val = GAR;
                    break;
                case "KAR":
                    var KAR = 0;
                    $("#" + nodeW.getAttribute("id") + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(i, o) {
                        var mWidth = $("#" + o.id)[0].getAttribute("mwidth");
                        var mHeight = $("#" + o.id)[0].getAttribute("mheight");
                        KAR = Number(KAR) + (Number(mWidth) * Number(mHeight) / 1000000).toFixed(2)
                    });
                    val = KAR;
                    break;
                case "PRKG":
                    var PRKG = 0;
                    var prrows = $("#" + mDrawPrProperty).datagrid("getRows");
                    if (prrows.length > 0) {
                        for (var m = 0; m < prrows.length; m++) {
                            var Cnt = prrows[m].Cnt;
                            if (Cnt > 0) {
                                if (!$.Micro.IsEmpty(mPublicPrList)) {
                                    for (var j = 0; j < mPublicPrList.length; j++) {
                                        if (prrows[m].ProductId == mPublicPrList[j].productid) {
                                            PRKG += (Cnt * mPublicPrList[j].mmkg * (prrows[m].Len / 1000)).toFixed(2)
                                        }
                                    }
                                }
                            }
                        }
                    }
                    val = PRKG.toFixed(2);
                    break;
                case "OGG":
                    var OGG;
                    OGG = $(node).attr("mglass");
                    if (!isEmptyOrNull(OGG)) {
                        val = '"' + OGG + '"'
                    } else {
                        val = notReplaceFlag
                    }
                    break;
                case "ODB":
                    var ODB;
                    ODB = $(node).attr("mdb");
                    if (!isEmptyOrNull(ODB)) {
                        val = '"' + ODB + '"'
                    } else {
                        val = notReplaceFlag
                    }
                    break;
                case "OMB":
                    var OMB;
                    OMB = $(node).attr("mmb");
                    if (!isEmptyOrNull(OMB)) {
                        val = '"' + OMB + '"'
                    } else {
                        val = notReplaceFlag
                    }
                    break;
                case "OGY":
                    var OGY;
                    OGY = $(node).attr("mtech");
                    if (!isEmptyOrNull(OGY)) {
                        val = '"' + OGY + '"'
                    } else {
                        val = notReplaceFlag
                    }
                    break;
                case "MBEND":
                    if (AllWinsW == 0 && AllWinsH == 0 && JOINMBEND == "N") {
                        getAllWinsSize()
                    }
                    val = '"' + JOINMBEND + '"';
                    break;
                case "MARCTNUM":
                    if (isEmptyOrNull(mCalcArcLen)) {
                        mCalcArcLen = MicroDraw_CalcDiviArcLen(ObjId);
                        MARCTNUM = Number(mCalcArcLen.MARCTNUM)
                    }
                    var MARCTNUM = Number(mCalcArcLen.MARCTNUM);
                    val = MARCTNUM;
                    break;
                case "ARCTL":
                    if (isEmptyOrNull(mCalcArcLen)) {
                        mCalcArcLen = MicroDraw_CalcDiviArcLen(ObjId)
                    }
                    var ARCTL = mCalcArcLen.ARCTL;
                    val = ARCTL;
                    break;
                case "ARCBKL":
                    if (isEmptyOrNull(mCalcArcLen)) {
                        mCalcArcLen = MicroDraw_CalcDiviArcLen(ObjId)
                    }
                    var ARCBKL = mCalcArcLen.ARCBKL;
                    val = ARCBKL;
                    break;
                case "ARCINYX":
                    if (isEmptyOrNull(mCalcArcLen)) {
                        mCalcArcLen = MicroDraw_CalcDiviArcLen(ObjId)
                    }
                    var ARCINYX = mCalcArcLen.ARCINYX;
                    val = ARCINYX;
                    break;
                case "ARCBR":
                    if (isEmptyOrNull(mCalcArcLen)) {
                        mCalcArcLen = MicroDraw_CalcDiviArcLen(ObjId)
                    }
                    var ARCBR = mCalcArcLen.ARCBR;
                    val = ARCBR;
                    break;
                case "MARCBKTC":
                    if (isEmptyOrNull(mCalcArcLen)) {
                        mCalcArcLen = MicroDraw_CalcDiviArcLen(ObjId)
                    }
                    var MARCBKTC = mCalcArcLen.MARCBKTC;
                    val = MARCBKTC;
                    break;
                case "JOINW":
                    if (AllWinsW == 0 && AllWinsH == 0 && JOINMBEND == "N") {
                        getAllWinsSize()
                    }
                    val = AllWinsW;
                    break;
                case "JOINH":
                    if (AllWinsW == 0 && AllWinsH == 0 && JOINMBEND == "N") {
                        getAllWinsSize()
                    }
                    val = AllWinsH;
                    break;
                case "JOINAREA":
                    var TAR = 0;
                    var JOINAREA = 0;
                    var combwinObj = $("#" + mDrawFlag_SvgId + ' [mtype = "' + mDrawFlag_combsortwin + '"]');
                    if (combwinObj.length > 0) {
                        if (!$.Micro.IsEmpty(combwinObj.attr(mDrawFlag_combsortwin))) {
                            JOINW = combwinObj.attr("combw");
                            JOINH = combwinObj.attr("combh");
                            if ($.Micro.IsEmpty(JOINW)) {
                                JOINW = 0
                            }
                            if ($.Micro.IsEmpty(JOINH)) {
                                JOINH = 0
                            }
                            JOINW = Number(JOINW);
                            JOINH = Number(JOINH);
                            JOINAREA = JOINW * JOINH / 1000000
                        }
                    }
                    var mareaTobjsArr = $.Micro.MergeObjs([$("#" + nodeW.getAttribute("id") + " [mtype='" + mDrawFlag_FrameRect + "']"), $("#" + nodeW.getAttribute("id") + "[mtype='" + mDrawFlag_Custom_arc + "']")]);
                    $.each(mareaTobjsArr,
                    function() {
                        var mWidth = Number($(this)[0].getAttribute("mwidth"));
                        var mHeight = Number($(this)[0].getAttribute("mheight"));
                        var areaExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "MAREA", "optValExp");
                        if (areaExp.length > 0) {
                            if (evalSelf < 2) {
                                TAR = MicroDraw_genData_calcExp(mcflId, areaExp, ObjId, xcxljgJson, 0, evalSelf + 1);
                                if (combwinObj.length > 0) {
                                    JOINAREA = MicroDraw_Cal_JOINAREA(mcflId, areaExp, xcxljgJson, evalSelf + 1)
                                }
                            }
                        } else {
                            TAR = (Number(mWidth) * Number(mHeight) / 1000000).toFixed(3)
                        }
                    });
                    if (combwinObj.length == 0) {
                        if (AllWinsW == 0 && AllWinsH == 0 && JOINMBEND == "N") {
                            getAllWinsSize()
                        }
                        if (JOINMBEND == "Y") {
                            JOINAREA = AllWinsW * AllWinsH / 1000000
                        } else {
                            JOINAREA = TAR
                        }
                    }
                    var svgArea = $("#" + mDrawFlag_SvgId).attr("area");
                    if (!$.Micro.IsEmpty(svgArea) && !isNaN(svgArea)) {
                        JOINAREA = Number(svgArea)
                    }
                    val = JOINAREA;
                    break;
                case "JOINFCNT":
                    var JOINFCNT = 0;
                    $("#" + mDrawFlag_SvgId + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(i, o) {
                        var omtype = o.getAttribute("mtype");
                        var arrOmtype = omtype.split("_");
                        var n = (arrOmtype[2].split("f")).length - 1;
                        JOINFCNT = Number(JOINFCNT) + Number(n)
                    });
                    val = JOINFCNT;
                    break;
                case "JOINSCNT":
                    var JOINSCNT = 0;
                    $("#" + mDrawFlag_SvgId + " [mtype*='" + mDrawFlag_Tlc + "']").each(function(i, o) {
                        var TLC_OT = MicroDraw_getTlcObjType(o.id);
                        if (isEmptyOrNull(TLC_OT)) {
                            TLC_OT = ""
                        }
                        if (TLC_OT == "2推1纱") {
                            JOINSCNT = Number(JOINSCNT) + 1
                        } else {
                            if (TLC_OT == "4推2纱") {
                                JOINSCNT = Number(JOINSCNT) + 2
                            } else {
                                if (TLC_OT == "1推1固1纱") {
                                    JOINSCNT = Number(JOINSCNT) + 1
                                } else {
                                    if (TLC_OT == "2推2固2纱") {
                                        JOINSCNT = Number(JOINSCNT) + 2
                                    }
                                }
                            }
                        }
                    });
                    val = JOINSCNT;
                    break;
                case "JOINGCNT":
                    var JOINGCNT = 0;
                    JOINGCNT = $("#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_Glass + "]").length;
                    val = JOINGCNT;
                    break;
                case "ZJLCNT":
                    var ZJLCNT = 0;
                    ZJLCNT += countCMcnt($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_CornerMaterial + "'][mangle!=0]"));
                    val = ZJLCNT;
                    break;
                case "PJLCNT":
                    var PJLCNT = 0;
                    PJLCNT += countCMcnt($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_CornerMaterial + "'][mangle=0]"));
                    val = PJLCNT;
                    break;
                case "HZJLCNT":
                    var HZJLCNT = 0;
                    HZJLCNT += countCMcnt($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_CornerMaterial_h + "'][mangle!=0]"));
                    val = HZJLCNT;
                    break;
                case "HPJLCNT":
                    var HPJLCNT = 0;
                    HPJLCNT += countCMcnt($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_CornerMaterial_h + "'][mangle=0]"));
                    val = HPJLCNT;
                    break;
                case "AllWinsW":
                    if (AllWinsW == 0 && AllWinsH == 0 && JOINMBEND == "N") {
                        getAllWinsSize()
                    }
                    val = AllWinsW;
                    break;
                case "AllWinsH":
                    if (AllWinsW == 0 && AllWinsH == 0 && JOINMBEND == "N") {
                        getAllWinsSize()
                    }
                    val = AllWinsH;
                    break;
                case "TLSWIDTH1":
                    var mfanwidth;
                    mfanwidth = node.getAttribute("mfanwidth");
                    if ($.Micro.IsEmpty(mfanwidth)) {
                        mfanwidth = "0"
                    }
                    var fanWidthArr = mfanwidth.split(",");
                    val = '"' + fanWidthArr[0] + '"';
                    break;
                case "TLSWIDTH2":
                    var mfanwidth;
                    mfanwidth = node.getAttribute("mfanwidth");
                    if ($.Micro.IsEmpty(mfanwidth)) {
                        mfanwidth = "0"
                    }
                    var fanWidthArr = mfanwidth.split(",");
                    if (fanWidthArr.length > 1) {
                        val = '"' + fanWidthArr[1] + '"'
                    } else {
                        val = 0
                    }
                    break;
                case "PRLEN":
                    if (!$.Micro.IsEmpty(pobj)) {
                        if (!$.Micro.IsEmpty(pobj.row)) {
                            if (!$.Micro.IsEmpty(pobj.row.xcxljgid)) {
                                var prlen = 0;
                                var xcxljgid = pobj.row.xcxljgid;
                                var _objid = pobj.row.ObjId;
                                var prrows = $("#" + mDrawPrProperty).datagrid("getRows");
                                $.each(prrows,
                                function(i, prrow) {
                                    if (prrow.ObjId == _objid && prrow.xcxljgid == xcxljgid) {
                                        prlen = prrow.Len;
                                        return false
                                    }
                                });
                                if ($.Micro.IsEmpty(prlen)) {
                                    prlen = 0
                                }
                                val = prlen
                            }
                        }
                    }
                    break;
                case "GLTH":
                    var glassSpec = "";
                    var objMtype = $("#" + ObjId).attr("mtype");
                    var glType = "";
                    if (objMtype == mDrawFlag_Glass) {
                        glType = "固玻宽度"
                    } else { (objMtype.substring(0, 3) == mDrawFlag_Tlc)
                    }
                    glType = "扇玻宽度";
                    var glExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", glType, "glassExp");
                    var glExpArr = glExp.split(",");
                    var glassExp = glExpArr[0];
                    glassSpec = MicroCalc_CalcExp(mcflId, glassExp, ObjId, xcxljgJson, 0, evalSelf + 1, pobj);
                    var tuGlass = $(node).attr("mglass");
                    if (!isEmptyOrNull(tuGlass)) {
                        glassSpec = tuGlass
                    }
                    val = '"' + Micro_getGlassThick(glassSpec) + '"';
                    break;
                default:
                    if (evalFlag) {
                        exp = MicroCalc_CalcExp_replaceOptVal(exp);
                        val = notReplaceFlag
                    } else {
                        var optVal;
                        try {
                            optVal = eval(curVar)
                        } catch(exception) {
                            jQuery.messager.alert("提示:", "公式计算错误！<br/>原公式：" + expOrig + "  转换后：" + exp + " 存在异常！<br/>" + exception, "error");
                            throw "";
                            if (WEB_BUDGET_ISSIMPLE) {
                                if (AL_PROJECT_FROMBUDGET_ARGUMENT && AL_PROJECT_FROMBUDGET_ARGUMENT.opr == "copy") {
                                    AL_PROJECT_FROMBUDGET_ARGUMENT.isContinue = false
                                }
                            }
                            return ""
                        }
                        if (isEmptyOrNull(optVal)) {
                            var optVal = MicroCalc_getOptVal(curVar);
                            if (isEmptyOrNull(optVal)) {
                                optVal = '""'
                            } else {
                                if (isNaN(optVal)) {
                                    if (! (optVal.toString().substr(0, 1) == '"' || optVal.toString().substr(0, 1) == "'")) {
                                        optVal = '"' + optVal + '"'
                                    }
                                }
                            }
                            try {
                                eval(curVar.toString() + "=" + optVal.toString())
                            } catch(exception) {
                                jQuery.messager.alert("提示:", "选项参数实例化错误！<br/>：" + curVar.toString() + "=" + optVal.toString() + " 存在异常！<br/>" + exception, "error")
                            }
                        }
                        val = notReplaceFlag
                    }
                }
                if (val != notReplaceFlag) {
                    if (evalFlag) {
                        exp = replaceAll(exp, curVar, val)
                    } else {
                        try {
                            eval(curVar.toString() + "=" + val.toString())
                        } catch(exception) {
                            jQuery.messager.alert("提示:", "微高关键字实例化错误！<br/>：" + curVar.toString() + "=" + val.toString() + " 存在异常！<br/>" + exception, "error")
                        }
                    }
                }
                break;
            case "5":
                var val = notReplaceFlag;
                switch (curVar) {
                case "KW":
                    val = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "框宽度", "prid");
                    break;
                case "SG":
                    var SG;
                    var sgPrId = MicroDraw_getData_getXcxljgData(xcxljgJson, "P", "上轨", "prid");
                    if (sgPrId.length > 0) {
                        SG = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上轨宽度", "prid")
                    } else {
                        SG = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "框宽度", "prid")
                    }
                    val = SG;
                    break;
                case "GW":
                    val = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "高轨宽度", "prid");
                    break;
                case "DW":
                    val = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "低轨宽度", "prid");
                    break;
                case "CNT":
                    val = MicroBudget_getPropertyValue(mBudgetWinProperty, "cnt");
                    break;
                case "W":
                    val = node.getAttribute("mwidth");
                    break;
                case "H":
                    val = node.getAttribute("mheight");
                    break;
                case "KCNT":
                    val = $("#" + mDrawFlag_SvgId + ' [mtype = "' + mDrawFlag_Win + '"]').length;
                    break;
                case "FCNT":
                    var FCNT = 0;
                    $("#" + nodeW.getAttribute("id") + " [mtype*='" + mDrawFlag_Zdm + "']").each(function(i, o) {
                        var omtype = o.getAttribute("mtype");
                        var arrOmtype = omtype.split("_");
                        var n = Number(arrOmtype[1].substr(0, arrOmtype[1].indexOf("_")));
                        FCNT = Number(FCNT) + Number(n)
                    });
                    val = FCNT;
                    break;
                case "OCNT":
                    var OCNT = 0;
                    if (mtype.substr(0, 3) == mDrawFlag_Zdm) {
                        tem = mtype.substr(4);
                        OCNT = OCNT + Number(tem.substr(0, tem.indexOf("_")))
                    } else {
                        OCNT = OCNT + 1
                    }
                    val = OCNT;
                    break;
                case "GCNT":
                    var GCNT = 0;
                    $("#" + nodeW.getAttribute("id") + " [mtype='" + mDrawFlag_Glass + "']").each(function(i, o) {
                        GCNT = Number(GCNT) + 1
                    });
                    val = GCNT;
                    break;
                case "GLASSCNT":
                    var GLASSCNT = 0;
                    var GlassCntArr = [];
                    $("#" + nodeW.getAttribute("id") + " [mglass]").each(function(i, o) {
                        var mglass = o.getAttribute("mglass");
                        var mtech = o.getAttribute("mtech");
                        var mdb = o.getAttribute("mdb");
                        var mmb = o.getAttribute("mmb");
                        if (isEmptyOrNull(mglass)) {
                            mglass = ""
                        }
                        if (isEmptyOrNull(mtech)) {
                            mtech = ""
                        }
                        if (isEmptyOrNull(mdb)) {
                            mdb = ""
                        }
                        if (isEmptyOrNull(mmb)) {
                            mmb = ""
                        }
                        var spec = mglass + mtech + mdb + mmb;
                        if ($.inArray(spec, GlassCntArr) == -1) {
                            GlassCntArr[GlassCntArr.length] = spec
                        }
                    });
                    GLASSCNT = GlassCntArr.length;
                    val = GLASSCNT;
                    break;
                case "LSCNT":
                    var LSCNT = 0;
                    LSCNT = $(node).attr("mlscnt");
                    if (isEmptyOrNull(LSCNT)) {
                        LSCNT = 0;
                        $("#" + nodeW.getAttribute("id") + " [mtype*='" + mDrawFlag_Zdm + "']").each(function(i, o) {
                            var n = o.getAttribute("mlscnt");
                            if (isEmptyOrNull(n)) {
                                n = 0
                            }
                            LSCNT = Number(LSCNT) + Number(n)
                        })
                    } else {
                        LSCNT = Number(LSCNT)
                    }
                    val = LSCNT;
                    break;
                case "RSCNT":
                    var RSCNT = 0;
                    RSCNT = $(node).attr("mrscnt");
                    if (isEmptyOrNull(RSCNT)) {
                        RSCNT = 0;
                        $("#" + nodeW.getAttribute("id") + " [mtype*='" + mDrawFlag_Zdm + "']").each(function(i, o) {
                            var n = o.getAttribute("mrscnt");
                            if (isEmptyOrNull(n)) {
                                n = 0
                            }
                            RSCNT = Number(RSCNT) + Number(n)
                        })
                    } else {
                        RSCNT = Number(RSCNT)
                    }
                    val = RSCNT;
                    break;
                case "TAR":
                    var TAR = 0;
                    var mareaTobjsArr = $.Micro.MergeObjs([$("#" + nodeW.getAttribute("id") + " [mtype='" + mDrawFlag_FrameRect + "']"), $("#" + nodeW.getAttribute("id") + "[mtype='" + mDrawFlag_Custom_arc + "']")]);
                    $.each(mareaTobjsArr,
                    function() {
                        var mWidth = Number($(this)[0].getAttribute("mwidth"));
                        var mHeight = Number($(this)[0].getAttribute("mheight"));
                        TAR = (Number(mWidth) * Number(mHeight) / 1000000);
                        var areaExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "MAREA", "optValExp");
                        if (areaExp.length > 0) {
                            if (evalSelf < 2) {
                                if (exp.indexOf("MAREA") >= 0 || exp.indexOf("TAR") >= 0) {
                                    var firstFrameNode = $("#" + mDrawFlag_SvgId + " [mtype][mxcxlid]:first");
                                    if (firstFrameNode.length > 0) {
                                        var AreaObjId = firstFrameNode.attr("id")
                                    }
                                }
                                TAR = MicroCalc_CalcExp(mcflId, areaExp, AreaObjId, xcxljgJson, 0, evalSelf + 1, pobj)
                            }
                        } else {
                            TAR = (Number(mWidth) * Number(mHeight) / 1000000).toFixed(3)
                        }
                    });
                    var svgArea = $("#" + mDrawFlag_SvgId).attr("area");
                    if (!$.Micro.IsEmpty(svgArea) && !isNaN(svgArea)) {
                        TAR = Number(svgArea)
                    }
                    val = TAR;
                case "GAR":
                    var GAR = 0;
                    var mCalcArcLen = MicroDraw_CalcDiviArcLen(ObjId);
                    var ARCGAREA = mCalcArcLen.ARCGAREA;
                    $("#" + nodeW.getAttribute("id") + "[mtype='" + mDrawFlag_Win + "'] [mtype='" + mDrawFlag_Glass + "']").each(function(i, o) {
                        var mWidth = $("#" + o.id)[0].getAttribute("mwidth");
                        var mHeight = $("#" + o.id)[0].getAttribute("mheight");
                        GAR = Number(GAR) + (Number(mWidth) * Number(mHeight) / 1000000).toFixed(2)
                    });
                    $("#" + nodeW.getAttribute("id") + "[mtype='" + mDrawFlag_Custom_arc + "'] [mtype='" + mDrawFlag_Glass + "']").each(function(i, o) {
                        GAR = Number(GAR) + ARCGAREA
                    });
                    val = GAR;
                    break;
                case "KAR":
                    $("#" + nodeW.getAttribute("id") + " [mtype*='" + mDrawFlag_Zdm + "']").each(function(i, o) {
                        var mWidth = $("#" + o.id)[0].getAttribute("mwidth");
                        var mHeight = $("#" + o.id)[0].getAttribute("mheight");
                        KAR = Number(KAR) + (Number(mWidth) * Number(mHeight) / 1000000).toFixed(2)
                    });
                    val = KAR;
                    break;
                case "PRKG":
                    var PRKG = 0;
                    var prrows = $("#" + mDrawPrProperty).datagrid("getRows");
                    if (prrows.length > 0) {
                        for (var m = 0; m < prrows.length; m++) {
                            var Cnt = prrows[m].Cnt;
                            if (Cnt > 0) {
                                if (!$.Micro.IsEmpty(mPublicPrList)) {
                                    for (var j = 0; j < mPublicPrList.length; j++) {
                                        if (prrows[m].ProductId == mPublicPrList[j].productid) {
                                            PRKG += (Cnt * mPublicPrList[j].mmkg * (prrows[m].Len / 1000)).toFixed(2)
                                        }
                                    }
                                }
                            }
                        }
                    }
                    val = PRKG.toFixed(2);
                    break;
                case "OT":
                    var OT = "";
                    switch (mtype) {
                    case mDrawFlag_FrameRect:
                        OT = "框";
                        break;
                    case mDrawFlag_Glass:
                        OT = "固玻";
                        break;
                    case mDrawFlag_TingV:
                        OT = "竖挺";
                        break;
                    case mDrawFlag_TingH:
                        OT = "横挺";
                        break;
                    case mDrawFlag_Custom_arc:
                        OT = "弧顶";
                        break;
                    default:
                        if (mtype.substr(0, 3) == mDrawFlag_Zdm) {
                            OT = "扇"
                        }
                        break
                    }
                    val = '"' + OT + '"';
                    break;
                case "TT":
                    var TT;
                    if (mtype == mDrawFlag_TingV) {
                        if (node.getAttribute("mtotallen") == "Y") {
                            TT = "1"
                        } else {
                            TT = "0"
                        }
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            if (node.getAttribute("mtotallen") == "Y") {
                                TT = "1"
                            } else {
                                TT = "0"
                            }
                        } else {
                            TT = "0"
                        }
                    }
                    val = '"' + TT + '"';
                    break;
                case "TK":
                    var TK;
                    if (mtype == mDrawFlag_TingV) {
                        TK = node.getAttribute("mkind")
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            var tingKind = MicroDraw_getTlmTingKind(ObjId);
                            if (tingKind.length > 0) {
                                var tingArr = tingKind.split(",");
                                if (tingArr[0] == "横挺") {
                                    TK = "N"
                                } else {
                                    if (tingArr[0] == "固上轨") {
                                        TK = "SG"
                                    }
                                }
                            }
                        } else {
                            TK = ""
                        }
                    }
                    val = '"' + TK + '"';
                    break;
                case "TID":
                    var TID = node.getAttribute("mtid");
                    TID = isEmptyOrNull(TID) ? "": TID;
                    val = '"' + TID + '"';
                    break;
                case "BID":
                    var BID = node.getAttribute("mbid");
                    BID = isEmptyOrNull(BID) ? "": BID;
                    val = '"' + BID + '"';
                    break;
                case "LID":
                    var LID = node.getAttribute("mlid");
                    LID = isEmptyOrNull(LID) ? "": LID;
                    val = '"' + LID + '"';
                    break;
                case "RID":
                    var RID = node.getAttribute("mrid");
                    RID = isEmptyOrNull(RID) ? "": RID;
                    val = '"' + RID + '"';
                    break;
                case "TL":
                    var TK;
                    var TL;
                    if (mtype == mDrawFlag_TingV) {
                        TK = node.getAttribute("mkind");
                        if (node.getAttribute("mtl") == "0" && node.getAttribute("mtr") == "0") {
                            switch (TK) {
                            case "N":
                                TL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "竖挺宽度", "prid")) / 2;
                                break;
                            case "L":
                                TL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                break
                            }
                        } else {
                            TL = Number(node.getAttribute("mtl"))
                        }
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            var tingKind = MicroDraw_getTlmTingKind(ObjId);
                            if (tingKind.length > 0) {
                                var tingArr = tingKind.split(",");
                                if (node.getAttribute("mtl") == "0" && node.getAttribute("mtr") == "0") {
                                    if (tingArr[0] == "横挺") {
                                        TL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "横挺宽度", "prid")) / 2
                                    } else {
                                        if (tingArr[0] == "固上轨") {
                                            TL = 0
                                        }
                                    }
                                } else {
                                    TL = Number(node.getAttribute("mtl"))
                                }
                            }
                        } else {
                            TL = 0
                        }
                    }
                    val = TL;
                    break;
                case "TR":
                    var TK;
                    var TR;
                    if (mtype == mDrawFlag_TingV) {
                        TK = node.getAttribute("mkind");
                        if (node.getAttribute("mtl") == "0" && node.getAttribute("mtr") == "0") {
                            switch (TK) {
                            case "N":
                                TR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "竖挺宽度", "prid")) / 2;
                                break;
                            case "L":
                                TR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                break
                            }
                        } else {
                            TR = Number(node.getAttribute("mtr"))
                        }
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            var tingKind = MicroDraw_getTlmTingKind(ObjId);
                            if (tingKind.length > 0) {
                                var tingArr = tingKind.split(",");
                                if (node.getAttribute("mtl") == "0" && node.getAttribute("mtr") == "0") {
                                    if (tingArr[0] == "横挺") {
                                        TR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "横挺宽度", "prid")) / 2
                                    } else {
                                        if (tingArr[0] == "固上轨") {
                                            TR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上轨宽度", "prid")
                                        }
                                    }
                                } else {
                                    TR = Number(node.getAttribute("mtr"))
                                }
                            }
                        } else {
                            TR = 0
                        }
                    }
                    val = TR;
                    break;
                case "LTL":
                    var LID = node.getAttribute("mlid");
                    LID = isEmptyOrNull(LID) ? "": LID;
                    var nodeL;
                    if (!isEmptyOrNull(LID)) {
                        nodeL = $("#" + LID)[0]
                    }
                    var LTL;
                    if (mtype == mDrawFlag_TingV) {
                        LTL = 0
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            if (LID.length > 0) {
                                var tingType = MicroDraw_getTlmTingKind(LID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeL.getAttribute("mtl") == "0" && nodeL.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "竖挺":
                                            LTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "竖挺宽度", "prid")) / 2;
                                            break;
                                        case "转角":
                                            LTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                            break
                                        }
                                    } else {
                                        LTL = Number(nodeL.getAttribute("mtl"))
                                    }
                                } else {
                                    LTL = 0
                                }
                            } else {
                                LTL = 0
                            }
                        } else {
                            if (LID.length > 0) {
                                var tingType = MicroDraw_getTlmTingKind(LID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeL.getAttribute("mtl") == "0" && nodeL.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "竖挺":
                                            LTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "竖挺宽度", "prid")) / 2;
                                            break;
                                        case "转角":
                                            LTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                            break
                                        }
                                    } else {
                                        LTL = Number(nodeL.getAttribute("mtl"))
                                    }
                                } else {
                                    LTL = 0
                                }
                            } else {
                                LTL = 0
                            }
                        }
                    }
                    val = LTL;
                    break;
                case "LTR":
                    var LID = node.getAttribute("mlid");
                    LID = isEmptyOrNull(LID) ? "": LID;
                    var nodeL;
                    if (!isEmptyOrNull(LID)) {
                        nodeL = $("#" + LID)[0]
                    }
                    var LTR;
                    if (mtype == mDrawFlag_TingV) {
                        LTR = 0
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            if (LID.length > 0) {
                                var tingType = MicroDraw_getTlmTingKind(LID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeL.getAttribute("mtl") == "0" && nodeL.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "竖挺":
                                            LTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "竖挺宽度", "prid")) / 2;
                                            break;
                                        case "转角":
                                            LTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                            break
                                        }
                                    } else {
                                        LTR = Number(nodeL.getAttribute("mtr"))
                                    }
                                } else {
                                    LTR = 0
                                }
                            } else {
                                LTR = 0
                            }
                        } else {
                            if (LID.length > 0) {
                                var tingType = MicroDraw_getTlmTingKind(LID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeL.getAttribute("mtl") == "0" && nodeL.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "竖挺":
                                            LTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "竖挺宽度", "prid")) / 2;
                                            break;
                                        case "转角":
                                            LTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                            break
                                        }
                                    } else {
                                        LTR = Number(nodeL.getAttribute("mtr"))
                                    }
                                } else {
                                    LTR = 0
                                }
                            } else {
                                LTR = 0
                            }
                        }
                    }
                    val = LTR;
                    break;
                case "RTL":
                    var RID = node.getAttribute("mrid");
                    RID = isEmptyOrNull(RID) ? "": RID;
                    var nodeR;
                    if (!isEmptyOrNull(RID)) {
                        nodeR = $("#" + RID)[0]
                    }
                    var RTL;
                    if (mtype == mDrawFlag_TingV) {
                        RTL = 0
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            if (RID.length > 0) {
                                var tingType = MicroDraw_getTlmTingKind(RID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeR.getAttribute("mtl") == "0" && nodeR.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "竖挺":
                                            RTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "竖挺宽度", "prid")) / 2;
                                            break;
                                        case "转角":
                                            RTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                            break
                                        }
                                    } else {
                                        RTL = Number(nodeR.getAttribute("mtl"))
                                    }
                                } else {
                                    RTL = 0
                                }
                            } else {
                                RTL = 0
                            }
                        } else {
                            if (RID.length > 0) {
                                var tingType = MicroDraw_getTlmTingKind(RID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeR.getAttribute("mtl") == "0" && nodeR.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "竖挺":
                                            RTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "竖挺宽度", "prid")) / 2;
                                            break;
                                        case "转角":
                                            RTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                            break
                                        }
                                    } else {
                                        RTL = Number(nodeR.getAttribute("mtl"))
                                    }
                                } else {
                                    RTL = 0
                                }
                            } else {
                                RTL = 0
                            }
                        }
                    }
                    val = RTL;
                    break;
                case "RTR":
                    var RID = node.getAttribute("mrid");
                    RID = isEmptyOrNull(RID) ? "": RID;
                    var nodeR;
                    if (!isEmptyOrNull(RID)) {
                        nodeR = $("#" + RID)[0]
                    }
                    var RTR;
                    if (mtype == mDrawFlag_TingV) {
                        RTR = 0
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            if (RID.length > 0) {
                                var tingType = MicroDraw_getTlmTingKind(RID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeR.getAttribute("mtl") == "0" && nodeR.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "竖挺":
                                            RTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "竖挺宽度", "prid")) / 2;
                                            break;
                                        case "转角":
                                            RTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                            break
                                        }
                                    } else {
                                        RTR = Number(nodeR.getAttribute("mtr"))
                                    }
                                } else {
                                    RTR = 0
                                }
                            } else {
                                RTR = 0
                            }
                        } else {
                            if (RID.length > 0) {
                                var tingType = MicroDraw_getTlmTingKind(RID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeR.getAttribute("mtl") == "0" && nodeR.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "竖挺":
                                            RTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "竖挺宽度", "prid")) / 2;
                                            break;
                                        case "转角":
                                            RTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "转角料宽度", "prid")) / 2;
                                            break
                                        }
                                    } else {
                                        RTR = Number(nodeR.getAttribute("mtr"))
                                    }
                                } else {
                                    RTR = 0
                                }
                            } else {
                                RTR = 0
                            }
                        }
                    }
                    val = RTR;
                    break;
                case "TTL":
                    var TID = node.getAttribute("mtid");
                    TID = isEmptyOrNull(TID) ? "": TID;
                    var nodeT;
                    if (!isEmptyOrNull(TID)) {
                        nodeT = $("#" + TID)[0]
                    }
                    var TTL;
                    if (mtype == mDrawFlag_TingV) {
                        if (TID.length > 0) {
                            var tingType = MicroDraw_getTlmTingKind(TID);
                            if (tingType.length > 0) {
                                var Arr = tingType.split(",");
                                if (nodeT.getAttribute("mtl") == "0" && nodeT.getAttribute("mtr") == "0") {
                                    switch (Arr[0]) {
                                    case "横挺":
                                        TTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "横挺宽度", "prid")) / 2;
                                        break;
                                    case "固上轨":
                                        TTL = 0;
                                        break
                                    }
                                } else {
                                    TTL = Number(nodeT.getAttribute("mtl"))
                                }
                            } else {
                                TTL = 0
                            }
                        } else {
                            TTL = 0
                        }
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            TTL = 0
                        } else {
                            if (TID.length > 0) {
                                var tingType = MicroDraw_getTlmTingKind(TID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeT.getAttribute("mtl") == "0" && nodeT.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "横挺":
                                            TTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "横挺宽度", "prid")) / 2;
                                            break;
                                        case "固上轨":
                                            TTL = 0;
                                            break
                                        }
                                    } else {
                                        TTL = Number(nodeT.getAttribute("mtl"))
                                    }
                                } else {
                                    TTL = 0
                                }
                            } else {
                                TTL = 0
                            }
                        }
                    }
                    val = TTL;
                    break;
                case "TTR":
                    var TID = node.getAttribute("mtid");
                    TID = isEmptyOrNull(TID) ? "": TID;
                    var nodeT;
                    if (!isEmptyOrNull(TID)) {
                        nodeT = $("#" + TID)[0]
                    }
                    var TTR;
                    if (mtype == mDrawFlag_TingV) {
                        if (TID.length > 0) {
                            var tingType = MicroDraw_getTlmTingKind(TID);
                            if (tingType.length > 0) {
                                var Arr = tingType.split(",");
                                if (nodeT.getAttribute("mtl") == "0" && nodeT.getAttribute("mtr") == "0") {
                                    switch (Arr[0]) {
                                    case "横挺":
                                        TTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "横挺宽度", "prid")) / 2;
                                        break;
                                    case "固上轨":
                                        TTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上轨宽度", "prid");
                                        break
                                    }
                                } else {
                                    TTR = Number(nodeT.getAttribute("mtr"))
                                }
                            } else {
                                TTR = 0
                            }
                        } else {
                            TTR = 0
                        }
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            TTR = 0
                        } else {
                            if (TID.length > 0) {
                                var tingType = MicroDraw_getTlmTingKind(TID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeT.getAttribute("mtl") == "0" && nodeT.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "横挺":
                                            TTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "横挺宽度", "prid")) / 2;
                                            break;
                                        case "固上轨":
                                            TTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上轨宽度", "prid");
                                            break
                                        }
                                    } else {
                                        TTR = Number(nodeT.getAttribute("mtr"))
                                    }
                                } else {
                                    TTR = 0
                                }
                            } else {
                                TTR = 0
                            }
                        }
                    }
                    val = TTR;
                    break;
                case "BTL":
                    var BID = node.getAttribute("mbid");
                    BID = isEmptyOrNull(BID) ? "": BID;
                    var nodeB;
                    if (!isEmptyOrNull(BID)) {
                        nodeB = $("#" + BID)[0]
                    }
                    var BTL;
                    if (mtype == mDrawFlag_TingV) {
                        if (BID.length > 0) {
                            var tingType = MicroDraw_getTlmTingKind(BID);
                            if (tingType.length > 0) {
                                var Arr = tingType.split(",");
                                if (nodeB.getAttribute("mtl") == "0" && nodeB.getAttribute("mtr") == "0") {
                                    switch (Arr[0]) {
                                    case "横挺":
                                        BTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "横挺宽度", "prid")) / 2;
                                        break;
                                    case "固上轨":
                                        BTL = 0;
                                        break
                                    }
                                } else {
                                    BTL = Number(nodeB.getAttribute("mtl"))
                                }
                            } else {
                                BTL = 0
                            }
                        } else {
                            BTL = 0
                        }
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            BTL = 0
                        } else {
                            if (BID.length > 0) {
                                var tingType = MicroDraw_getTlmTingKind(BID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeB.getAttribute("mtl") == "0" && nodeB.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "横挺":
                                            BTL = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "横挺宽度", "prid")) / 2;
                                            break;
                                        case "固上轨":
                                            BTL = 0;
                                            break
                                        }
                                    } else {
                                        BTL = Number(nodeB.getAttribute("mtl"))
                                    }
                                } else {
                                    BTL = 0
                                }
                            } else {
                                BTL = 0
                            }
                        }
                    }
                    val = BTL;
                    break;
                case "BTR":
                    var BID = node.getAttribute("mbid");
                    BID = isEmptyOrNull(BID) ? "": BID;
                    var nodeB;
                    if (!isEmptyOrNull(BID)) {
                        nodeB = $("#" + BID)[0]
                    }
                    var BTR;
                    if (mtype == mDrawFlag_TingV) {
                        if (BID.length > 0) {
                            var tingType = MicroDraw_getTlmTingKind(BID);
                            if (tingType.length > 0) {
                                var Arr = tingType.split(",");
                                if (nodeB.getAttribute("mtl") == "0" && nodeB.getAttribute("mtr") == "0") {
                                    switch (Arr[0]) {
                                    case "横挺":
                                        BTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "横挺宽度", "prid")) / 2;
                                        break;
                                    case "固上轨":
                                        BTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上轨宽度", "prid");
                                        break
                                    }
                                } else {
                                    BTR = Number(nodeB.getAttribute("mtr"))
                                }
                            } else {
                                BTR = 0
                            }
                        } else {
                            BTR = 0
                        }
                    } else {
                        if (mtype == mDrawFlag_TingH) {
                            BTR = 0
                        } else {
                            if (BID.length > 0) {
                                var tingType = MicroDraw_getTlmTingKind(BID);
                                if (tingType.length > 0) {
                                    var Arr = tingType.split(",");
                                    if (nodeB.getAttribute("mtl") == "0" && nodeB.getAttribute("mtr") == "0") {
                                        switch (Arr[0]) {
                                        case "横挺":
                                            BTR = Number(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "横挺宽度", "prid")) / 2;
                                            break;
                                        case "固上轨":
                                            BTR = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "上轨宽度", "prid");
                                            break
                                        }
                                    } else {
                                        BTR = Number(nodeB.getAttribute("mtr"))
                                    }
                                } else {
                                    BTR = 0
                                }
                            } else {
                                BTR = 0
                            }
                        }
                    }
                    val = BTR;
                    break;
                case "OGG":
                    var OGG;
                    OGG = $(node).attr("mglass");
                    if (!isEmptyOrNull(OGG)) {
                        val = '"' + OGG + '"'
                    } else {
                        val = notReplaceFlag
                    }
                    break;
                case "ODB":
                    var ODB;
                    ODB = $(node).attr("mdb");
                    if (!isEmptyOrNull(ODB)) {
                        val = '"' + ODB + '"'
                    } else {
                        val = notReplaceFlag
                    }
                    break;
                case "OMB":
                    var OMB;
                    OMB = $(node).attr("mmb");
                    if (!isEmptyOrNull(OMB)) {
                        val = '"' + OMB + '"'
                    } else {
                        val = notReplaceFlag
                    }
                    break;
                case "OGY":
                    var OGY;
                    OGY = $(node).attr("mtech");
                    if (!isEmptyOrNull(OGY)) {
                        val = '"' + OGY + '"'
                    } else {
                        val = notReplaceFlag
                    }
                    break;
                case "JOINW":
                    if (AllWinsW == 0 && AllWinsH == 0 && JOINMBEND == "N") {
                        getAllWinsSize()
                    }
                    val = AllWinsW;
                    break;
                case "JOINH":
                    if (AllWinsW == 0 && AllWinsH == 0 && JOINMBEND == "N") {
                        getAllWinsSize()
                    }
                    val = AllWinsH;
                    break;
                case "JOINAREA":
                    var TAR = 0;
                    var JOINAREA = 0;
                    var combwinObj = $("#" + mDrawFlag_SvgId + ' [mtype = "' + mDrawFlag_combsortwin + '"]');
                    if (combwinObj.length > 0) {
                        if (!$.Micro.IsEmpty(combwinObj.attr(mDrawFlag_combsortwin))) {
                            JOINW = combwinObj.attr("combw");
                            JOINH = combwinObj.attr("combh");
                            if ($.Micro.IsEmpty(JOINW)) {
                                JOINW = 0
                            }
                            if ($.Micro.IsEmpty(JOINH)) {
                                JOINH = 0
                            }
                            JOINW = Number(JOINW);
                            JOINH = Number(JOINH);
                            JOINAREA = JOINW * JOINH / 1000000
                        }
                    }
                    var mareaTobjsArr = $.Micro.MergeObjs([$("#" + nodeW.getAttribute("id") + " [mtype='" + mDrawFlag_FrameRect + "']"), $("#" + nodeW.getAttribute("id") + "[mtype='" + mDrawFlag_Custom_arc + "']")]);
                    $.each(mareaTobjsArr,
                    function() {
                        var mWidth = Number($(this)[0].getAttribute("mwidth"));
                        var mHeight = Number($(this)[0].getAttribute("mheight"));
                        var areaExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "MAREA", "optValExp");
                        if (areaExp.length > 0) {
                            if (evalSelf < 2) {
                                TAR = MicroDraw_genData_calcExp(mcflId, areaExp, ObjId, xcxljgJson, 0, evalSelf + 1);
                                if (combwinObj.length > 0) {
                                    JOINAREA = MicroDraw_Cal_JOINAREA(mcflId, areaExp, xcxljgJson, evalSelf + 1)
                                }
                            }
                        } else {
                            TAR = (Number(mWidth) * Number(mHeight) / 1000000).toFixed(3)
                        }
                    });
                    if (combwinObj.length == 0) {
                        if (AllWinsW == 0 && AllWinsH == 0 && JOINMBEND == "N") {
                            getAllWinsSize()
                        }
                        if (JOINMBEND == "Y") {
                            JOINAREA = AllWinsW * AllWinsH / 1000000
                        } else {
                            JOINAREA = TAR
                        }
                    }
                    var svgArea = $("#" + mDrawFlag_SvgId).attr("area");
                    if (!$.Micro.IsEmpty(svgArea) && !isNaN(svgArea)) {
                        JOINAREA = Number(svgArea)
                    }
                    val = JOINAREA;
                    break;
                case "JOINFCNT":
                    var JOINFCNT;
                    $("#" + nodeW.getAttribute("id") + " [mtype*='" + mDrawFlag_Zdm + "']").each(function(i, o) {
                        var omtype = o.getAttribute("mtype");
                        var arrOmtype = omtype.split("_");
                        var n = Number(arrOmtype[1].substr(0, arrOmtype[1].indexOf("_")));
                        JOINFCNT = Number(JOINFCNT) + Number(n)
                    });
                    val = JOINFCNT;
                    break;
                case "JOINGCNT":
                    val = $("#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_Glass + "]").length;
                    break;
                case "ZJLCNT":
                    var ZJLCNT = 0;
                    ZJLCNT += countCMcnt($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_CornerMaterial + "'][mangle!=0]"));
                    val = ZJLCNT;
                    break;
                case "PJLCNT":
                    var PJLCNT = 0;
                    PJLCNT += countCMcnt($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_CornerMaterial + "'][mangle=0]"));
                    val = PJLCNT;
                    break;
                case "HZJLCNT":
                    var HZJLCNT = 0;
                    HZJLCNT += countCMcnt($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_CornerMaterial_h + "'][mangle!=0]"));
                    val = HZJLCNT;
                    break;
                case "HPJLCNT":
                    var HPJLCNT = 0;
                    HPJLCNT += countCMcnt($("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_Custom_CornerMaterial_h + "'][mangle=0]"));
                    val = HPJLCNT;
                    break;
                case "AllWinsW":
                    if (AllWinsW == 0 && AllWinsH == 0 && JOINMBEND == "N") {
                        getAllWinsSize()
                    }
                    val = AllWinsW;
                    break;
                case "AllWinsH":
                    if (AllWinsW == 0 && AllWinsH == 0 && JOINMBEND == "N") {
                        getAllWinsSize()
                    }
                    val = AllWinsH;
                    break;
                case "PRLEN":
                    if (!$.Micro.IsEmpty(pobj)) {
                        if (!$.Micro.IsEmpty(pobj.row)) {
                            if (!$.Micro.IsEmpty(pobj.row.xcxljgid)) {
                                var prlen = 0;
                                var xcxljgid = pobj.row.xcxljgid;
                                var _objid = pobj.row.ObjId;
                                var prrows = $("#" + mDrawPrProperty).datagrid("getRows");
                                $.each(prrows,
                                function(i, prrow) {
                                    if (prrow.ObjId == _objid && prrow.xcxljgid == xcxljgid) {
                                        prlen = prrow.Len;
                                        return false
                                    }
                                });
                                if ($.Micro.IsEmpty(prlen)) {
                                    prlen = 0
                                }
                                val = prlen
                            }
                        }
                    }
                    break;
                case "GLTH":
                    var glassSpec = "";
                    var objMtype = $("#" + ObjId).attr("mtype");
                    var glType = "";
                    if (objMtype == mDrawFlag_Glass) {
                        glType = "固玻宽度"
                    } else { (objMtype.substring(0, 3) == mDrawFlag_Zdm)
                    }
                    glType = "扇玻宽度";
                    var glExp = MicroDraw_getData_getXcxljgData(xcxljgJson, "G", glType, "glassExp");
                    var glExpArr = glExp.split(",");
                    var glassExp = glExpArr[0];
                    glassSpec = MicroCalc_CalcExp(mcflId, glassExp, ObjId, xcxljgJson, 0, evalSelf + 1, pobj);
                    var tuGlass = $(node).attr("mglass");
                    if (!isEmptyOrNull(tuGlass)) {
                        glassSpec = tuGlass
                    }
                    val = '"' + Micro_getGlassThick(glassSpec) + '"';
                    break;
                default:
                    if (evalFlag) {
                        exp = MicroCalc_CalcExp_replaceOptVal(exp);
                        val = notReplaceFlag
                    } else {
                        var optVal;
                        try {
                            optVal = eval(curVar)
                        } catch(exception) {
                            jQuery.messager.alert("提示:", "公式计算错误！<br/>原公式：" + expOrig + "  转换后：" + exp + " 存在异常！<br/>" + exception, "error");
                            throw "";
                            if (WEB_BUDGET_ISSIMPLE) {
                                if (AL_PROJECT_FROMBUDGET_ARGUMENT && AL_PROJECT_FROMBUDGET_ARGUMENT.opr == "copy") {
                                    AL_PROJECT_FROMBUDGET_ARGUMENT.isContinue = false
                                }
                            }
                            return ""
                        }
                        if (isEmptyOrNull(optVal)) {
                            var optVal = MicroCalc_getOptVal(curVar);
                            if (isEmptyOrNull(optVal)) {
                                optVal = '""'
                            } else {
                                if (isNaN(optVal)) {
                                    if (! (optVal.toString().substr(0, 1) == '"' || optVal.toString().substr(0, 1) == "'")) {
                                        optVal = '"' + optVal + '"'
                                    }
                                }
                            }
                            try {
                                eval(curVar.toString() + "=" + optVal.toString())
                            } catch(exception) {
                                jQuery.messager.alert("提示:", "选项参数实例化错误！<br/>：" + curVar.toString() + "=" + optVal.toString() + " 存在异常！<br/>" + exception, "error")
                            }
                        }
                        val = notReplaceFlag
                    }
                }
                if (val != notReplaceFlag) {
                    if (evalFlag) {
                        exp = replaceAll(exp, curVar, val)
                    } else {
                        try {
                            eval(curVar.toString() + "=" + val.toString())
                        } catch(exception) {
                            jQuery.messager.alert("提示:", "微高关键字实例化错误！<br/>：" + curVar.toString() + "=" + val.toString() + " 存在异常！<br/>" + exception, "error")
                        }
                    }
                }
                break
            }
        }
    } else {
        MicroCalc_replaceStringToSpecStr();
        exp = MicroCalc_CalcExp_replaceOptValExp(exp);
        var CNT = MicroBudget_getPropertyValue(mBudgetWinProperty, "cnt");
        var tlObjId = $("#" + mDrawFlag_SvgId + " [mtldir='lr']").attr("id");
        var FOT = "";
        if (!isEmptyOrNull(tlObjId)) {
            FOT = MicroDraw_getTlcObjType(tlObjId)
        }
        FOT = '"' + FOT + '"';
        var TAR = 0;
        var mareaTobjsArr = $.Micro.MergeObjs([$("#" + mDrawFlag_SvgId + " [mtype='" + mDrawFlag_FrameRect + "']"), $("#" + mDrawFlag_SvgId + "[mtype='" + mDrawFlag_Custom_arc + "']")]);
        $.each(mareaTobjsArr,
        function(oi) {
            var mWidth = Number($(this).attr("mwidth"));
            var mHeight = Number($(this).attr("mheight"));
            if (oi == 0) {
                TAR = mWidth * mHeight / 1000000
            }
        });
        var AllWinsW = 0;
        var AllWinsH = 0;
        var JOINMBEND = "N";
        var JOINAREA = 0;
        var JOINW = 0,
        JOINH = 0;
        getAllWinsSize();
        JOINW = Number(AllWinsW);
        JOINH = Number(AllWinsH);
        JOINAREA = JOINW * JOINH / 1000000;
        var rows = $("#" + mDrawOptProperty).datagrid("getRows");
        $.each(rows,
        function(i, r) {
            if (isEmptyOrNull(r.optValExp)) {
                var optVal = r.optVal;
                if (isEmptyOrNull(optVal)) {
                    optVal = '""'
                } else {
                    if (isNaN(optVal)) {
                        if (! (optVal.toString().substr(0, 1) == '"' || optVal.toString().substr(0, 1) == "'")) {
                            optVal = '"' + optVal + '"'
                        }
                    }
                }
                try {
                    eval(r.optId.toString() + "=" + optVal.toString())
                } catch(exception) {
                    jQuery.messager.alert("提示:", "选项参数实例化错误！<br/>：" + r.optId.toString() + "=" + optVal.toString() + " 存在异常！<br/>" + exception + " 原公式：" + exp, "error")
                }
            }
        })
    }
    $.each(list,
    function(k, o) {
        exp = replaceAll(exp, o.index, o.data)
    });
    if (log) {
        console.log("函数结束最后公式：" + exp)
    }
    return MicroCalc_evalExp()
}
var MicroCalc_cnt = 0;
function MicroCalc_getMil(A) {
    var E = A;
    var C = new Date();
    var D = C.getTime() - new Date(E).getTime();
    var B = Math.floor(D / (24 * 3600 * 1000));
    var F = D % (24 * 3600 * 1000);
    var J = Math.floor(F / (3600 * 1000));
    var K = F % (3600 * 1000);
    var I = Math.floor(K / (60 * 1000));
    var G = K % (60 * 1000);
    var H = Math.round(G / 1000);
    MicroCalc_cnt = MicroCalc_cnt + I * 60 * 1000 + H * 1000 + G
}
function MicroDraw_SetCustom_arcAttrs(D, C) {
    if (D.length == 0) {
        return true
    }
    if (D.attr("mtype") != mDrawFlag_Custom_arc) {
        return true
    }
    for (var B in C) {
        var A = $.Micro.getType(C[B]);
        var E = ($.inArray(A, ["isObj", "isArr"]) > -1) ? JSON.stringify(C[B]) : C[B];
        D.attr(B.toLowerCase(), E)
    }
}
function MicroDraw_checkWinSize() {
    var A = 1;
    var B = function(D, C, E, H) {
        var F = Number(E.attr(C));
        H.sumLen += F;
        var G = E.attr(D);
        if ($.Micro.IsEmpty(G)) {
            return
        }
        var I = G.split(",")[0];
        B(D, C, $("#" + I), H)
    };
    $("#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_Win + "]").each(function(D, E) {
        var F = $(E).find("[mtype=" + mDrawFlag_FrameRect + "]");
        if (F.length <= 0) {
            return true
        }
        var C = Number(F.attr("mwidth"));
        var G = Number(F.attr("mheight"));
        $(E).find("[id][mtype][mwidth][mheight]").each(function(K, N) {
            var R = $(N).attr("mtype");
            if (R == mDrawFlag_FrameRect || R == mDrawFlag_FrameArc) {
                return true
            }
            var L = {
                sumLen: 0
            };
            B("mlid", "mwidth", $(N), L);
            var Q = L.sumLen;
            L.sumLen = 0;
            B("mrid", "mwidth", $(N), L);
            var M = L.sumLen;
            var J = Number($(N).attr("mwidth"));
            var S = (Q + M - J).toFixed(2);
            if (S != C) {
                A = -1;
                return false
            }
            L.sumLen = 0;
            B("mtid", "mheight", $(N), L);
            var H = L.sumLen;
            L.sumLen = 0;
            B("mbid", "mheight", $(N), L);
            var I = L.sumLen;
            var O = Number($(N).attr("mheight"));
            var P = (H + I - O).toFixed(2);
            if (P != G) {
                A = -1;
                return false
            }
        });
        if (A == -1) {
            return false
        }
    });
    return A
}
function MicroDraw_creatSVGHandleTxtBg(G) {
    return;
    if (G.length == 0) {
        return
    }
    var A = G.parents("[mtype]:first").attr("mtype");
    var I = $.MicroSVG.getSVGRect(G);
    var E = 1;
    var F = $("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]');
    var L = F.length > 0 ? true: false;
    if (L) {
        var J = $.MicroSVG.getMatrix(F.attr("transform")).matrix;
        E = J[0]
    }
    var C = G.attr("ondblclick");
    var M = G.attr("onclick");
    var N = Math.ceil(G.attr("x"));
    var O = Math.ceil(G.attr("y"));
    var H = Math.ceil(I.width / E);
    var K = Math.ceil(I.height / E);
    var D;
    if ($.inArray(A, [mDrawFlag_CoorY, mDrawFlag_combCoorY]) > -1) {
        D = {
            "x": N - H,
            "y": O - K,
            "width": H + 10,
            "height": K + 20,
        }
    } else {
        D = {
            "x": N,
            "y": O - K,
            "width": H + 20,
            "height": K + 10,
        }
    }
    D["fill"] = "#EEE";
    D["stroke"] = "none";
    D["opacity"] = "0";
    if (mCurUserId == "13573049968" && !isPcUserAgent()) {
        D["opacity"] = "1"
    }
    if (!$.Micro.IsEmpty(C)) {
        D["ondblclick"] = C
    } else {
        if (!$.Micro.IsEmpty(M)) {
            D["onclick"] = M
        }
    }
    var B = $($.MicroSVG.makeSVG("rect", D));
    B.insertBefore(G);
    if ($.inArray(A, [mDrawFlag_CoorY, mDrawFlag_combCoorY]) > -1) {
        $.MicroSVG.setSVGPos({
            x1: N - H,
            y1: O - 3 * K,
            x2: N + H,
            y2: O,
            pos: "y",
            tobj: B
        })
    } else {
        $.MicroSVG.setSVGPos({
            x1: N,
            y1: O - K,
            x2: N + H,
            y2: O,
            pos: "x",
            tobj: B
        })
    }
}
function MicroDraw_drawGlassFhl(O) {
    var L = O.objId;
    var G = function(Q) {
        var P = document.createElementNS(mDrawSvgNS, "line");
        P.setAttributeNS(null, "x1", Q.x1);
        P.setAttributeNS(null, "y1", Q.y1);
        P.setAttributeNS(null, "x2", Q.x2);
        P.setAttributeNS(null, "y2", Q.y2);
        P.setAttributeNS(null, "stroke", "darkcyan");
        P.setAttributeNS(null, "stroke-width", (mDrawSvgViewBox * Q.sw) + "px");
        Q.g.appendChild(P)
    };
    var I = function(R) {
        var S = document.createElementNS(mDrawSvgNS, "text");
        var P = $("#" + R.objId).attr("mglassfhlheight");
        if (!$.Micro.IsEmpty(P)) {
            P = Number(P)
        } else {
            P = 0
        }
        var Q = 0;
        textNode = document.createTextNode("H:" + parseInt(Number(P)));
        Q = Number(parseInt(Number(P)).toString().length) * Number(mDrawCoordinateCharPx) * Number(mDrawSvgViewBox);
        Q += Number("H:".length) * Number(mDrawCoordinateCharPx) * Number(mDrawSvgViewBox);
        S.setAttributeNS(null, "font-size", (Number(mDrawCoordinateFontSize) * Number(mDrawSvgViewBox)).toString() + "px");
        S.setAttributeNS(null, "fill", "darkcyan");
        S.setAttributeNS(null, "x", Number(R.begin) + Number((Number(R.end) - Number(R.begin)) / 2) - Number(Q) / 2);
        S.setAttributeNS(null, "y", Number(R.y - Number(3 * mDrawSvgViewBox)));
        S.appendChild(textNode);
        R.g.appendChild(S)
    };
    $("#" + L + " [mtype='" + mDrawFlag_GlassFhl + "']").each(function(P, Q) {
        var R = Q.parentNode;
        if (R.id == L) {
            R.removeChild(Q)
        }
    });
    var H = $("#" + L)[0].getAttribute("mglassfhl");
    if (H == "Y") {
        var N = document.createElementNS(mDrawSvgNS, "g");
        N.setAttributeNS(null, "mtype", mDrawFlag_GlassFhl);
        var D;
        var C = "PKC";
        if ($("#" + L + "_bg").length > 0) {
            D = L + "_bg";
            C = "DKC"
        } else {
            D = L + "_r1"
        }
        var K = Number($("#" + D).attr("x"));
        var A = Number($("#" + D).attr("y"));
        var E = Number($("#" + D).attr("width"));
        var M = Number($("#" + D).attr("height"));
        var J = Number($("#" + L)[0].getAttribute("mglassfhlheight"));
        var F = J / 1000 * mDrawPixelPerM;
        G({
            g: N,
            x1: K - 3,
            y1: A + M - F,
            x2: K - 3,
            y2: A + M + mDrawThickFrame,
            sw: 3
        });
        G({
            g: N,
            x1: K + E + 3,
            y1: A + M - F,
            x2: K + E + 3,
            y2: A + M + mDrawThickFrame,
            sw: 3
        });
        G({
            g: N,
            x1: K - 4,
            y1: A + M - F,
            x2: K + E + 4,
            y2: A + M - F,
            sw: 2
        });
        I({
            g: N,
            objId: L,
            begin: K - 4,
            end: C == "DKC" ? K + (E / 2) : K + E + 4,
            y: A + M - F
        });
        if (O.returnType == "string") {
            var B = $(N).prop("outerHTML");
            return B
        } else {
            $("#" + L)[0].appendChild(N)
        }
    }
}
function MicroDraw_genData_getRouteByXcxlid(B) {
    var C;
    if (!isEmptyOrNull(mPublicXcxlRouteList)) {
        $.each(mPublicXcxlRouteList,
        function(D, E) {
            if (E.id == B) {
                C = E.mcflid;
                return false
            }
        })
    } else {
        mPublicXcxlRouteList = ""
    }
    if (C > 0) {
        return C.toString()
    }
    var A = {};
    A.action = "getRouteByXcxlid";
    A.xcxlId = B;
    $.ajax({
        url: "../MicroBudget/MicroDraw.ashx",
        data: A,
        type: "POST",
        dataType: "text",
        async: false,
        success: function(D) {
            if (D.substr(0, 2) == "ok") {
                if (D.substr(3).length > 0) {
                    C = D.substr(3)
                }
            } else {
                jQuery.messager.alert("提示:", "获取门窗工艺参数失败！", "error")
            }
        }
    });
    return C
}
function MicroDraw_getArcsGLinePos(f) {
    var V = f.parents("g[mtype=" + mDrawFlag_WinArcs + "]");
    var b = V.find("[mtype=" + mDrawFlag_FrameArcs + "]");
    var J = b.find("[tag=tF]");
    var S = J.attr("d").split(" ");
    var W = $.Micro.ConvToNum(S[0]);
    var c = $.Micro.ConvToNum(S[1]);
    var U = $.Micro.ConvToNum(b.attr("mwidth"));
    var e = $.Micro.ConvToNum(b.attr("mheight"));
    var T = $.Micro.ConvToNum(b.attr("marcheight"));
    var Z = MicroDraw_getArcDataInfo(W, c, U, T, mDrawThickFrame);
    var M = Z.cx;
    var G = Z.cy;
    var L = Z.ROut;
    var A = Z.RIn;
    var C, X, Y, a, F;
    var Q = f.find("path").attr("d");
    var K = Q.split(" ");
    var P;
    var D = $.Micro.ConvToNum(K[0]);
    var E = $.Micro.ConvToNum(K[1]);
    var H = $.Micro.ConvToNum(K[7]);
    var g = $.Micro.ConvToNum(K[8]);
    var N = $.Micro.ConvToNum(K[9]);
    var O = $.Micro.ConvToNum(K[10]);
    var I = $.Micro.ConvToNum(K[16]);
    var B = $.Micro.ConvToNum(K[17]);
    C = D + (H - D) / 2;
    Y = A;
    X = E + Math.sqrt(Y * Y - (D - M) * (D - M));
    a = X - Math.sqrt(Y * Y - (C - M) * (C - M));
    Y = L;
    X = B + Math.sqrt(Y * Y - (I - M) * (I - M));
    F = X - Math.sqrt(Y * Y - (C - M) * (C - M));
    P = F - a;
    return {
        s_y: a,
        e_y: F,
        midY: P
    }
}
function MicroDraw_RedrawArcsGlass(q, n) {
    var U, AF, At;
    var P;
    var X;
    var AI = 1;
    var Am = $("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]');
    if (Am.length > 0) {
        var AH = $.MicroSVG.getMatrix(Am.attr("transform"));
        var t = AH.matrix;
        AI = t[0]
    }
    if (n) {
        U = n.twin;
        AF = n.g_attrs;
        At = n.path_d;
        P = $($.MicroSVG.makeSVG("g", AF));
        U.append(P)
    } else {
        P = $("#" + mDrawFlag_SvgId + " #" + q);
        U = P.parents("g[mtype=" + mDrawFlag_WinArcs + "]")
    }
    var Af = U.find("[mtype=" + mDrawFlag_FrameArcs + "]");
    var G = Af.find("[tag=tF]");
    var Az = G.attr("d").split(" ");
    var L = $.Micro.ConvToNum(Az[0]);
    var Ae = $.Micro.ConvToNum(Az[1]);
    var Ap = $.Micro.ConvToNum(Af.attr("mwidth"));
    var a = $.Micro.ConvToNum(Af.attr("mheight"));
    var g = $.Micro.ConvToNum(Af.attr("marcheight"));
    var K = g / 1000 * mDrawPixelPerM;
    var b = a / 1000 * mDrawPixelPerM;
    var f = Ap / 1000 * mDrawPixelPerM;
    var w = MicroDraw_getArcDataInfo(L, Ae, Ap, g, mDrawThickFrame);
    var S = (Ae + b) - $.Micro.ConvToNum(w.farcIn_Ld.split(" ")[1]);
    var As = w.cx;
    var Ah = w.cy;
    var u = w.ROut;
    var Av = w.RIn;
    var AD = Af.attr("mshowglassfan") || "Y";
    var Y = MicroDraw_ReturnColor($("#" + mDrawFlag_SvgId + " [prcolor]:first").attr("prcolor"));
    if (!n) {
        var Ay = [];
        var Aa = P.attr("mtid");
        var T = P.attr("mbid");
        var e = P.attr("mlid");
        var v = P.attr("mrid");
        var H, B, Ax, Aw, Ag, Ao, C, Ar;
        var J, o;
        var Aq, Al;
        var s, Z, D;
        if (!$.Micro.IsEmpty(e)) {
            J = $("#" + mDrawFlag_SvgId + " #" + e);
            Aq = J.attr("mx");
            Al = $.Micro.ConvToNum(Aq) / 1000 * mDrawPixelPerM;
            H = L + Al + mDrawThickTing / 2
        } else {
            H = L + mDrawThickFrame
        }
        C = H;
        if (!$.Micro.IsEmpty(v)) {
            J = $("#" + mDrawFlag_SvgId + " #" + v);
            Aq = J.attr("mx");
            Al = $.Micro.ConvToNum(Aq) / 1000 * mDrawPixelPerM;
            Ax = L + Al - mDrawThickTing / 2
        } else {
            Ax = L + f - mDrawThickFrame
        }
        Ag = Ax;
        if (!$.Micro.IsEmpty(Aa)) {
            J = $("#" + mDrawFlag_SvgId + " #" + Aa);
            s = J.attr("my")
        } else {
            s = 0
        }
        Z = $.Micro.ConvToNum(s) / 1000 * mDrawPixelPerM;
        D = S * Z / b;
        B = (Ah + D) - Math.sqrt(Av * Av - (H - As) * (H - As));
        Aw = (Ah + D) - Math.sqrt(Av * Av - (Ax - As) * (Ax - As));
        if (!$.Micro.IsEmpty(T)) {
            J = $("#" + mDrawFlag_SvgId + " #" + T);
            s = J.attr("my")
        } else {
            s = a
        }
        Z = $.Micro.ConvToNum(s) / 1000 * mDrawPixelPerM;
        D = S * Z / b;
        Ao = (Ah + D) - Math.sqrt(u * u - (Ag - As) * (Ag - As));
        Ar = (Ah + D) - Math.sqrt(u * u - (C - As) * (C - As));
        Ay = ["M" + H, B, "A" + Av, Av, 0, 0, 1, Ax, Aw, "L" + Ag, Ao, "A" + u, u, 0, 0, 0, C, Ar + "Z"];
        At = Ay.join(" ")
    }
    var W = P.attr("myt") || "Y";
    var E = At.split(" ");
    P.children().remove();
    X = {
        "d": At,
        "tag": "glass",
        "fill": mDrawGlassColor,
        "stroke": "#000000",
        "stroke-width": "1",
        "pointer-events": "all",
        "mselect": "1"
    };
    var F = $($.MicroSVG.makeSVG("path", X));
    P.append(F);
    if (W == "Y") {
        var H = $.Micro.ConvToNum(E[0]);
        var B = $.Micro.ConvToNum(E[1]);
        var Ax = $.Micro.ConvToNum(E[7]);
        var Aw = $.Micro.ConvToNum(E[8]);
        var Ag = $.Micro.ConvToNum(E[9]);
        var Ao = $.Micro.ConvToNum(E[10]);
        var C = $.Micro.ConvToNum(E[16]);
        var Ar = $.Micro.ConvToNum(E[17]);
        var AG, AA, N, p, Q;
        X = {
            "tag": "yt"
        };
        var m = $($.MicroSVG.makeSVG("g", X));
        P.append(m);
        AB = B + Math.sqrt(Av * Av - (H - As) * (H - As));
        AG = Av - mDrawThickYt;
        AA = H + mDrawThickYt;
        N = AB - Math.sqrt(AG * AG - (AA - As) * (AA - As));
        p = Ax - mDrawThickYt;
        Q = AB - Math.sqrt(AG * AG - (p - As) * (p - As));
        var AC = [H, B, Ax, Aw, p, Q, AA, N];
        var I = ["M" + AC[0], AC[1], "A" + Av, Av, 0, 0, 1, AC[2], AC[3], "L" + AC[4], AC[5], "A" + AG, AG, 0, 0, 0, AC[6], AC[7] + "Z"].join(" ");
        X = {
            "d": I,
            "tag": "tyt",
            "fill": Y,
            "stroke": "#000000",
            "stroke-width": "1",
        };
        var F = $($.MicroSVG.makeSVG("path", X));
        m.append(F);
        AB = Ar + Math.sqrt(u * u - (C - As) * (C - As));
        AG = u + mDrawThickYt;
        AA = C + mDrawThickYt;
        N = AB - Math.sqrt(AG * AG - (AA - As) * (AA - As));
        p = Ag - mDrawThickYt;
        Q = AB - Math.sqrt(AG * AG - (p - As) * (p - As));
        var M = [C, Ar, Ag, Ao, p, Q, AA, N];
        var I = ["M" + M[0], M[1], "A" + u, u, 0, 0, 1, M[2], M[3], "L" + M[4], M[5], "A" + AG, AG, 0, 0, 0, M[6], M[7] + "Z"].join(" ");
        X = {
            "d": I,
            "tag": "byt",
            "fill": Y,
            "stroke": "#000000",
            "stroke-width": "1",
        };
        var F = $($.MicroSVG.makeSVG("path", X));
        m.append(F);
        var I = ["M" + AC[0], AC[1], "L" + AC[6], AC[7], "L" + M[6], M[7], "L" + M[0], M[1] + "Z"].join(" ");
        X = {
            "d": I,
            "tag": "lyt",
            "fill": Y,
            "stroke": "#000000",
            "stroke-width": "1",
        };
        var F = $($.MicroSVG.makeSVG("path", X));
        m.append(F);
        var I = ["M" + AC[2], AC[3], "L" + AC[4], AC[5], "L" + M[4], M[5], "L" + M[2], M[3] + "Z"].join(" ");
        X = {
            "d": I,
            "tag": "ryt",
            "fill": Y,
            "stroke": "#000000",
            "stroke-width": "1",
        };
        var F = $($.MicroSVG.makeSVG("path", X));
        m.append(F)
    }
    var O = $.MicroSVG.getSVGRect(P);
    var Ad = $.MicroSVG.ToCanvasPoint(U.parents("svg"), O.x, O.y);
    var A = MicroDraw_getArcsGLinePos(P);
    MicroDraw_AddCustom_Glass({
        tArea: P,
        x: Ad.x / AI,
        y: A.s_y,
        w: O.width / AI,
        h: A.midY
    });
    var V = P.find("[tag=glass]");
    var Ak = V.attr("d").split(" ");
    var Ab = $.Micro.ConvToNum(Ak[9]);
    var Ai = $.Micro.ConvToNum(Ak[10]);
    var Ac = $.Micro.ConvToNum(Ak[16]);
    var Aj = $.Micro.ConvToNum(Ak[17]);
    var AB = Aj + Math.sqrt(u * u - (Ac - As) * (Ac - As));
    var c = Ac + (Ab - Ac) / 2;
    var Au = AB - Math.sqrt(u * u - (c - As) * (c - As));
    var AE = Ac + 8;
    var An = (Aj == Ai) ? (Au + (Aj - Au) / 2) : (Aj > Ai) ? (Ai + (Aj - Ai) / 2) : Aj;
    An = An - 8;
    X = {
        "tag": "glassfan",
        x: AE,
        y: An,
        "font-size": "14px",
        "fill": "#000",
        "font-weight": "700"
    };
    var l = $($.MicroSVG.makeSVG("text", X));
    l.get(0).textContent = "F12";
    P.append(l);
    MicroDraw_reflashGlassFlag();
    MicroDraw_ShowGlassFan(Af.attr("id"));
    return P
}
function MicroDraw_AddArcsTing(An, G) {
    if (An.length == 0) {
        return ""
    }
    var t = 1;
    var O = $("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]');
    if (O.length > 0) {
        var D = $.MicroSVG.getMatrix(O.attr("transform"));
        var Ai = D.matrix;
        t = Ai[0]
    }
    var AC = An;
    var AJ = AC.parents("g[mtype=" + mDrawFlag_WinArcs + "]");
    var X = AJ.find("[mtype=" + mDrawFlag_FrameArcs + "]");
    var c = X.find("[tag=tF]");
    var Ar = c.attr("d").split(" ");
    var H = $.Micro.ConvToNum(Ar[0]);
    var Aq = $.Micro.ConvToNum(Ar[1]);
    var Af = $.Micro.ConvToNum(X.attr("mwidth"));
    var B = $.Micro.ConvToNum(X.attr("mheight"));
    var Ag = $.Micro.ConvToNum(X.attr("marcheight"));
    var Ap = Ag / 1000 * mDrawPixelPerM;
    var AB = B / 1000 * mDrawPixelPerM;
    var Y = Af / 1000 * mDrawPixelPerM;
    var e = MicroDraw_getArcDataInfo(H, Aq, Af, Ag, mDrawThickFrame);
    var Ay = (Aq + AB) - $.Micro.ConvToNum(e.farcIn_Ld.split(" ")[1]);
    var Z = e.cx;
    var Ab = e.cy;
    var Aa = e.ROut;
    var Al = e.RIn;
    var M = MicroDraw_ReturnColor($("#" + mDrawFlag_SvgId + " [prcolor]:first").attr("prcolor"));
    var b = AC.parents("[mtype=" + mDrawFlag_ArcsGlass + "]");
    var Ah = $.MicroSVG.getSVGRect(b);
    var Ao = b.attr("id");
    var C = $.Micro.ConvToNum(b.attr("mx")) / 1000 * mDrawPixelPerM;
    var g = $.Micro.ConvToNum(b.attr("my")) / 1000 * mDrawPixelPerM;
    var Ad = $.Micro.ConvToNum(b.attr("mwidth")) / 1000 * mDrawPixelPerM;
    var w = $.Micro.ConvToNum(b.attr("mheight")) / 1000 * mDrawPixelPerM;
    var u = b.attr("myt");
    var Aj = b.attr("mlid") || "";
    var S = b.attr("mrid") || "";
    var F = b.attr("mtid") || "";
    var v = b.attr("mbid") || "";
    var E = b.attr("mwidth");
    var A = b.attr("mheight");
    var U = b.attr("mx");
    var V = b.attr("my");
    var I = AC.attr("d").split(" ");
    var AM = $.Micro.ConvToNum(I[0]);
    var AL = $.Micro.ConvToNum(I[1]);
    var AP = $.Micro.ConvToNum(I[7]);
    var AO = $.Micro.ConvToNum(I[8]);
    var Ak = $.Micro.ConvToNum(I[9]);
    var P = $.Micro.ConvToNum(I[10]);
    var AE = $.Micro.ConvToNum(I[16]);
    var AD = $.Micro.ConvToNum(I[17]);
    var Av;
    var T = Ay * g / AB;
    var K = Ay * (g + w) / AB;
    b.remove();
    if (G == "H") {
        var J, As, s;
        var AG = MicroDraw_NewUniqueID($("#" + mDrawFlag_SvgId), mDrawFlag_FrameArcsTingH);
        var Q = MicroDraw_NewUniqueID($("#" + mDrawFlag_SvgId), mDrawFlag_ArcsGlass);
        var At = MicroDraw_NewUniqueID($("#" + mDrawFlag_SvgId), mDrawFlag_ArcsGlass);
        var Az = MicroDraw_getTagMaxVal(AJ.find("[mtype=" + mDrawFlag_FrameArcsTingH + "]"), "mflag", "H", true) + 1;
        var AI, o, AH, n;
        var N, m, AF, l;
        var AQ = Ay * (g + w / 2) / AB;
        var Ae = Ay * (0 + w / 2) / AB;
        var AN, p;
        AI = AM;
        AH = AP;
        N = AI;
        AF = AH;
        o = (Ab + AQ) - Math.sqrt(Aa * Aa - (AI - Z) * (AI - Z));
        n = (Ab + AQ) - Math.sqrt(Aa * Aa - (AH - Z) * (AH - Z));
        m = (Ab + AQ) - Math.sqrt(Al * Al - (N - Z) * (N - Z));
        l = (Ab + AQ) - Math.sqrt(Al * Al - (AF - Z) * (AF - Z));
        var L;
        if (!$.Micro.IsEmpty(F)) {
            L = $("#" + mDrawFlag_SvgId + " #" + F);
            L.attr("mbid", L.attr("mbid").replace(Ao, Q))
        }
        if (!$.Micro.IsEmpty(v)) {
            L = $("#" + mDrawFlag_SvgId + " #" + v);
            L.attr("mtid", L.attr("mtid").replace(Ao, At))
        }
        if (!$.Micro.IsEmpty(Aj)) {
            L = $("#" + mDrawFlag_SvgId + " #" + Aj);
            L.attr("mrid", L.attr("mrid").replace(Ao, [Q, AG, At].join(",")))
        }
        if (!$.Micro.IsEmpty(S)) {
            L = $("#" + mDrawFlag_SvgId + " #" + S);
            L.attr("mlid", L.attr("mlid").replace(Ao, [Q, AG, At].join(",")))
        }
        var Am = $.Micro.ConvToNum(V) + $.Micro.ConvToNum(A) / 2;
        Av = {
            "id": AG,
            "mtype": mDrawFlag_FrameArcsTingH,
            "mwidth": E,
            "mheight": 0,
            "mflag": "H" + Az,
            "mlid": Aj,
            "mrid": S,
            "mtid": Q,
            "mbid": At,
            "mx": U,
            "my": Am,
            "mtotallen": "N"
        };
        J = $($.MicroSVG.makeSVG("g", Av));
        AJ.append(J);
        var Au = ["M" + AI, o, "A" + Aa, Aa, 0, 0, 1, AH, n, "L" + AF, l, "A" + Al, Al, 0, 0, 0, N, m + "Z"].join(" ");
        Av = {
            "tag": "ting",
            "d": Au,
            "fill": M,
            "stroke": "#000000",
            "stroke-width": "1",
            "pointer-events": "all",
            "mselect": "1"
        };
        var W = $($.MicroSVG.makeSVG("path", Av));
        J.append(W);
        Av = {
            "id": Q,
            "mtype": mDrawFlag_ArcsGlass,
            "mwidth": E,
            "mheight": Number(A) / 2,
            "mlid": Aj,
            "mrid": S,
            "mtid": F,
            "mbid": AG,
            "mx": U,
            "my": V,
            "myt": u
        };
        var AK = ["M" + AM, AL, "A" + Al, Al, 0, 0, 1, AP, AO, "L" + AH, n, "A" + Aa, Aa, 0, 0, 0, AI, o + "Z"];
        As = MicroDraw_RedrawArcsGlass(Q, {
            twin: AJ,
            g_attrs: Av,
            path_d: AK.join(" ")
        });
        Av = {
            "id": At,
            "mtype": mDrawFlag_ArcsGlass,
            "mwidth": E,
            "mheight": Number(A) / 2,
            "mlid": Aj,
            "mrid": S,
            "mtid": AG,
            "mbid": v,
            "mx": U,
            "my": Number(V) + Number(A) / 2,
            "myt": u
        };
        var AK = ["M" + N, m, "A" + Al, Al, 0, 0, 1, AF, l, "L" + Ak, P, "A" + Aa, Aa, 0, 0, 0, AE, AD + "Z"];
        s = MicroDraw_RedrawArcsGlass(At, {
            twin: AJ,
            g_attrs: Av,
            path_d: AK.join(" ")
        })
    } else {
        var J, a, Ax;
        var AG = MicroDraw_NewUniqueID($("#" + mDrawFlag_SvgId), mDrawFlag_FrameArcsTingV);
        var Ac = MicroDraw_NewUniqueID($("#" + mDrawFlag_SvgId), mDrawFlag_ArcsGlass);
        var f = MicroDraw_NewUniqueID($("#" + mDrawFlag_SvgId), mDrawFlag_ArcsGlass);
        var Az = MicroDraw_getTagMaxVal(AJ.find("[mtype=" + mDrawFlag_FrameArcsTingV + "]"), "mflag", "W", true) + 1;
        var AQ = Ay * (g + w) / AB;
        var Ae = 0;
        var AN, p;
        var AI, o, AH, n, N, m, AF, l;
        var q = Ah.width / t;
        var Aw = AM + q / 2;
        AI = Aw - mDrawThickTing / 2;
        AH = Aw + mDrawThickTing / 2;
        N = AH;
        AF = AI;
        o = (Ab + T) - Math.sqrt(Al * Al - (AI - Z) * (AI - Z));
        n = (Ab + T) - Math.sqrt(Al * Al - (AH - Z) * (AH - Z));
        m = (Ab + K) - Math.sqrt(Aa * Aa - (N - Z) * (N - Z));
        l = (Ab + K) - Math.sqrt(Aa * Aa - (AF - Z) * (AF - Z));
        var L;
        if (!$.Micro.IsEmpty(F)) {
            L = $("#" + mDrawFlag_SvgId + " #" + F);
            L.attr("mbid", L.attr("mbid").replace(Ao, [Ac, AG, f].join(",")))
        }
        if (!$.Micro.IsEmpty(v)) {
            L = $("#" + mDrawFlag_SvgId + " #" + v);
            L.attr("mtid", L.attr("mtid").replace(Ao, [Ac, AG, f].join(",")))
        }
        if (!$.Micro.IsEmpty(Aj)) {
            L = $("#" + mDrawFlag_SvgId + " #" + Aj);
            L.attr("mrid", L.attr("mrid").replace(Ao, Ac))
        }
        if (!$.Micro.IsEmpty(S)) {
            L = $("#" + mDrawFlag_SvgId + " #" + S);
            L.attr("mlid", L.attr("mlid").replace(Ao, f))
        }
        var AA = $.Micro.ConvToNum(U) + $.Micro.ConvToNum(E) / 2;
        Av = {
            "id": AG,
            "mtype": mDrawFlag_FrameArcsTingV,
            "mwidth": 0,
            "mheight": A,
            "mflag": "W" + Az,
            "mlid": Ac,
            "mrid": f,
            "mtid": F,
            "mbid": v,
            "mx": AA,
            "my": V,
            "mtotallen": "N"
        };
        J = $($.MicroSVG.makeSVG("g", Av));
        AJ.append(J);
        var Au = ["M" + AI, o, "A" + Al, Al, 0, 0, 1, AH, n, "L" + N, m, "A" + Aa, Aa, 0, 0, 0, AF, l + "Z"].join(" ");
        Av = {
            "tag": "ting",
            "d": Au,
            "fill": M,
            "stroke": "#000000",
            "stroke-width": "1",
            "mselect": "1"
        };
        var W = $($.MicroSVG.makeSVG("path", Av));
        J.append(W);
        Av = {
            "id": Ac,
            "mtype": mDrawFlag_ArcsGlass,
            "mwidth": Number(E) / 2,
            "mheight": Number(A),
            "mlid": Aj,
            "mrid": AG,
            "mtid": F,
            "mbid": v,
            "mx": U,
            "my": V,
            "myt": u
        };
        var AK = ["M" + AM, AL, "A" + Al, Al, 0, 0, 1, AI, o, "L" + AF, l, "A" + Aa, Aa, 0, 0, 0, AE, AD + "Z"];
        a = MicroDraw_RedrawArcsGlass(Ac, {
            twin: AJ,
            g_attrs: Av,
            path_d: AK.join(" ")
        });
        Av = {
            "id": f,
            "mtype": mDrawFlag_ArcsGlass,
            "mwidth": Number(E) / 2,
            "mheight": Number(A),
            "mlid": AG,
            "mrid": S,
            "mtid": F,
            "mbid": v,
            "mx": $.Micro.ConvToNum(U) + $.Micro.ConvToNum(E) / 2,
            "my": V,
            "myt": u
        };
        var AK = ["M" + AH, n, "A" + Al, Al, 0, 0, 1, AP, AO, "L" + Ak, P, "A" + Aa, Aa, 0, 0, 0, N, m + "Z"];
        Ax = MicroDraw_RedrawArcsGlass(f, {
            twin: AJ,
            g_attrs: Av,
            path_d: AK.join(" ")
        })
    }
    mDrawSelectObjId = "";
    mDrawDropDragTarget = null;
    return AG
}
function MicroDraw_RedrawArcsTing(g) {
    var q = $("#" + mDrawFlag_SvgId + " #" + g);
    if (q.length == 0) {
        return
    }
    var K = q.parents("g[mtype=" + mDrawFlag_WinArcs + "]");
    if (K.length == 0) {
        return
    }
    var A = MicroDraw_getArcsWinInfor(K);
    var c = A.tframe;
    var W = A.tF;
    var u = A.tF_d;
    var I = A.xOrig;
    var b = A.yOrig;
    var l = A.arcW;
    var N = A.frameHeight;
    var S = A.arcH;
    var H = A.s_arcH;
    var O = A.frameH;
    var Q = A.frameW;
    var Y = A.getArcDataInfo;
    var J = A.moveY;
    var n = A.cx;
    var f = A.cy;
    var V = A.R;
    var p = A.r;
    var m = q.attr("mtype");
    var G = q.attr("mtotallen") || "N";
    var L = $.Micro.ConvToNum(q.attr("mx")) / 1000 * mDrawPixelPerM;
    var M = $.Micro.ConvToNum(q.attr("my")) / 1000 * mDrawPixelPerM;
    var s = $.Micro.ConvToNum(q.attr("mwidth")) / 1000 * mDrawPixelPerM;
    var e = $.Micro.ConvToNum(q.attr("mheight")) / 1000 * mDrawPixelPerM;
    var C = J * M / O;
    var Aa = J * (M + e) / O;
    var Ab = q.attr("mlid") || "";
    var X = q.attr("mrid") || "";
    var U = q.attr("mtid") || "";
    var T = q.attr("mbid") || "";
    var o, E, v, D, a, w, Z, B;
    var P;
    var F, t;
    if (m == mDrawFlag_FrameArcsTingV) {
        o = I + L - mDrawThickTing / 2;
        v = I + L + mDrawThickTing / 2;
        a = v;
        Z = o;
        if (G == "Y") {
            F = V;
            t = p
        } else {
            F = p;
            t = V
        }
        E = (f + C) - Math.sqrt(F * F - (o - n) * (o - n));
        D = (f + C) - Math.sqrt(F * F - (v - n) * (v - n));
        w = (f + Aa) - Math.sqrt(t * t - (a - n) * (a - n));
        B = (f + Aa) - Math.sqrt(t * t - (Z - n) * (Z - n));
        P = ["M" + o, E, "A" + F, F, 0, 0, 1, v, D, "L" + a, w, "A" + t, t, 0, 0, 0, Z, B + "Z"]
    } else {
        o = I + L + mDrawThickTing / 2;
        if ($.Micro.IsEmpty(Ab)) {
            o = o + mDrawThickTing / 2
        }
        if (G == "Y") {
            o = o - mDrawThickFrame
        }
        v = I + L + s - mDrawThickTing / 2;
        if ($.Micro.IsEmpty(X)) {
            v = v - mDrawThickTing / 2
        }
        if (G == "Y") {
            v = v + mDrawThickFrame
        }
        a = v;
        Z = o;
        F = V;
        t = p;
        E = (f + C) - Math.sqrt(F * F - (o - n) * (o - n));
        D = (f + C) - Math.sqrt(F * F - (v - n) * (v - n));
        w = (f + C) - Math.sqrt(t * t - (a - n) * (a - n));
        B = (f + C) - Math.sqrt(t * t - (Z - n) * (Z - n));
        P = ["M" + o, E, "A" + F, F, 0, 0, 1, v, D, "L" + a, w, "A" + t, t, 0, 0, 0, Z, B + "Z"]
    }
    q.find("[tag=ting]").attr("d", P.join(" "))
}
function MicroDraw_ShowCoordinateWinArcs(a) {
    MicroDraw_ShowSizeProperty();
    if (a.length == 0) {
        return
    }
    var Ah = 1;
    var u = $("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]');
    if (u.length > 0) {
        var Ag = $.MicroSVG.getMatrix(u.attr("transform"));
        var f = Ag.matrix;
        Ah = f[0]
    }
    a.find("[mtype=" + mDrawFlag_ArcsCoorX + "],[mtype=" + mDrawFlag_ArcsCoorY + "],[tag=marctl]").remove();
    var I;
    var Ac, v;
    var N = 30;
    var g = 30;
    var Af = 25;
    var p = 20;
    var C = MicroDraw_getArcsWinInfor(a);
    var A = a.find("[mtype=" + mDrawFlag_FrameArcs + "]");
    var V = $.MicroSVG.getSVGRect(A);
    var c = $.MicroSVG.ToCanvasPoint($("#" + mDrawFlag_SvgId), V.x1, V.y1).x;
    var J = $.MicroSVG.ToCanvasPoint($("#" + mDrawFlag_SvgId), V.x1, V.y1).y;
    var S = Number(A.attr("mwidth"));
    var G = Number(A.attr("mheight"));
    var Z = Number(A.attr("marcheight"));
    var Y = Z / 1000 * mDrawPixelPerM;
    var O = Number(A.attr("msl_archeight") || A.attr("marcheight"));
    var e = S / 1000 * mDrawPixelPerM;
    var K = G / 1000 * mDrawPixelPerM;
    var F = A.find("[tag=tF]");
    var M = A.find("[tag=bF]");
    var q = A.find("[tag=lF]");
    var Ad = F.attr("d").split(" ");
    var n = M.attr("d").split(" ");
    var L = q.attr("d").split(" ");
    var P = $.Micro.ConvToNum(Ad[0]);
    var o = $.Micro.ConvToNum(Ad[1]);
    var E = a.attr("mcoorxoffset");
    var Q = $.Micro.ConvToNum(a.attr("mcoorxoffsetval"));
    var m = a.attr("mcooryoffset");
    var D = $.Micro.ConvToNum(a.attr("mcooryoffsetval"));
    var H = A.attr("coorxshow") || "Y";
    var b = A.attr("cooryshow") || "Y";
    var Ae = A.attr("arclenshow") || "Y";
    var Ab = MicroDraw_getArcDataInfo(P, o, S, Z, mDrawThickFrame);
    var l = Ab.ROut;
    var Aa = Ab.RIn;
    var w = Ab.cx;
    var s = Ab.cy;
    var B = A.attr("msl_arcr");
    var U = A.attr("msl_arctl");
    if ($.Micro.IsEmpty(A.attr("msl_archeight"))) {
        O = Z;
        A.attr("msl_archeight", O)
    }
    if ($.Micro.IsEmpty(B) || $.Micro.IsEmpty(U)) {
        B = (C.sl_arcR).toFixed(5);
        U = (C.sl_arcTL).toFixed(5);
        A.attr("msl_arcr", B);
        A.attr("msl_arctl", U)
    }
    B = Number(B).toFixed(2);
    U = Number(U).toFixed(2);
    var W;
    var X;
    var t = function(R, Ar, Ao, An, Ak, Ap, Au, At, Ai, Al) {
        var Aj, As, Am, Aq;
        I = {
            "tag": Ai,
            "mtingorframeid": Ar
        };
        if (R != null) {
            I.mpretingval = R
        }
        var Av = $($.MicroSVG.makeSVG("g", I));
        W.append(Av);
        Aj = Ao;
        Am = Aj;
        if (E == "Y") {
            As = An + At
        } else {
            if (E == "Y + H") {
                As = An + Ap + At
            } else {
                As = An + Ap + Au
            }
        }
        Aq = As + p;
        I = {
            "tag": "l",
            "stroke": "#000",
            "stroke-width": "1px",
            "x1": Aj,
            "y1": As,
            "x2": Am,
            "y2": Aq,
        };
        Ac = $($.MicroSVG.makeSVG("line", I));
        Av.append(Ac);
        if (E == "Y") {
            As = An + At
        } else {
            if (E == "Y + H") {
                As = An + Ap + At
            } else {
                As = An + Ap + Au
            }
        }
        As = As + p / 2;
        Aq = As;
        I = {
            "tag": "m",
            "stroke": "#000",
            "stroke-width": "1px",
            "x1": Ao,
            "y1": As,
            "x2": Ao + Ak,
            "y2": Aq,
        };
        Ac = $($.MicroSVG.makeSVG("line", I));
        Av.append(Ac);
        if (E == "Y") {
            As = An + At
        } else {
            if (E == "Y + H") {
                As = An + Ap + At
            } else {
                As = An + Ap + Au
            }
        }
        Aq = As + p;
        I = {
            "tag": "r",
            "stroke": "#000",
            "stroke-width": "1px",
            "x1": Ao + Ak,
            "y1": As,
            "x2": Ao + Ak,
            "y2": Aq,
        };
        Ac = $($.MicroSVG.makeSVG("line", I));
        Av.append(Ac);
        I = {
            "mtextkind": Ai,
            x: Ao,
            y: An + Au + p,
            "font-size": "16px",
            "fill": "#000"
        };
        v = $($.MicroSVG.makeSVG("text", I));
        v.get(0).textContent = Al;
        Av.append(v);
        if (E == "Y") {
            As = An + At
        } else {
            if (E == "Y + H") {
                As = An + Ap + At
            } else {
                As = An + Ap + Au
            }
        }
        As = As + p;
        Aq = As + p / 2;
        $.MicroSVG.setSVGPos({
            tobj: v,
            pos: "xy",
            x1: Ao,
            y1: As,
            x2: Ao + Ak,
            y2: Aq
        });
        var r = isPcUserAgent() ? "dblclick": "click";
        v.bind(r,
        function() {
            MicroDraw_SetCoordinateWinArcs($(this))
        })
    };
    var T = function(R, Ar, Ao, An, Ak, Ap, Av, Aq, Ai, Al) {
        var Aj, At, Am, Au;
        I = {
            "tag": Ai,
            "mtingorframeid": Ar
        };
        if (R != null) {
            I.mpretingval = R
        }
        var As = $($.MicroSVG.makeSVG("g", I));
        X.append(As);
        if (m == "X") {
            Aj = Ao + Aq
        } else {
            if (m == "X + W") {
                Aj = Ao + Ak + Aq
            } else {
                Aj = Ao - Av - p
            }
        }
        Am = Aj + p;
        I = {
            "tag": "t",
            "stroke": "#000",
            "stroke-width": "1px",
            "x1": Aj,
            "y1": An,
            "x2": Am,
            "y2": An,
        };
        Ac = $($.MicroSVG.makeSVG("line", I));
        As.append(Ac);
        if (m == "X") {
            Aj = Ao + Aq + p / 2
        } else {
            if (m == "X + W") {
                Aj = Ao + Ak + Aq + p / 2
            } else {
                Aj = Ao - Av - p / 2
            }
        }
        Am = Aj;
        I = {
            "tag": "m",
            "stroke": "#000",
            "stroke-width": "1px",
            "x1": Aj,
            "y1": An,
            "x2": Am,
            "y2": An + Ap,
        };
        Ac = $($.MicroSVG.makeSVG("line", I));
        As.append(Ac);
        if (m == "X") {
            Aj = Ao + Aq
        } else {
            if (m == "X + W") {
                Aj = Ao + Ak + Aq
            } else {
                Aj = Ao - Av - p
            }
        }
        Am = Aj + p;
        I = {
            "tag": "b",
            "stroke": "#000",
            "stroke-width": "1px",
            "x1": Aj,
            "y1": An + Ap,
            "x2": Am,
            "y2": An + Ap,
        };
        Ac = $($.MicroSVG.makeSVG("line", I));
        As.append(Ac);
        I = {
            "mtextkind": Ai,
            x: $.Micro.ConvToNum(L[0]) - Av - p,
            y: An + Y + ($.Micro.ConvToNum(L[8]) - An + Y) / 2,
            "font-size": "16px",
            "fill": "#000"
        };
        v = $($.MicroSVG.makeSVG("text", I));
        v.get(0).textContent = Al;
        As.append(v);
        if (m == "X") {
            Aj = Ao + Aq + p
        } else {
            if (m == "X + W") {
                Aj = Ao + Ak + Aq + p
            } else {
                Aj = Ao - Av
            }
        }
        Aj = Aj - p / 2 - 5;
        Am = Aj + p / 2;
        v.attr("x", Aj);
        $.MicroSVG.setSVGPos({
            tobj: v,
            pos: "y",
            x1: Aj,
            y1: An,
            x2: Am,
            y2: An + Ap + 15 / Ah
        });
        v.attr("transform", "rotate(" + [ - 90, v.attr("x"), v.attr("y")].join(" ") + ")");
        var r = isPcUserAgent() ? "dblclick": "click";
        v.bind(r,
        function() {
            MicroDraw_SetCoordinateWinArcs($(this))
        })
    }; (function() {
        if (H != "Y") {
            return
        }
        I = {
            "mtype": mDrawFlag_ArcsCoorX
        };
        W = $($.MicroSVG.makeSVG("g", I));
        a.append(W);
        t(null, A.attr("id"), c / Ah, J / Ah, V.width / Ah, V.height / Ah, N, Q, "W", S)
    })(); (function() {
        if (H != "Y") {
            return
        }
        var r = [];
        var Aj = [];
        var Ap = [];
        var Au = [];
        $.each(a.find("[mtype=" + mDrawFlag_FrameArcsTingV + "]"),
        function() {
            var Aw = $(this);
            var Ax = Aw.attr("mx");
            r.push({
                mx: Ax,
                tobj: Aw
            })
        });
        r.sort($.Micro.sortByArr([{
            key: "mx",
            keyType: "Number"
        }], "asc"));
        for (var An = 0; An < r.length; An++) {
            var Ar = r[An].tobj;
            var Am = Ar.attr("mx");
            if ($.inArray(Am, Aj) == -1) {
                Ap = [];
                Ap.push(Ar.attr("id"));
                Aj.push(Am);
                Au.push({
                    mx: Am,
                    tobj: Ar,
                    tingorframeids: Ap
                })
            } else {
                var Av = Au[Au.length - 1];
                Av.tingorframeids.push(Ar.attr("id"))
            }
        }
        if (Au.length > 0) {
            Au.push({
                mx: S,
                tobj: null,
                tingorframeids: Au[Au.length - 1].tingorframeids
            });
            Au.sort($.Micro.sortByArr([{
                key: "mx",
                keyType: "Number"
            }], "asc"))
        }
        for (var An = 0; An < Au.length; An++) {
            var Ak = (An > 0) ? Number(Au[An].mx) - Number(Au[An - 1].mx) : Number(Au[An].mx);
            var Al = (An > 0) ? Au[An - 1].tobj: null;
            var Ao = (Al == null) ? c / Ah: ($.Micro.ConvToNum($.MicroSVG.UnifiedSVGPath(Al.find("[tag=ting]").attr("d")).split(" ")[0]) + mDrawThickTing / 2);
            var At = Au[An].tobj;
            var Ai = (At == null) ? (c / Ah + e) : ($.Micro.ConvToNum($.MicroSVG.UnifiedSVGPath(At.find("[tag=ting]").attr("d")).split(" ")[0]) + mDrawThickTing / 2);
            var As = (Ai - Ao);
            var Aq = (An == Au.length - 1) ? "WLAST": "Wn";
            var R = (An > 0) ? Au[An - 1].mx: 0;
            t(R, Au[An].tingorframeids.join(","), Ao, J / Ah, As, V.height / Ah, (N - Af), (Q - Af), Aq, Ak)
        }
    })(); (function() {
        if (b != "Y") {
            return
        }
        I = {
            "mtype": mDrawFlag_ArcsCoorY
        };
        X = $($.MicroSVG.makeSVG("g", I));
        a.append(X);
        T(null, A.attr("id"), c / Ah, (J / Ah + Y), e, K, g, D, "H", G)
    })(); (function() {
        if (b != "Y") {
            return
        }
        var r = [];
        var Au = [];
        var Ap = [];
        var Aj = [];
        $.each(a.find("[mtype=" + mDrawFlag_FrameArcsTingH + "]"),
        function() {
            var Ay = $(this);
            var Az = Ay.attr("my");
            r.push({
                my: Az,
                tobj: Ay
            })
        });
        r.sort($.Micro.sortByArr([{
            key: "my",
            keyType: "Number"
        }], "asc"));
        for (var Am = 0; Am < r.length; Am++) {
            var Ai = r[Am].tobj;
            var Ar = Ai.attr("my");
            if ($.inArray(Ar, Au) == -1) {
                Ap = [];
                Ap.push(Ai.attr("id"));
                Au.push(Ar);
                Aj.push({
                    my: Ar,
                    tobj: Ai,
                    tingorframeids: Ap
                })
            } else {
                var As = Aj[Aj.length - 1];
                As.tingorframeids.push(Ai.attr("id"))
            }
        }
        if (Aj.length > 0) {
            Aj.push({
                my: G,
                tobj: null,
                tingorframeids: Aj[Aj.length - 1].tingorframeids
            });
            Aj.sort($.Micro.sortByArr([{
                key: "my",
                keyType: "Number"
            }], "asc"))
        }
        var Aq = function(AB) {
            var Ay = $.Micro.ConvToNum(AB[0]);
            var Az = $.Micro.ConvToNum(AB[1]);
            var AA = Az + Math.sqrt(l * l - (Ay - w) * (Ay - w));
            Ay = P + mDrawThickFrame;
            Az = AA - Math.sqrt(l * l - (Ay - w) * (Ay - w));
            return (Az + mDrawThickTing / 2)
        };
        for (var Am = 0; Am < Aj.length; Am++) {
            var Ak;
            var At = (Am > 0) ? Number(Aj[Am].my) - Number(Aj[Am - 1].my) : Number(Aj[Am].my);
            var An = (Am > 0) ? Aj[Am - 1].tobj: null;
            var Aw = (J / Ah + Y);
            if (An != null) {
                Ak = $.MicroSVG.UnifiedSVGPath(An.find("[tag=ting]").attr("d")).split(" ");
                Aw = Aq(Ak)
            }
            var Ao = Aj[Am].tobj;
            var Al = (J / Ah + Y + K);
            if (Ao != null) {
                Ak = $.MicroSVG.UnifiedSVGPath(Ao.find("[tag=ting]").attr("d")).split(" ");
                Al = Aq(Ak)
            }
            var R = Al - Aw;
            var Ax = (Am == Aj.length - 1) ? "HLAST": "Hn";
            var Av = (Am > 0) ? Aj[Am - 1].my: 0;
            T(Av, Aj[Am].tingorframeids.join(","), c / Ah, Aw, V.width / Ah, R, (g - Af), (D + Af), Ax, At)
        }
    })(); (function() {
        if (b != "Y") {
            return
        }
        var r = "Harc";
        I = {
            "tag": r,
        };
        var Ai = $($.MicroSVG.makeSVG("g", I));
        X.append(Ai);
        if (m == "X") {
            x1 = c / Ah + D
        } else {
            if (m == "X + W") {
                x1 = $.Micro.ConvToNum(n[7]) + D
            } else {
                x1 = $.Micro.ConvToNum(L[0]) - g - p
            }
        }
        x2 = x1 + p;
        I = {
            "tag": "t",
            "stroke": "#000",
            "stroke-width": "1px",
            "x1": x1,
            "y1": $.Micro.ConvToNum(L[1]) - Y,
            "x2": x2,
            "y2": $.Micro.ConvToNum(L[1]) - Y,
        };
        Ac = $($.MicroSVG.makeSVG("line", I));
        Ai.append(Ac);
        if (m == "X") {
            x1 = c / Ah + D + p / 2
        } else {
            if (m == "X + W") {
                x1 = $.Micro.ConvToNum(n[7]) + D + p / 2
            } else {
                x1 = $.Micro.ConvToNum(n[0]) - g - p / 2
            }
        }
        x2 = x1;
        I = {
            "tag": "m",
            "stroke": "#000",
            "stroke-width": "1px",
            "x1": x1,
            "y1": $.Micro.ConvToNum(L[1]) - Y,
            "x2": x2,
            "y2": $.Micro.ConvToNum(L[1]),
        };
        Ac = $($.MicroSVG.makeSVG("line", I));
        Ai.append(Ac);
        if (m == "X") {
            x1 = c / Ah + D
        } else {
            if (m == "X + W") {
                x1 = $.Micro.ConvToNum(n[7]) + D
            } else {
                x1 = $.Micro.ConvToNum(n[0]) - g - p
            }
        }
        x2 = x1 + p;
        I = {
            "tag": "b",
            "stroke": "#000",
            "stroke-width": "1px",
            "x1": x1,
            "y1": $.Micro.ConvToNum(L[1]),
            "x2": x2,
            "y2": $.Micro.ConvToNum(L[1]),
        };
        Ac = $($.MicroSVG.makeSVG("line", I));
        Ai.append(Ac);
        I = {
            "mtextkind": r,
            x: $.Micro.ConvToNum(L[0]) - g - p,
            y: $.Micro.ConvToNum(L[1]) - Y - 5,
            "font-size": "16px",
            "fill": "#000"
        };
        v = $($.MicroSVG.makeSVG("text", I));
        v.get(0).textContent = O;
        Ai.append(v);
        if (m == "X") {
            x1 = c / Ah + D + p
        } else {
            if (m == "X + W") {
                x1 = $.Micro.ConvToNum(n[7]) + D + p
            } else {
                x1 = $.Micro.ConvToNum(n[0]) - g
            }
        }
        x1 = x1 - p;
        x2 = x1 + p;
        $.MicroSVG.setSVGPos({
            tobj: v,
            pos: "x",
            x1: x1,
            y1: $.Micro.ConvToNum(L[1]) - Y,
            x2: x2,
            y2: $.Micro.ConvToNum(L[1])
        });
        var R = isPcUserAgent() ? "dblclick": "click";
        v.bind(R,
        function() {
            MicroDraw_SetCoordinateWinArcs($(this))
        })
    })(); (function() {
        if (Ae != "Y") {
            return
        }
        I = {
            "tag": "marctl",
        };
        var R = $($.MicroSVG.makeSVG("g", I));
        a.append(R);
        I = {
            x: $.Micro.ConvToNum(L[0]),
            y: $.Micro.ConvToNum(L[1]) - Y - 9,
            "font-size": "16px",
            "fill": "#000"
        };
        v = $($.MicroSVG.makeSVG("text", I));
        v.get(0).textContent = "弧长：" + U;
        R.append(v);
        $.MicroSVG.setSVGPos({
            tobj: v,
            pos: "x",
            x1: $.Micro.ConvToNum(L[0]),
            y1: $.Micro.ConvToNum(L[1]) - Y,
            x2: $.Micro.ConvToNum(L[0]) + e,
            y2: $.Micro.ConvToNum(L[1])
        })
    })();
    MicroDraw_WinArcsGdPic(a)
}
function MicroDraw_SetCoordinateWinArcs(L) {
    var K = false;
    var B = "尺寸录入：";
    var H = "请输入尺寸：";
    $.each($(".messager-window .panel-title"),
    function() {
        if ($(this).text() == B) {
            K = true;
            return false
        }
    });
    if (K) {
        return
    }
    var N = $.messager.defaults;
    try {
        var O = L.parents("[mtype=" + mDrawFlag_WinArcs + "]");
        var P = O.find("[mtype=" + mDrawFlag_FrameArcs + "]");
        var A = Number(P.attr("mwidth"));
        var C = Number(P.attr("mheight"));
        var M = Number(P.attr("marcheight"));
        var D = L.attr("mtextkind");
        var F = L.parents("[tag=" + D + "]");
        var G = F.attr("mtingorframeid") || "";
        var I = [];
        if (!$.Micro.IsEmpty(G)) {
            I = G.split(",")
        }
        var J = F.attr("mpretingval");
        $.messager.defaults = {
            ok: "确定",
            cancel: "退出",
            width: 200
        };
        switch (D) {
        case "W":
        case "H":
        case "Harc":
            mDrawDropDragTarget = O.find("[tag=tF]").get(0);
            MicroDraw_WinObjClick(null);
            break;
        default:
            MicroDraw_ShowCoordinate_SetTingColor(G, mDrawSvgFocusColor)
        }
        $.messager.prompt(B, H,
        function(Q) {
            if (Q && !isNaN(Q)) {
                if (Number(Q) <= 0) {
                    jQuery.messager.alert("提示:", "设置的数字必须是正数！", "error");
                    return
                }
                switch (D) {
                case "W":
                    var U = Number(Q) - A;
                    if (!MicroDraw_CheckSetArcH(O, {
                        mwidth: Q
                    })) {
                        return
                    }
                    $.each(O.find("[mtype][mrid='']"),
                    function() {
                        var W = $(this);
                        var X = Number(W.attr("mwidth"));
                        W.attr("mwidth", (X + U))
                    });
                    MicroDraw_RedrawWinArcs(O);
                    break;
                case "WLAST":
                    var V = Number(A - Number(Q));
                    for (var R = 0; R < I.length; R++) {
                        var T = $("#" + mDrawFlag_SvgId + " #" + I[R]);
                        var S = Number(T.attr("mx"));
                        var U = V - S;
                        T.attr("mx", V);
                        MicroDraw_Redraw(I[R]);
                        $.each($("#" + mDrawFlag_SvgId + " [mrid*='" + I[R] + "']"),
                        function(W, X) {
                            $(X).attr("mwidth", Number($(X).attr("mwidth")) + U);
                            MicroDraw_Redraw($(X).attr("id"))
                        });
                        $.each($("#" + mDrawFlag_SvgId + " [mlid*='" + I[R] + "']"),
                        function(W, X) {
                            $(X).attr("mwidth", Number($(X).attr("mwidth")) - U);
                            $(X).attr("mx", Number($(X).attr("mx")) + U);
                            MicroDraw_Redraw($(X).attr("id"))
                        })
                    }
                    break;
                case "Wn":
                    var V = Number(J) + Number(Q);
                    for (var R = 0; R < I.length; R++) {
                        var T = $("#" + mDrawFlag_SvgId + " #" + I[R]);
                        var S = Number(T.attr("mx"));
                        T.attr("mx", V);
                        MicroDraw_Redraw(I[R]);
                        var U = Number(V) - Number(S);
                        $.each($("#" + mDrawFlag_SvgId + " [mrid*='" + I[R] + "']"),
                        function(W, X) {
                            $(X).attr("mwidth", Number($(X).attr("mwidth")) + U);
                            MicroDraw_Redraw($(X).attr("id"))
                        });
                        $.each($("#" + mDrawFlag_SvgId + " [mlid*='" + I[R] + "']"),
                        function(W, X) {
                            $(X).attr("mwidth", Number($(X).attr("mwidth")) - U);
                            $(X).attr("mx", Number($(X).attr("mx")) + U);
                            MicroDraw_Redraw($(X).attr("id"))
                        })
                    }
                    break;
                case "Harc":
                    if (!MicroDraw_CheckSetArcH(O, {
                        marcheight: Q
                    })) {
                        return
                    }
                    MicroDraw_RedrawWinArcs(O);
                    break;
                case "H":
                    var U = Number(Q) - C;
                    $.each(O.find("[mtype][mbid='']"),
                    function() {
                        var W = $(this);
                        var X = Number(W.attr("mheight"));
                        W.attr("mheight", (X + U))
                    });
                    MicroDraw_RedrawWinArcs(O);
                    break;
                case "HLAST":
                    var V = Number(C - Number(Q));
                    for (var R = 0; R < I.length; R++) {
                        var T = $("#" + mDrawFlag_SvgId + " #" + I[R]);
                        var S = Number(T.attr("my"));
                        var U = V - S;
                        T.attr("my", V);
                        MicroDraw_Redraw(I[R]);
                        $.each($("#" + mDrawFlag_SvgId + " [mbid*='" + I[R] + "']"),
                        function(W, X) {
                            $(X).attr("mheight", Number($(X).attr("mheight")) + U);
                            MicroDraw_Redraw($(X).attr("id"))
                        });
                        $.each($("#" + mDrawFlag_SvgId + " [mtid*='" + I[R] + "']"),
                        function(W, X) {
                            $(X).attr("mheight", Number($(X).attr("mheight")) - U);
                            $(X).attr("my", Number($(X).attr("my")) + U);
                            MicroDraw_Redraw($(X).attr("id"))
                        })
                    }
                    break;
                case "Hn":
                    var V = Number(J) + Number(Q);
                    for (var R = 0; R < I.length; R++) {
                        var T = $("#" + mDrawFlag_SvgId + " #" + I[R]);
                        var S = Number(T.attr("my"));
                        T.attr("my", V);
                        MicroDraw_Redraw(I[R]);
                        var U = Number(V) - Number(S);
                        $.each($("#" + mDrawFlag_SvgId + " [mbid*='" + I[R] + "']"),
                        function(W, X) {
                            $(X).attr("mheight", Number($(X).attr("mheight")) + U);
                            MicroDraw_Redraw($(X).attr("id"))
                        });
                        $.each($("#" + mDrawFlag_SvgId + " [mtid*='" + I[R] + "']"),
                        function(W, X) {
                            $(X).attr("mheight", Number($(X).attr("mheight")) - U);
                            $(X).attr("my", Number($(X).attr("my")) + U);
                            MicroDraw_Redraw($(X).attr("id"))
                        })
                    }
                    break
                }
                MicroDraw_ShowCoordinateWinArcs(O)
            }
        });
        $.messager.defaults = N
    } catch(E) {
        $.messager.defaults = N;
        console.log(E.name + ":" + E.message)
    }
}
function MicroDraw_ReDraw_ArcsFrame(N, T) {
    var L;
    var J = $("#" + mDrawFlag_SvgId + " #" + N);
    var V = Number(J.attr("mwidth"));
    var G = Number(J.attr("mheight"));
    var X = Number(J.attr("marcheight"));
    var b = V;
    var R = X;
    if (J.length == 0) {
        return
    }
    var H, Y;
    var o = J.parents("[mtype=" + mDrawFlag_WinArcs + "]");
    if (T) {
        H = Number(T.xOrig || 200);
        Y = Number(T.yOrig || 100)
    } else {
        var U = J.find("[tag=tF]");
        var D = $.MicroSVG.UnifiedSVGPath(U.attr("d"));
        var P = D.split(" ");
        H = $.Micro.ConvToNum(P[0]);
        Y = $.Micro.ConvToNum(P[1])
    }
    var O = G / 1000 * mDrawPixelPerM;
    var Q = V / 1000 * mDrawPixelPerM;
    var F = R / 1000 * mDrawPixelPerM;
    var f = MicroDraw_getArcDataInfo(H, Y, b, R, mDrawThickFrame);
    var g = MicroDraw_getArcDataInfo(H, Y, b, R, (mDrawThickFrame + mDrawThickYt));
    var Z = f.arcInX;
    var E = f.arcInY;
    var e = f.ROut;
    var p = f.RIn;
    var n = f.cx;
    var S = f.cy;
    var l = f.arcIn_d.split(" ");
    var B = f.arcOut_d.split(" ");
    var a = f.farcIn_d.split(" ");
    var c = f.farcOut_d.split(" ");
    var q = f.farcIn_Ld.split(" ");
    var M = f.farcOut_Ld.split(" ");
    var I = 0;
    var C = [];
    var m = []; (function() {
        I = (Y + O) - $.Micro.ConvToNum(q[1]);
        C = [$.Micro.ConvToNum(B[0]), B[1], B[7], B[8], a[7], a[8], $.Micro.ConvToNum(a[0]), a[1]];
        var s = e;
        var v = n;
        var r = S + I;
        var t = H + mDrawThickFrame;
        var u = r - Math.sqrt(s * s - (t - v) * (t - v));
        m = [H, (Y + O), (H + Q), (Y + O), (H + Q - mDrawThickFrame), u, (H + mDrawThickFrame), u]
    })(); (function() {
        var r = ["M" + C[0], C[1], "A" + e, e, 0, 0, 1, C[2], C[3], "L" + C[4], C[5], "A" + p, p, 0, 0, 0, C[6], C[7] + "Z"].join(" ");
        var s = J.find("[tag=tF]");
        if (s.length == 0) {
            L = {
                "tag": "tF",
                "d": "M0 0",
                "fill": mDrawProductColor,
                "stroke": "#000000",
                "stroke-width": "1",
                "pointer-events": "all",
                "mselect": "1"
            };
            s = $($.MicroSVG.makeSVG("path", L));
            J.append(s)
        }
        s.attr("d", r)
    })(); (function() {
        var r = ["M" + m[0], m[1], "A" + p, p, 0, 0, 1, m[2], m[3], "L" + m[4], m[5], "A" + e, e, 0, 0, 0, m[6], m[7] + "Z"].join(" ");
        var s = J.find("[tag=bF]");
        if (s.length == 0) {
            L = {
                "tag": "bF",
                "d": "M0 0",
                "fill": mDrawProductColor,
                "stroke": "#000000",
                "stroke-width": "1",
                "pointer-events": "all",
                "mselect": "1"
            };
            s = $($.MicroSVG.makeSVG("path", L));
            J.append(s)
        }
        s.attr("d", r)
    })(); (function() {
        var r = ["M" + C[0], C[1], "L" + C[6], C[7], "L" + m[6], m[7], "L" + m[0], m[1] + "Z"].join(" ");
        var s = J.find("[tag=lF]");
        if (s.length == 0) {
            L = {
                "tag": "lF",
                "d": "M0 0",
                "fill": mDrawProductColor,
                "stroke": "#000000",
                "stroke-width": "1",
                "pointer-events": "all",
                "mselect": "1"
            };
            s = $($.MicroSVG.makeSVG("path", L));
            J.append(s)
        }
        s.attr("d", r)
    })(); (function() {
        var r = ["M" + C[4], C[5], "L" + C[2], C[3], "L" + m[2], m[3], "L" + m[4], m[5] + "Z"].join(" ");
        var s = J.find("[tag=rF]");
        if (s.length == 0) {
            L = {
                "tag": "rF",
                "d": "M0 0",
                "fill": mDrawProductColor,
                "stroke": "#000000",
                "stroke-width": "1",
                "pointer-events": "all",
                "mselect": "1"
            };
            s = $($.MicroSVG.makeSVG("path", L));
            J.append(s)
        }
        s.attr("d", r)
    })();
    var A = MicroDraw_getArcsWinInfor(o);
    var W = (A.sl_arcR).toFixed(5);
    var K = (A.sl_arcTL).toFixed(5);
    J.attr("msl_arcr", W);
    J.attr("msl_arctl", K)
}
function MicroDraw_Frame_AddArcs(E) {
    var Q = E.svg;
    var N = Number(E.xOrig || 200);
    var R = Number(E.yOrig || 100);
    var K = Number(E.arcH);
    var T = K;
    var P = Number(E.fW);
    var U = Number(E.fH);
    var M = P;
    if (Q.length == 0) {
        return
    }
    Q.find("[mselected=1]").attr("mselected", 0);
    mDrawSelectObjId = "";
    var C;
    var J = MicroDraw_NewUniqueID(Q, mDrawFlag_WinArcs);
    var H = MicroDraw_NewUniqueID(Q, mDrawFlag_FrameArcs);
    var O = MicroDraw_NewUniqueID(Q, mDrawFlag_ArcsGlass);
    var S, B, G;
    var L = U / 1000 * mDrawPixelPerM;
    var F = P / 1000 * mDrawPixelPerM;
    var A = K / 1000 * mDrawPixelPerM;
    var D = "Y";
    var I = Q;
    if (Q.find('[mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
        I = Q.find('[mtype="' + mDrawFlag_ScaleG + '"]')
    }
    C = {
        "id": J,
        "mtype": mDrawFlag_WinArcs,
        "mwin": "win" + (MicroDraw_getTagMaxVal(Q, "mwin", "win") + 1)
    };
    S = $($.MicroSVG.makeSVG("g", C));
    I.append(S);
    C = {
        "id": H,
        "mtype": mDrawFlag_FrameArcs,
        "mwidth": P,
        "mheight": U,
        "marcheight": K,
        "msl_archeight": T,
        "mlid": "",
        "mrid": "",
        "mtid": "",
        "mbid": "",
        "mwall": "N",
        "mgdpic": "Y",
        "mgduptxt": "室外",
        "mgddowntxt": "室外",
        "mshowglassfan": "Y",
        "prcolor": "系统默认"
    };
    B = $($.MicroSVG.makeSVG("g", C));
    S.append(B);
    MicroDraw_ReDraw_ArcsFrame(H, E); (function() {
        var Y = B.find("[tag=tF]");
        var c = $.MicroSVG.UnifiedSVGPath(Y.attr("d"));
        var b = c.split(" ");
        var W = B.find("[tag=bF]");
        var a = $.MicroSVG.UnifiedSVGPath(W.attr("d"));
        var X = a.split(" ");
        var Z = $.Micro.ConvToNum(b[2]);
        var V = $.Micro.ConvToNum(b[11]);
        C = {
            "id": O,
            "mtype": mDrawFlag_ArcsGlass,
            "mwidth": P,
            "mheight": U,
            "mx": 0,
            "my": 0,
            "mlid": "",
            "mrid": "",
            "mtid": "",
            "mbid": "",
            "myt": D,
        };
        var e = ["M" + $.Micro.ConvToNum(b[16]), b[17], "A" + V, V, 0, 0, 1, $.Micro.ConvToNum(b[9]), b[10], "L" + $.Micro.ConvToNum(X[9]), X[10], "A" + Z, Z, 0, 0, 0, $.Micro.ConvToNum(X[16]), X[17] + "Z"].join(" ");
        g_tglass = MicroDraw_RedrawArcsGlass(O, {
            twin: S,
            g_attrs: C,
            path_d: e
        })
    })();
    MicroDraw_ShowCoordinateWinArcs(S);
    return J
}
function MicroDraw_RedrawWinArcs(A) {
    $.each(A.find("[mtype=" + mDrawFlag_FrameArcs + "]"),
    function() {
        MicroDraw_Redraw($(this).attr("id"))
    });
    $.each(A.find("[mtype=" + mDrawFlag_FrameArcsTingV + "],[mtype=" + mDrawFlag_FrameArcsTingH + "]"),
    function() {
        MicroDraw_Redraw($(this).attr("id"))
    });
    $.each(A.find("[mtype=" + mDrawFlag_ArcsGlass + "]"),
    function() {
        MicroDraw_Redraw($(this).attr("id"))
    });
    $.each(A.find("[mtype=" + mDrawFlag_ArcsPkc + "],[mtype=" + mDrawFlag_ArcsDkc + "]"),
    function() {
        MicroDraw_Redraw($(this).attr("id"))
    });
    MicroDraw_ShowCoordinateWinArcs(A)
}
function MicroDraw_RedrawArcsPkc(Ao, m) {
    var T, AE, Aq;
    var AD;
    var W;
    var Am, E;
    if (m) {
        T = m.twin;
        AE = m.g_attrs;
        Aq = m.path_d;
        AD = $($.MicroSVG.makeSVG("g", AE));
        T.append(AD)
    } else {
        AD = $("#" + mDrawFlag_SvgId + " #" + Ao);
        T = AD.parents("g[mtype=" + mDrawFlag_WinArcs + "]")
    }
    var C = MicroDraw_getArcsWinInfor(T);
    var Ae = C.tframe;
    var F = C.tF;
    var Ay = C.tF_d;
    var K = C.xOrig;
    var Ad = C.yOrig;
    var Al = C.arcW;
    var a = C.frameHeight;
    var g = C.arcH;
    var J = C.s_arcH;
    var b = C.frameH;
    var f = C.frameW;
    var Aa = C.getArcDataInfo;
    var Q = C.moveY;
    var Az = C.cx;
    var Af = C.cy;
    var v = C.R;
    var Au = C.r;
    var AB = Ae.attr("mshowglassfan") || "Y";
    var X = MicroDraw_ReturnColor($("#" + mDrawFlag_SvgId + " [prcolor]:first").attr("prcolor"));
    if (!m) {
        var Aw = [];
        var Ab = AD.attr("mtid");
        var S = AD.attr("mbid");
        var e = AD.attr("mlid");
        var w = AD.attr("mrid");
        var D, At, M, L, t, V, As, Ar;
        var I, o;
        var Ax, Ah;
        var u, Y, B;
        if (!$.Micro.IsEmpty(e)) {
            I = $("#" + mDrawFlag_SvgId + " #" + e);
            Ax = I.attr("mx");
            Ah = $.Micro.ConvToNum(Ax) / 1000 * mDrawPixelPerM;
            D = K + Ah + mDrawThickTing / 2
        } else {
            D = K + mDrawThickFrame
        }
        As = D;
        if (!$.Micro.IsEmpty(w)) {
            I = $("#" + mDrawFlag_SvgId + " #" + w);
            Ax = I.attr("mx");
            Ah = $.Micro.ConvToNum(Ax) / 1000 * mDrawPixelPerM;
            M = K + Ah - mDrawThickTing / 2
        } else {
            M = K + f - mDrawThickFrame
        }
        t = M;
        if (!$.Micro.IsEmpty(Ab)) {
            I = $("#" + mDrawFlag_SvgId + " #" + Ab);
            u = I.attr("my")
        } else {
            u = 0
        }
        Y = $.Micro.ConvToNum(u) / 1000 * mDrawPixelPerM;
        B = Q * Y / b;
        At = (Af + B) - Math.sqrt(Au * Au - (D - Az) * (D - Az));
        L = (Af + B) - Math.sqrt(Au * Au - (M - Az) * (M - Az));
        if (!$.Micro.IsEmpty(S)) {
            I = $("#" + mDrawFlag_SvgId + " #" + S);
            u = I.attr("my")
        } else {
            u = a
        }
        Y = $.Micro.ConvToNum(u) / 1000 * mDrawPixelPerM;
        B = Q * Y / b;
        V = (Af + B) - Math.sqrt(v * v - (t - Az) * (t - Az));
        Ar = (Af + B) - Math.sqrt(v * v - (As - Az) * (As - Az));
        Aw = ["M" + D, At, "A" + Au, Au, 0, 0, 1, M, L, "L" + t, V, "A" + v, v, 0, 0, 0, As, Ar + "Z"];
        Aq = Aw.join(" ")
    }
    var A = AD.attr("myt") || AD.attr("mfanhasyt") || "Y";
    var H = AD.attr("mopendir") || "L";
    var c = AD.attr("mjs") || "Y";
    var An = AD.attr("mtype");
    AD.children().remove();
    var AC = function(Ba, AM, AS, AQ) {
        var AU = Ba.split(" ");
        var AL = [];
        var Bb = [];
        W = {
            "tag": "fan"
        };
        if (AQ) {
            W["pos"] = AQ
        }
        Am = $($.MicroSVG.makeSVG("g", W));
        AD.append(Am);
        var A0, AY; (function() {
            var Bk, Bl, Bn, Bm;
            Bk = $.Micro.ConvToNum(AU[0]);
            Bl = $.Micro.ConvToNum(AU[1]);
            Bm = Au;
            Bn = Bl + Math.sqrt(Bm * Bm - (Bk - Az) * (Bk - Az));
            A0 = Bn;
            AL.push($.Micro.ConvToNum(AU[0]));
            AL.push($.Micro.ConvToNum(AU[1]));
            AL.push($.Micro.ConvToNum(AU[7]));
            AL.push($.Micro.ConvToNum(AU[8]));
            Bk = $.Micro.ConvToNum(AU[7]) - mDrawThickFan;
            Bm = Au - mDrawThickFan;
            Bl = Bn - Math.sqrt(Bm * Bm - (Bk - Az) * (Bk - Az));
            AL.push(Bk);
            AL.push(Bl);
            Bk = $.Micro.ConvToNum(AU[0]) + mDrawThickFan;
            Bm = Au - mDrawThickFan;
            Bl = Bn - Math.sqrt(Bm * Bm - (Bk - Az) * (Bk - Az));
            AL.push(Bk);
            AL.push(Bl);
            Bk = $.Micro.ConvToNum(AU[16]);
            Bl = $.Micro.ConvToNum(AU[17]);
            Bm = v;
            Bn = Bl + Math.sqrt(Bm * Bm - (Bk - Az) * (Bk - Az));
            AY = Bn;
            Bb.push($.Micro.ConvToNum(AU[16]));
            Bb.push($.Micro.ConvToNum(AU[17]));
            Bb.push($.Micro.ConvToNum(AU[9]));
            Bb.push($.Micro.ConvToNum(AU[10]));
            Bk = $.Micro.ConvToNum(AU[9]) - mDrawThickFan;
            Bm = v + mDrawThickFan;
            Bl = Bn - Math.sqrt(Bm * Bm - (Bk - Az) * (Bk - Az));
            Bb.push(Bk);
            Bb.push(Bl);
            Bk = $.Micro.ConvToNum(AU[16]) + mDrawThickFan;
            Bm = v + mDrawThickFan;
            Bl = Bn - Math.sqrt(Bm * Bm - (Bk - Az) * (Bk - Az));
            Bb.push(Bk);
            Bb.push(Bl)
        })(); (function() {
            var Bk = ["M" + AL[0], AL[1], "A" + Au, Au, 0, 0, 1, AL[2], AL[3], "L" + AL[4], AL[5], "A" + (Au - mDrawThickFan), (Au - mDrawThickFan), 0, 0, 0, AL[6], AL[7] + "Z"].join(" ");
            W = {
                "tag": "tF",
                "d": Bk,
                "fill": X,
                "stroke": "#000000",
                "stroke-width": "1",
            };
            E = $($.MicroSVG.makeSVG("path", W));
            Am.append(E)
        })(); (function() {
            var Bk = ["M" + Bb[0], Bb[1], "A" + v, v, 0, 0, 1, Bb[2], Bb[3], "L" + Bb[4], Bb[5], "A" + (v + mDrawThickFan), (v + mDrawThickFan), 0, 0, 0, Bb[6], Bb[7] + "Z"].join(" ");
            W = {
                "tag": "bF",
                "d": Bk,
                "fill": X,
                "stroke": "#000000",
                "stroke-width": "1",
            };
            E = $($.MicroSVG.makeSVG("path", W));
            Am.append(E)
        })(); (function() {
            var Bk = ["M" + AL[0], AL[1], "L" + AL[6], AL[7], "L" + Bb[6], Bb[7], "L" + Bb[0], Bb[1] + "Z"].join(" ");
            W = {
                "tag": "lF",
                "d": Bk,
                "fill": X,
                "stroke": "#000000",
                "stroke-width": "1",
            };
            E = $($.MicroSVG.makeSVG("path", W));
            Am.append(E)
        })(); (function() {
            var Bk = ["M" + AL[4], AL[5], "L" + AL[2], AL[3], "L" + Bb[2], Bb[3], "L" + Bb[4], Bb[5] + "Z"].join(" ");
            W = {
                "tag": "rF",
                "d": Bk,
                "fill": X,
                "stroke": "#000000",
                "stroke-width": "1",
            };
            E = $($.MicroSVG.makeSVG("path", W));
            Am.append(E)
        })();
        var Bf = AL[6];
        var AK = AL[7];
        var A9 = AL[4];
        var Bd = AL[5];
        var A3 = Bb[4];
        var A2 = Bb[5];
        var A5 = Bb[6];
        var A4 = Bb[7]; (function() {
            Aq = ["M" + Bf, AK, "A" + (Au - mDrawThickFan), (Au - mDrawThickFan), 0, 0, 1, A9, Bd, "L" + A3, A2, "A" + (v + mDrawThickFan), (v + mDrawThickFan), 0, 0, 0, A5, A4 + "Z"].join(" ");
            W = {
                "d": Aq,
                "tag": "glass",
                "fill": mDrawGlassColor,
                "stroke": "#000000",
                "stroke-width": "1",
                "pointer-events": "all",
                "mselect": "1"
            };
            if (AQ) {
                W["pos"] = AQ
            }
            E = $($.MicroSVG.makeSVG("path", W));
            Am.append(E)
        })();
        var AV = [];
        var AR = [];
        var AN, Bh, AO, Bi, AP, Bj, AJ, Be; (function() {
            var Bn, Bm, Br, Bk, Bt;
            var Bs, Bl;
            var Bp, Bo;
            var Bu, Bq;
            Bg = AK + Math.sqrt((Au - mDrawThickFan) * (Au - mDrawThickFan) - (Bf - Az) * (Bf - Az));
            Bn = Au - mDrawThickFan - mDrawThickYt;
            Bs = Bn;
            Bm = Bf + mDrawThickYt;
            Br = Bg - Math.sqrt(Bn * Bn - (Bm - Az) * (Bm - Az));
            Bk = A9 - mDrawThickYt;
            Bt = Bg - Math.sqrt(Bn * Bn - (Bk - Az) * (Bk - Az));
            AV = [Bf, AK, A9, Bd, Bk, Bt, Bm, Br];
            Bg = A4 + Math.sqrt((v + mDrawThickFan) * (v + mDrawThickFan) - (A5 - Az) * (A5 - Az));
            Bn = v + mDrawThickFan + mDrawThickYt;
            Bl = Bn;
            Bm = A5 + mDrawThickYt;
            Br = Bg - Math.sqrt(Bn * Bn - (Bm - Az) * (Bm - Az));
            Bk = A3 - mDrawThickYt;
            Bt = Bg - Math.sqrt(Bn * Bn - (Bk - Az) * (Bk - Az));
            AR = [A5, A4, A3, A2, Bk, Bt, Bm, Br];
            AN = AV[6];
            Bh = AV[7];
            AO = AV[4];
            Bi = AV[5];
            AP = AR[4];
            Bj = AR[5];
            AJ = AR[6];
            Be = AR[7];
            if (A == "Y") {
                W = {
                    "tag": "yt"
                };
                if (AQ) {
                    W["pos"] = AQ
                }
                Bp = $($.MicroSVG.makeSVG("g", W));
                AD.append(Bp);
                Bu = ["M" + AV[0], AV[1], "A" + (Au - mDrawThickFan), (Au - mDrawThickFan), 0, 0, 1, AV[2], AV[3], "L" + AV[4], AV[5], "A" + Bs, Bs, 0, 0, 0, AV[6], AV[7] + "Z"].join(" ");
                W = {
                    "d": Bu,
                    "tag": "tyt",
                    "fill": X,
                    "stroke": "#000000",
                    "stroke-width": "1",
                };
                Bq = $($.MicroSVG.makeSVG("path", W));
                Bp.append(Bq);
                Bu = ["M" + AR[0], AR[1], "A" + (v + mDrawThickFan), (v + mDrawThickFan), 0, 0, 1, AR[2], AR[3], "L" + AR[4], AR[5], "A" + Bl, Bl, 0, 0, 0, AR[6], AR[7] + "Z"].join(" ");
                W = {
                    "d": Bu,
                    "tag": "byt",
                    "fill": X,
                    "stroke": "#000000",
                    "stroke-width": "1",
                };
                Bq = $($.MicroSVG.makeSVG("path", W));
                Bp.append(Bq);
                Bu = ["M" + AV[0], AV[1], "L" + AV[6], AV[7], "L" + AR[6], AR[7], "L" + AR[0], AR[1] + "Z"].join(" ");
                W = {
                    "d": Bu,
                    "tag": "lyt",
                    "fill": X,
                    "stroke": "#000000",
                    "stroke-width": "1",
                };
                Bq = $($.MicroSVG.makeSVG("path", W));
                Bp.append(Bq);
                Bu = ["M" + AV[2], AV[3], "L" + AV[4], AV[5], "L" + AR[4], AR[5], "L" + AR[2], AR[3] + "Z"].join(" ");
                W = {
                    "d": Bu,
                    "tag": "ryt",
                    "fill": X,
                    "stroke": "#000000",
                    "stroke-width": "1",
                };
                Bq = $($.MicroSVG.makeSVG("path", W));
                Bp.append(Bq)
            }
        })(); (function() {
            W = {
                "tag": "js"
            };
            if (AQ) {
                W["pos"] = AQ
            }
            g_js = $($.MicroSVG.makeSVG("g", W));
            AD.append(g_js);
            var BE, Bn, Bw, Bx, BF, BB;
            var Bp = [];
            var Bk = AN;
            var By = Bh + (Be - Bh) / 2;
            var BA = AO;
            var Bl = Bi + (Bj - Bi) / 2;
            var BC = AN + (AO - AN) / 2;
            Bn = BC;
            BB = A0;
            BE = Au - mDrawThickFan - mDrawThickYt;
            var Br = BB - Math.sqrt(BE * BE - (Bn - Az) * (Bn - Az));
            var Bm = AN + (AO - AN) / 2;
            Bn = Bm;
            BB = AY;
            BE = v + mDrawThickFan + mDrawThickYt;
            var Bz = BB - Math.sqrt(BE * BE - (Bn - Az) * (Bn - Az));
            var Bo = ["M" + AO, Bi, "L" + Bk, By, "L" + AP, Bj];
            var BG = ["M" + AN, Bh, "L" + BA, Bl, "L" + AJ, Be];
            var Bv = ["M" + AJ, Be, "L" + BC, Br, "L" + AP, Bj];
            var BD = ["M" + AN, Bh, "L" + Bm, Bz, "L" + AO, Bi];
            var Bs = 16;
            var Bq = 18;
            var Bu = function(BH, BI) {
                BI = BI || "none";
                W = {
                    "d": BH.join(" "),
                    "tag": "opendir",
                    "fill": "none",
                    "stroke": "#0000FF",
                    "stroke-width": "1",
                    "stroke-dasharray": BI
                };
                E = $($.MicroSVG.makeSVG("path", W));
                Am.append(E)
            };
            var Bt = function(BY) {
                var BQ, BJ, BU, BX;
                var BV, BW, BZ, B0, BO, BP, BS, BT;
                var BL, BN;
                var BK = [];
                var BR = function() {
                    BV = BA + mDrawThickYt + (mDrawThickFan - mDrawThickYt) / 2;
                    BW = Bl - Bs / 2;
                    BZ = BV + mDrawThickYt;
                    B0 = BW;
                    BO = BZ;
                    BP = B0 + Bs;
                    BS = BV;
                    BT = BP;
                    BK = ["M" + BV, BW, "L" + BZ, B0, "L" + BO, BP, "L" + BS, BT + "Z"];
                    W = {
                        "d": BK.join(" "),
                        "fill": "#000",
                        "stroke": "#000",
                        "stroke-width": "1"
                    };
                    E = $($.MicroSVG.makeSVG("path", W));
                    g_js.append(E);
                    BV = BV - Bq;
                    BW = BW + (Bs - mDrawThickYt) / 2;
                    BZ = BV + Bq;
                    B0 = BW;
                    BO = BZ;
                    BP = B0 + mDrawThickYt;
                    BS = BV;
                    BT = BP;
                    BK = ["M" + BV, BW, "L" + BZ, B0, "L" + BO, BP, "L" + BS, BT + "Z"];
                    W = {
                        "d": BK.join(" "),
                        "fill": "#000",
                        "stroke": "#000",
                        "stroke-width": "1"
                    };
                    E = $($.MicroSVG.makeSVG("path", W));
                    g_js.append(E)
                };
                var BM = function() {
                    BV = Bk - mDrawThickYt - mDrawThickFan + (mDrawThickFan - mDrawThickYt) / 2;
                    BW = By - Bs / 2;
                    BZ = BV + mDrawThickYt;
                    B0 = BW;
                    BO = BZ;
                    BP = B0 + Bs;
                    BS = BV;
                    BT = BP;
                    BK = ["M" + BV, BW, "L" + BZ, B0, "L" + BO, BP, "L" + BS, BT + "Z"];
                    W = {
                        "d": BK.join(" "),
                        "fill": "#000",
                        "stroke": "#000",
                        "stroke-width": "1"
                    };
                    E = $($.MicroSVG.makeSVG("path", W));
                    g_js.append(E);
                    BV = BV + mDrawThickYt;
                    BW = BW + (Bs - mDrawThickYt) / 2;
                    BZ = BV + Bq;
                    B0 = BW;
                    BO = BZ;
                    BP = B0 + mDrawThickYt;
                    BS = BV;
                    BT = BP;
                    BK = ["M" + BV, BW, "L" + BZ, B0, "L" + BO, BP, "L" + BS, BT + "Z"];
                    W = {
                        "d": BK.join(" "),
                        "fill": "#000",
                        "stroke": "#000",
                        "stroke-width": "1"
                    };
                    E = $($.MicroSVG.makeSVG("path", W));
                    g_js.append(E)
                };
                var BH = function() {
                    BV = Bm - Bs / 2;
                    Bn = BV;
                    BB = AY;
                    BE = v + (mDrawThickFan - mDrawThickYt) / 2;
                    BL = BE;
                    BW = BB - Math.sqrt(BE * BE - (Bn - Az) * (Bn - Az));
                    BZ = Bm + Bs / 2;
                    Bn = BZ;
                    B0 = BB - Math.sqrt(BE * BE - (Bn - Az) * (Bn - Az));
                    BO = BZ;
                    Bn = BO;
                    BE = BL + mDrawThickYt;
                    BN = BE;
                    BP = BB - Math.sqrt(BE * BE - (Bn - Az) * (Bn - Az));
                    BS = BV;
                    Bn = BV;
                    BT = BB - Math.sqrt(BE * BE - (Bn - Az) * (Bn - Az));
                    BK = ["M" + BV, BW, "A" + BL, BL, 0, 0, 1, BZ, B0, "L" + BO, BP, "A" + BN, BN, 0, 0, 0, BS, BT + "Z"];
                    W = {
                        "d": BK.join(" "),
                        "fill": "#000",
                        "stroke": "#000",
                        "stroke-width": "1"
                    };
                    E = $($.MicroSVG.makeSVG("path", W));
                    g_js.append(E);
                    var B8 = BS + (BO - BS - mDrawThickYt) / 2;
                    BB = AY;
                    BE = BN;
                    Bn = B8;
                    var B3 = BB - Math.sqrt(BE * BE - (Bn - Az) * (Bn - Az));
                    var B2 = B8 + mDrawThickYt;
                    Bn = B2;
                    var B7 = BB - Math.sqrt(BE * BE - (Bn - Az) * (Bn - Az));
                    var B1 = B2;
                    var B6 = B7 - Bq;
                    var B5 = B8;
                    var B4 = B3 - Bq;
                    BK = ["M" + B8, B3, "L" + B2, B7, "L" + B1, B6, "L" + B5, B4 + "Z"];
                    W = {
                        "d": BK.join(" "),
                        "fill": "#000",
                        "stroke": "#000",
                        "stroke-width": "1"
                    };
                    E = $($.MicroSVG.makeSVG("path", W));
                    g_js.append(E)
                };
                var BI = function() {
                    BV = BC - Bs / 2;
                    Bn = BV;
                    BB = A0;
                    BE = Au - (mDrawThickFan - mDrawThickYt) / 2;
                    BL = BE;
                    BW = BB - Math.sqrt(BE * BE - (Bn - Az) * (Bn - Az));
                    BZ = BC + Bs / 2;
                    Bn = BZ;
                    B0 = BB - Math.sqrt(BE * BE - (Bn - Az) * (Bn - Az));
                    BO = BZ;
                    Bn = BO;
                    BE = BL - mDrawThickYt;
                    BN = BE;
                    BP = BB - Math.sqrt(BE * BE - (Bn - Az) * (Bn - Az));
                    BS = BV;
                    Bn = BV;
                    BT = BB - Math.sqrt(BE * BE - (Bn - Az) * (Bn - Az));
                    BK = ["M" + BV, BW, "A" + BL, BL, 0, 0, 1, BZ, B0, "L" + BO, BP, "A" + BN, BN, 0, 0, 0, BS, BT + "Z"];
                    W = {
                        "d": BK.join(" "),
                        "fill": "#000",
                        "stroke": "#000",
                        "stroke-width": "1"
                    };
                    E = $($.MicroSVG.makeSVG("path", W));
                    g_js.append(E);
                    var B8 = BS + (BO - BS - mDrawThickYt) / 2;
                    BB = A0;
                    BE = BN;
                    Bn = B8;
                    var B3 = BB - Math.sqrt(BE * BE - (Bn - Az) * (Bn - Az));
                    var B2 = B8 + mDrawThickYt;
                    Bn = B2;
                    var B7 = BB - Math.sqrt(BE * BE - (Bn - Az) * (Bn - Az));
                    var B1 = B2;
                    var B6 = B7 + Bq;
                    var B5 = B8;
                    var B4 = B3 + Bq;
                    BK = ["M" + B8, B3, "L" + B2, B7, "L" + B1, B6, "L" + B5, B4 + "Z"];
                    W = {
                        "d": BK.join(" "),
                        "fill": "#000",
                        "stroke": "#000",
                        "stroke-width": "1"
                    };
                    E = $($.MicroSVG.makeSVG("path", W));
                    g_js.append(E)
                };
                switch (BY) {
                case "L":
                case "LT":
                case "LB":
                    BR();
                    break;
                case "R":
                case "RT":
                case "RB":
                    BM();
                    break;
                case "T":
                    BH();
                    break;
                case "B":
                    BI();
                    break;
                case "PT":
                    BR();
                    BM();
                    break
                }
            };
            switch (AM) {
            case "L":
                Bu(Bo);
                break;
            case "R":
                Bu(BG);
                break;
            case "T":
                Bu(Bv);
                break;
            case "B":
                Bu(BD);
                break;
            case "LT":
                Bu(Bo);
                Bu(Bv, "3,3");
                break;
            case "LB":
                Bu(Bo);
                Bu(BD, "3,3");
                break;
            case "RT":
                Bu(BG);
                Bu(Bv, "3,3");
                break;
            case "RB":
                Bu(BG);
                Bu(BD, "3,3");
                break;
            case "PT":
                W = {
                    "d": ["M" + AN, Bh, "L" + AP, Bj].join(" "),
                    "tag": "opendir",
                    "fill": "none",
                    "stroke": "#0000FF",
                    "stroke-width": "1"
                };
                E = $($.MicroSVG.makeSVG("path", W));
                Am.append(E);
                W = {
                    "d": ["M" + AO, Bi, "L" + AJ, Be].join(" "),
                    "tag": "opendir",
                    "fill": "none",
                    "stroke": "#0000FF",
                    "stroke-width": "1"
                };
                E = $($.MicroSVG.makeSVG("path", W));
                Am.append(E);
                break
            }
            Bt(AM);
            MicroDraw_reflashHandle($("#" + Ao))
        })();
        if (AS) {
            var A8 = AD.find("[tag=glass]");
            var AZ = A8.attr("d").split(" ");
            var AX = $.Micro.ConvToNum(AZ[9]);
            var R = $.Micro.ConvToNum(AZ[10]);
            var A1 = $.Micro.ConvToNum(AZ[16]);
            var r = $.Micro.ConvToNum(AZ[17]);
            var Bg = r + Math.sqrt(v * v - (A1 - Az) * (A1 - Az));
            var AT = A1 + (AX - A1) / 2;
            var Bc = Bg - Math.sqrt(v * v - (AT - Az) * (AT - Az));
            var A6 = A1 + 8;
            var A7 = (r == R) ? (Bc + (r - Bc) / 2) : (r > R) ? (R + (r - R) / 2) : r;
            A7 = A7 - 8;
            W = {
                "tag": "glassfan",
                x: A6,
                y: A7,
                "font-size": "14px",
                "fill": "#000",
                "font-weight": "700"
            };
            var AW = $($.MicroSVG.makeSVG("text", W));
            AW.get(0).textContent = "F12";
            AD.append(AW)
        }
    };
    switch (An) {
    case mDrawFlag_ArcsPkc:
        AC(Aq, H, true);
        break;
    case mDrawFlag_ArcsDkc:
        var Aw = Aq.split(" ");
        var P = MicroDraw_getArcsPathInfor(Az, Aw);
        var Ag = P.tR;
        var Z = P.bR;
        var Ac = P.t_cy;
        var s = P.b_cy;
        var Aj = P.x1;
        var Ak = P.y1;
        var Ai = P.x2;
        var G = P.y2;
        var p = P.x3;
        var q = P.y3;
        var AA = P.x4;
        var l = P.y4;
        var AF = Aj + (Ai - Aj) / 2;
        var AG = Ac - Math.sqrt(Ag * Ag - (AF - Az) * (AF - Az));
        var O = AF;
        var n = s - Math.sqrt(Z * Z - (O - Az) * (O - Az));
        var AI = AF;
        var U = AG;
        var N = O;
        var Av = n;
        var AH = ["M" + Aj, Ak, "A" + Ag, Ag, 0, 0, 1, AF, AG, "L" + O, n, "A" + Z, Z, 0, 0, 0, AA, l + "Z"].join(" ");
        AC(AH, "L", true, "L");
        var Ap = ["M" + AI, U, "A" + Ag, Ag, 0, 0, 1, Ai, G, "L" + p, q, "A" + Z, Z, 0, 0, 0, N, Av + "Z"].join(" ");
        AC(Ap, "R", false, "R");
        break
    }
    MicroDraw_reflashGlassFlag();
    MicroDraw_ShowGlassFan(Ae.attr("id"));
    return AD
}
function MicroDraw_getArcsWinInfor(G) {
    if (G.length == 0) {
        return null
    }
    if (G.attr("mtype") != mDrawFlag_WinArcs) {
        return null
    }
    var Z = G.find("[mtype=" + mDrawFlag_FrameArcs + "]");
    var H = Z.find("[tag=tF]");
    var N = $.MicroSVG.UnifiedSVGPath(H.attr("d")).split(" ");
    var U = $.Micro.ConvToNum(N[0]);
    var a = $.Micro.ConvToNum(N[1]);
    var S = $.Micro.ConvToNum(Z.attr("mwidth"));
    var b = $.Micro.ConvToNum(Z.attr("mheight"));
    var P = $.Micro.ConvToNum(Z.attr("marcheight"));
    var V = P / 1000 * mDrawPixelPerM;
    var I = $.Micro.ConvToNum(Z.attr("msl_archeight") || Z.attr("marcheight"));
    var D = I / 1000 * mDrawPixelPerM;
    var Q = b / 1000 * mDrawPixelPerM;
    var K = S / 1000 * mDrawPixelPerM;
    var X = MicroDraw_getArcDataInfo(U, a, S, P, mDrawThickFrame);
    var Y = (a + Q) - $.Micro.ConvToNum(X.farcIn_Ld.split(" ")[1]);
    var F = X.cx;
    var T = X.cy;
    var J = X.ROut;
    var A = X.RIn;
    var M = MicroDraw_getArcDataInfo(U, a, S, I, mDrawThickFrame);
    var L = M.ROut;
    var c = Math.acos((J - V) / J);
    var B = (J * 1000 / mDrawPixelPerM);
    var W = (2 * Math.PI * J * 2 * c / (2 * Math.PI) * 1000 / mDrawPixelPerM);
    var C = Math.acos((L - D) / L);
    var O = (L * 1000 / mDrawPixelPerM);
    var E = (2 * Math.PI * L * 2 * C / (2 * Math.PI) * 1000 / mDrawPixelPerM);
    return {
        tframe: Z,
        tF: H,
        tF_d: N,
        xOrig: U,
        yOrig: a,
        arcW: S,
        frameHeight: b,
        arcH: P,
        s_arcH: V,
        sl_arcH: I,
        s_sl_arcH: D,
        frameH: Q,
        frameW: K,
        getArcDataInfo: X,
        moveY: Y,
        cx: F,
        cy: T,
        R: J,
        r: A,
        arcR: B,
        arcTL: W,
        sl_arcR: O,
        sl_arcTL: E
    }
}
function MicroDraw_getArcsPathInfor(H, N) {
    if (N.length != 18) {
        return null
    }
    var J = $.Micro.ConvToNum(N[2]);
    var A = $.Micro.ConvToNum(N[11]);
    var D = $.Micro.ConvToNum(N[0]);
    var E = $.Micro.ConvToNum(N[1]);
    var F = $.Micro.ConvToNum(N[7]);
    var G = $.Micro.ConvToNum(N[8]);
    var K = $.Micro.ConvToNum(N[9]);
    var I = $.Micro.ConvToNum(N[10]);
    var B = $.Micro.ConvToNum(N[16]);
    var C = $.Micro.ConvToNum(N[17]);
    var M = E + Math.sqrt(J * J - (D - H) * (D - H));
    var L = C + Math.sqrt(A * A - (B - H) * (B - H));
    return {
        tR: J,
        bR: A,
        x1: D,
        y1: E,
        x2: F,
        y2: G,
        x3: K,
        y3: I,
        x4: B,
        y4: C,
        t_cy: M,
        b_cy: L
    }
}
function MicroDraw_getSelectedArcsAreaPath(D) {
    if (D.length == 0) {
        return ""
    }
    var O = D.attr("mtype");
    var E = "";
    switch (O) {
    case mDrawFlag_ArcsGlass:
        var H = D.find("[tag=glass]");
        E = $.MicroSVG.UnifiedSVGPath(H.attr("d"));
        break;
    case mDrawFlag_ArcsPkc:
        var F = D.find("[tag=tF]");
        var M = D.find("[tag=bF]");
        var K = $.MicroSVG.UnifiedSVGPath(F.attr("d")).split(" ");
        var L = $.MicroSVG.UnifiedSVGPath(M.attr("d")).split(" ");
        E = ["M" + $.Micro.ConvToNum(K[0]), $.Micro.ConvToNum(K[1]), "A" + $.Micro.ConvToNum(K[2]), $.Micro.ConvToNum(K[3]), 0, 0, 1, $.Micro.ConvToNum(K[7]), $.Micro.ConvToNum(K[8]), "L" + $.Micro.ConvToNum(L[7]), $.Micro.ConvToNum(L[8]), "A" + $.Micro.ConvToNum(L[2]), $.Micro.ConvToNum(L[3]), 0, 0, 0, $.Micro.ConvToNum(L[0]), $.Micro.ConvToNum(L[1]) + "Z"].join(" ");
        break;
    case mDrawFlag_ArcsDkc:
        var N = D.find("[pos=L] [tag=tF]");
        var J = D.find("[pos=L] [tag=bF]");
        var A = D.find("[pos=R] [tag=tF]");
        var C = D.find("[pos=R] [tag=bF]");
        var P = $.MicroSVG.UnifiedSVGPath(N.attr("d")).split(" ");
        var I = $.MicroSVG.UnifiedSVGPath(J.attr("d")).split(" ");
        var G = $.MicroSVG.UnifiedSVGPath(A.attr("d")).split(" ");
        var B = $.MicroSVG.UnifiedSVGPath(C.attr("d")).split(" ");
        E = ["M" + $.Micro.ConvToNum(P[0]), $.Micro.ConvToNum(P[1]), "A" + $.Micro.ConvToNum(P[2]), $.Micro.ConvToNum(P[3]), 0, 0, 1, $.Micro.ConvToNum(G[7]), $.Micro.ConvToNum(G[8]), "L" + $.Micro.ConvToNum(B[7]), $.Micro.ConvToNum(B[8]), "A" + $.Micro.ConvToNum(B[2]), $.Micro.ConvToNum(B[3]), 0, 0, 0, $.Micro.ConvToNum(I[0]), $.Micro.ConvToNum(I[1]) + "Z"].join(" ");
        break;
    default:
        return ""
    }
    return E
}
function MicroDraw_WinArcsGdPic(Y) {
    return;
    if (Y.length == 0) {
        return
    }
    var A = Y.find("[mtype=" + mDrawFlag_FrameArcs + "]");
    var N = A.attr("mgdpic") || "Y";
    Y.find("[mtype=" + mDrawFlag_ArcsGD + "]").remove();
    var X = $.MicroSVG.getSVGRect(A);
    var v = $.MicroSVG.ToCanvasPoint($("#" + mDrawFlag_SvgId), X.x, X.y);
    var l = v.y + X.height;
    var g = 56;
    var c = 30;
    var P = MicroDraw_ReturnColor($("#" + mDrawFlag_SvgId + " [prcolor]:first").attr("prcolor"));
    var H = mDrawThickYt;
    if (N == "Y") {
        var Q = [];
        var M = [];
        var O;
        var B = MicroDraw_getArcsWinInfor(Y);
        var J = B.xOrig;
        var m = B.cx;
        var I = B.s_arcH;
        var a = B.R;
        var t = a - H;
        $.each(Y.find("[mtype=" + mDrawFlag_FrameArcsTingV + "]"),
        function() {
            var R = $(this);
            var r = R.attr("mx");
            if ($.inArray(r, M) == -1) {
                M.push(r);
                Q.push({
                    mx: r,
                    tobj: R.find("[tag=ting]")
                })
            }
        });
        Q.push({
            mx: 0,
            tobj: A.find("[tag=lF]")
        });
        Q.push({
            mx: A.attr("mwidth"),
            tobj: A.find("[tag=rF]")
        });
        Q.sort($.Micro.sortByArr([{
            key: "mx",
            keyType: "Number"
        }], "asc"));
        var W = Y.find("[mtype=" + mDrawFlag_ArcsCoorX + "]");
        var Ae = 0;
        if (W.length > 0) {
            var C = $.MicroSVG.getSVGRect(W);
            var L = $.MicroSVG.ToCanvasPoint($("#" + mDrawFlag_SvgId), C.x, C.y);
            Ae = L.y + C.height
        }
        l = Math.ceil((l > Ae ? l: Ae) + g);
        O = {
            "mtype": mDrawFlag_ArcsGD
        };
        var K = $($.MicroSVG.makeSVG("g", O));
        Y.append(K);
        var Ad;
        var s;
        var Z;
        for (var Aa = 0; Aa < Q.length; Aa++) {
            var n = Q[Aa].tobj;
            var V = $.MicroSVG.UnifiedSVGPath(n.attr("d")).split(" ");
            var o = $.Micro.ConvToNum(V[0]);
            var p = l;
            var u = mDrawThickTing;
            if (Aa == 0 || Aa == (Q.length - 1)) {
                u = mDrawThickFrame
            }
            var U, b, E, F, Ab, Ac, e, f;
            var G = [];
            if (Aa == 0) {
                U = o + u;
                b = p + (c - H) / 2;
                Z = b;
                s = b + Math.sqrt(a * a - (U - m) * (U - m))
            }
            if (Aa > 0) {
                var q = Q[Aa - 1].tobj;
                var D = $.MicroSVG.UnifiedSVGPath(q.attr("d")).split(" ");
                var T = $.Micro.ConvToNum(D[0]);
                var S = $.Micro.ConvToNum(D[1]);
                U = T + u;
                b = s - Math.sqrt(a * a - (U - m) * (U - m));
                E = o;
                F = s - Math.sqrt(a * a - (E - m) * (E - m));
                Ab = E;
                Ac = s - Math.sqrt(t * t - (Ab - m) * (Ab - m));
                e = U;
                f = s - Math.sqrt(t * t - (e - m) * (e - m));
                G = ["M" + U, b, "A" + a, a, 0, 0, 1, E, F, "L" + Ab, Ac, "A" + t, t, 0, 0, 0, e, f + "Z"];
                O = {
                    "d": G.join(" "),
                    "fill": P,
                    "stroke": "#000000",
                    "stroke-width": "1",
                    "mselect": "0",
                    "tag": "tingH"
                };
                Ad = $($.MicroSVG.makeSVG("path", O));
                K.append(Ad)
            }
            if (Aa > 0 && Aa < (Q.length - 1)) {
                p = F + H / 2 - c / 2
            }
            var Af = ["M" + o, p, "L" + (o + u), p, "L" + (o + u), (p + c), "L" + o, (p + c) + "Z"].join(" ");
            O = {
                "d": Af,
                "fill": P,
                "stroke": "#000000",
                "stroke-width": "1",
                "mselect": "0",
                "tag": "tingV"
            };
            Ad = $($.MicroSVG.makeSVG("path", O));
            K.append(Ad)
        }
    }
}
function MicroDraw_CheckSetArcH(I, F) {
    if (I.length == 0) {
        return false
    }
    var B = MicroDraw_getArcsWinInfor(I);
    var J = B.tframe;
    var A = Number(F.marcheight);
    var D = Number(F.mwidth);
    if (!$.Micro.IsEmpty(F.marcheight)) {
        A = Number(F.marcheight);
        D = B.arcW
    } else {
        if (!$.Micro.IsEmpty(F.mwidth)) {
            D = Number(F.mwidth);
            A = B.sl_arcH
        }
    }
    if (A > D / 2) {
        jQuery.messager.alert("提示:", "设置的弧高不能超过圆弧半径（窗的宽度）！", "error");
        return false
    }
    var G = A;
    var E = D / 2 + mDrawThickFrame * 1000 / mDrawPixelPerM;
    var H = Math.sqrt(Math.pow(E, 2) - Math.pow((D / 2), 2));
    var C = Math.floor((E - H) * 0.9);
    if (A > C) {
        A = C
    }
    if (!$.Micro.IsEmpty(F.marcheight)) {
        J.attr("msl_archeight", G);
        J.attr("marcheight", A)
    } else {
        if (!$.Micro.IsEmpty(F.mwidth)) {
            J.attr("marcheight", A)
        }
    }
    return true
}
function MicroDraw_3DShowcombwins(show3D) {
    if (!mDrawCombWin_minXwin || !mDrawCombWin_maxXwin) {
        return
    }
    MicroDraw_RemoveCombs3DShow();
    if (!show3D) {
        return
    }
    var _combsortwin = $("#" + mDrawFlag_SvgId + ' [mtype = "' + mDrawFlag_combsortwin + '"]');
    if (_combsortwin.length == 0) {
        return
    }
    var comb3d = $.Micro.ConvToNum(_combsortwin.attr("comb3d") || 0);
    if (comb3d != 1) {
        return
    }
    var allWinIDs = MicroDraw_getCombWinIDs("all");
    var Wins = allWinIDs.Wins;
    var CMVs = allWinIDs.CMVs;
    if (! (Wins.length >= 2 && Wins.length <= 3 && CMVs.length >= 1 && CMVs.length <= 2)) {
        return
    }
    var conds;
    var Lwin, Rwin;
    var Lframe, Rframe;
    var Lcm, Rcm;
    var mwallObj, coorxObj, combcoorxObj;
    var Lcm_getSVGRect, Rcm_getSVGRect;
    var def_angle = 30;
    var radian, matrix, offsetX, offsetY;
    if (Wins.length == 3) {
        conds = $.inArray(Wins[0], [mDrawCombWin_minXwin.attr("id"), mDrawCombWin_maxXwin.attr("id")] == -1);
        Lwin = mDrawCombWin_minXwin;
        Rwin = mDrawCombWin_maxXwin
    } else {
        conds = $.inArray(Wins[0], [mDrawCombWin_minXwin.attr("id"), mDrawCombWin_maxXwin.attr("id")] > -1);
        if (Wins[0] == mDrawCombWin_minXwin.attr("id")) {
            Rwin = mDrawCombWin_maxXwin
        } else {
            Lwin = mDrawCombWin_minXwin
        }
    }
    if (!conds) {
        return
    }
    if (Lwin && Rwin) {
        if (Lwin.attr("id") == Rwin.attr("id")) {
            return
        }
    }
    var sortCMs = [];
    for (var i = 0; i < CMVs.length; i++) {
        var cmObj = $("#" + mDrawFlag_SvgId + " #" + CMVs[i]);
        sortCMs.push({
            x: cmObj.offset().left,
            cm: cmObj
        })
    }
    sortCMs.sort($.Micro.sortByArr([{
        key: "x",
        keyType: "Number"
    }], "asc"));
    var ScaleG_scale = 1;
    if ($("#" + mDrawFlag_SvgId + ' [mtype="' + mDrawFlag_ScaleG + '"]').length > 0) {
        ScaleG_scale = Number(mDrawSvgViewBox) / Number(MobileFrame_getCurrMobileViewScale(mDrawFlag_SvgId))
    }
    var getAlign = function(winid, cmid) {
        var _align = "t";
        var _mcombsortwin = $("#" + mDrawFlag_SvgId + ' [mtype = "' + mDrawFlag_combsortwin + '"]').attr(mDrawFlag_combsortwin);
        var mcombsortWins = eval("[" + replaceAll(_mcombsortwin, ";", ",") + "]");
        for (var i = 0; i < mcombsortWins.length; i++) {
            var wid1 = mcombsortWins[i].id1;
            var wid2 = mcombsortWins[i].id2;
            var dir1 = mcombsortWins[i].dir1;
            var dir2 = mcombsortWins[i].dir2;
            var align = mcombsortWins[i].align;
            var win1 = $("#" + mDrawFlag_SvgId + " #" + wid1);
            var win2 = $("#" + mDrawFlag_SvgId + " #" + wid2);
            if (win1.length == 0 || win2.length == 0) {
                continue
            }
            if (wid1 == cmid && wid2 == winid) {
                _align = align;
                break
            }
        }
        return _align
    };
    var cm_ToCanvasPoint, win_getSVGRect, win_ToCanvasPoint, win_X, win_MaxY;
    if (Lwin) {
        Lcm = sortCMs[0].cm;
        Lframe = Lwin.find("[mtype=" + mDrawFlag_FrameRect + "],[mtype=" + mDrawFlag_FrameArcs + "]").eq(0);
        if ($.Micro.ConvToNum(Lcm.attr("mangle")) > 0) {
            Lcm_getSVGRect = $.MicroSVG.getSVGRect(Lcm);
            cm_ToCanvasPoint = $.MicroSVG.ToCanvasPoint($("#" + mDrawFlag_SvgId), Lcm_getSVGRect.x, Lcm_getSVGRect.y);
            win_getSVGRect = $.MicroSVG.getSVGRect(Lframe);
            win_ToCanvasPoint = $.MicroSVG.ToCanvasPoint($("#" + mDrawFlag_SvgId), win_getSVGRect.x, win_getSVGRect.y);
            win_X = Number(win_ToCanvasPoint.x) + Number(win_getSVGRect.width);
            win_MaxY = Number(win_ToCanvasPoint.y) + Number(win_getSVGRect.height);
            radian = $.Micro.Mradian(0 - def_angle);
            matrix = [Math.cos(radian), Math.tan(radian), 0, 1, 0, 0];
            Lwin.attr("transform", "matrix(" + matrix.join(",") + ")");
            var Lwin_getSVGRect = $.MicroSVG.getSVGRect(Lframe);
            var align = getAlign(Lwin.attr("id"), Lcm.attr("id"));
            if (align == "t") {
                offsetY = ((Number(Lcm_getSVGRect.y) - Number(Lwin_getSVGRect.y)) * ScaleG_scale).toFixed(0)
            } else {
                var Matrix_Transform = $.MicroSVG.Matrix_Transform("matrix(" + matrix.join(",") + ")", [win_X, win_MaxY]);
                offsetY = ((Number(cm_ToCanvasPoint.y) + Number(Lcm_getSVGRect.height) - Number(Matrix_Transform[1])) * ScaleG_scale).toFixed(0)
            }
            offsetX = (Number(win_getSVGRect.x) + Number(win_getSVGRect.width)) - (Number(Lwin_getSVGRect.x) + Number(Lwin_getSVGRect.width));
            matrix[4] += offsetX * ScaleG_scale;
            matrix[5] += offsetY;
            Lwin.attr("transform", "matrix(" + matrix.join(",") + ")");
            mwallObj = $("#" + mDrawFlag_SvgId + " [mwallbelongto=" + Lframe.attr("id") + "]");
            if (mwallObj.length > 0) {
                mwallObj.attr("transform", "matrix(" + matrix.join(",") + ")")
            }
            coorxObj = $("#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_CoorX + "][mwinid=" + Lwin.attr("id") + "]");
            if (coorxObj.length > 0) {
                coorxObj.attr("transform", "matrix(" + matrix.join(",") + ")")
            }
            cooryObj = $("#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_CoorY + "][mwinid=" + Lwin.attr("id") + "]");
            if (cooryObj.length > 0) {
                cooryObj.attr("transform", "matrix(" + matrix.join(",") + ")")
            }
            var belongtoObjs = Lwin.find("[mtype=" + mDrawFlag_Pkc + "],[mtype=" + mDrawFlag_Dkc + "],[mtype*=tlc]");
            $.each(belongtoObjs,
            function() {
                var tobj = $("#" + mDrawFlag_SvgId).find("[mbelongtofanid=" + $(this).attr("id") + "]");
                tobj.attr("transform", "matrix(" + matrix.join(",") + ")")
            });
            combcoorxObj = $("#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_combCoorX + "]");
            if (combcoorxObj.length > 0) {
                Lwin_getSVGRect = $.MicroSVG.getSVGRect(Lframe);
                var Lwin_ToCanvasPoint = $.MicroSVG.ToCanvasPoint($("#" + mDrawFlag_SvgId), Lwin_getSVGRect.x, Lwin_getSVGRect.y);
                var x = Number(Lwin_ToCanvasPoint.x) * ScaleG_scale;
                combcoorxObj.find("line").eq(0).attr("x1", x);
                combcoorxObj.find("line").eq(1).attr("x1", x).attr("x2", x)
            }
        }
    }
    if (Rwin) {
        Rcm = sortCMs.length > 1 ? sortCMs[1].cm: sortCMs[0].cm;
        Rframe = Rwin.find("[mtype=" + mDrawFlag_FrameRect + "],[mtype=" + mDrawFlag_FrameArcs + "]").eq(0);
        if ($.Micro.ConvToNum(Rcm.attr("mangle")) > 0) {
            Rcm_getSVGRect = $.MicroSVG.getSVGRect(Rcm);
            cm_ToCanvasPoint = $.MicroSVG.ToCanvasPoint($("#" + mDrawFlag_SvgId), Rcm_getSVGRect.x, Rcm_getSVGRect.y);
            win_getSVGRect = $.MicroSVG.getSVGRect(Rwin);
            win_ToCanvasPoint = $.MicroSVG.ToCanvasPoint($("#" + mDrawFlag_SvgId), win_getSVGRect.x, win_getSVGRect.y);
            win_X = Number(win_ToCanvasPoint.x);
            win_MaxY = Number(win_ToCanvasPoint.y) + Number(win_getSVGRect.height);
            radian = $.Micro.Mradian(def_angle);
            matrix = [Math.cos(radian), Math.tan(radian), 0, 1, 0, 0];
            Rwin.attr("transform", "matrix(" + matrix.join(",") + ")");
            var Rwin_getSVGRect = $.MicroSVG.getSVGRect(Rwin);
            var align = getAlign(Rwin.attr("id"), Rcm.attr("id"));
            if (align == "t") {
                offsetY = ((Number(Rcm_getSVGRect.y) - Number(Rwin_getSVGRect.y)) * ScaleG_scale).toFixed(0)
            } else {
                var Matrix_Transform = $.MicroSVG.Matrix_Transform("matrix(" + matrix.join(",") + ")", [win_X, win_MaxY]);
                offsetY = ((Number(cm_ToCanvasPoint.y) + Number(Rcm_getSVGRect.height) - Number(Matrix_Transform[1])) * ScaleG_scale).toFixed(0)
            }
            offsetX = Number(win_getSVGRect.x) - Number(Rwin_getSVGRect.x);
            matrix[4] += offsetX * ScaleG_scale;
            matrix[5] += offsetY;
            Rwin.attr("transform", "matrix(" + matrix.join(",") + ")");
            mwallObj = $("#" + mDrawFlag_SvgId + " [mwallbelongto=" + Rframe.attr("id") + "]");
            if (mwallObj.length > 0) {
                mwallObj.attr("transform", "matrix(" + matrix.join(",") + ")")
            }
            coorxObj = $("#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_CoorX + "][mwinid=" + Rwin.attr("id") + "]");
            if (coorxObj.length > 0) {
                coorxObj.attr("transform", "matrix(" + matrix.join(",") + ")")
            }
            cooryObj = $("#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_CoorY + "][mwinid=" + Rwin.attr("id") + "]");
            if (cooryObj.length > 0) {
                cooryObj.attr("transform", "matrix(" + matrix.join(",") + ")")
            }
            var belongtoObjs = Rwin.find("[mtype=" + mDrawFlag_Pkc + "],[mtype=" + mDrawFlag_Dkc + "],[mtype*=tlc]");
            $.each(belongtoObjs,
            function() {
                var tobj = $("#" + mDrawFlag_SvgId).find("[mbelongtofanid=" + $(this).attr("id") + "]");
                tobj.attr("transform", "matrix(" + matrix.join(",") + ")")
            });
            combcoorxObj = $("#" + mDrawFlag_SvgId + " [mtype=" + mDrawFlag_combCoorX + "]");
            if (combcoorxObj.length > 0) {
                Rwin_getSVGRect = $.MicroSVG.getSVGRect(Rframe);
                var Rwin_ToCanvasPoint = $.MicroSVG.ToCanvasPoint($("#" + mDrawFlag_SvgId), Rwin_getSVGRect.x, Rwin_getSVGRect.y);
                var x = (Number(Rwin_ToCanvasPoint.x) + Number(Rwin_getSVGRect.width)) * ScaleG_scale;
                combcoorxObj.find("line").eq(0).attr("x2", x);
                combcoorxObj.find("line").eq(2).attr("x1", x).attr("x2", x)
            }
        }
    }
}
function MicroDraw_RemoveCombs3DShow(A) {
    var B = MicroDraw_getCombWinIDs("all").Wins;
    if ($.Micro.IsEmpty(A)) {
        if (B.length > 0) {
            A = B[0]
        } else {
            return
        }
    }
    $.each($("#" + mDrawFlag_SvgId).find("[mwin]"),
    function() {
        var C = $(this).attr("id");
        if (!$.Micro.IsEmpty(A)) {
            if (C == A) {
                return true
            }
        }
        if ($.inArray(C, B) == -1) {
            return true
        }
        $(this).removeAttr("transform");
        $("#" + mDrawFlag_SvgId).find("[mwinid=" + $(this).attr("id") + "]").removeAttr("transform");
        $("#" + mDrawFlag_SvgId).find("[mwallbelongto=" + $(this).find("[mtype=" + mDrawFlag_FrameRect + "]").attr("id") + "]").removeAttr("transform");
        $.each($(this).find("[mtype=" + mDrawFlag_Pkc + "],[mtype=" + mDrawFlag_Dkc + "],[mtype*=tlc]"),
        function() {
            $("#" + mDrawFlag_SvgId).find("[mbelongtofanid=" + $(this).attr("id") + "]").removeAttr("transform")
        })
    })
}
function getTingAttr(A, D, E) {
    var C = "";
    var B = $("#" + mDrawFlag_SvgId + " [mwin=" + A + "]");
    if (B.length > 0) {
        var F = B.find("[mting=" + D + "]");
        if (F.length > 0) {
            C = F.attr(E) || ""
        }
    }
    return C
}
function lf_genData_route_addRow(A) {
    $("#" + mDrawRouteProperty).datagrid("insertRow", {
        index: $("#" + mDrawRouteProperty).datagrid("getRows").length,
        row: {
            Numx: A.Numx,
            ObjId: A.ObjId,
            xcxljgid: A.xcxljgid,
            Seq: A.Seq,
            Proce: A.Proce,
            PutPic: A.PutPic,
            Direction: A.Direction,
            side: A.side,
            xExp: A.xExp,
            yExp: A.yExp,
            zExp: A.zExp,
            TemplateExp: A.TemplateExp,
            Memo: A.Memo,
            ProceType: A.ProceType,
            PlineExp: A.PlineExp,
            BEnableExp: A.BEnableExp,
            Width: A.Width,
            Height: A.Height,
            PositionA: A.PositionA,
            PositionB: A.PositionB,
            CutSpeed: A.CutSpeed
        }
    })
}
function lf_genData_route_autoHxPskAddRow(pobj) {
    var lff_genData_HxPsk = function(pobj) {
        var returnObj = {
            seq: $.Micro.IsEmpty(pobj.seq) ? 0 : pobj.seq
        };
        if (pobj.type != pobj.xcxlRouteObj.ProceType) {
            return returnObj
        }
        var tingArr = pobj.tingArr;
        var sortTingArr = [];
        var Direction = pobj.xcxlRouteObj.Direction;
        if (pobj.attrName == "mbid" || pobj.attrName == "mrid") {
            if (Direction == "A") {
                Direction = "C"
            } else {
                if (Direction == "C") {
                    Direction = "A"
                } else {
                    if (Direction == "B") {
                        Direction = "D"
                    } else {
                        if (Direction == "D") {
                            Direction = "B"
                        }
                    }
                }
            }
        }
        if (pobj.type == "A") {
            var xcxlId = pobj.xcxlRouteObj.xcxlId;
            var mcflId = MicroDraw_genData_getMcflIdByXcxlid(xcxlId);
            var xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(xcxlId);
            var xcxljgJson = eval("(" + xcxljgStr + ")");
            var KW = $.Micro.ConvToNum(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "框宽度", "prid"));
            var TW = $.Micro.ConvToNum(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "普通中挺宽度", "prid"));
            var pskNkZl = $.Micro.ConvToNum(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "PSKNKZL", "prid"));
            var tempSeq = 0;
            $.each(tingArr,
            function(i, ting) {
                tempSeq = returnObj.seq + i + 1;
                seq = tempSeq * 0.1;
                var mtype = $(ting).attr("mtype");
                var tingExp = 'Number(getTingAttr("' + $(ting).parents("[mtype=" + mDrawFlag_Win + "]").attr("mwin") + '","' + $(ting).attr("mting") + '","' + (mtype == mDrawFlag_TingH ? "my": "mx") + '")).toFixed(1)';
                var tObjId = pobj.prrow.ObjId;
                var tObj = $("#" + tObjId);
                var tProce = pobj.xcxlRouteObj.Proce;
                var tingid = $(ting).attr("id");
                var addTag = false;
                var mlid = tObj.attr("mlid");
                var mrid = tObj.attr("mrid");
                var mtid = tObj.attr("mtid");
                var mbid = tObj.attr("mbid");
                switch (tObj.attr("mtype")) {
                case mDrawFlag_TingV:
                    var leftDist = 0;
                    if ($.Micro.IsEmpty(mtid)) {
                        leftDist = KW - pskNkZl
                    } else {
                        leftDist = TW / 2 - pskNkZl
                    }
                    if (!$.Micro.IsEmpty(mtid)) {
                        var Tting = $("#" + mtid);
                        tingExp = tingExp + ' - Number(getTingAttr("' + Tting.parents("[mtype=" + mDrawFlag_Win + "]").attr("mwin") + '","' + Tting.attr("mting") + '","my")).toFixed(1)'
                    }
                    if (leftDist > 0) {
                        tingExp += " - " + leftDist
                    }
                    if (tProce.indexOf("左") > -1 && mlid.indexOf(tingid) > -1) {
                        addTag = true
                    } else {
                        if (tProce.indexOf("右") > -1 && mrid.indexOf(tingid) > -1) {
                            addTag = true
                        }
                    }
                    break;
                case mDrawFlag_TingH:
                    var leftDist = 0;
                    if ($.Micro.IsEmpty(mlid)) {
                        leftDist = KW - pskNkZl
                    } else {
                        leftDist = TW / 2 - pskNkZl
                    }
                    if (!$.Micro.IsEmpty(mlid)) {
                        var Lting = $("#" + mlid);
                        tingExp = tingExp + ' - Number(getTingAttr("' + Lting.parents("[mtype=" + mDrawFlag_Win + "]").attr("mwin") + '","' + Lting.attr("mting") + '","mx")).toFixed(1)'
                    }
                    if (leftDist > 0) {
                        tingExp += " - " + leftDist
                    }
                    if (tProce.indexOf("左") > -1 && mbid.indexOf(tingid) > -1) {
                        addTag = true
                    } else {
                        if (tProce.indexOf("右") > -1 && mtid.indexOf(tingid) > -1) {
                            addTag = true
                        }
                    }
                    break;
                default:
                    addTag = true;
                    if (pobj.prrow.Memo.indexOf("上") > -1 || pobj.prrow.Memo.indexOf("右") > -1) {
                        tingExp = "PRLEN - " + tingExp
                    }
                }
                if (addTag) {
                    lf_genData_route_addRow({
                        Numx: pobj.prrow.Numx,
                        ObjId: pobj.prrow.ObjId,
                        xcxljgid: pobj.prrow.xcxljgid,
                        Seq: (Number(pobj.xcxlRouteObj.Seq) + seq),
                        Proce: pobj.xcxlRouteObj.Proce,
                        PutPic: pobj.xcxlRouteObj.PutPic,
                        Direction: Direction,
                        side: pobj.xcxlRouteObj.side,
                        xExp: tingExp,
                        yExp: pobj.xcxlRouteObj.yExp,
                        zExp: pobj.xcxlRouteObj.zExp,
                        TemplateExp: pobj.xcxlRouteObj.TemplateExp,
                        Memo: pobj.xcxlRouteObj.Memo,
                        ProceType: pobj.xcxlRouteObj.ProceType,
                        PlineExp: pobj.xcxlRouteObj.PlineExp,
                        BEnableExp: pobj.xcxlRouteObj.BEnableExp,
                        Width: pobj.xcxlRouteObj.Width,
                        Height: pobj.xcxlRouteObj.Height,
                        PositionA: pobj.xcxlRouteObj.PositionA,
                        PositionB: pobj.xcxlRouteObj.PositionB,
                        CutSpeed: pobj.xcxlRouteObj.CutSpeed
                    })
                }
            });
            returnObj.seq = tempSeq
        } else {
            var priorValue = 0;
            var value = 0;
            var tempSeq = 0;
            var xExp = pobj.xcxlRouteObj.xExp || 0;
            var xcxlId = pobj.xcxlRouteObj.xcxlId;
            var mcflId = MicroDraw_genData_getMcflIdByXcxlid(xcxlId);
            var xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(xcxlId);
            var xcxljgJson = eval("(" + xcxljgStr + ")");
            var lff_createPskPerDiv = function(pobj) {
                var KW = $.Micro.ConvToNum(MicroDraw_getData_getXcxljgData(pobj.xcxljgJson, "O", "框宽度", "prid"));
                var TW = $.Micro.ConvToNum(MicroDraw_getData_getXcxljgData(pobj.xcxljgJson, "O", "普通中挺宽度", "prid"));
                var pskMinDiv = $.Micro.ConvToNum(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "PSKMINNKW", "prid"));
                var pskNkZl = $.Micro.ConvToNum(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "PSKNKZL", "prid"));
                var mtype = $("#" + pobj.prrow.ObjId).attr("mtype");
                var mlid = $("#" + pobj.prrow.ObjId).attr("mlid");
                var pskNkw_FT = (pobj.right - pobj.left) - KW - TW / 2;
                var pskNkw_TT = (pobj.right - pobj.left) - TW / 2 - TW / 2;
                var pskNkw_FF = (pobj.right - pobj.left) - KW - KW;
                var cutHoleXs = [];
                var pskDIV_def = 600;
                var pskDIV = $.Micro.ConvToNum(MicroDraw_getData_getXcxljgData(xcxljgJson, "O", "PSKDIV", "prid") || pskDIV_def);
                if (pskDIV <= 0) {
                    pskDIV = pskDIV_def
                }
                var lfff_createPsk = function(pobj) {
                    var cutHoleXs = [];
                    if (pobj.isTwoMore) {
                        cutHoleXs.push(pobj.leftX - pobj.leftDist);
                        var div = pobj.rightX - pobj.leftX;
                        if (div >= pskDIV) {
                            var hNum = Math.floor(div / pskDIV);
                            var perDiv = div / (hNum + 1);
                            for (var j = 0; j < hNum; j++) {
                                cutHoleXs.push(Number(cutHoleXs[0]) + perDiv * (j + 1))
                            }
                        }
                        cutHoleXs.push(pobj.rightX - pobj.leftDist)
                    } else {
                        cutHoleXs.push(pobj.left + (pobj.pskNkw + pobj.sumPskNkZl) / 2 - (pobj.divIndex == 0 ? 0 : pobj.leftDist))
                    }
                    return cutHoleXs
                };
                var leftNkMinus = 0;
                if (mtype == mDrawFlag_FrameRect) {
                    if (pobj.type == "FT" || pobj.type == "FF") {
                        leftNkMinus = KW - pskNkZl
                    } else {
                        leftNkMinus = TW / 2 - pskNkZl
                    }
                }
                var sumPskNkZl = pskNkZl * 2;
                var leftDist = 0;
                if (mtype == mDrawFlag_TingH) {
                    if ($.Micro.IsEmpty(mlid)) {
                        leftDist = KW - pskNkZl
                    } else {
                        leftDist = TW / 2 - pskNkZl
                    }
                }
                switch (pobj.type) {
                case "FT":
                    cutHoleXs = lfff_createPsk({
                        isTwoMore: pskNkw_FT >= pskMinDiv,
                        leftX: Number(MicroDraw_genData_calcExp(pobj.mcflId, pobj.pskXljgArr[0].xExp, pobj.prrow.ObjId, xcxljgJson, "", "", {
                            row: pobj.prrow
                        })),
                        rightX: pobj.right - Number(MicroDraw_genData_calcExp(pobj.mcflId, pobj.pskXljgArr[2].xExp, pobj.prrow.ObjId, xcxljgJson, "", "", {
                            row: pobj.prrow
                        })),
                        leftDist: leftDist,
                        pskNkw: pskNkw_FT,
                        left: pobj.left + leftNkMinus,
                        sumPskNkZl: sumPskNkZl,
                        divIndex: pobj.divIndex
                    });
                    break;
                case "TF":
                    var tMinus = 0;
                    if (mtype == mDrawFlag_TingH) {
                        tMinus = leftDist + (KW - pskNkZl)
                    }
                    cutHoleXs = lfff_createPsk({
                        isTwoMore: pskNkw_FT >= pskMinDiv,
                        leftX: pobj.left + Number(MicroDraw_genData_calcExp(pobj.mcflId, pobj.pskXljgArr[2].xExp, pobj.prrow.ObjId, xcxljgJson, "", "", {
                            row: pobj.prrow
                        })),
                        rightX: Number(MicroDraw_genData_calcExp(pobj.mcflId, pobj.pskXljgArr[1].xExp, pobj.prrow.ObjId, xcxljgJson, "", "", {
                            row: pobj.prrow
                        })) + tMinus,
                        leftDist: leftDist,
                        pskNkw: pskNkw_FT,
                        left: pobj.left + leftNkMinus,
                        sumPskNkZl: sumPskNkZl,
                        divIndex: pobj.divIndex
                    });
                    break;
                case "TT":
                    cutHoleXs = lfff_createPsk({
                        isTwoMore: pskNkw_TT >= pskMinDiv,
                        leftX: pobj.left + Number(MicroDraw_genData_calcExp(pobj.mcflId, pobj.pskXljgArr[2].xExp, pobj.prrow.ObjId, xcxljgJson, "", "", {
                            row: pobj.prrow
                        })),
                        rightX: pobj.right - Number(MicroDraw_genData_calcExp(pobj.mcflId, pobj.pskXljgArr[2].xExp, pobj.prrow.ObjId, xcxljgJson, "", "", {
                            row: pobj.prrow
                        })),
                        leftDist: leftDist,
                        pskNkw: pskNkw_TT,
                        left: pobj.left + leftNkMinus,
                        sumPskNkZl: sumPskNkZl,
                        divIndex: pobj.divIndex
                    });
                    break;
                case "FF":
                    var tMinus = 0;
                    if (mtype == mDrawFlag_TingH) {
                        tMinus = leftDist + (KW - pskNkZl)
                    }
                    cutHoleXs = lfff_createPsk({
                        isTwoMore: pskNkw_FF >= pskMinDiv,
                        leftX: pobj.left + Number(MicroDraw_genData_calcExp(pobj.mcflId, pobj.pskXljgArr[0].xExp, pobj.prrow.ObjId, xcxljgJson, "", "", {
                            row: pobj.prrow
                        })),
                        rightX: Number(MicroDraw_genData_calcExp(pobj.mcflId, pobj.pskXljgArr[1].xExp, pobj.prrow.ObjId, xcxljgJson, "", "", {
                            row: pobj.prrow
                        })) + tMinus,
                        leftDist: leftDist,
                        pskNkw: pskNkw_FF,
                        left: pobj.left + leftNkMinus,
                        sumPskNkZl: sumPskNkZl,
                        divIndex: pobj.divIndex
                    });
                    break
                }
                return cutHoleXs
            };
            var argObj = {};
            var tingH = $("#" + mDrawFlag_SvgId + " #" + pobj.prrow.ObjId);
            var frameObj = tingH.parents("[mtype=" + mDrawFlag_Win + "]").find("[mtype=" + mDrawFlag_FrameRect + "]");
            var leftObj, rightObj;
            var tingHtype = tingH.attr("mtype");
            if (tingHtype == mDrawFlag_TingH) {
                var leftId = tingH.attr("mlid");
                var rightId = tingH.attr("mrid");
                if ($.Micro.IsEmpty(leftId)) {
                    leftObj = frameObj
                } else {
                    leftObj = $("#" + leftId)
                }
                if ($.Micro.IsEmpty(rightId)) {
                    rightObj = frameObj
                } else {
                    rightObj = $("#" + rightId)
                }
            } else {
                leftObj = frameObj;
                rightObj = frameObj
            }
            var sortTingArr = [];
            $.each(tingArr,
            function(i, ting) {
                sortTingArr.push({
                    mx: $(ting).attr("mx"),
                    obj: $(ting)
                })
            });
            sortTingArr.sort($.Micro.sortByArr([{
                key: "mx",
                keyType: "Number"
            }], "asc"));
            var FrameTingX = [];
            FrameTingX.push(leftObj);
            $.each(sortTingArr,
            function(i, ting) {
                FrameTingX.push(ting.obj)
            });
            FrameTingX.push(rightObj);
            for (var m = 0; m < FrameTingX.length - 1; m++) {
                var type = "";
                var left = 0;
                var right = 0;
                var leftDist = 0;
                var firstMtype = FrameTingX[0].attr("mtype");
                var firstMx = 0;
                if (firstMtype != mDrawFlag_FrameRect) {
                    firstMx = Number(FrameTingX[0].attr("mx"))
                }
                var lMtype = FrameTingX[m].attr("mtype");
                var rMtype = FrameTingX[m + 1].attr("mtype");
                if (lMtype == mDrawFlag_FrameRect) {
                    left = 0;
                    type = "F"
                } else {
                    left = FrameTingX[m].attr("mx") - firstMx;
                    type = "T"
                }
                if (rMtype == mDrawFlag_FrameRect) {
                    right = FrameTingX[m + 1].attr("mwidth") - firstMx;
                    type += "F"
                } else {
                    right = FrameTingX[m + 1].attr("mx") - firstMx;
                    type += "T"
                }
                var cutHoleXs = lff_createPskPerDiv({
                    pskXljgArr: pobj.pskXljgArr,
                    mcflId: mcflId,
                    prrow: pobj.prrow,
                    xcxljgJson: xcxljgJson,
                    left: Number(left),
                    right: Number(right),
                    type: type,
                    divIndex: m,
                    divCount: FrameTingX.length - 1
                });
                var j = 0;
                for (var i = 0; i < cutHoleXs.length; i++) {
                    tempSeq = returnObj.seq + (j + 1);
                    j++;
                    seq = (tempSeq * 0.1);
                    lf_genData_route_addRow({
                        Numx: pobj.prrow.Numx,
                        ObjId: pobj.prrow.ObjId,
                        xcxljgid: pobj.prrow.xcxljgid,
                        Seq: (Number(pobj.xcxlRouteObj.Seq) + seq),
                        Proce: pobj.xcxlRouteObj.Proce,
                        PutPic: pobj.xcxlRouteObj.PutPic,
                        Direction: pobj.xcxlRouteObj.Direction,
                        side: pobj.xcxlRouteObj.side,
                        xExp: (cutHoleXs[i]).toFixed(1),
                        yExp: pobj.xcxlRouteObj.yExp,
                        zExp: pobj.xcxlRouteObj.zExp,
                        TemplateExp: pobj.xcxlRouteObj.TemplateExp,
                        Memo: pobj.xcxlRouteObj.Memo,
                        ProceType: pobj.xcxlRouteObj.ProceType,
                        PlineExp: pobj.xcxlRouteObj.PlineExp,
                        BEnableExp: pobj.xcxlRouteObj.BEnableExp,
                        Width: pobj.xcxlRouteObj.Width,
                        Height: pobj.xcxlRouteObj.Height,
                        PositionA: pobj.xcxlRouteObj.PositionA,
                        PositionB: pobj.xcxlRouteObj.PositionB,
                        CutSpeed: pobj.xcxlRouteObj.CutSpeed
                    })
                }
                returnObj.seq = tempSeq
            }
        }
        return returnObj
    };
    var lff_get_tingArr = function(pobj) {
        var ids = $("#" + pobj.ObjId).attr(pobj.attrName);
        var tingArr = [];
        if (!$.Micro.IsEmpty(ids)) {
            var idArr = ids.split(",");
            $.each(idArr,
            function(i, id) {
                var mtype = $("#" + id).attr("mtype");
                if (mtype == mDrawFlag_TingH || mtype == mDrawFlag_TingV) {
                    tingArr.push($("#" + id).get(0))
                }
            })
        }
        return tingArr
    };
    var ObjId = pobj.prrow.ObjId;
    var ProceType = pobj.xcxlRouteObj.ProceType;
    var prName = pobj.xcxlRouteObj.prName;
    var mtype = $("#" + ObjId).attr("mtype");
    var winId = $("#" + ObjId).parent("[mtype='" + mDrawFlag_Win + "']").attr("id");
    var tingArr = [];
    var needPsk = false;
    if (mtype == mDrawFlag_FrameRect) {
        frameWidth = Number($("#" + ObjId).attr("mwidth"));
        frameHeight = Number($("#" + ObjId).attr("mheight"));
        if (prName.indexOf("左") >= 0) {
            $("#" + winId + " [mtype='" + mDrawFlag_TingH + "']").each(function(i, obj) {
                if (Number($(obj).attr("mx")) == 0) {
                    tingArr.push(obj)
                }
            })
        } else {
            if (prName.indexOf("右") >= 0) {
                $("#" + winId + " [mtype='" + mDrawFlag_TingH + "']").each(function(i, obj) {
                    if ((Number($(obj).attr("mx")) + Number($(obj).attr("mwidth"))) == frameWidth) {
                        tingArr.push(obj)
                    }
                })
            } else {
                if (prName.indexOf("上") >= 0) {
                    $("#" + winId + " [mtype='" + mDrawFlag_TingV + "']").each(function(i, obj) {
                        if (Number($(obj).attr("my")) == 0) {
                            tingArr.push(obj)
                        }
                    })
                } else {
                    if (prName.indexOf("下") >= 0) {
                        $("#" + winId + " [mtype='" + mDrawFlag_TingV + "']").each(function(i, obj) {
                            if ((Number($(obj).attr("my")) + Number($(obj).attr("mheight"))) == frameHeight) {
                                tingArr.push(obj)
                            }
                        });
                        needPsk = true
                    }
                }
            }
        }
        if (pobj.xcxlRouteObj.ProceType == "A") {
            lff_genData_HxPsk({
                prrow: pobj.prrow,
                xcxlRouteObj: pobj.xcxlRouteObj,
                tingArr: tingArr,
                type: "A"
            })
        }
        if (pobj.xcxlRouteObj.ProceType == "B" && needPsk) {
            lff_genData_HxPsk({
                prrow: pobj.prrow,
                xcxlRouteObj: pobj.xcxlRouteObj,
                tingArr: tingArr,
                type: "B",
                pskXljgArr: pobj.pskXljgArr
            })
        }
    } else {
        if (mtype == mDrawFlag_TingH) {
            var returnObj = {
                seq: 0
            };
            var tingArr = lff_get_tingArr({
                ObjId: pobj.prrow.ObjId,
                attrName: "mtid"
            });
            if (tingArr.length > 0) {
                returnObj = lff_genData_HxPsk({
                    prrow: pobj.prrow,
                    xcxlRouteObj: pobj.xcxlRouteObj,
                    tingArr: tingArr,
                    type: "A"
                })
            }
            if (tingArr.length >= 0) {
                lff_genData_HxPsk({
                    prrow: pobj.prrow,
                    xcxlRouteObj: pobj.xcxlRouteObj,
                    tingArr: tingArr,
                    type: "B",
                    pskXljgArr: pobj.pskXljgArr
                })
            }
            var tingArr = lff_get_tingArr({
                ObjId: pobj.prrow.ObjId,
                attrName: "mbid"
            });
            if (tingArr.length > 0) {
                lff_genData_HxPsk({
                    prrow: pobj.prrow,
                    xcxlRouteObj: pobj.xcxlRouteObj,
                    tingArr: tingArr,
                    type: "A",
                    attrName: "mbid",
                    seq: $.Micro.IsEmpty(returnObj.seq) ? 0 : returnObj.seq
                })
            }
        } else {
            if (mtype == mDrawFlag_TingV) {
                var returnObj = {
                    seq: 0
                };
                var tingArr = lff_get_tingArr({
                    ObjId: pobj.prrow.ObjId,
                    attrName: "mlid"
                });
                if (tingArr.length > 0) {
                    returnObj = lff_genData_HxPsk({
                        prrow: pobj.prrow,
                        xcxlRouteObj: pobj.xcxlRouteObj,
                        tingArr: tingArr,
                        type: "A"
                    })
                }
                var tingArr = lff_get_tingArr({
                    ObjId: pobj.prrow.ObjId,
                    attrName: "mrid"
                });
                if (tingArr.length > 0) {
                    lff_genData_HxPsk({
                        prrow: pobj.prrow,
                        xcxlRouteObj: pobj.xcxlRouteObj,
                        tingArr: tingArr,
                        type: "A",
                        attrName: "mrid",
                        seq: $.Micro.IsEmpty(returnObj.seq) ? 0 : returnObj.seq
                    })
                }
            }
        }
    }
}
function lf_createRouteData(pobj) {
    var prrows = $("#" + mDrawPrProperty).datagrid("getRows");
    var DatasType = pobj.DatasType || "other";
    var xcxljgRouteStr = MicroDraw_genData_getRouteByXcxlid(pobj.xcxlId);
    var xcxljgRouteJson = eval("(" + xcxljgRouteStr + ")");
    if (!$.Micro.IsEmpty(xcxljgRouteJson) && xcxljgRouteJson.length > 0) {
        $.each(prrows,
        function(i, prrow) {
            var pskXljgArr = [];
            var isTingPsk = false;
            var isHasB = false;
            var mtype = $("#" + prrow.ObjId).attr("mtype");
            if ((mtype == mDrawFlag_FrameRect && prrow.Memo == "下") || mtype == mDrawFlag_TingH) {
                $.each(xcxljgRouteJson,
                function(j, obj) {
                    if (obj.xcxljgid == prrow.xcxljgid) {
                        if (obj.Proce.indexOf("排水孔") > -1) {
                            pskXljgArr.push(obj);
                            if (obj.ProceType == "B") {
                                isHasB = true
                            }
                            if (pskXljgArr.length == 3) {
                                return false
                            }
                        }
                    }
                });
                if (pskXljgArr.length == 3 && isHasB) {
                    isTingPsk = true
                }
            }
            $.each(xcxljgRouteJson,
            function(j, obj) {
                if (obj.xcxljgid == prrow.xcxljgid) {
                    if ($.inArray(DatasType, ["B"]) > -1) {
                        if (obj.ProceType == "B" && isTingPsk) {
                            lf_genData_route_autoHxPskAddRow({
                                prrow: prrow,
                                xcxlRouteObj: obj,
                                pskXljgArr: pskXljgArr
                            })
                        } else {
                            if (obj.Proce.indexOf("排水孔") > -1 && !isTingPsk) {
                                lf_genData_route_addRow({
                                    Numx: prrow.Numx,
                                    ObjId: prrow.ObjId,
                                    xcxljgid: prrow.xcxljgid,
                                    Seq: obj.Seq,
                                    Proce: obj.Proce,
                                    PutPic: obj.PutPic,
                                    Direction: obj.Direction,
                                    side: obj.side,
                                    xExp: obj.xExp,
                                    yExp: obj.yExp,
                                    zExp: obj.zExp,
                                    TemplateExp: obj.TemplateExp,
                                    Memo: obj.Memo,
                                    ProceType: obj.ProceType,
                                    PlineExp: obj.PlineExp,
                                    BEnableExp: obj.BEnableExp,
                                    Width: obj.Width,
                                    Height: obj.Height,
                                    PositionA: obj.PositionA,
                                    PositionB: obj.PositionB,
                                    CutSpeed: obj.CutSpeed
                                })
                            }
                        }
                    } else {
                        if (obj.ProceType == "A" || obj.ProceType == "B") {
                            var addFlag = true;
                            if (obj.ProceType == "B" && $.inArray(DatasType, ["B"]) == -1) {
                                addFlag = false
                            }
                            if (addFlag) {
                                lf_genData_route_autoHxPskAddRow({
                                    prrow: prrow,
                                    xcxlRouteObj: obj
                                })
                            }
                        } else {
                            if (obj.Proce.indexOf("排水孔") == -1) {
                                lf_genData_route_addRow({
                                    Numx: prrow.Numx,
                                    ObjId: prrow.ObjId,
                                    xcxljgid: prrow.xcxljgid,
                                    Seq: obj.Seq,
                                    Proce: obj.Proce,
                                    PutPic: obj.PutPic,
                                    Direction: obj.Direction,
                                    side: obj.side,
                                    xExp: obj.xExp,
                                    yExp: obj.yExp,
                                    zExp: obj.zExp,
                                    TemplateExp: obj.TemplateExp,
                                    Memo: obj.Memo,
                                    ProceType: obj.ProceType,
                                    PlineExp: obj.PlineExp,
                                    BEnableExp: obj.BEnableExp,
                                    Width: obj.Width,
                                    Height: obj.Height,
                                    PositionA: obj.PositionA,
                                    PositionB: obj.PositionB,
                                    CutSpeed: obj.CutSpeed
                                })
                            }
                        }
                    }
                }
            })
        })
    }
}
function MicroDraw_GraphXljgDefault(twin, tnode) {
    if (twin.length == 0) {
        return
    }
    var tframe = twin.find("[mxcxlid]");
    var xcxlId = tframe.attr("mxcxlid");
    if ($.Micro.IsEmpty(xcxlId)) {
        return
    }
    try {
        var xcxljgStr = MicroDraw_genData_getXcxljgByXcxlId(xcxlId);
        var xcxljgJson = eval("(" + xcxljgStr + ")");
        var grJson = [];
        for (var i = 0; i < xcxljgJson.length; i++) {
            var type = xcxljgJson[i].type;
            var cntExp2 = xcxljgJson[i].cntExp2;
            if (type == "GR" && !$.Micro.IsEmpty(cntExp2)) {
                grJson.push(xcxljgJson[i])
            }
        }
        grJson.sort($.Micro.sortByArr([{
            key: "prid",
            keyType: "String"
        }], "asc"));
        var mtype = "";
        var grArr = [];
        for (var i = 0; i < grJson.length; i++) {
            if (grJson[i].prid != mtype) {
                mtype = grJson[i].prid;
                grArr.push({
                    mtype: mtype,
                    props: [{
                        name: grJson[i].name,
                        def: replaceAll(grJson[i].cntExp2, '"', "")
                    }]
                })
            } else {
                grArr[grArr.length - 1].props.push({
                    name: grJson[i].name,
                    def: replaceAll(grJson[i].cntExp2, '"', "")
                })
            }
        }
        for (var i = 0; i < grArr.length; i++) {
            var mtype = grArr[i].mtype;
            var props = grArr[i].props;
            $.each($("#" + mDrawFlag_SvgId + " [mtype=" + mtype + "]"),
            function() {
                var mtypeObj = $(this);
                if (tnode && tnode.length > 0) {
                    if (mtypeObj.attr("id") != tnode.attr("id")) {
                        return true
                    }
                }
                if ($.inArray(mtype, [mDrawFlag_Custom_CornerMaterial, mDrawFlag_Custom_CornerMaterial_h]) == -1) {
                    if (mtypeObj.parents("[mwin]").find('[mxcxlid=""]').length > 0) {
                        return true
                    }
                }
                for (var j = 0; j < props.length; j++) {
                    if (!$.Micro.IsEmpty(props[j].name)) {
                        mtypeObj.attr(props[j].name, props[j].def)
                    }
                }
            })
        }
    } catch(e) {
        console.log(e.name + ":" + e.message)
    }
};